;Info:
; "Note:" = Something important to note.
; "Glitch:" = Something weird SMW does that should be fixed in the optimized code.
; "Crash:" = Something that causes a crash.
; "Todo:" = Something I should look at later.
; "Optimization:" = A bit of code that could be sped up, shortened or not hardcoded.
; "Info:" = Some interesting tidit
; "LM:" = Something Lunar Magic related
; "Dependency" = List of labels and defines in a parent macro that are used by child macros.
; "Credit:" Someone how helped me with the thing pointed out.

;Credit: Shoutouts to Thomas on SMWCentral for his detailed sprite RAM usage spreadsheet and Lunar Magic hijack information
;Note: If you're making a hack with this disassembly, it's a good idea to put your changes in "Asar_Patches_SMW.asm" rather than modifying anything in this disassembly.
;Note: I have no way of verifying if the PAL V1.0/V1.1, the SMAS+W Pal and Arcade versions of SMW are 100% clean dumps. I've disassembled the ones I was able to find.

;#############################################################################################################
;#############################################################################################################

macro SMWBank00Macros(StartBank, EndBank)
%BANK_START(<StartBank>)								; Info: Start addresses of each macro (USA version only)
ROUTINE_RT00_SMW_InitAndMainLoop:	%ROUTINE_RT00_SMW_InitAndMainLoop(NULLROM)					; $008000
ROUTINE_RT00_SMW_HandleSPCUploads:	%ROUTINE_RT00_SMW_HandleSPCUploads(NULLROM)					; $008079
ROUTINE_SMW_VBlankRoutine:		%ROUTINE_SMW_VBlankRoutine(NULLROM)						; $00816A
ROUTINE_SMW_IRQRoutine:			%ROUTINE_SMW_IRQRoutine(NULLROM)						; $008374
ROUTINE_SMW_Mode7Layer1Scroll:		%ROUTINE_SMW_Mode7Layer1Scroll(NULLROM)					; $0083F3
ROUTINE_SMW_SetMode7PPUPointersAndLayer1Scroll:	%ROUTINE_SMW_SetMode7PPUPointersAndLayer1Scroll(NULLROM)			; $008416
ROUTINE_SMW_WaitForHBlank:	%ROUTINE_SMW_WaitForHBlank(NULLROM)						; $008439
ROUTINE_SMW_UploadOAMBuffer:	%ROUTINE_SMW_UploadOAMBuffer(NULLROM)						; $008449
ROUTINE_SMW_CompressOAMTileSizeBuffer:	%ROUTINE_SMW_CompressOAMTileSizeBuffer(NULLROM)				; $008475
ROUTINE_RT00_SMW_LoadStripeImage:	%ROUTINE_RT00_SMW_LoadStripeImage(NULLROM)					; $0084C8
ROUTINE_SMW_ClearLayer3Tilemap:	%ROUTINE_SMW_ClearLayer3Tilemap(NULLROM)					; $0085FA
ROUTINE_SMW_PollJoypadInputs:	%ROUTINE_SMW_PollJoypadInputs(NULLROM)						; $008650
ROUTINE_RT01_SMW_GameMode14_InLevel:	%ROUTINE_RT01_SMW_GameMode14_InLevel(NULLROM)					; $0086C7
ROUTINE_SMW_ExecutePtr:	%ROUTINE_SMW_ExecutePtr(NULLROM)						; $0086DF
ROUTINE_RT01_SMW_LoadStripeImage:	%ROUTINE_RT01_SMW_LoadStripeImage(NULLROM)					; $00871E
ROUTINE_SMW_UploadLevelLayer1And2Tilemaps:	%ROUTINE_SMW_UploadLevelLayer1And2Tilemaps(NULLROM)				; $0087AD
ROUTINE_SMW_InitializeFirst8KBOfRAM:	%ROUTINE_SMW_InitializeFirst8KBOfRAM(NULLROM)					; $008A4E
ROUTINE_SMW_SetStandardPPUSettings:	%ROUTINE_SMW_SetStandardPPUSettings(NULLROM)					; $008A79
ROUTINE_SMW_ManipulateMode7Image:	%ROUTINE_SMW_ManipulateMode7Image(NULLROM)					; $008AB4
DATATABLE_SMW_StatusBarTilemap:	%DATATABLE_SMW_StatusBarTilemap(NULLROM)					; $008C81
ROUTINE_SMW_InitializeStatusBarTilemap:	%ROUTINE_SMW_InitializeStatusBarTilemap(NULLROM)				; $008CFF
ROUTINE_SMW_UploadStatusBarTilemap:	%ROUTINE_SMW_UploadStatusBarTilemap(NULLROM)					; $008DAC
ROUTINE_RT00_SMW_UpdateStatusBarCounters:	%ROUTINE_RT00_SMW_UpdateStatusBarCounters(NULLROM)				; $008DF5
ROUTINE_RT00_SMW_HexToDec:	%ROUTINE_RT00_SMW_HexToDec(NULLROM)						; $009045
ROUTINE_RT01_SMW_UpdateStatusBarCounters:	%ROUTINE_RT01_SMW_UpdateStatusBarCounters(NULLROM)				; $009051
ROUTINE_RT01_SMW_DrawLoadingLetters:	%ROUTINE_RT01_SMW_DrawLoadingLetters(NULLROM)					; $0090D1
ROUTINE_RT01_SMW_GameMode12_PrepareLevel:	%ROUTINE_RT01_SMW_GameMode12_PrepareLevel(NULLROM)				; $00919B
ROUTINE_RT00_SMW_DrawLoadingLetters:	%ROUTINE_RT00_SMW_DrawLoadingLetters(NULLROM)					; $0091B1
ROUTINE_SMW_UpdateEntirePalette:	%ROUTINE_SMW_UpdateEntirePalette(NULLROM)					; $00922F
ROUTINE_SMW_SetupHDMAWindowingEffects:	%ROUTINE_SMW_SetupHDMAWindowingEffects(NULLROM)				; $009250
ROUTINE_SMW_SetEnemyRollcallParallaxHDMA:	%ROUTINE_SMW_SetEnemyRollcallParallaxHDMA(NULLROM)				; $0092B2
ROUTINE_RT01_SMW_InitAndMainLoop:	%ROUTINE_RT01_SMW_InitAndMainLoop(NULLROM)					; $009322
ROUTINE_SMW_TurnOffIO:	%ROUTINE_SMW_TurnOffIO(NULLROM)						; $00937D
ROUTINE_SMW_GameMode00_LoadNintendoPresents:	%ROUTINE_SMW_GameMode00_LoadNintendoPresents(NULLROM)				; $009389
ROUTINE_SMW_SetVisibleLayers:	%ROUTINE_SMW_SetVisibleLayers(NULLROM)						; $0093FD
ROUTINE_SMW_GameMode01_ShowNintendoPresents:	%ROUTINE_SMW_GameMode01_ShowNintendoPresents(NULLROM)				; $00940F
ROUTINE_SMW_GameMode06_CircleEffect:	%ROUTINE_SMW_GameMode06_CircleEffect(NULLROM)					; $00941B
ROUTINE_RT00_SMW_GameMode19_Cutscene:	%ROUTINE_RT00_SMW_GameMode19_Cutscene(NULLROM)					; $009451
ROUTINE_SMW_UploadBigLayer3LettersToVRAM:	%ROUTINE_SMW_UploadBigLayer3LettersToVRAM(NULLROM)				; $00955E
ROUTINE_RT00_SMW_GameMode1D_LoadYoshisHouse:	%ROUTINE_RT00_SMW_GameMode1D_LoadYoshisHouse(NULLROM)				; $009583
ROUTINE_RT00_SMW_GameMode21_DelayEnemyRollcall:	%ROUTINE_RT00_SMW_GameMode21_DelayEnemyRollcall(NULLROM)			; $0095BC
ROUTINE_SMW_GameMode23_LoadEnemyRollcallScreen:	%ROUTINE_SMW_GameMode23_LoadEnemyRollcallScreen(NULLROM)			; $0095C1
ROUTINE_RT00_SMW_GameMode25_ShowEnemyRollcallScreen:	%ROUTINE_RT00_SMW_GameMode25_ShowEnemyRollcallScreen(NULLROM)			; $00962C
ROUTINE_SMW_GameMode27_LoadTheEnd:	%ROUTINE_SMW_GameMode27_LoadTheEnd(NULLROM)					; $00963D
ROUTINE_SMW_GameMode29_DoNothingOnTheEndScreen:	%ROUTINE_SMW_GameMode29_DoNothingOnTheEndScreen(NULLROM)			; $00968D
ROUTINE_SMW_GameMode10_BufferLevelLoadMessage:	%ROUTINE_SMW_GameMode10_BufferLevelLoadMessage(NULLROM)			; $00968E
ROUTINE_RT00_SMW_GameMode11_LoadSublevel:	%ROUTINE_RT00_SMW_GameMode11_LoadSublevel(NULLROM)				; $0096AE
ROUTINE_RT01_SMW_OverworldPrompt03_OverworldLifeExchanger:	%ROUTINE_RT01_SMW_OverworldPrompt03_OverworldLifeExchanger(NULLROM)		; $00974C
ROUTINE_SMW_GameMode16_LoadDeathMessage:	%ROUTINE_SMW_GameMode16_LoadDeathMessage(NULLROM)				; $009750
ROUTINE_SMW_GameMode17_ShowDeathMessage:	%ROUTINE_SMW_GameMode17_ShowDeathMessage(NULLROM)				; $009759
ROUTINE_RT02_SMW_GameMode12_PrepareLevel:	%ROUTINE_RT02_SMW_GameMode12_PrepareLevel(NULLROM)				; $0097BC
ROUTINE_RT02_SMW_GameMode14_InLevel:	%ROUTINE_RT02_SMW_GameMode14_InLevel(NULLROM)					; $009875
ROUTINE_SMW_UploadMode7KoopaBossesAndLavaAnimation:	%ROUTINE_SMW_UploadMode7KoopaBossesAndLavaAnimation(NULLROM)			; $009891
ROUTINE_RT03_SMW_GameMode12_PrepareLevel:	%ROUTINE_RT03_SMW_GameMode12_PrepareLevel(NULLROM)				; $009925
ROUTINE_RT03_SMW_GameMode14_InLevel:	%ROUTINE_RT03_SMW_GameMode14_InLevel(NULLROM)					; $009A4E
ROUTINE_SMW_CheckWhichControllersArePluggedIn:	%ROUTINE_SMW_CheckWhichControllersArePluggedIn(NULLROM)			; $009A74
ROUTINE_RT00_SMW_GameMode04_PrepareTitleScreen:	%ROUTINE_RT00_SMW_GameMode04_PrepareTitleScreen(NULLROM)			; $009A8B
ROUTINE_RT00_SMW_HandleMenuCursor:	%ROUTINE_RT00_SMW_HandleMenuCursor(NULLROM)					; $009AC8
ROUTINE_SMW_GameMode09_EraseFile:	%ROUTINE_SMW_GameMode09_EraseFile(NULLROM)					; $009B17
ROUTINE_SMW_DisplayingContinueEnd:	%ROUTINE_SMW_DisplayingContinueEnd(NULLROM)					; $009B80
ROUTINE_RT01_SMW_OverworldPrompt07_DisplayingSavePrompt:	%ROUTINE_RT01_SMW_OverworldPrompt07_DisplayingSavePrompt(NULLROM)		; $009BA8
ROUTINE_RT01_SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt:	%ROUTINE_RT01_SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt(NULLROM)	; N/A
ROUTINE_SMW_SaveGame:	%ROUTINE_SMW_SaveGame(NULLROM)							; $009BC9
ROUTINE_SMW_CloseOverworldPrompt:	%ROUTINE_SMW_CloseOverworldPrompt(NULLROM)					; $009C13
ROUTINE_SMW_GameMode07_TitleScreenDemo:	%ROUTINE_SMW_GameMode07_TitleScreenDemo(NULLROM)				; $009C1F
DATATABLE_SMW_SaveFileLocations:	%DATATABLE_SMW_SaveFileLocations(NULLROM)					; $009CCB
ROUTINE_SMW_GameMode08_FileSelect:	%ROUTINE_SMW_GameMode08_FileSelect(NULLROM)					; $009CD1
ROUTINE_SMW_FileSelectColorMath:	%ROUTINE_SMW_FileSelectColorMath(NULLROM)					; $009D30
ROUTINE_SMW_BufferFileSelectText:	%ROUTINE_SMW_BufferFileSelectText(NULLROM)					; $009D38
ROUTINE_SMW_GameMode0A_PlayerSelect:	%ROUTINE_SMW_GameMode0A_PlayerSelect(NULLROM)					; $009DFA
ROUTINE_RT01_SMW_HandleMenuCursor:	%ROUTINE_RT01_SMW_HandleMenuCursor(NULLROM)					; $009E6A
ROUTINE_SMW_InitializeSaveData:	%ROUTINE_SMW_InitializeSaveData(NULLROM)					; $009EE0
ROUTINE_SMW_SetKeepGameModeActiveTimer:	%ROUTINE_SMW_SetKeepGameModeActiveTimer(NULLROM)				; $009F29
ROUTINE_SMW_GameModeXX_FadeInOrOut:	%ROUTINE_SMW_GameModeXX_FadeInOrOut(NULLROM)					; $009F2F
ROUTINE_SMW_GameMode28_ShowTheEnd:	%ROUTINE_SMW_GameMode28_ShowTheEnd(NULLROM)					; $009F7C
ROUTINE_RT00_SMW_InitializeLevelLayer3:	%ROUTINE_RT00_SMW_InitializeLevelLayer3(NULLROM)				; $009F88
ROUTINE_RT00_SMW_GameMode0C_LoadOverworld:	%ROUTINE_RT00_SMW_GameMode0C_LoadOverworld(NULLROM)				; $00A06B
ROUTINE_SMW_LoadSaveBufferData:	%ROUTINE_SMW_LoadSaveBufferData(NULLROM)					; $00A195
ROUTINE_SMW_ClearOverworldAndCutsceneRAM:	%ROUTINE_SMW_ClearOverworldAndCutsceneRAM(NULLROM)				; $00A1A6
ROUTINE_RT00_SMW_GameMode0E_ShowOverworld:	%ROUTINE_RT00_SMW_GameMode0E_ShowOverworld(NULLROM)				; $00A1BE
ROUTINE_RT00_SMW_GameMode14_InLevel:	%ROUTINE_RT00_SMW_GameMode14_InLevel(NULLROM)					; $00A1CE
ROUTINE_SMW_UpdateCurrentPlayerPositionRAM:	%ROUTINE_SMW_UpdateCurrentPlayerPositionRAM(NULLROM)				; $00A2F3
ROUTINE_RT00_SMW_UploadPlayerGFX:	%ROUTINE_RT00_SMW_UploadPlayerGFX(NULLROM)					; $00A300
ROUTINE_SMW_UploadLevelAnimations:	%ROUTINE_SMW_UploadLevelAnimations(NULLROM)					; $00A390
ROUTINE_SMW_RestoreSP1AfterMarioStart:	%ROUTINE_SMW_RestoreSP1AfterMarioStart(NULLROM)				; $00A436
ROUTINE_RT00_SMW_UpdatePaletteFromIndexedTable:	%ROUTINE_RT00_SMW_UpdatePaletteFromIndexedTable(NULLROM)			; $00A47F
ROUTINE_SMW_UploadOverworldAnimations:	%ROUTINE_SMW_UploadOverworldAnimations(NULLROM)				; $00A4E3
ROUTINE_SMW_UploadOverworldLayer1And2Tilemaps:	%ROUTINE_SMW_UploadOverworldLayer1And2Tilemaps(NULLROM)			; $00A521
ROUTINE_RT00_SMW_BufferPalettesRoutines:	%ROUTINE_RT00_SMW_BufferPalettesRoutines(NULLROM)				; $00A594
ROUTINE_RT00_SMW_GameMode12_PrepareLevel:	%ROUTINE_RT00_SMW_GameMode12_PrepareLevel(NULLROM)				; $00A59C
ROUTINE_SMW_InitializeLevelTileAnimations:	%ROUTINE_SMW_InitializeLevelTileAnimations(NULLROM)				; $00A5F9
ROUTINE_SMW_InitializeLevelRAM:	%ROUTINE_SMW_InitializeLevelRAM(NULLROM)					; $00A60D
ROUTINE_RT01_SMW_GameMode11_LoadSublevel:	%ROUTINE_RT01_SMW_GameMode11_LoadSublevel(NULLROM)				; $00A796
ROUTINE_SMW_UploadLoadingLettersTiles:	%ROUTINE_SMW_UploadLoadingLettersTiles(NULLROM)				; $00A7C2
ROUTINE_SMW_BufferLoadingLetterTiles:	%ROUTINE_SMW_BufferLoadingLetterTiles(NULLROM)					; $00A82D
ROUTINE_SMW_UploadGraphicsFiles:	%ROUTINE_SMW_UploadGraphicsFiles(NULLROM)					; $00A8C3
ROUTINE_RT01_SMW_BufferPalettesRoutines:	%ROUTINE_RT01_SMW_BufferPalettesRoutines(NULLROM)				; $00ABD3
ROUTINE_RT01_SMW_UpdatePaletteFromIndexedTable:	%ROUTINE_RT01_SMW_UpdatePaletteFromIndexedTable(NULLROM)			; $00AE41
ROUTINE_SMW_HandlePaletteFades:	%ROUTINE_SMW_HandlePaletteFades(NULLROM)					; $00AE65
ROUTINE_RT02_SMW_OverworldEventProcess04_FadeInLayer2Tile:	%ROUTINE_RT02_SMW_OverworldEventProcess04_FadeInLayer2Tile(NULLROM)		; $00B006
ROUTINE_RT01_SMW_PlayerState00_Normal:	%ROUTINE_RT01_SMW_PlayerState00_Normal(NULLROM)				; $00B03E
INLINEDATATABLE_RT00_SMW_EmptySpace:	%INLINEDATATABLE_RT00_SMW_EmptySpace(NULLROM)					; $00B091
DATATABLE_SMW_GlobalPalettes:	%DATATABLE_SMW_GlobalPalettes(NULLROM)						; $00B0A0
ROUTINE_SMW_GraphicsDecompressionRoutines:	%ROUTINE_SMW_GraphicsDecompressionRoutines(NULLROM)				; $00B882
INLINEDATATABLE_RT01_SMW_EmptySpace:	%INLINEDATATABLE_RT01_SMW_EmptySpace(NULLROM)					; $00BA4D
DATATABLE_SMW_LevelDataLayoutTables:	%DATATABLE_SMW_LevelDataLayoutTables(NULLROM)					; $00BA60
ROUTINE_SMW_GenerateTile:	%ROUTINE_SMW_GenerateTile(NULLROM)						; $00BEB0
ROUTINE_SMW_SetItemMemoryBit:	%ROUTINE_SMW_SetItemMemoryBit(NULLROM)						; $00BFFF
ROUTINE_SMW_GenericPage00Tile:	%ROUTINE_SMW_GenericPage00Tile(NULLROM)					; $00C063
ROUTINE_SMW_GenericPage01Tile:	%ROUTINE_SMW_GenericPage01Tile(NULLROM)					; $00C0AA
ROUTINE_SMW_EraseYoshiCoin:	%ROUTINE_SMW_EraseYoshiCoin(NULLROM)						; $00C1AC
ROUTINE_SMW_ChangeNetDoorTiles:	%ROUTINE_SMW_ChangeNetDoorTiles(NULLROM)					; $00C29E
ROUTINE_SMW_EraseLargeSwitch:	%ROUTINE_SMW_EraseLargeSwitch(NULLROM)						; $00C3D1
INLINEDATATABLE_RT02_SMW_EmptySpace:	%INLINEDATATABLE_RT02_SMW_EmptySpace(NULLROM)					; $00C453
ROUTINE_RT04_SMW_GameMode14_InLevel:	%ROUTINE_RT04_SMW_GameMode14_InLevel(NULLROM)					; $00C460
ROUTINE_SMW_PlayerState0B_RescuedPeach:	%ROUTINE_SMW_PlayerState0B_RescuedPeach(NULLROM)				; $00C5B5
ROUTINE_SMW_PlayerState0C_CastleDestructionMoves:	%ROUTINE_SMW_PlayerState0C_CastleDestructionMoves(NULLROM)			; $00C5E1
ROUTINE_SMW_PlayerState08_WarpToYoshiWingsBonus:	%ROUTINE_SMW_PlayerState08_WarpToYoshiWingsBonus(NULLROM)			; $00C7F9
ROUTINE_SMW_PlayerState0A_NoYoshiCutscene:	%ROUTINE_SMW_PlayerState0A_NoYoshiCutscene(NULLROM)				; $00C848
ROUTINE_RT02_SMW_PlayerState00_Normal:	%ROUTINE_RT02_SMW_PlayerState00_Normal(NULLROM)				; $00C915
ROUTINE_SMW_UpdateHDMAWindowBuffer:	%ROUTINE_SMW_UpdateHDMAWindowBuffer(NULLROM)					; $00CA61
ROUTINE_RT00_SMW_PlayerState00_Normal:	%ROUTINE_RT00_SMW_PlayerState00_Normal(NULLROM)				; $00CC5C
ROUTINE_RT00_SMW_SetPlayerPose:	%ROUTINE_RT00_SMW_SetPlayerPose(NULLROM)					; $00CE79
ROUTINE_SMW_InitializeCapeSwingOrNetPunch:	%ROUTINE_SMW_InitializeCapeSwingOrNetPunch(NULLROM)				; $00D034
ROUTINE_SMW_CheckForPowerUpSpecificPlayerAttacks:	%ROUTINE_SMW_CheckForPowerUpSpecificPlayerAttacks(NULLROM)			; $00D062
ROUTINE_SMW_PlayerState09_Death:	%ROUTINE_SMW_PlayerState09_Death(NULLROM)					; $00D0AE
ROUTINE_SMW_PlayerStateXX_PowerupAnimations:	%ROUTINE_SMW_PlayerStateXX_PowerupAnimations(NULLROM)				; $00D11D
ROUTINE_SMW_PlayerStateXX_EnterPipe:	%ROUTINE_SMW_PlayerStateXX_EnterPipe(NULLROM)					; $00D18D
ROUTINE_SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel:	%ROUTINE_SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel(NULLROM)	; $00D273
ROUTINE_SMW_UnusedAddToWarpPipeTimerRoutine:	%ROUTINE_SMW_UnusedAddToWarpPipeTimerRoutine(NULLROM)				; $00D27C
ROUTINE_SMW_PlayerState07_ShootOutOfPipe:	%ROUTINE_SMW_PlayerState07_ShootOutOfPipe(NULLROM)				; $00D287
ROUTINE_SMW_HandlePlayerPhysics:	%ROUTINE_SMW_HandlePlayerPhysics(NULLROM)					; $00D2BD
ROUTINE_SMW_UpdatePlayerSpritePosition:	%ROUTINE_SMW_UpdatePlayerSpritePosition(NULLROM)				; $00DC2D
ROUTINE_RT01_SMW_SetPlayerPose:	%ROUTINE_RT01_SMW_SetPlayerPose(NULLROM)					; $00DC78
ROUTINE_RT00_SMW_PlayerGFXRt:	%ROUTINE_RT00_SMW_PlayerGFXRt(NULLROM)						; $00DCEC
DATATABLE_RT00_SMW_SlopeDataTables:	%DATATABLE_RT00_SMW_SlopeDataTables(NULLROM)					; $00E4B9
ROUTINE_RT02_SMW_InitializeMap16Pointers:	%ROUTINE_RT02_SMW_InitializeMap16Pointers(NULLROM)				; $00E55E
DATATABLE_RT01_SMW_SlopeDataTables:	%DATATABLE_RT01_SMW_SlopeDataTables(NULLROM)					; $00E632
ROUTINE_RT01_SMW_GetPlayerLevelCollisionMap16ID:	%ROUTINE_RT01_SMW_GetPlayerLevelCollisionMap16ID(NULLROM)			; $00E832
ROUTINE_RT01_SMW_RunPlayerBlockCode:	%ROUTINE_RT01_SMW_RunPlayerBlockCode(NULLROM)					; $00E8A4
ROUTINE_SMW_HandlePlayerLevelCollision:	%ROUTINE_SMW_HandlePlayerLevelCollision(NULLROM)				; $00E90A
ROUTINE_SMW_ResetPlayerLevelCollisionRAM:	%ROUTINE_SMW_ResetPlayerLevelCollisionRAM(NULLROM)				; $00EAA6
ROUTINE_RT00_SMW_RunPlayerBlockCode:	%ROUTINE_RT00_SMW_RunPlayerBlockCode(NULLROM)					; $00EAB9
ROUTINE_SMW_CheckForWaterSlope:	%ROUTINE_SMW_CheckForWaterSlope(NULLROM)					; $00F04D
ROUTINE_RT01_SMW_CheckIfBlockWasHit:	%ROUTINE_RT01_SMW_CheckIfBlockWasHit(NULLROM)					; $00F05C
ROUTINE_RT02_SMW_RunPlayerBlockCode:	%ROUTINE_RT02_SMW_RunPlayerBlockCode(NULLROM)					; $00F120
ROUTINE_RT00_SMW_CheckIfBlockWasHit:	%ROUTINE_RT00_SMW_CheckIfBlockWasHit(NULLROM)					; $00F15F
ROUTINE_RT03_SMW_RunPlayerBlockCode:	%ROUTINE_RT03_SMW_RunPlayerBlockCode(NULLROM)					; $00F267
ROUTINE_SMW_SpawnScoreSpriteAtPlayerPosition:	%ROUTINE_SMW_SpawnScoreSpriteAtPlayerPosition(NULLROM)				; $00F388
ROUTINE_RT04_SMW_RunPlayerBlockCode:	%ROUTINE_RT04_SMW_RunPlayerBlockCode(NULLROM)					; $00F3B2
ROUTINE_RT00_SMW_GetPlayerLevelCollisionMap16ID:	%ROUTINE_RT00_SMW_GetPlayerLevelCollisionMap16ID(NULLROM)			; $00F44D
ROUTINE_SMW_ModifyMap16IDForSpecialBlocks:	%ROUTINE_SMW_ModifyMap16IDForSpecialBlocks(NULLROM)				; $00F545
ROUTINE_RT03_SMW_PlayerState00_Normal:	%ROUTINE_RT03_SMW_PlayerState00_Normal(NULLROM)				; $00F595
ROUTINE_SMW_DamagePlayer:	%ROUTINE_SMW_DamagePlayer(NULLROM)						; $00F5B7
ROUTINE_RT01_SMW_PlayerGFXRt:	%ROUTINE_RT01_SMW_PlayerGFXRt(NULLROM)						; $00F636
ROUTINE_SMW_HandleStandardLevelCameraScroll:	%ROUTINE_SMW_HandleStandardLevelCameraScroll(NULLROM)				; $00F69F
ROUTINE_RT04_SMW_PlayerState00_Normal:	%ROUTINE_RT04_SMW_PlayerState00_Normal(NULLROM)				; $00F8DF
INLINEDATATABLE_RT03_SMW_EmptySpace:	%INLINEDATATABLE_RT03_SMW_EmptySpace(NULLROM)					; $00F9F5
ROUTINE_RT01_SMW_ClearOutNormalSpriteSlots:	%ROUTINE_RT01_SMW_ClearOutNormalSpriteSlots(NULLROM)				; $00FA10
ROUTINE_SMW_CheckWhatSlopeSpriteIsOn:	%ROUTINE_SMW_CheckWhatSlopeSpriteIsOn(NULLROM)					; $00FA19
ROUTINE_RT05_SMW_RunPlayerBlockCode:	%ROUTINE_RT05_SMW_RunPlayerBlockCode(NULLROM)					; $00FA45
ROUTINE_RT02_SMW_NorSpr07B_GoalTape_Status08:	%ROUTINE_RT02_SMW_NorSpr07B_GoalTape_Status08(NULLROM)				; $00FA80
ROUTINE_RT01_SMW_NorSprStatus06_GoalCoins:	%ROUTINE_RT01_SMW_NorSprStatus06_GoalCoins(NULLROM)				; $00FBA4
ROUTINE_SMW_UnusedYoshiRelatedRoutine:	%ROUTINE_SMW_UnusedYoshiRelatedRoutine(NULLROM)				; $00FC23
ROUTINE_SMW_SpawnMountedYoshiOnLevelLoad:	%ROUTINE_SMW_SpawnMountedYoshiOnLevelLoad(NULLROM)				; $00FC7A
ROUTINE_RT00_SMW_ClearOutNormalSpriteSlots:	%ROUTINE_RT00_SMW_ClearOutNormalSpriteSlots(NULLROM)				; $00FCEC
ROUTINE_RT01_SMW_NorSpr029_KoopaKid_Status01:	%ROUTINE_RT01_SMW_NorSpr029_KoopaKid_Status01(NULLROM)				; $00FCF5
ROUTINE_SMW_SpawnPlayerBreathBubble:	%ROUTINE_SMW_SpawnPlayerBreathBubble(NULLROM)					; $00FD08
ROUTINE_SMW_SpawnGlitterEffectForCoin:	%ROUTINE_SMW_SpawnGlitterEffectForCoin(NULLROM)				; $00FD5A
ROUTINE_SMW_SpawnPlayerWaterSplashAndManyBreathBubbles:	%ROUTINE_SMW_SpawnPlayerWaterSplashAndManyBreathBubbles(NULLROM)		; $00FD9D
ROUTINE_SMW_SpawnPlayerTurnAroundSmoke:	%ROUTINE_SMW_SpawnPlayerTurnAroundSmoke(NULLROM)				; $00FE4A
ROUTINE_SMW_SpawnPlayerFireball:	%ROUTINE_SMW_SpawnPlayerFireball(NULLROM)					; $00FE94
ROUTINE_RT02_SMW_NorSpr088_WingedCage_Status08:	%ROUTINE_RT02_SMW_NorSpr088_WingedCage_Status08(NULLROM)			; $00FF07
ROUTINE_RT02_SMW_NorSpr089_Layer3Smasher_Status08:	%ROUTINE_RT02_SMW_NorSpr089_Layer3Smasher_Status08(NULLROM)			; $00FF61
INLINEDATATABLE_RT04_SMW_EmptySpace:	%INLINEDATATABLE_RT04_SMW_EmptySpace(NULLROM)					; $00FF93
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank01Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_RT01_SMW_NorSprXXX_LineGuidedSprites_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_LineGuidedSprites_Status08(NULLROM)		; $018000
ROUTINE_SMW_CheckNormalSpriteLevelCollision:	%ROUTINE_SMW_CheckNormalSpriteLevelCollision(NULLROM)				; $018008
ROUTINE_RT00_SMW_UpdateNormalSpritePositionBank01:	%ROUTINE_RT00_SMW_UpdateNormalSpritePositionBank01(NULLROM)			; $01801A
ROUTINE_RT00_SMW_HandleNormalSpriteGravity:	%ROUTINE_RT00_SMW_HandleNormalSpriteGravity(NULLROM)				; $01802A
ROUTINE_RT00_SMW_CheckForNormalSpriteToNormalSpriteCollision:	%ROUTINE_RT00_SMW_CheckForNormalSpriteToNormalSpriteCollision(NULLROM)		; $018032
ROUTINE_SMW_CheckForPlayerAndNormalSpriteCollisions:	%ROUTINE_SMW_CheckForPlayerAndNormalSpriteCollisions(NULLROM)			; $01803A
ROUTINE_RT00_SMW_GenericGFXRtDraw4Tiles8x8Square:	%ROUTINE_RT00_SMW_GenericGFXRtDraw4Tiles8x8Square(NULLROM)			; $018042
ROUTINE_RT00_SMW_UnnecessaryInvertARt:	%ROUTINE_RT00_SMW_UnnecessaryInvertARt(NULLROM)				; $01804A
ROUTINE_SMW_SpawnNormalSpriteTurnAroundSmoke:	%ROUTINE_SMW_SpawnNormalSpriteTurnAroundSmoke(NULLROM)				; $01804E
ROUTINE_RT00_SMW_ProcessNormalSprites:	%ROUTINE_RT00_SMW_ProcessNormalSprites(NULLROM)				; $01808C
ROUTINE_RT00_SMW_CheckIfNormalSpriteOffScreen:	%ROUTINE_RT00_SMW_CheckIfNormalSpriteOffScreen(NULLROM)			; $0180CB
ROUTINE_RT01_SMW_ProcessNormalSprites:	%ROUTINE_RT01_SMW_ProcessNormalSprites(NULLROM)				; $0180D2
ROUTINE_SMW_NorSprStatus00_EmptySlot:	%ROUTINE_SMW_NorSprStatus00_EmptySlot(NULLROM)					; $018151
ROUTINE_SMW_NorSprStatus0C_GoalPowerUp:	%ROUTINE_SMW_NorSprStatus0C_GoalPowerUp(NULLROM)				; $018157
ROUTINE_RT00_SMW_NorSprStatus06_GoalCoins:	%ROUTINE_RT00_SMW_NorSprStatus06_GoalCoins(NULLROM)				; $01816D
ROUTINE_SMW_NorSprStatus01_Init:	%ROUTINE_SMW_NorSprStatus01_Init(NULLROM)					; $018172
ROUTINE_SMW_NorSpr0C0_SinkingLavaPlatform_Status01:	%ROUTINE_SMW_NorSpr0C0_SinkingLavaPlatform_Status01(NULLROM)			; $01830F
ROUTINE_SMW_NorSpr0BC_BowserStatue_Status01:	%ROUTINE_SMW_NorSpr0BC_BowserStatue_Status01(NULLROM)				; $018314
ROUTINE_SMW_NorSpr0BA_TimedPlatform_Status01:	%ROUTINE_SMW_NorSpr0BA_TimedPlatform_Status01(NULLROM)				; $018326
ROUTINE_SMW_NorSpr02C_YoshiEgg_Status01:	%ROUTINE_SMW_NorSpr02C_YoshiEgg_Status01(NULLROM)				; $018335
ROUTINE_SMW_NorSprXXX_ReflectingEnemy_Status01:	%ROUTINE_SMW_NorSprXXX_ReflectingEnemy_Status01(NULLROM)			; $01834C
ROUTINE_SMW_NorSpr0AC_DownFirstWoodenSpike_Status01:	%ROUTINE_SMW_NorSpr0AC_DownFirstWoodenSpike_Status01(NULLROM)			; $01835B
ROUTINE_SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status01:	%ROUTINE_SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status01(NULLROM)		; $01836B
ROUTINE_RT00_SMW_NorSpr0A0_ActivateBowserBattle_Status01:	%ROUTINE_RT00_SMW_NorSpr0A0_ActivateBowserBattle_Status01(NULLROM)		; $01836E
ROUTINE_SMW_NorSpr09A_SumoBro_Status01:	%ROUTINE_SMW_NorSpr09A_SumoBro_Status01(NULLROM)				; $018373
ROUTINE_SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status01:	%ROUTINE_SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status01(NULLROM)			; $01837D
ROUTINE_SMW_NorSpr049_ShiftingPipe_Status01:	%ROUTINE_SMW_NorSpr049_ShiftingPipe_Status01(NULLROM)				; $018381
ROUTINE_SMW_NorSpr09F_BanzaiBill_Status01:	%ROUTINE_SMW_NorSpr09F_BanzaiBill_Status01(NULLROM)				; $018387
ROUTINE_SMW_NorSpr09E_BallNChain_Status01:	%ROUTINE_SMW_NorSpr09E_BallNChain_Status01(NULLROM)				; $018396
ROUTINE_SMW_NorSpr04C_ExplodingBlock_Status01:	%ROUTINE_SMW_NorSpr04C_ExplodingBlock_Status01(NULLROM)			; $0183A0
ROUTINE_SMW_NorSpr08F_ScalePlatform_Status01:	%ROUTINE_SMW_NorSpr08F_ScalePlatform_Status01(NULLROM)				; $0183B3
ROUTINE_SMW_NorSpr019_DisplayMessage_Status01:	%ROUTINE_SMW_NorSpr019_DisplayMessage_Status01(NULLROM)			; $0183DA
ROUTINE_SMW_NorSpr035_Yoshi_Status01:	%ROUTINE_SMW_NorSpr035_Yoshi_Status01(NULLROM)					; $0183E0
ROUTINE_SMW_NorSprXXX_WallFollowers_Status01:	%ROUTINE_SMW_NorSprXXX_WallFollowers_Status01(NULLROM)				; $0183EF
ROUTINE_SMW_NorSpr02D_BabyYoshi_Status01:	%ROUTINE_SMW_NorSpr02D_BabyYoshi_Status01(NULLROM)				; $018435
ROUTINE_SMW_NorSpr081_ChangingItem_Status01:	%ROUTINE_SMW_NorSpr081_ChangingItem_Status01(NULLROM)				; $01843B
ROUTINE_SMW_NorSpr06C_RightWallSpringboard_Status01:	%ROUTINE_SMW_NorSpr06C_RightWallSpringboard_Status01(NULLROM)			; $01843E
ROUTINE_SMW_NorSpr03E_PSwitch_Status01:	%ROUTINE_SMW_NorSpr03E_PSwitch_Status01(NULLROM)				; $01844E
ROUTINE_SMW_NorSpr01E_Lakitu_Status01:	%ROUTINE_SMW_NorSpr01E_Lakitu_Status01(NULLROM)				; $018468
ROUTINE_SMW_NorSpr0B1_CreateEatBlock_Status01:	%ROUTINE_SMW_NorSpr0B1_CreateEatBlock_Status01(NULLROM)			; $0184D6
ROUTINE_SMW_NorSpr01C_BulletBill_Status01:	%ROUTINE_SMW_NorSpr01C_BulletBill_Status01(NULLROM)				; $0184DD
ROUTINE_SMW_NorSpr095_ClappinChuck_Status01:	%ROUTINE_SMW_NorSpr095_ClappinChuck_Status01(NULLROM)				; $0184E9
ROUTINE_SMW_NorSpr071_RedCapeSuperKoopa_Status01:	%ROUTINE_SMW_NorSpr071_RedCapeSuperKoopa_Status01(NULLROM)			; $018528
ROUTINE_SMW_NorSpr073_GroundSuperKoopa_Status01:	%ROUTINE_SMW_NorSpr073_GroundSuperKoopa_Status01(NULLROM)			; $01852E
ROUTINE_SMW_NorSpr070_Pokey_Status01:	%ROUTINE_SMW_NorSpr070_Pokey_Status01(NULLROM)					; $01854B
ROUTINE_SMW_NorSpr06F_DinoTorch_Status01:	%ROUTINE_SMW_NorSpr06F_DinoTorch_Status01(NULLROM)				; $018558
ROUTINE_SMW_NorSpr09D_BubbleWithSprite_Status01:	%ROUTINE_SMW_NorSpr09D_BubbleWithSprite_Status01(NULLROM)			; $018564
ROUTINE_SMW_NorSprXXX_GenericEnemies_Status01:	%ROUTINE_SMW_NorSprXXX_GenericEnemies_Status01(NULLROM)			; $01856E
ROUTINE_SMW_NorSpr0B3_BowserStatueFire_Status01:	%ROUTINE_SMW_NorSpr0B3_BowserStatueFire_Status01(NULLROM)			; $018584
ROUTINE_SMW_NorSpr074_Mushroom_Status01:	%ROUTINE_SMW_NorSpr074_Mushroom_Status01(NULLROM)				; $01858B
ROUTINE_SMW_NorSpr0AA_Fishbone_Status01:	%ROUTINE_SMW_NorSpr0AA_Fishbone_Status01(NULLROM)				; $01858E
ROUTINE_SMW_NorSprXXX_RegularPiranhaPlant_Status01:	%ROUTINE_SMW_NorSprXXX_RegularPiranhaPlant_Status01(NULLROM)			; $01859A
ROUTINE_SMW_NorSprStatus08_Normal:	%ROUTINE_SMW_NorSprStatus08_Normal(NULLROM)					; $0185C3
ROUTINE_RT00_SMW_NorSpr06F_DinoTorch_Status08:	%ROUTINE_RT00_SMW_NorSpr06F_DinoTorch_Status08(NULLROM)			; $01875E
ROUTINE_SMW_NorSpr04A_GoalSphere_Status08:	%ROUTINE_SMW_NorSpr04A_GoalSphere_Status08(NULLROM)				; $018763
ROUTINE_RT00_SMW_NorSpr0A9_Reznor_Status01:	%ROUTINE_RT00_SMW_NorSpr0A9_Reznor_Status01(NULLROM)				; $018789
ROUTINE_RT00_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT00_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $01878E
ROUTINE_RT00_SMW_NorSpr09F_BanzaiBill_Status08:	%ROUTINE_RT00_SMW_NorSpr09F_BanzaiBill_Status08(NULLROM)			; $018793
ROUTINE_RT00_SMW_NorSpr09D_BubbleWithSprite_Status08:	%ROUTINE_RT00_SMW_NorSpr09D_BubbleWithSprite_Status08(NULLROM)			; $018798
ROUTINE_RT00_SMW_NorSpr09B_HammerBro_Status08:	%ROUTINE_RT00_SMW_NorSpr09B_HammerBro_Status08(NULLROM)			; $01879D
ROUTINE_RT00_SMW_NorSpr09C_HammerBroPlatform_Status08:	%ROUTINE_RT00_SMW_NorSpr09C_HammerBroPlatform_Status08(NULLROM)		; $0187A2
ROUTINE_SMW_NorSpr09B_HammerBro_Status01:	%ROUTINE_SMW_NorSpr09B_HammerBro_Status01(NULLROM)				; $0187A7
ROUTINE_RT00_SMW_NorSpr099_VolcanoLotus_Status08:	%ROUTINE_RT00_SMW_NorSpr099_VolcanoLotus_Status08(NULLROM)			; $0187AC
ROUTINE_RT00_SMW_NorSpr09A_SumoBro_Status08:	%ROUTINE_RT00_SMW_NorSpr09A_SumoBro_Status08(NULLROM)				; $0187B1
ROUTINE_RT00_SMW_NorSpr02B_SumoLightning_Status08:	%ROUTINE_RT00_SMW_NorSpr02B_SumoLightning_Status08(NULLROM)			; $0187B6
ROUTINE_RT00_SMW_NorSprXXX_JumpingPiranhaPlant_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_JumpingPiranhaPlant_Status08(NULLROM)		; $0187BB
ROUTINE_RT00_SMW_NorSpr090_GreenGasBubble_Status08:	%ROUTINE_RT00_SMW_NorSpr090_GreenGasBubble_Status08(NULLROM)			; $0187C0
ROUTINE_SMW_UnusedJSLTo_NorSpr09A_SumoBro_Status08_Bank02:	%ROUTINE_SMW_UnusedJSLTo_NorSpr09A_SumoBro_Status08_Bank02(NULLROM)		; $0187C5
ROUTINE_RT00_SMW_NorSpr045_DirectionalCoins_Status08:	%ROUTINE_RT00_SMW_NorSpr045_DirectionalCoins_Status08(NULLROM)			; $0187CA
ROUTINE_RT00_SMW_NorSpr04C_ExplodingBlock_Status08:	%ROUTINE_RT00_SMW_NorSpr04C_ExplodingBlock_Status08(NULLROM)			; $0187CF
ROUTINE_RT00_SMW_NorSpr08F_ScalePlatform_Status08:	%ROUTINE_RT00_SMW_NorSpr08F_ScalePlatform_Status08(NULLROM)			; $0187D4
ROUTINE_RT00_SMW_NorSpr061_SkullRaft_Status01:	%ROUTINE_RT00_SMW_NorSpr061_SkullRaft_Status01(NULLROM)			; $0187D9
ROUTINE_RT00_SMW_NorSpr061_SkullRaft_Status08:	%ROUTINE_RT00_SMW_NorSpr061_SkullRaft_Status08(NULLROM)			; $0187DE
ROUTINE_RT00_SMW_NorSpr08D_GhostHouseDoor_Status08:	%ROUTINE_RT00_SMW_NorSpr08D_GhostHouseDoor_Status08(NULLROM)			; $0187E3
ROUTINE_RT00_SMW_NorSpr08E_WarpHole_Status08:	%ROUTINE_RT00_SMW_NorSpr08E_WarpHole_Status08(NULLROM)				; $0187E8
ROUTINE_RT00_SMW_NorSpr070_Pokey_Status08:	%ROUTINE_RT00_SMW_NorSpr070_Pokey_Status08(NULLROM)				; $0187ED
ROUTINE_RT00_SMW_NorSprXXX_SuperKoopas_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_SuperKoopas_Status08(NULLROM)			; $0187F2
ROUTINE_RT00_SMW_NorSpr04B_PipeLakitu_Status08:	%ROUTINE_RT00_SMW_NorSpr04B_PipeLakitu_Status08(NULLROM)			; $018801
ROUTINE_SMW_NorSpr046_DigginChuck_Status08:	%ROUTINE_SMW_NorSpr046_DigginChuck_Status08(NULLROM)				; $018806
ROUTINE_RT00_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08:	%ROUTINE_RT00_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08(NULLROM)	; $01880B
ROUTINE_RT00_SMW_NorSpr048_DigginChuckRock_Status08:	%ROUTINE_RT00_SMW_NorSpr048_DigginChuckRock_Status08(NULLROM)			; $018810
ROUTINE_RT00_SMW_NorSpr049_ShiftingPipe_Status08:	%ROUTINE_RT00_SMW_NorSpr049_ShiftingPipe_Status08(NULLROM)			; $018815
ROUTINE_RT00_SMW_NorSpr08A_Bird_Status08:	%ROUTINE_RT00_SMW_NorSpr08A_Bird_Status08(NULLROM)				; $01881A
ROUTINE_RT00_SMW_NorSpr08B_FireplaceSmoke_Status08:	%ROUTINE_RT00_SMW_NorSpr08B_FireplaceSmoke_Status08(NULLROM)			; $01881F
ROUTINE_RT00_SMW_NorSpr08C_SideExitAndFireplace_Status08:	%ROUTINE_RT00_SMW_NorSpr08C_SideExitAndFireplace_Status08(NULLROM)		; $018824
ROUTINE_RT00_SMW_NorSpr086_Wiggler_Status01:	%ROUTINE_RT00_SMW_NorSpr086_Wiggler_Status01(NULLROM)				; $018829
ROUTINE_RT00_SMW_NorSpr086_Wiggler_Status08:	%ROUTINE_RT00_SMW_NorSpr086_Wiggler_Status08(NULLROM)				; $01882E
ROUTINE_RT00_SMW_NorSpr06A_CoinGameCloud_Status08:	%ROUTINE_RT00_SMW_NorSpr06A_CoinGameCloud_Status08(NULLROM)			; $018833
ROUTINE_RT00_SMW_NorSpr044_TorpedoTed_Status08:	%ROUTINE_RT00_SMW_NorSpr044_TorpedoTed_Status08(NULLROM)			; $018838
ROUTINE_RT00_SMW_NorSpr089_Layer3Smasher_Status08:	%ROUTINE_RT00_SMW_NorSpr089_Layer3Smasher_Status08(NULLROM)			; $01883D
ROUTINE_RT00_SMW_NorSprXXX_WallSpringboard_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_WallSpringboard_Status08(NULLROM)			; $018848
ROUTINE_RT00_SMW_NorSpr03D_RipVanFish_Status08:	%ROUTINE_RT00_SMW_NorSpr03D_RipVanFish_Status08(NULLROM)			; $018853
ROUTINE_RT00_SMW_NorSprXXX_WallFollowers_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_WallFollowers_Status08(NULLROM)			; $01885E
ROUTINE_SMW_NorSpr091_CharginChuck_Status01:	%ROUTINE_SMW_NorSpr091_CharginChuck_Status01(NULLROM)				; $018869
ROUTINE_RT00_SMW_NorSpr091_CharginChuck_Status08:	%ROUTINE_RT00_SMW_NorSpr091_CharginChuck_Status08(NULLROM)			; $01886A
ROUTINE_RT00_SMW_NorSpr088_WingedCage_Status01:	%ROUTINE_RT00_SMW_NorSpr088_WingedCage_Status01(NULLROM)			; $01886F
ROUTINE_RT00_SMW_NorSpr088_WingedCage_Status08:	%ROUTINE_RT00_SMW_NorSpr088_WingedCage_Status08(NULLROM)			; $01887A
ROUTINE_RT00_SMW_NorSprXXX_Dolphins_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_Dolphins_Status08(NULLROM)				; $018885
ROUTINE_SMW_NorSpr052_MovingLedgeHole_Status01:	%ROUTINE_SMW_NorSpr052_MovingLedgeHole_Status01(NULLROM)			; $018890
ROUTINE_RT00_SMW_NorSpr052_MovingLedgeHole_Status08:	%ROUTINE_RT00_SMW_NorSpr052_MovingLedgeHole_Status08(NULLROM)			; $018893
ROUTINE_RT00_SMW_NorSprXXX_GenericEnemies_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_GenericEnemies_Status08(NULLROM)			; $018898
ROUTINE_SMW_NorSpr014_SpinyEgg_Status08:	%ROUTINE_SMW_NorSpr014_SpinyEgg_Status08(NULLROM)				; $018C18
ROUTINE_RT01_SMW_NorSprXXX_GenericEnemies_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_GenericEnemies_Status08(NULLROM)			; $018C4D
ROUTINE_RT00_SMW_NorSpr010_ParaGoomba_Status08:	%ROUTINE_RT00_SMW_NorSpr010_ParaGoomba_Status08(NULLROM)			; $018D2E
ROUTINE_SMW_SetXSpeedBasedOnNormalSpriteFacingDirection:	%ROUTINE_SMW_SetXSpeedBasedOnNormalSpriteFacingDirection(NULLROM)		; $018DBB
ROUTINE_RT01_SMW_NorSpr010_ParaGoomba_Status08:	%ROUTINE_RT01_SMW_NorSpr010_ParaGoomba_Status08(NULLROM)			; $018DC7
ROUTINE_SMW_SetNormalSpriteAnimationFrame:	%ROUTINE_SMW_SetNormalSpriteAnimationFrame(NULLROM)				; $018E5F
ROUTINE_SMW_NorSprXXX_RegularPiranhaPlant_Status08:	%ROUTINE_SMW_NorSprXXX_RegularPiranhaPlant_Status08(NULLROM)			; $018E6E
ROUTINE_SMW_CheckForAvailableExtendedSpriteSlot:	%ROUTINE_SMW_CheckForAvailableExtendedSpriteSlot(NULLROM)			; $018EEF
ROUTINE_SMW_NorSpr01D_HoppingFlame_Status08:	%ROUTINE_SMW_NorSpr01D_HoppingFlame_Status08(NULLROM)				; $018F0D
ROUTINE_RT00_SMW_NorSpr01E_Lakitu_Status08:	%ROUTINE_RT00_SMW_NorSpr01E_Lakitu_Status08(NULLROM)				; $018F97
ROUTINE_SMW_NorSpr01C_BulletBill_Status08:	%ROUTINE_SMW_NorSpr01C_BulletBill_Status08(NULLROM)				; $018FC7
ROUTINE_RT01_SMW_HandleNormalSpriteGravity:	%ROUTINE_RT01_SMW_HandleNormalSpriteGravity(NULLROM)				; $01902E
ROUTINE_SMW_ChangeNormalSpriteDirection:	%ROUTINE_SMW_ChangeNormalSpriteDirection(NULLROM)				; $019089
ROUTINE_RT00_SMW_GenericGFXRtDraw1Tile16x16:	%ROUTINE_RT00_SMW_GenericGFXRtDraw1Tile16x16(NULLROM)				; $0190B2
ROUTINE_RT00_SMW_HandleNormalSpriteLevelCollision:	%ROUTINE_RT00_SMW_HandleNormalSpriteLevelCollision(NULLROM)			; $0190BA
ROUTINE_SMW_NorSprStatus09_Stunned:	%ROUTINE_SMW_NorSprStatus09_Stunned(NULLROM)					; $01953C
ROUTINE_SMW_MakeStunnedSpriteBounceOrSlowDownOnGround:	%ROUTINE_SMW_MakeStunnedSpriteBounceOrSlowDownOnGround(NULLROM)		; $0197AF
ROUTINE_SMW_StunnedShellGFXRt:	%ROUTINE_SMW_StunnedShellGFXRt(NULLROM)					; $019806
ROUTINE_SMW_NorSprStatus0A_Kicked:	%ROUTINE_SMW_NorSprStatus0A_Kicked(NULLROM)					; $0198A7
ROUTINE_SMW_MakeNormalSpriteReboundOffWall:	%ROUTINE_SMW_MakeNormalSpriteReboundOffWall(NULLROM)				; $01999E
ROUTINE_SMW_BreakThrowBlock:	%ROUTINE_SMW_BreakThrowBlock(NULLROM)						; $0199DC
ROUTINE_RT00_SMW_SetNormalSpriteYSpeedBasedOnSlope:	%ROUTINE_RT00_SMW_SetNormalSpriteYSpeedBasedOnSlope(NULLROM)			; $019A04
ROUTINE_SMW_SetFacingDirectionBasedOnSpeed:	%ROUTINE_SMW_SetFacingDirectionBasedOnSpeed(NULLROM)				; $019A15
ROUTINE_SMW_KickedShellGFXRt:	%ROUTINE_SMW_KickedShellGFXRt(NULLROM)						; $019A22
ROUTINE_SMW_NorSprStatus04_SpinJumpKill:	%ROUTINE_SMW_NorSprStatus04_SpinJumpKill(NULLROM)				; $019A4E
ROUTINE_RT00_SMW_NorSprStatus02_Dead:	%ROUTINE_RT00_SMW_NorSprStatus02_Dead(NULLROM)					; $019A7B
ROUTINE_SMW_NorSprStatus03_Smushed:	%ROUTINE_SMW_NorSprStatus03_Smushed(NULLROM)					; $019AE4
ROUTINE_RT01_SMW_NorSprStatus02_Dead:	%ROUTINE_RT01_SMW_NorSprStatus02_Dead(NULLROM)					; $019B13
DATATABLE_SMW_GenericSpriteOAMData:	%DATATABLE_SMW_GenericSpriteOAMData(NULLROM)					; $019B83
ROUTINE_RT01_SMW_GenericGFXRtDraw4Tiles8x8Square:	%ROUTINE_RT01_SMW_GenericGFXRtDraw4Tiles8x8Square(NULLROM)			; $019CF3
ROUTINE_SMW_GenericGFXRtDraw2Tiles16x16sStacked:	%ROUTINE_SMW_GenericGFXRtDraw2Tiles16x16sStacked(NULLROM)			; $019D5F
ROUTINE_SMW_DrawWingTiles:	%ROUTINE_SMW_DrawWingTiles(NULLROM)						; $019E10
ROUTINE_RT01_SMW_GenericGFXRtDraw1Tile16x16:	%ROUTINE_RT01_SMW_GenericGFXRtDraw1Tile16x16(NULLROM)				; $019F09
ROUTINE_SMW_NorSprStatus0B_Carried:	%ROUTINE_SMW_NorSprStatus0B_Carried(NULLROM)					; $019F5B
ROUTINE_SMW_ProcessStunnedNormalSprite:	%ROUTINE_SMW_ProcessStunnedNormalSprite(NULLROM)				; $01A12F
ROUTINE_RT00_SMW_GetDrawInfo:	%ROUTINE_RT00_SMW_GetDrawInfo(NULLROM)						; $01A361
ROUTINE_SMW_GenericGFXRtMoveTileOffscreenVertically:	%ROUTINE_SMW_GenericGFXRtMoveTileOffscreenVertically(NULLROM)			; $01A3DF
ROUTINE_RT01_SMW_CheckForNormalSpriteToNormalSpriteCollision:	%ROUTINE_RT01_SMW_CheckForNormalSpriteToNormalSpriteCollision(NULLROM)		; $01A40B
DATATABLE_SMW_StompSoundTable:	%DATATABLE_SMW_StompSoundTable(NULLROM)					; $01A61E
ROUTINE_RT02_SMW_CheckForNormalSpriteToNormalSpriteCollision:	%ROUTINE_RT02_SMW_CheckForNormalSpriteToNormalSpriteCollision(NULLROM)		; $01A625
DATATABLE_SMW_GenericSpriteToSpawnTable:	%DATATABLE_SMW_GenericSpriteToSpawnTable(NULLROM)				; $01A7C9
ROUTINE_RT00_SMW_CheckForPlayerToNormalSpriteCollision:	%ROUTINE_RT00_SMW_CheckForPlayerToNormalSpriteCollision(NULLROM)		; $01A7DC
ROUTINE_SMW_BoostMarioSpeed:	%ROUTINE_SMW_BoostMarioSpeed(NULLROM)						; $01AA33
ROUTINE_RT01_SMW_CheckForPlayerToNormalSpriteCollision:	%ROUTINE_RT01_SMW_CheckForPlayerToNormalSpriteCollision(NULLROM)		; $01AA42
ROUTINE_SMW_SpawnContactEffectFromSide:	%ROUTINE_SMW_SpawnContactEffectFromSide(NULLROM)				; $01AB6A
ROUTINE_SMW_SpawnContactEffectFromAbove:	%ROUTINE_SMW_SpawnContactEffectFromAbove(NULLROM)				; $01AB99
ROUTINE_RT01_SMW_UpdateNormalSpritePositionBank01:	%ROUTINE_RT01_SMW_UpdateNormalSpritePositionBank01(NULLROM)			; $01ABCC
ROUTINE_RT00_SMW_SubOffscreen:	%ROUTINE_RT00_SMW_SubOffscreen(NULLROM)					; $01AC0D
ROUTINE_SMW_GetRand:	%ROUTINE_SMW_GetRand(NULLROM)							; $01ACF9
ROUTINE_RT00_SMW_CheckPlayerPositionRelativeToSprite:	%ROUTINE_RT00_SMW_CheckPlayerPositionRelativeToSprite(NULLROM)			; $01AD30
INLINEDATATABLE_RT05_SMW_EmptySpace:	%INLINEDATATABLE_RT05_SMW_EmptySpace(NULLROM)					; $01AD54
ROUTINE_SMW_NorSpr083_LeftFlyingBlock_Status01:	%ROUTINE_SMW_NorSpr083_LeftFlyingBlock_Status01(NULLROM)			; $01AD59
ROUTINE_SMW_NorSpr083_LeftFlyingBlock_Status08:	%ROUTINE_SMW_NorSpr083_LeftFlyingBlock_Status08(NULLROM)			; $01AD68
ROUTINE_SMW_NorSpr060_FlatPalaceSwitch_Status01:	%ROUTINE_SMW_NorSpr060_FlatPalaceSwitch_Status01(NULLROM)			; $01AE90
ROUTINE_RT00_SMW_NorSpr060_FlatPalaceSwitch_Status08:	%ROUTINE_RT00_SMW_NorSpr060_FlatPalaceSwitch_Status08(NULLROM)			; $01AE91
ROUTINE_SMW_NorSpr026_Thwomp_Status01:	%ROUTINE_SMW_NorSpr026_Thwomp_Status01(NULLROM)				; $01AE96
ROUTINE_SMW_NorSpr026_Thwomp_Status08:	%ROUTINE_SMW_NorSpr026_Thwomp_Status08(NULLROM)				; $01AEA3
ROUTINE_SMW_NorSpr027_Thwimp_Status08:	%ROUTINE_SMW_NorSpr027_Thwimp_Status08(NULLROM)				; $01AF9F
ROUTINE_SMW_NorSprXXX_FixedMovementCheepCheep_Status01:	%ROUTINE_SMW_NorSprXXX_FixedMovementCheepCheep_Status01(NULLROM)		; $01B00B
ROUTINE_SMW_NorSpr017_GeneratorCheepCheep_Status01:	%ROUTINE_SMW_NorSpr017_GeneratorCheepCheep_Status01(NULLROM)			; $01B012
ROUTINE_SMW_NorSprXXX_FixedMovementCheepCheep_Status08:	%ROUTINE_SMW_NorSprXXX_FixedMovementCheepCheep_Status08(NULLROM)		; $01B01D
ROUTINE_SMW_KickHelplessSprite:	%ROUTINE_SMW_KickHelplessSprite(NULLROM)					; $01B12A
ROUTINE_RT01_SMW_SpawnSparkles:	%ROUTINE_RT01_SMW_SpawnSparkles(NULLROM)					; $01B14E
ROUTINE_SMW_NorSpr017_GeneratorCheepCheep_Status08:	%ROUTINE_SMW_NorSpr017_GeneratorCheepCheep_Status08(NULLROM)			; $01B192
ROUTINE_SMW_NorSpr018_SurfaceJumpingCheepCheep_Status08:	%ROUTINE_SMW_NorSpr018_SurfaceJumpingCheepCheep_Status08(NULLROM)		; $01B1B1
ROUTINE_RT00_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01:	%ROUTINE_RT00_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01(NULLROM)		; $01B212
ROUTINE_SMW_NorSpr055_HorizontalCheckerboardPlatform_Status01:	%ROUTINE_SMW_NorSpr055_HorizontalCheckerboardPlatform_Status01(NULLROM)	; $01B25E
ROUTINE_RT01_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01:	%ROUTINE_RT01_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01(NULLROM)		; $01B262
ROUTINE_SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08:	%ROUTINE_SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08(NULLROM)	; $01B268
ROUTINE_SMW_NormalSpritePlatformGFXRt:	%ROUTINE_SMW_NormalSpritePlatformGFXRt(NULLROM)				; $01B2C3
ROUTINE_SMW_SolidSpriteBlock:	%ROUTINE_SMW_SolidSpriteBlock(NULLROM)						; $01B44F
ROUTINE_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08:	%ROUTINE_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08(NULLROM)		; $01B536
ROUTINE_RT00_SMW_NorSprXXX_TurnBlockBridge_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_TurnBlockBridge_Status08(NULLROM)			; $01B69F
ROUTINE_SMW_FinishOAMWrite:	%ROUTINE_SMW_FinishOAMWrite(NULLROM)						; $01B7B3
ROUTINE_RT01_SMW_NorSprXXX_TurnBlockBridge_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_TurnBlockBridge_Status08(NULLROM)			; $01B851
ROUTINE_SMW_NorSprXXX_NetKoopas_Status01:	%ROUTINE_SMW_NorSprXXX_NetKoopas_Status01(NULLROM)				; $01B93C
ROUTINE_SMW_NorSprXXX_NetKoopas_Status08:	%ROUTINE_SMW_NorSprXXX_NetKoopas_Status08(NULLROM)				; $01B969
ROUTINE_SMW_NorSpr054_ClimbingNetDoor_Status01:	%ROUTINE_SMW_NorSpr054_ClimbingNetDoor_Status01(NULLROM)			; $01BA87
ROUTINE_RT00_SMW_NorSpr054_ClimbingNetDoor_Status08:	%ROUTINE_RT00_SMW_NorSpr054_ClimbingNetDoor_Status08(NULLROM)			; $01BA95
ROUTINE_SMW_NorSpr020_Magic_Status08:	%ROUTINE_SMW_NorSpr020_Magic_Status08(NULLROM)					; $01BC34
ROUTINE_SMW_NorSpr01F_Magikoopa_Status01:	%ROUTINE_SMW_NorSpr01F_Magikoopa_Status01(NULLROM)				; $01BDB8
ROUTINE_RT00_SMW_NorSpr01F_Magikoopa_Status08:	%ROUTINE_RT00_SMW_NorSpr01F_Magikoopa_Status08(NULLROM)			; $01BDD6
ROUTINE_RT00_SMW_AimTowardsPlayer:	%ROUTINE_RT00_SMW_AimTowardsPlayer(NULLROM)					; $01BF6A
ROUTINE_RT01_SMW_NorSpr01F_Magikoopa_Status08:	%ROUTINE_RT01_SMW_NorSpr01F_Magikoopa_Status08(NULLROM)			; $01BFE3
ROUTINE_SMW_NorSpr07B_GoalTape_Status01:	%ROUTINE_SMW_NorSpr07B_GoalTape_Status01(NULLROM)				; $01C062
ROUTINE_RT00_SMW_NorSpr07B_GoalTape_Status08:	%ROUTINE_RT00_SMW_NorSpr07B_GoalTape_Status08(NULLROM)				; $01C098
ROUTINE_SMW_NorSpr079_VineHead_Status08:	%ROUTINE_SMW_NorSpr079_VineHead_Status08(NULLROM)				; $01C183
ROUTINE_SMW_NorSprXXX_FlyingItems_Status08:	%ROUTINE_SMW_NorSprXXX_FlyingItems_Status08(NULLROM)				; $01C1EE
ROUTINE_RT00_SMW_NorSprXXX_PowerUps_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_PowerUps_Status08(NULLROM)				; $01C313
ROUTINE_SMW_GivePlayerStarPower:	%ROUTINE_SMW_GivePlayerStarPower(NULLROM)					; $01C580
ROUTINE_RT01_SMW_NorSprXXX_PowerUps_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_PowerUps_Status08(NULLROM)				; $01C592
ROUTINE_SMW_PowerUpAndItemGFXRt:	%ROUTINE_SMW_PowerUpAndItemGFXRt(NULLROM)					; $01C609
ROUTINE_SMW_NorSpr077_Feather_Status08:	%ROUTINE_SMW_NorSpr077_Feather_Status08(NULLROM)				; $01C6E6
ROUTINE_SMW_NorSpr05F_BrownChainedPlatform_Status01:	%ROUTINE_SMW_NorSpr05F_BrownChainedPlatform_Status01(NULLROM)			; $01C74A
ROUTINE_RT00_SMW_NorSpr05F_BrownChainedPlatform_Status08:	%ROUTINE_RT00_SMW_NorSpr05F_BrownChainedPlatform_Status08(NULLROM)		; $01C773
ROUTINE_SMW_GetSineAndCosineOfTiltingPlatform:	%ROUTINE_SMW_GetSineAndCosineOfTiltingPlatform(NULLROM)			; $01CB20
ROUTINE_SMW_CalculateCircleCoordinatesForTiltingPlaform:	%ROUTINE_SMW_CalculateCircleCoordinatesForTiltingPlaform(NULLROM)		; $01CB53
ROUTINE_SMW_WasteTime:	%ROUTINE_SMW_WasteTime(NULLROM)						; $01CC94
ROUTINE_SMW_CheckForTiltingPlatformCollision:	%ROUTINE_SMW_CheckForTiltingPlatformCollision(NULLROM)				; $01CC9D
ROUTINE_RT01_SMW_UnnecessaryInvertARt:	%ROUTINE_RT01_SMW_UnnecessaryInvertARt(NULLROM)				; $01CCEC
ROUTINE_RT01_SMW_NorSpr05F_BrownChainedPlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr05F_BrownChainedPlatform_Status08(NULLROM)		; $01CCF0
INLINEDATATABLE_RT06_SMW_EmptySpace:	%INLINEDATATABLE_RT06_SMW_EmptySpace(NULLROM)					; $01CD1E
ROUTINE_RT00_SMW_NorSpr029_KoopaKid_Status08_WendyLemmy:	%ROUTINE_RT00_SMW_NorSpr029_KoopaKid_Status08_WendyLemmy(NULLROM)		; $01CD2A
ROUTINE_RT00_SMW_NorSpr029_KoopaKid_Status01:	%ROUTINE_RT00_SMW_NorSpr029_KoopaKid_Status01(NULLROM)				; $01CD2F
ROUTINE_SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig:	%ROUTINE_SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig(NULLROM)		; $01CD99
ROUTINE_SMW_NorSpr034_LudwigFireball_Status08:	%ROUTINE_SMW_NorSpr034_LudwigFireball_Status08(NULLROM)			; $01D439
ROUTINE_SMW_NorSprXXX_ParachutingEnemy_Status08:	%ROUTINE_SMW_NorSprXXX_ParachutingEnemy_Status08(NULLROM)			; $01D4E7
ROUTINE_SMW_NorSprXXX_LineGuidedSprites_Status01:	%ROUTINE_SMW_NorSprXXX_LineGuidedSprites_Status01(NULLROM)			; $01D6C4
ROUTINE_RT00_SMW_NorSprXXX_LineGuidedSprites_Status08:	%ROUTINE_RT00_SMW_NorSprXXX_LineGuidedSprites_Status08(NULLROM)		; $01D717
ROUTINE_SMW_NorSpr0B4_NonLineGuideGrinder_Status08:	%ROUTINE_SMW_NorSpr0B4_NonLineGuideGrinder_Status08(NULLROM)			; $01DB5A
ROUTINE_RT02_SMW_NorSprXXX_LineGuidedSprites_Status08:	%ROUTINE_RT02_SMW_NorSprXXX_LineGuidedSprites_Status08(NULLROM)		; $01DBD4
ROUTINE_SMW_NorSpr082_BonusGame_Status01:	%ROUTINE_SMW_NorSpr082_BonusGame_Status01(NULLROM)				; $01DD90
ROUTINE_RT00_SMW_NorSpr082_BonusGame_Status08:	%ROUTINE_RT00_SMW_NorSpr082_BonusGame_Status08(NULLROM)			; $01DE11
ROUTINE_SMW_NorSpr033_Podoboo_Status01:	%ROUTINE_SMW_NorSpr033_Podoboo_Status01(NULLROM)				; $01E050
ROUTINE_RT00_SMW_NorSpr033_Podoboo_Status08:	%ROUTINE_RT00_SMW_NorSpr033_Podoboo_Status08(NULLROM)				; $01E07B
ROUTINE_SMW_NorSpr00E_Keyhole_Status01:	%ROUTINE_SMW_NorSpr00E_Keyhole_Status01(NULLROM)				; $01E1B8
ROUTINE_SMW_NorSpr00E_Keyhole_Status08:	%ROUTINE_SMW_NorSpr00E_Keyhole_Status08(NULLROM)				; $01E1C8
ROUTINE_RT01_SMW_NorSpr082_BonusGame_Status08:	%ROUTINE_RT01_SMW_NorSpr082_BonusGame_Status08(NULLROM)			; $01E26A
INLINEDATATABLE_RT07_SMW_EmptySpace:	%INLINEDATATABLE_RT07_SMW_EmptySpace(NULLROM)					; $01E2B0
ROUTINE_SMW_NorSprXXX_SmallMontyMole_Status08:	%ROUTINE_SMW_NorSprXXX_SmallMontyMole_Status08(NULLROM)			; $01E2C8
ROUTINE_RT00_SMW_NorSpr030_ThrowingDryBones_Status08:	%ROUTINE_RT00_SMW_NorSpr030_ThrowingDryBones_Status08(NULLROM)			; $01E41F
ROUTINE_SMW_NorSpr02F_PortableSpringboard_Status08:	%ROUTINE_SMW_NorSpr02F_PortableSpringboard_Status08(NULLROM)			; $01E611
ROUTINE_SMW_GenericSmushedSpriteGFXRt:	%ROUTINE_SMW_GenericSmushedSpriteGFXRt(NULLROM)				; $01E700
ROUTINE_SMW_NorSpr019_DisplayMessage_Status08:	%ROUTINE_SMW_NorSpr019_DisplayMessage_Status08(NULLROM)			; $01E75B
ROUTINE_SMW_NorSpr087_LakituCloud_Status08:	%ROUTINE_SMW_NorSpr087_LakituCloud_Status08(NULLROM)				; $01E76F
ROUTINE_SMW_MakeLakituThrowSpiny:	%ROUTINE_SMW_MakeLakituThrowSpiny(NULLROM)					; $01EA17
ROUTINE_RT02_SMW_PlayerGFXRt:	%ROUTINE_RT02_SMW_PlayerGFXRt(NULLROM)						; $01EA70
DATATABLE_SMW_GenericNormalSpriteAccelerationTable:	%DATATABLE_SMW_GenericNormalSpriteAccelerationTable(NULLROM)			; $01EBB4
ROUTINE_RT00_SMW_NorSpr035_Yoshi_Status08:	%ROUTINE_RT00_SMW_NorSpr035_Yoshi_Status08(NULLROM)				; $01EBB6
ROUTINE_SMW_PrepareToHatchNormalSpriteYoshiEgg:	%ROUTINE_SMW_PrepareToHatchNormalSpriteYoshiEgg(NULLROM)			; $01F74C
ROUTINE_SMW_NorSpr02C_YoshiEgg_Status08:	%ROUTINE_SMW_NorSpr02C_YoshiEgg_Status08(NULLROM)				; $01F75C
ROUTINE_SMW_NorSpr012_UnusedSprite_Status01:	%ROUTINE_SMW_NorSpr012_UnusedSprite_Status01(NULLROM)				; $01F873
ROUTINE_SMW_NorSprXXX_Eeries_Status01:	%ROUTINE_SMW_NorSprXXX_Eeries_Status01(NULLROM)				; $01F87C
ROUTINE_SMW_NorSprXXX_Eeries_Status08:	%ROUTINE_SMW_NorSprXXX_Eeries_Status08(NULLROM)				; $01F88E
ROUTINE_SMW_NorSprXXX_NonBossBoos_Status08:	%ROUTINE_SMW_NorSprXXX_NonBossBoos_Status08(NULLROM)				; $01F8CF
ROUTINE_RT00_SMW_NorSpr0A7_IggyBall_Status08:	%ROUTINE_RT00_SMW_NorSpr0A7_IggyBall_Status08(NULLROM)				; $01FA4C
ROUTINE_SMW_NorSpr029_KoopaKid_Status08:	%ROUTINE_SMW_NorSpr029_KoopaKid_Status08(NULLROM)				; $01FAD5
ROUTINE_SMW_NorSpr029_KoopaKid_Status08_IggyLarry:	%ROUTINE_SMW_NorSpr029_KoopaKid_Status08_IggyLarry(NULLROM)			; $01FAD5
ROUTINE_RT01_SMW_NorSpr0A7_IggyBall_Status08:	%ROUTINE_RT01_SMW_NorSpr0A7_IggyBall_Status08(NULLROM)				; $01FF98
INLINEDATATABLE_RT08_SMW_EmptySpace:	%INLINEDATATABLE_RT08_SMW_EmptySpace(NULLROM)					; $01FFBF
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank02Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_SMW_DropReservedItem:	%ROUTINE_SMW_DropReservedItem(NULLROM)						; $028000
ROUTINE_SMW_BobOmbExplosion:	%ROUTINE_SMW_BobOmbExplosion(NULLROM)						; $028072
ROUTINE_RT05_SMW_GameMode14_InLevel:	%ROUTINE_RT05_SMW_GameMode14_InLevel(NULLROM)					; $028178
ROUTINE_RT01_SMW_CheckPlayerPositionRelativeToSprite:	%ROUTINE_RT01_SMW_CheckPlayerPositionRelativeToSprite(NULLROM)			; $02848D
ROUTINE_RT01_SMW_CheckIfNormalSpriteOffScreen:	%ROUTINE_RT01_SMW_CheckIfNormalSpriteOffScreen(NULLROM)			; $02849F
ROUTINE_SMW_SpawnWaterSplash:	%ROUTINE_SMW_SpawnWaterSplash(NULLROM)						; $0284A6
ROUTINE_SMW_SpawnLavaSplash:	%ROUTINE_SMW_SpawnLavaSplash(NULLROM)						; $028510
ROUTINE_RT00_SMW_SpawnSparkles:	%ROUTINE_RT00_SMW_SpawnSparkles(NULLROM)					; $02858F
ROUTINE_RT01_SMW_NorSpr033_Podoboo_Status08:	%ROUTINE_RT01_SMW_NorSpr033_Podoboo_Status08(NULLROM)				; $0285DF
ROUTINE_SMW_GrabThrowBlockBlock:	%ROUTINE_SMW_GrabThrowBlockBlock(NULLROM)					; $02862F
ROUTINE_RT00_SMW_SpawnBrickPieces:	%ROUTINE_RT00_SMW_SpawnBrickPieces(NULLROM)					; $028663
ROUTINE_SMW_YoshiStompRoutine:	%ROUTINE_SMW_YoshiStompRoutine(NULLROM)					; $0286BF
ROUTINE_SMW_InitializeBlockPunchAttack:	%ROUTINE_SMW_InitializeBlockPunchAttack(NULLROM)				; $0286ED
ROUTINE_RT01_SMW_SpawnBounceSprite:	%ROUTINE_RT01_SMW_SpawnBounceSprite(NULLROM)					; $02873A
ROUTINE_RT01_SMW_SpawnBrickPieces:	%ROUTINE_RT01_SMW_SpawnBrickPieces(NULLROM)					; $028742
ROUTINE_RT00_SMW_SpawnBounceSprite:	%ROUTINE_RT00_SMW_SpawnBounceSprite(NULLROM)					; $028752
ROUTINE_SMW_SpawnSmokePuff:	%ROUTINE_SMW_SpawnSmokePuff(NULLROM)						; $028A44
ROUTINE_RT02_SMW_SpawnBounceSprite:	%ROUTINE_RT02_SMW_SpawnBounceSprite(NULLROM)					; $028A66
ROUTINE_RT06_SMW_GameMode14_InLevel:	%ROUTINE_RT06_SMW_GameMode14_InLevel(NULLROM)					; $028AA9
ROUTINE_RT00_SMW_ProcessMinorExtendedSprites:	%ROUTINE_RT00_SMW_ProcessMinorExtendedSprites(NULLROM)				; $028B67
DATATABLE_SMW_MinorExtendedSpriteOAMIndexes:	%DATATABLE_SMW_MinorExtendedSpriteOAMIndexes(NULLROM)				; $028B78
ROUTINE_RT01_SMW_MExtSpr01_BrickPiece:	%ROUTINE_RT01_SMW_MExtSpr01_BrickPiece(NULLROM)				; $028B84
ROUTINE_RT01_SMW_ProcessMinorExtendedSprites:	%ROUTINE_RT01_SMW_ProcessMinorExtendedSprites(NULLROM)				; $028B94
ROUTINE_RT01_SMW_NorSpr035_Yoshi_Status08:	%ROUTINE_RT01_SMW_NorSpr035_Yoshi_Status08(NULLROM)				; $028BB0
ROUTINE_SMW_MExtSpr0B_UnusedYoshiSmoke:	%ROUTINE_SMW_MExtSpr0B_UnusedYoshiSmoke(NULLROM)				; $028C0F
ROUTINE_SMW_MExtSpr0A_BooStream:	%ROUTINE_SMW_MExtSpr0A_BooStream(NULLROM)					; $028CB8
ROUTINE_SMW_MExtSpr07_WaterSplash:	%ROUTINE_SMW_MExtSpr07_WaterSplash(NULLROM)					; $028D42
ROUTINE_SMW_MExtSpr06_RipVanFishZ:	%ROUTINE_SMW_MExtSpr06_RipVanFishZ(NULLROM)					; $028DD7
ROUTINE_SMW_MExtSpr03_EggShell:	%ROUTINE_SMW_MExtSpr03_EggShell(NULLROM)					; $028E7A
ROUTINE_SMW_MExtSpr02_SmallStar:	%ROUTINE_SMW_MExtSpr02_SmallStar(NULLROM)					; $028ECC
ROUTINE_SMW_MExtSpr04_PodobooFire:	%ROUTINE_SMW_MExtSpr04_PodobooFire(NULLROM)					; $028F2B
ROUTINE_RT00_SMW_MExtSpr01_BrickPiece:	%ROUTINE_RT00_SMW_MExtSpr01_BrickPiece(NULLROM)				; $028F8B
ROUTINE_RT00_SMW_ProcessBounceAndSmokeSprites:	%ROUTINE_RT00_SMW_ProcessBounceAndSmokeSprites(NULLROM)			; $02902D
ROUTINE_SMW_BounceSpr07_SpinningTurnBlock:	%ROUTINE_SMW_BounceSpr07_SpinningTurnBlock(NULLROM)				; $029072
ROUTINE_SMW_BounceSpr01_TurnBlock:	%ROUTINE_SMW_BounceSpr01_TurnBlock(NULLROM)					; $0290CE
ROUTINE_SMW_SpawnMap16TileFromBounceSprite:	%ROUTINE_SMW_SpawnMap16TileFromBounceSprite(NULLROM)				; $02919D
ROUTINE_SMW_BounceSpriteGFXRt:	%ROUTINE_SMW_BounceSpriteGFXRt(NULLROM)					; $0291ED
ROUTINE_SMW_GetBounceSpriteLevelCollisionMap16ID:	%ROUTINE_SMW_GetBounceSpriteLevelCollisionMap16ID(NULLROM)			; $029265
ROUTINE_RT00_SMW_CheckForPlayerAttackToNormalSpriteCollision:	%ROUTINE_RT00_SMW_CheckForPlayerAttackToNormalSpriteCollision(NULLROM)		; $029392
ROUTINE_RT06_SMW_RunPlayerBlockCode:	%ROUTINE_RT06_SMW_RunPlayerBlockCode(NULLROM)					; $0294C1
ROUTINE_SMW_HandleCapeInteraction:	%ROUTINE_SMW_HandleCapeInteraction(NULLROM)					; $0294F5
ROUTINE_SMW_HandleCapeLevelCollision:	%ROUTINE_SMW_HandleCapeLevelCollision(NULLROM)					; $02950B
ROUTINE_SMW_HandleCapeToExtendedSpriteCollision:	%ROUTINE_SMW_HandleCapeToExtendedSpriteCollision(NULLROM)			; $029631
ROUTINE_RT01_SMW_CheckForPlayerAttackToNormalSpriteCollision:	%ROUTINE_RT01_SMW_CheckForPlayerAttackToNormalSpriteCollision(NULLROM)		; $029657
DATATABLE_SMW_SmokeSpriteOAMIndexes:	%DATATABLE_SMW_SmokeSpriteOAMIndexes(NULLROM)					; $0296B8
ROUTINE_RT01_SMW_ProcessBounceAndSmokeSprites:	%ROUTINE_RT01_SMW_ProcessBounceAndSmokeSprites(NULLROM)			; $0296C0
ROUTINE_SMW_SmokeSpr01_PuffOfSmoke:	%ROUTINE_SMW_SmokeSpr01_PuffOfSmoke(NULLROM)					; $0296D8
ROUTINE_SMW_SmokeSpr02_ContactEffect:	%ROUTINE_SMW_SmokeSpr02_ContactEffect(NULLROM)					; $029797
ROUTINE_SMW_SmokeSpr05_Glitter:	%ROUTINE_SMW_SmokeSpr05_Glitter(NULLROM)					; $0298C2
ROUTINE_SMW_SmokeSpr03_TurnAroundSmoke:	%ROUTINE_SMW_SmokeSpr03_TurnAroundSmoke(NULLROM)				; $029922
ROUTINE_RT00_SMW_ProcessSpinningCoinSprites:	%ROUTINE_RT00_SMW_ProcessSpinningCoinSprites(NULLROM)				; $0299D2
ROUTINE_SMW_ProcessExtendedSprites:	%ROUTINE_SMW_ProcessExtendedSprites(NULLROM)					; $029B0A
ROUTINE_SMW_ExtSpr0C_VolcanoLotusFire:	%ROUTINE_SMW_ExtSpr0C_VolcanoLotusFire(NULLROM)				; $029B51
ROUTINE_SMW_SpawnYoshiStompSmoke:	%ROUTINE_SMW_SpawnYoshiStompSmoke(NULLROM)					; $029BDE
ROUTINE_SMW_ExtSpr0F_SmokeTrail:	%ROUTINE_SMW_ExtSpr0F_SmokeTrail(NULLROM)					; $029C33
ROUTINE_SMW_ExtSpr10_SpinJumpStars:	%ROUTINE_SMW_ExtSpr10_SpinJumpStars(NULLROM)					; $029C83
ROUTINE_SMW_ExtSpr0A_CloudCoin:	%ROUTINE_SMW_ExtSpr0A_CloudCoin(NULLROM)					; $029CB5
ROUTINE_SMW_ExtSpr09_Unused:	%ROUTINE_SMW_ExtSpr09_Unused(NULLROM)						; $029D5E
ROUTINE_SMW_ExtSpr08_LauncherArm:	%ROUTINE_SMW_ExtSpr08_LauncherArm(NULLROM)					; $029E36
ROUTINE_SMW_ExtSpr07_LavaSplash:	%ROUTINE_SMW_ExtSpr07_LavaSplash(NULLROM)					; $029E82
ROUTINE_SMW_ExtSpr12_BreathBubble:	%ROUTINE_SMW_ExtSpr12_BreathBubble(NULLROM)					; $029EEA
ROUTINE_SMW_ExtSpr11_YoshiFireball:	%ROUTINE_SMW_ExtSpr11_YoshiFireball(NULLROM)					; $029F61
ROUTINE_SMW_ExtSpr05_MarioFireball:	%ROUTINE_SMW_ExtSpr05_MarioFireball(NULLROM)					; $029F99
ROUTINE_RT00_SMW_CheckForPlayerFireballToNormalSpriteCollision:	%ROUTINE_RT00_SMW_CheckForPlayerFireballToNormalSpriteCollision(NULLROM)	; $02A0AC
DATATABLE_SMW_ExtendedSpriteOAMIndexes:	%DATATABLE_SMW_ExtendedSpriteOAMIndexes(NULLROM)				; $02A153
ROUTINE_RT01_SMW_GenericExtendedSpriteGFXRt:	%ROUTINE_RT01_SMW_GenericExtendedSpriteGFXRt(NULLROM)				; $02A15B
ROUTINE_SMW_ExtSpr02_ReznorFireball:	%ROUTINE_SMW_ExtSpr02_ReznorFireball(NULLROM)					; $02A163
ROUTINE_RT00_SMW_GenericExtendedSpriteGFXRt:	%ROUTINE_RT00_SMW_GenericExtendedSpriteGFXRt(NULLROM)				; $02A1A4
ROUTINE_SMW_ExtSpr03_FlameRemnant:	%ROUTINE_SMW_ExtSpr03_FlameRemnant(NULLROM)					; $02A217
ROUTINE_SMW_ExtSpr06_ThrownBone:	%ROUTINE_SMW_ExtSpr06_ThrownBone(NULLROM)					; $02A254
ROUTINE_SMW_ExtSpr04_Hammer:	%ROUTINE_SMW_ExtSpr04_Hammer(NULLROM)						; $02A2DF
ROUTINE_SMW_ExtSpr01_SmokePuff:	%ROUTINE_SMW_ExtSpr01_SmokePuff(NULLROM)					; $02A344
ROUTINE_SMW_CheckForMarioToExtendedSpriteCollision:	%ROUTINE_SMW_CheckForMarioToExtendedSpriteCollision(NULLROM)			; $02A3F6
ROUTINE_SMW_GetExtendedSpriteClipping:	%ROUTINE_SMW_GetExtendedSpriteClipping(NULLROM)				; $02A4E9
ROUTINE_RT01_SMW_CheckForPlayerFireballToNormalSpriteCollision:	%ROUTINE_RT01_SMW_CheckForPlayerFireballToNormalSpriteCollision(NULLROM)	; $02A547
ROUTINE_SMW_HandleExtendedSpriteLevelCollision:	%ROUTINE_SMW_HandleExtendedSpriteLevelCollision(NULLROM)			; $02A56E
ROUTINE_RT01_SMW_LoadSublevel:	%ROUTINE_RT01_SMW_LoadSublevel(NULLROM)					; $02A751
ROUTINE_SMW_ParseLevelSpriteList:	%ROUTINE_SMW_ParseLevelSpriteList(NULLROM)					; $02A773
ROUTINE_SMW_FindFreeNormalSpriteSlot:	%ROUTINE_SMW_FindFreeNormalSpriteSlot(NULLROM)					; $02A9DE
ROUTINE_RT01_SMW_NorSpr0E5_LoadReappearingBoo:	%ROUTINE_RT01_SMW_NorSpr0E5_LoadReappearingBoo(NULLROM)			; $02AA0B
ROUTINE_SMW_NorSpr0E5_LoadDeathBatCeiling:	%ROUTINE_SMW_NorSpr0E5_LoadDeathBatCeiling(NULLROM)				; $02AA33
ROUTINE_SMW_NorSpr0E6_LoadCandleFlames:	%ROUTINE_SMW_NorSpr0E6_LoadCandleFlames(NULLROM)				; $02AA68
ROUTINE_RT00_SMW_NorSpr0E5_LoadReappearingBoo:	%ROUTINE_RT00_SMW_NorSpr0E5_LoadReappearingBoo(NULLROM)			; $02AA8D
ROUTINE_SMW_NorSpr0E1_LoadBooCeiling:	%ROUTINE_SMW_NorSpr0E1_LoadBooCeiling(NULLROM)					; $02AABD
ROUTINE_SMW_NorSprXXX_LoadBooRing:	%ROUTINE_SMW_NorSprXXX_LoadBooRing(NULLROM)					; $02AB11
ROUTINE_SMW_NorSprXXX_LoadShooter:	%ROUTINE_SMW_NorSprXXX_LoadShooter(NULLROM)					; $02AB78
ROUTINE_SMW_InitializeAllSpritesOnLevelLoad:	%ROUTINE_SMW_InitializeAllSpritesOnLevelLoad(NULLROM)				; $02ABF2
ROUTINE_SMW_LoadSpritesOnLevelLoad:	%ROUTINE_SMW_LoadSpritesOnLevelLoad(NULLROM)					; $02AC5C
ROUTINE_SMW_GivePoints:	%ROUTINE_SMW_GivePoints(NULLROM)						; $02ACE1
ROUTINE_SMW_CheckForAvailableScoreSpriteSlot:	%ROUTINE_SMW_CheckForAvailableScoreSpriteSlot(NULLROM)				; $02AD34
ROUTINE_SMW_ProcessScoreSprites:	%ROUTINE_SMW_ProcessScoreSprites(NULLROM)					; $02AD4C
ROUTINE_SMW_NorSpr0E0_Load3Platforms:	%ROUTINE_SMW_NorSpr0E0_Load3Platforms(NULLROM)					; $02AF2D
ROUTINE_SMW_NorSpr0DE_Load5Eeries:	%ROUTINE_SMW_NorSpr0DE_Load5Eeries(NULLROM)					; $02AF87
ROUTINE_SMW_ProcessGeneratorSprite:	%ROUTINE_SMW_ProcessGeneratorSprite(NULLROM)					; $02AFFE
ROUTINE_SMW_GenSpr08_TurnOffRespawningSprite:	%ROUTINE_SMW_GenSpr08_TurnOffRespawningSprite(NULLROM)				; $02B02B
ROUTINE_SMW_GenSpr0F_TurnOffGenerator:	%ROUTINE_SMW_GenSpr0F_TurnOffGenerator(NULLROM)				; $02B032
ROUTINE_SMW_GenSpr0E_GenerateFire:	%ROUTINE_SMW_GenSpr0E_GenerateFire(NULLROM)					; $02B036
ROUTINE_SMW_GenSpr0B_GenerateBullet:	%ROUTINE_SMW_GenSpr0B_GenerateBullet(NULLROM)					; $02B07C
ROUTINE_SMW_GenSpr0C_GenerateSurroundingBullets:	%ROUTINE_SMW_GenSpr0C_GenerateSurroundingBullets(NULLROM)			; $02B0C9
ROUTINE_SMW_GenSpr07_GenerateFish:	%ROUTINE_SMW_GenSpr07_GenerateFish(NULLROM)					; $02B153
ROUTINE_SMW_GenSpr09_GenerateSuperKoopa:	%ROUTINE_SMW_GenSpr09_GenerateSuperKoopa(NULLROM)				; $02B1B8
ROUTINE_SMW_GenSpr0A_GenerateBubbles:	%ROUTINE_SMW_GenSpr0A_GenerateBubbles(NULLROM)					; $02B207
ROUTINE_SMW_GenSprXX_GenerateDolphins:	%ROUTINE_SMW_GenSprXX_GenerateDolphins(NULLROM)				; $02B25E
ROUTINE_SMW_GenSpr01_GenerateEerie:	%ROUTINE_SMW_GenSpr01_GenerateEerie(NULLROM)					; $02B2D0
ROUTINE_SMW_GenSprXX_GenerateParachuteEnemies:	%ROUTINE_SMW_GenSprXX_GenerateParachuteEnemies(NULLROM)			; $02B31F
ROUTINE_SMW_ProcessShooterSprites:	%ROUTINE_SMW_ProcessShooterSprites(NULLROM)					; $02B387
ROUTINE_SMW_ShooterSpr02_TorpedoShooter:	%ROUTINE_SMW_ShooterSpr02_TorpedoShooter(NULLROM)				; $02B3B6
ROUTINE_SMW_ShooterSpr01_BulletBillShooter:	%ROUTINE_SMW_ShooterSpr01_BulletBillShooter(NULLROM)				; $02B466
ROUTINE_SMW_UpdateBounceSpritePosition:	%ROUTINE_SMW_UpdateBounceSpritePosition(NULLROM)				; $02B51A
ROUTINE_SMW_UpdateExtendedSpritePosition:	%ROUTINE_SMW_UpdateExtendedSpritePosition(NULLROM)				; $02B554
ROUTINE_RT01_SMW_ProcessSpinningCoinSprites:	%ROUTINE_RT01_SMW_ProcessSpinningCoinSprites(NULLROM)				; $02B58E
ROUTINE_SMW_UpdateMinorExtendedSpritePosition:	%ROUTINE_SMW_UpdateMinorExtendedSpritePosition(NULLROM)			; $02B5BC
INLINEDATATABLE_RT09_SMW_EmptySpace:	%INLINEDATATABLE_RT09_SMW_EmptySpace(NULLROM)					; $02B5EC
ROUTINE_RT01_SMW_NorSpr070_Pokey_Status08:	%ROUTINE_RT01_SMW_NorSpr070_Pokey_Status08(NULLROM)				; $02B630
ROUTINE_RT01_SMW_NorSpr044_TorpedoTed_Status08:	%ROUTINE_RT01_SMW_NorSpr044_TorpedoTed_Status08(NULLROM)			; $02B882
ROUTINE_SMW_UnusedGenTileFromSpr:	%ROUTINE_SMW_UnusedGenTileFromSpr(NULLROM)					; $02B9A4
ROUTINE_RT02_SMW_CheckForPlayerToNormalSpriteCollision:	%ROUTINE_RT02_SMW_CheckForPlayerToNormalSpriteCollision(NULLROM)		; $02B9BD
ROUTINE_SMW_CheckForBerryTileCollisionWithYoshiTongue:	%ROUTINE_SMW_CheckForBerryTileCollisionWithYoshiTongue(NULLROM)		; $02B9FA
ROUTINE_RT02_SMW_NorSpr035_Yoshi_Status08:	%ROUTINE_RT02_SMW_NorSpr035_Yoshi_Status08(NULLROM)				; $02BB0B
ROUTINE_RT01_SMW_NorSprXXX_Dolphins_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_Dolphins_Status08(NULLROM)				; $02BB88
ROUTINE_RT01_SMW_NorSprXXX_WallFollowers_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_WallFollowers_Status08(NULLROM)			; $02BC8F
ROUTINE_RT01_SMW_NorSpr03D_RipVanFish_Status08:	%ROUTINE_RT01_SMW_NorSpr03D_RipVanFish_Status08(NULLROM)			; $02BFC8
ROUTINE_SMW_SpawnMusicNoteOrZ:	%ROUTINE_SMW_SpawnMusicNoteOrZ(NULLROM)					; $02C0CF
ROUTINE_RT02_SMW_NorSpr03D_RipVanFish_Status08:	%ROUTINE_RT02_SMW_NorSpr03D_RipVanFish_Status08(NULLROM)			; $02C126
ROUTINE_RT01_SMW_NorSpr091_CharginChuck_Status08:	%ROUTINE_RT01_SMW_NorSpr091_CharginChuck_Status08(NULLROM)			; $02C132
ROUTINE_RT01_SMW_NorSpr088_WingedCage_Status01:	%ROUTINE_RT01_SMW_NorSpr088_WingedCage_Status01(NULLROM)			; $02CBFD
ROUTINE_RT01_SMW_NorSpr088_WingedCage_Status08:	%ROUTINE_RT01_SMW_NorSpr088_WingedCage_Status08(NULLROM)			; $02CBFE
ROUTINE_RT01_SMW_NorSpr060_FlatPalaceSwitch_Status08:	%ROUTINE_RT01_SMW_NorSpr060_FlatPalaceSwitch_Status08(NULLROM)			; $02CD2D
ROUTINE_RT01_SMW_NorSprXXX_WallSpringboard_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_WallSpringboard_Status08(NULLROM)			; $02CDC5
ROUTINE_RT01_SMW_SubOffscreen:	%ROUTINE_RT01_SMW_SubOffscreen(NULLROM)					; $02D003
ROUTINE_RT02_SMW_CheckIfNormalSpriteOffScreen:	%ROUTINE_RT02_SMW_CheckIfNormalSpriteOffScreen(NULLROM)			; $02D0C9
ROUTINE_RT03_SMW_NorSpr035_Yoshi_Status08:	%ROUTINE_RT03_SMW_NorSpr035_Yoshi_Status08(NULLROM)				; $02D0D0
ROUTINE_SMW_HandleHeldPBalloonAndInLakituCloudMovement:	%ROUTINE_SMW_HandleHeldPBalloonAndInLakituCloudMovement(NULLROM)		; $02D210
ROUTINE_SMW_UpdateNormalSpritePositionBank02:	%ROUTINE_SMW_UpdateNormalSpritePositionBank02(NULLROM)				; $02D288
ROUTINE_SMW_UnusedPrepareToAimAtPlayerRoutine:	%ROUTINE_SMW_UnusedPrepareToAimAtPlayerRoutine(NULLROM)			; $02D2C7
ROUTINE_RT01_SMW_AimTowardsPlayer:	%ROUTINE_RT01_SMW_AimTowardsPlayer(NULLROM)					; $02D2FB
ROUTINE_RT01_SMW_GetDrawInfo:	%ROUTINE_RT01_SMW_GetDrawInfo(NULLROM)						; $02D374
ROUTINE_RT01_SMW_NorSpr089_Layer3Smasher_Status08:	%ROUTINE_RT01_SMW_NorSpr089_Layer3Smasher_Status08(NULLROM)			; $02D3EA
ROUTINE_RT02_SMW_CheckPlayerPositionRelativeToSprite:	%ROUTINE_RT02_SMW_CheckPlayerPositionRelativeToSprite(NULLROM)			; $02D4F2
INLINEDATATABLE_RT10_SMW_EmptySpace:	%INLINEDATATABLE_RT10_SMW_EmptySpace(NULLROM)					; $02D51E
ROUTINE_RT02_SMW_NorSpr086_Wiggler_Status08:	%ROUTINE_RT02_SMW_NorSpr086_Wiggler_Status08(NULLROM)				; $02D580
ROUTINE_RT01_SMW_NorSpr09F_BanzaiBill_Status08:	%ROUTINE_RT01_SMW_NorSpr09F_BanzaiBill_Status08(NULLROM)			; $02D587
ROUTINE_RT02_SMW_NorSpr0A3_GreyChainedPlatform_Status08:	%ROUTINE_RT02_SMW_NorSpr0A3_GreyChainedPlatform_Status08(NULLROM)		; $02D62A
ROUTINE_RT01_SMW_NorSpr09D_BubbleWithSprite_Status08:	%ROUTINE_RT01_SMW_NorSpr09D_BubbleWithSprite_Status08(NULLROM)			; $02D8A1
ROUTINE_RT01_SMW_NorSpr09B_HammerBro_Status08:	%ROUTINE_RT01_SMW_NorSpr09B_HammerBro_Status08(NULLROM)			; $02DA52
ROUTINE_RT01_SMW_NorSpr09C_HammerBroPlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr09C_HammerBroPlatform_Status08(NULLROM)		; $02DB4C
ROUTINE_RT01_SMW_NorSpr09A_SumoBro_Status08:	%ROUTINE_RT01_SMW_NorSpr09A_SumoBro_Status08(NULLROM)				; $02DCAF
ROUTINE_RT01_SMW_NorSpr02B_SumoLightning_Status08:	%ROUTINE_RT01_SMW_NorSpr02B_SumoLightning_Status08(NULLROM)			; $02DEA8
ROUTINE_RT01_SMW_NorSpr099_VolcanoLotus_Status08:	%ROUTINE_RT01_SMW_NorSpr099_VolcanoLotus_Status08(NULLROM)			; $02DF8B
ROUTINE_RT01_SMW_NorSprXXX_JumpingPiranhaPlant_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_JumpingPiranhaPlant_Status08(NULLROM)		; $02E0C5
ROUTINE_RT01_SMW_NorSpr045_DirectionalCoins_Status08:	%ROUTINE_RT01_SMW_NorSpr045_DirectionalCoins_Status08(NULLROM)			; $02E1F9
ROUTINE_RT01_SMW_NorSpr090_GreenGasBubble_Status08:	%ROUTINE_RT01_SMW_NorSpr090_GreenGasBubble_Status08(NULLROM)			; $02E303
ROUTINE_RT01_SMW_NorSpr04C_ExplodingBlock_Status08:	%ROUTINE_RT01_SMW_NorSpr04C_ExplodingBlock_Status08(NULLROM)			; $02E417
ROUTINE_SMW_ShatterExplodingBlock:	%ROUTINE_SMW_ShatterExplodingBlock(NULLROM)					; $02E463
ROUTINE_RT01_SMW_NorSpr08F_ScalePlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr08F_ScalePlatform_Status08(NULLROM)			; $02E495
ROUTINE_RT01_SMW_NorSpr052_MovingLedgeHole_Status08:	%ROUTINE_RT01_SMW_NorSpr052_MovingLedgeHole_Status08(NULLROM)			; $02E5B4
ROUTINE_RT01_SMW_NorSpr01E_Lakitu_Status08:	%ROUTINE_RT01_SMW_NorSpr01E_Lakitu_Status08(NULLROM)				; $02E672
ROUTINE_RT01_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08:	%ROUTINE_RT01_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08(NULLROM)	; $02E71F
ROUTINE_RT01_SMW_NorSpr048_DigginChuckRock_Status08:	%ROUTINE_RT01_SMW_NorSpr048_DigginChuckRock_Status08(NULLROM)			; $02E7B5
ROUTINE_RT01_SMW_NorSpr049_ShiftingPipe_Status08:	%ROUTINE_RT01_SMW_NorSpr049_ShiftingPipe_Status08(NULLROM)			; $02E82D
ROUTINE_RT01_SMW_NorSpr04B_PipeLakitu_Status08:	%ROUTINE_RT01_SMW_NorSpr04B_PipeLakitu_Status08(NULLROM)			; $02E935
ROUTINE_SMW_SetBabyYoshiDynamicGraphicsPointer:	%ROUTINE_SMW_SetBabyYoshiDynamicGraphicsPointer(NULLROM)			; $02EA25
ROUTINE_RT00_SMW_CheckIfBabyYoshiCanEatNormalSprite:	%ROUTINE_RT00_SMW_CheckIfBabyYoshiCanEatNormalSprite(NULLROM)			; $02EA4E
ROUTINE_RT01_SMW_NorSpr08E_WarpHole_Status08:	%ROUTINE_RT01_SMW_NorSpr08E_WarpHole_Status08(NULLROM)				; $02EAD2
ROUTINE_RT03_SMW_CheckForPlayerToNormalSpriteCollision:	%ROUTINE_RT03_SMW_CheckForPlayerToNormalSpriteCollision(NULLROM)		; $02EAF2
ROUTINE_RT01_SMW_NorSprXXX_SuperKoopas_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_SuperKoopas_Status08(NULLROM)			; $02EB27
ROUTINE_RT01_SMW_NorSpr061_SkullRaft_Status01:	%ROUTINE_RT01_SMW_NorSpr061_SkullRaft_Status01(NULLROM)			; $02ED7F
ROUTINE_RT01_SMW_NorSpr061_SkullRaft_Status08:	%ROUTINE_RT01_SMW_NorSpr061_SkullRaft_Status08(NULLROM)			; $02EDD0
ROUTINE_RT01_SMW_NorSpr06A_CoinGameCloud_Status08:	%ROUTINE_RT01_SMW_NorSpr06A_CoinGameCloud_Status08(NULLROM)			; $02EEA9
ROUTINE_RT01_SMW_NorSpr086_Wiggler_Status01:	%ROUTINE_RT01_SMW_NorSpr086_Wiggler_Status01(NULLROM)				; $02EFEA
ROUTINE_RT01_SMW_NorSpr086_Wiggler_Status08:	%ROUTINE_RT01_SMW_NorSpr086_Wiggler_Status08(NULLROM)				; $02F029
ROUTINE_RT01_SMW_NorSpr08A_Bird_Status08:	%ROUTINE_RT01_SMW_NorSpr08A_Bird_Status08(NULLROM)				; $02F30F
ROUTINE_RT01_SMW_NorSpr08B_FireplaceSmoke_Status08:	%ROUTINE_RT01_SMW_NorSpr08B_FireplaceSmoke_Status08(NULLROM)			; $02F42C
ROUTINE_RT01_SMW_NorSpr08C_SideExitAndFireplace_Status08:	%ROUTINE_RT01_SMW_NorSpr08C_SideExitAndFireplace_Status08(NULLROM)		; $02F4CD
ROUTINE_RT00_SMW_DrawGhostHouseEntranceDoor:	%ROUTINE_RT00_SMW_DrawGhostHouseEntranceDoor(NULLROM)				; $02F57C
ROUTINE_RT00_SMW_DrawBigCastleGate:	%ROUTINE_RT00_SMW_DrawBigCastleGate(NULLROM)					; $02F584
ROUTINE_RT00_SMW_DrawNoYoshiSign:	%ROUTINE_RT00_SMW_DrawNoYoshiSign(NULLROM)					; $02F58C
ROUTINE_RT01_SMW_NorSpr08D_GhostHouseDoor_Status08:	%ROUTINE_RT01_SMW_NorSpr08D_GhostHouseDoor_Status08(NULLROM)			; $02F594
ROUTINE_RT01_SMW_DrawNoYoshiSign:	%ROUTINE_RT01_SMW_DrawNoYoshiSign(NULLROM)					; $02F619
ROUTINE_RT01_SMW_DrawBigCastleGate:	%ROUTINE_RT01_SMW_DrawBigCastleGate(NULLROM)					; $02F66E
ROUTINE_RT01_SMW_DrawGhostHouseEntranceDoor:	%ROUTINE_RT01_SMW_DrawGhostHouseEntranceDoor(NULLROM)				; $02F6F1
ROUTINE_SMW_ProcessClusterSprites:	%ROUTINE_SMW_ProcessClusterSprites(NULLROM)					; $02F808
ROUTINE_SMW_ClusterSpr07_ReappearingBoo:	%ROUTINE_SMW_ClusterSpr07_ReappearingBoo(NULLROM)				; $02F837
ROUTINE_SMW_ClusterSpr06_SumoBroFlame:	%ROUTINE_SMW_ClusterSpr06_SumoBroFlame(NULLROM)				; $02F8FC
ROUTINE_SMW_ClusterSpr05_CandleFlame:	%ROUTINE_SMW_ClusterSpr05_CandleFlame(NULLROM)					; $02FA02
ROUTINE_SMW_ClusterSpr04_BooRing:	%ROUTINE_SMW_ClusterSpr04_BooRing(NULLROM)					; $02FA84
ROUTINE_SMW_ClusterSpr03_BooCeiling:	%ROUTINE_SMW_ClusterSpr03_BooCeiling(NULLROM)					; $02FBBB
ROUTINE_RT00_SMW_ClusterSpr01_1up:	%ROUTINE_RT00_SMW_ClusterSpr01_1up(NULLROM)					; $02FDBC
ROUTINE_SMW_CheckForPlayerToEnemyClusterSpriteCollision:	%ROUTINE_SMW_CheckForPlayerToEnemyClusterSpriteCollision(NULLROM)		; $02FE71
ROUTINE_RT02_SMW_SubOffscreen:	%ROUTINE_RT02_SMW_SubOffscreen(NULLROM)					; $02FEC5
DATATABLE_SMW_ClusterSpriteOAMIndexes:	%DATATABLE_SMW_ClusterSpriteOAMIndexes(NULLROM)				; $02FF50
ROUTINE_RT01_SMW_ClusterSpr01_1up:	%ROUTINE_RT01_SMW_ClusterSpr01_1up(NULLROM)					; $02FF64
ROUTINE_SMW_UpdateClusterSpritePosition:	%ROUTINE_SMW_UpdateClusterSpritePosition(NULLROM)				; $02FF98
ROUTINE_RT01_SMW_SetNormalSpriteYSpeedBasedOnSlope:	%ROUTINE_RT01_SMW_SetNormalSpriteYSpeedBasedOnSlope(NULLROM)			; $02FFD1
INLINEDATATABLE_RT11_SMW_EmptySpace:	%INLINEDATATABLE_RT11_SMW_EmptySpace(NULLROM)					; $02FFE2
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank03Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_RT02_SMW_NorSpr0AB_Rex_Status08:	%ROUTINE_RT02_SMW_NorSpr0AB_Rex_Status08(NULLROM)				; $038000
ROUTINE_RT01_SMW_NorSpr01B_Football_Status08:	%ROUTINE_RT01_SMW_NorSpr01B_Football_Status08(NULLROM)				; $038007
ROUTINE_RT01_SMW_NorSpr0C5_BigBooBoss_Status08:	%ROUTINE_RT01_SMW_NorSpr0C5_BigBooBoss_Status08(NULLROM)			; $038087
ROUTINE_SMW_FadingBooPaletteAnimation:	%ROUTINE_SMW_FadingBooPaletteAnimation(NULLROM)				; $038239
ROUTINE_SMW_NormalSpriteBooGFXRt:	%ROUTINE_SMW_NormalSpriteBooGFXRt(NULLROM)					; $038280
ROUTINE_RT01_SMW_NorSpr0C4_GreyFallingPlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr0C4_GreyFallingPlatform_Status08(NULLROM)		; $038454
ROUTINE_RT01_SMW_NorSpr0C2_Blurp_Status08:	%ROUTINE_RT01_SMW_NorSpr0C2_Blurp_Status08(NULLROM)				; $0384C4
ROUTINE_RT01_SMW_NorSpr0C3_PorcuPuffer_Status08:	%ROUTINE_RT01_SMW_NorSpr0C3_PorcuPuffer_Status08(NULLROM)			; $03852B
ROUTINE_RT01_SMW_NorSpr0C1_WingedPlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr0C1_WingedPlatform_Status08(NULLROM)			; $0385F4
ROUTINE_RT01_SMW_NorSpr0C0_SinkingLavaPlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr0C0_SinkingLavaPlatform_Status08(NULLROM)		; $0386FF
ROUTINE_RT01_SMW_NorSpr0BF_MegaMole_Status08:	%ROUTINE_RT01_SMW_NorSpr0BF_MegaMole_Status08(NULLROM)				; $03876E
ROUTINE_RT01_SMW_NorSpr0BE_Swooper_Status08:	%ROUTINE_RT01_SMW_NorSpr0BE_Swooper_Status08(NULLROM)				; $0388A0
ROUTINE_RT01_SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08:	%ROUTINE_RT01_SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08(NULLROM)		; $038954
ROUTINE_RT01_SMW_NorSpr0BC_BowserStatue_Status08:	%ROUTINE_RT01_SMW_NorSpr0BC_BowserStatue_Status08(NULLROM)			; $038A3C
ROUTINE_RT01_SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08:	%ROUTINE_RT01_SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08(NULLROM)		; $038BAA
ROUTINE_RT01_SMW_NorSpr0B9_MessageBox_Status08:	%ROUTINE_RT01_SMW_NorSpr0B9_MessageBox_Status08(NULLROM)			; $038D66
ROUTINE_RT01_SMW_NorSpr0BA_TimedPlatform_Status08:	%ROUTINE_RT01_SMW_NorSpr0BA_TimedPlatform_Status08(NULLROM)			; $038DBB
ROUTINE_RT01_SMW_NorSpr0BB_MovingCastleStone_Status08:	%ROUTINE_RT01_SMW_NorSpr0BB_MovingCastleStone_Status08(NULLROM)		; $038E71
ROUTINE_RT01_SMW_NorSpr0B3_BowserStatueFire_Status08:	%ROUTINE_RT01_SMW_NorSpr0B3_BowserStatueFire_Status08(NULLROM)			; $038EEA
ROUTINE_RT01_SMW_NorSprXXX_ReflectingEnemy_Status08:	%ROUTINE_RT01_SMW_NorSprXXX_ReflectingEnemy_Status08(NULLROM)			; $038F6D
ROUTINE_RT01_SMW_NorSpr0AE_FishinBoo_Status08:	%ROUTINE_RT01_SMW_NorSpr0AE_FishinBoo_Status08(NULLROM)			; $03905D
ROUTINE_RT01_SMW_NorSpr0B2_FallingSpike_Status08:	%ROUTINE_RT01_SMW_NorSpr0B2_FallingSpike_Status08(NULLROM)			; $039214
ROUTINE_RT01_SMW_NorSpr0B1_CreateEatBlock_Status08:	%ROUTINE_RT01_SMW_NorSpr0B1_CreateEatBlock_Status08(NULLROM)			; $03926F
ROUTINE_RT01_SMW_NorSpr0AC_DownFirstWoodenSpike_Status08:	%ROUTINE_RT01_SMW_NorSpr0AC_DownFirstWoodenSpike_Status08(NULLROM)		; $039423
ROUTINE_RT01_SMW_NorSpr0AB_Rex_Status08:	%ROUTINE_RT01_SMW_NorSpr0AB_Rex_Status08(NULLROM)				; $039513
ROUTINE_RT01_SMW_NorSpr0AA_Fishbone_Status08:	%ROUTINE_RT01_SMW_NorSpr0AA_Fishbone_Status08(NULLROM)				; $0396F6
ROUTINE_RT02_SMW_AimTowardsPlayer:	%ROUTINE_RT02_SMW_AimTowardsPlayer(NULLROM)					; $0397F9
ROUTINE_RT01_SMW_NorSpr0A9_Reznor_Status01:	%ROUTINE_RT01_SMW_NorSpr0A9_Reznor_Status01(NULLROM)				; $039872
ROUTINE_RT01_SMW_NorSpr0A9_Reznor_Status08:	%ROUTINE_RT01_SMW_NorSpr0A9_Reznor_Status08(NULLROM)				; $039886
ROUTINE_RT01_SMW_NorSpr06F_DinoTorch_Status08:	%ROUTINE_RT01_SMW_NorSpr06F_DinoTorch_Status08(NULLROM)			; $039C34
ROUTINE_RT01_SMW_NorSpr0A8_Blargg_Status08:	%ROUTINE_RT01_SMW_NorSpr0A8_Blargg_Status08(NULLROM)				; $039F38
ROUTINE_RT01_SMW_NorSpr0A0_ActivateBowserBattle_Status01:	%ROUTINE_RT01_SMW_NorSpr0A0_ActivateBowserBattle_Status01(NULLROM)		; $03A0F1
ROUTINE_RT01_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT01_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $03A118
ROUTINE_SMW_DespawnNonBossSprites:	%ROUTINE_SMW_DespawnNonBossSprites(NULLROM)					; $03A6C8
ROUTINE_RT02_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT02_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $03A6F0
ROUTINE_RT05_SMW_NorSpr07C_PrincessPeach_Status08:	%ROUTINE_RT05_SMW_NorSpr07C_PrincessPeach_Status08(NULLROM)			; $03A92E
ROUTINE_RT03_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT03_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $03AB15
ROUTINE_RT01_SMW_NorSpr07C_PrincessPeach_Status08:	%ROUTINE_RT01_SMW_NorSpr07C_PrincessPeach_Status08(NULLROM)			; $03AC93
ROUTINE_RT04_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT04_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $03AF34
ROUTINE_RT01_SMW_NorSpr0A1_BowserBowlingBall_Status08:	%ROUTINE_RT01_SMW_NorSpr0A1_BowserBowlingBall_Status08(NULLROM)		; $03B161
ROUTINE_RT01_SMW_NorSpr0A2_MechaKoopa_Status08:	%ROUTINE_RT01_SMW_NorSpr0A2_MechaKoopa_Status08(NULLROM)			; $03B2A7
ROUTINE_RT05_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT05_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $03B43C
ROUTINE_SMW_StandardSpriteToSpriteCollisionChecks:	%ROUTINE_SMW_StandardSpriteToSpriteCollisionChecks(NULLROM)			; $03B56C
ROUTINE_RT02_SMW_GetDrawInfo:	%ROUTINE_RT02_SMW_GetDrawInfo(NULLROM)						; $03B75C
ROUTINE_RT02_SMW_NorSpr0A1_BowserBowlingBall_Status08:	%ROUTINE_RT02_SMW_NorSpr0A1_BowserBowlingBall_Status08(NULLROM)		; $03B7D2
ROUTINE_RT03_SMW_CheckPlayerPositionRelativeToSprite:	%ROUTINE_RT03_SMW_CheckPlayerPositionRelativeToSprite(NULLROM)			; $03B817
ROUTINE_RT03_SMW_SubOffscreen:	%ROUTINE_RT03_SMW_SubOffscreen(NULLROM)					; $03B83B
ROUTINE_RT03_SMW_CheckIfNormalSpriteOffScreen:	%ROUTINE_RT03_SMW_CheckIfNormalSpriteOffScreen(NULLROM)			; $03B8FB
ROUTINE_RT02_SMW_NorSpr01F_Magikoopa_Status08:	%ROUTINE_RT02_SMW_NorSpr01F_Magikoopa_Status08(NULLROM)			; $03B902
DATATABLE_SMW_BooFadePalettes:	%DATATABLE_SMW_BooFadePalettes(NULLROM)					; $03B982
INLINEDATATABLE_RT12_SMW_EmptySpace:	%INLINEDATATABLE_RT12_SMW_EmptySpace(NULLROM)					; $03BA02
ROUTINE_RT01_SMW_NorSpr054_ClimbingNetDoor_Status08:	%ROUTINE_RT01_SMW_NorSpr054_ClimbingNetDoor_Status08(NULLROM)			; $03C000
ROUTINE_RT01_SMW_CheckIfBabyYoshiCanEatNormalSprite:	%ROUTINE_RT01_SMW_CheckIfBabyYoshiCanEatNormalSprite(NULLROM)			; $03C023
ROUTINE_RT07_SMW_GameMode14_InLevel:	%ROUTINE_RT07_SMW_GameMode14_InLevel(NULLROM)					; $03C0B2
ROUTINE_RT04_SMW_NorSpr035_Yoshi_Status08:	%ROUTINE_RT04_SMW_NorSpr035_Yoshi_Status08(NULLROM)				; $03C176
ROUTINE_RT01_SMW_HandleNormalSpriteLevelCollision:	%ROUTINE_RT01_SMW_HandleNormalSpriteLevelCollision(NULLROM)			; $03C1C6
ROUTINE_RT01_SMW_NorSpr0C8_LightSwitch_Status08:	%ROUTINE_RT01_SMW_NorSpr0C8_LightSwitch_Status08(NULLROM)			; $03C1EC
ROUTINE_RT03_SMW_NorSprXXX_LineGuidedSprites_Status08:	%ROUTINE_RT03_SMW_NorSprXXX_LineGuidedSprites_Status08(NULLROM)		; $03C25B
ROUTINE_SMW_TriggerHidden1up:	%ROUTINE_SMW_TriggerHidden1up(NULLROM)						; $03C2D9
ROUTINE_RT01_SMW_NorSpr0C7_InvisibleMushroom_Status08:	%ROUTINE_RT01_SMW_NorSpr0C7_InvisibleMushroom_Status08(NULLROM)		; $03C30F
ROUTINE_RT01_SMW_NorSpr051_Ninji_Status08:	%ROUTINE_RT01_SMW_NorSpr051_Ninji_Status08(NULLROM)				; $03C348
ROUTINE_RT01_SMW_NorSpr030_ThrowingDryBones_Status08:	%ROUTINE_RT01_SMW_NorSpr030_ThrowingDryBones_Status08(NULLROM)			; $03C390
ROUTINE_RT01_SMW_NorSpr0C6_Spotlight_Status08:	%ROUTINE_RT01_SMW_NorSpr0C6_Spotlight_Status08(NULLROM)			; $03C48F
ROUTINE_RT03_SMW_NorSpr07A_Fireworks_Status08:	%ROUTINE_RT03_SMW_NorSpr07A_Fireworks_Status08(NULLROM)			; $03C626
ROUTINE_RT02_SMW_NorSpr07C_PrincessPeach_Status08:	%ROUTINE_RT02_SMW_NorSpr07C_PrincessPeach_Status08(NULLROM)			; $03C776
ROUTINE_RT02_SMW_NorSpr07A_Fireworks_Status08:	%ROUTINE_RT02_SMW_NorSpr07A_Fireworks_Status08(NULLROM)			; $03C77A
ROUTINE_RT03_SMW_NorSpr07C_PrincessPeach_Status08:	%ROUTINE_RT03_SMW_NorSpr07C_PrincessPeach_Status08(NULLROM)			; $03C78A
ROUTINE_RT01_SMW_NorSpr07A_Fireworks_Status08:	%ROUTINE_RT01_SMW_NorSpr07A_Fireworks_Status08(NULLROM)			; $03C816
ROUTINE_SMW_SpawnFootball:	%ROUTINE_SMW_SpawnFootball(NULLROM)						; $03CBAD
ROUTINE_RT01_SMW_NorSpr029_KoopaKid_Status08_WendyLemmy:	%ROUTINE_RT01_SMW_NorSpr029_KoopaKid_Status08_WendyLemmy(NULLROM)		; $03CC09
ROUTINE_RT04_SMW_NorSpr07C_PrincessPeach_Status08:	%ROUTINE_RT04_SMW_NorSpr07C_PrincessPeach_Status08(NULLROM)			; $03D524
INLINEDATATABLE_RT13_SMW_EmptySpace:	%INLINEDATATABLE_RT13_SMW_EmptySpace(NULLROM)					; $03D6AC
ROUTINE_RT02_SMW_NorSpr0A9_Reznor_Status08:	%ROUTINE_RT02_SMW_NorSpr0A9_Reznor_Status08(NULLROM)				; $03D700
ROUTINE_RT04_SMW_GameMode12_PrepareLevel:	%ROUTINE_RT04_SMW_GameMode12_PrepareLevel(NULLROM)				; $03D7EC
ROUTINE_SMW_InitializeMode7TilemapsAndPalettes:	%ROUTINE_SMW_InitializeMode7TilemapsAndPalettes(NULLROM)			; $03D9DE
ROUTINE_SMW_UpdateMode7SpriteAnimations:	%ROUTINE_SMW_UpdateMode7SpriteAnimations(NULLROM)				; $03DEBB
ROUTINE_RT06_SMW_NorSpr0A0_ActivateBowserBattle_Status08:	%ROUTINE_RT06_SMW_NorSpr0A0_ActivateBowserBattle_Status08(NULLROM)		; $03DFC4
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
ROUTINE_RT02_SMW_UploadPlayerGFX:	%ROUTINE_RT02_SMW_UploadPlayerGFX(NULLROM)					; N/A
endif
INLINEDATATABLE_RT14_SMW_EmptySpace:	%INLINEDATATABLE_RT14_SMW_EmptySpace(NULLROM)					; $03E05C
ROUTINE_RT01_SMW_HandleSPCUploads:	%ROUTINE_RT01_SMW_HandleSPCUploads(NULLROM)					; $03E400
INLINEDATATABLE_RT15_SMW_EmptySpace:	%INLINEDATATABLE_RT15_SMW_EmptySpace(NULLROM)					; $03FDE0
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank04Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_SMW_OverworldTileAnimations:	%ROUTINE_SMW_OverworldTileAnimations(NULLROM)					; $048000
ROUTINE_RT01_SMW_GameMode0E_ShowOverworld:	%ROUTINE_RT01_SMW_GameMode0E_ShowOverworld(NULLROM)				; $04819F
ROUTINE_SMW_HandleOverworldStarPipeWarp:	%ROUTINE_SMW_HandleOverworldStarPipeWarp(NULLROM)				; $048431
ROUTINE_SMW_HandleCurrentOverworldProcess:	%ROUTINE_SMW_HandleCurrentOverworldProcess(NULLROM)				; $048576
ROUTINE_SMW_DrawOverworldBorderPlayer:	%ROUTINE_SMW_DrawOverworldBorderPlayer(NULLROM)				; $0485A4
ROUTINE_SMW_DrawOverworldPlayer:	%ROUTINE_SMW_DrawOverworldPlayer(NULLROM)					; $04862E
ROUTINE_RT01_SMW_GameMode0C_LoadOverworld:	%ROUTINE_RT01_SMW_GameMode0C_LoadOverworld(NULLROM)				; $048D74
ROUTINE_SMW_OverworldProcess00_OverworldEntryInitialization:	%ROUTINE_SMW_OverworldProcess00_OverworldEntryInitialization(NULLROM)		; $048EF1
ROUTINE_SMW_OverworldProcess02_HandleLevelBeaten:	%ROUTINE_SMW_OverworldProcess02_HandleLevelBeaten(NULLROM)			; $048F7F
ROUTINE_SMW_UpdateSaveBuffer:	%ROUTINE_SMW_UpdateSaveBuffer(NULLROM)						; $049037
DATATABLE_RT00_SMW_SharedOverworldPathTables:	%DATATABLE_RT00_SMW_SharedOverworldPathTables(NULLROM)				; $049058
ROUTINE_SMW_OverworldProcess03_StandingStill:	%ROUTINE_SMW_OverworldProcess03_StandingStill(NULLROM)				; $049120
ROUTINE_RT01_SMW_OverworldProcess04_PlayerIsMoving:	%ROUTINE_RT01_SMW_OverworldProcess04_PlayerIsMoving(NULLROM)			; $049414
DATATABLE_RT01_SMW_BitTable:	%DATATABLE_RT01_SMW_BitTable(NULLROM)						; $04941E
ROUTINE_RT00_SMW_OverworldProcess04_PlayerIsMoving:	%ROUTINE_RT00_SMW_OverworldProcess04_PlayerIsMoving(NULLROM)			; $049426
ROUTINE_SMW_CalculateOverworldPlayerPosition:	%ROUTINE_SMW_CalculateOverworldPlayerPosition(NULLROM)				; $049885
ROUTINE_SMW_OverworldProcess0C_IntroMarch:	%ROUTINE_SMW_OverworldProcess0C_IntroMarch(NULLROM)				; $0498C6
ROUTINE_SMW_UnlockOverworldPathBasedOnExit:	%ROUTINE_SMW_UnlockOverworldPathBasedOnExit(NULLROM)				; $0498FB
ROUTINE_SMW_HandleOverworldPathExits:	%ROUTINE_SMW_HandleOverworldPathExits(NULLROM)					; $049964
ROUTINE_SMW_UpdateLevelName:	%ROUTINE_SMW_UpdateLevelName(NULLROM)						; $049AC5
ROUTINE_SMW_OverworldProcess05_CheckForPlayerSwitch:	%ROUTINE_SMW_OverworldProcess05_CheckForPlayerSwitch(NULLROM)			; $049D9A
ROUTINE_SMW_OverworldProcess07_SwitchingPlayers:	%ROUTINE_SMW_OverworldProcess07_SwitchingPlayers(NULLROM)			; $049DD1
ROUTINE_SMW_OverworldProcess06_PlayerSwitchFadeOut:	%ROUTINE_SMW_OverworldProcess06_PlayerSwitchFadeOut(NULLROM)			; $049E22
ROUTINE_SMW_OverworldProcess09_FinishedSwitchingPlayers:	%ROUTINE_SMW_OverworldProcess09_FinishedSwitchingPlayers(NULLROM)		; $049E4C
ROUTINE_SMW_OverworldProcess0B_StarWarpAnimation:	%ROUTINE_SMW_OverworldProcess0B_StarWarpAnimation(NULLROM)			; $049E52
ROUTINE_RT01_SMW_HexToDec:	%ROUTINE_RT01_SMW_HexToDec(NULLROM)						; $049E9B
DATATABLE_RT01_SMW_SharedOverworldPathTables:	%DATATABLE_RT01_SMW_SharedOverworldPathTables(NULLROM)				; $049EA7
DATATABLE_SMW_LevelNames:	%DATATABLE_SMW_LevelNames(NULLROM)						; $04A0FC
INLINEDATATABLE_RT16_SMW_EmptySpace:	%INLINEDATATABLE_RT16_SMW_EmptySpace(NULLROM)					; $04A1B6
ROUTINE_RT02_SMW_GameMode0C_LoadOverworld:	%ROUTINE_RT02_SMW_GameMode0C_LoadOverworld(NULLROM)				; $04A400
ROUTINE_RT01_SMW_LoadOverworldLayer2AndEventsTilemaps:	%ROUTINE_RT01_SMW_LoadOverworldLayer2AndEventsTilemaps(NULLROM)		; $04A533
ROUTINE_RT01_SMW_LoadOverworldLayer1AndEvents:	%ROUTINE_RT01_SMW_LoadOverworldLayer1AndEvents(NULLROM)			; $04D678
ROUTINE_RT00_SMW_InitializeOverworldTilemaps:	%ROUTINE_RT00_SMW_InitializeOverworldTilemaps(NULLROM)				; $04D6E9
ROUTINE_RT02_SMW_LoadOverworldLayer1AndEvents:	%ROUTINE_RT02_SMW_LoadOverworldLayer1AndEvents(NULLROM)			; $04D770
DATATABLE_RT00_SMW_ChangingLayer1OverworldTiles:	%DATATABLE_RT00_SMW_ChangingLayer1OverworldTiles(NULLROM)			; $04D85D
ROUTINE_RT01_SMW_OverworldEventProcess01_DestroyTileAnimation:	%ROUTINE_RT01_SMW_OverworldEventProcess01_DestroyTileAnimation(NULLROM)	; $04D93D
DATATABLE_RT01_SMW_ChangingLayer1OverworldTiles:	%DATATABLE_RT01_SMW_ChangingLayer1OverworldTiles(NULLROM)			; $04DA1D
ROUTINE_RT03_SMW_LoadOverworldLayer1AndEvents:	%ROUTINE_RT03_SMW_LoadOverworldLayer1AndEvents(NULLROM)			; $04DA49
ROUTINE_RT00_SMW_LoadOverworldLayer2AndEventsTilemaps:	%ROUTINE_RT00_SMW_LoadOverworldLayer2AndEventsTilemaps(NULLROM)		; $04DAAD
ROUTINE_RT01_SMW_InitializeOverworldTilemaps:	%ROUTINE_RT01_SMW_InitializeOverworldTilemaps(NULLROM)				; $04DAB3
ROUTINE_SMW_BufferOverworldLayer2Tilemap:	%ROUTINE_SMW_BufferOverworldLayer2Tilemap(NULLROM)				; $04DABA
ROUTINE_SMW_OverworldProcess0A_SwitchBetweenSubmaps:	%ROUTINE_SMW_OverworldProcess0A_SwitchBetweenSubmaps(NULLROM)			; $04DAEF
ROUTINE_SMW_SubmapSwitchProcess00_InitializeWindowHDMA:	%ROUTINE_SMW_SubmapSwitchProcess00_InitializeWindowHDMA(NULLROM)		; $04DB08
ROUTINE_SMW_SubmapSwitchProcess05_UpdatePalette:	%ROUTINE_SMW_SubmapSwitchProcess05_UpdatePalette(NULLROM)			; $04DB9D
ROUTINE_SMW_SubmapSwitchProcess07_EndSubmapSwitch:	%ROUTINE_SMW_SubmapSwitchProcess07_EndSubmapSwitch(NULLROM)			; $04DBC8
ROUTINE_RT00_SMW_LoadOverworldLayer1AndEvents:	%ROUTINE_RT00_SMW_LoadOverworldLayer1AndEvents(NULLROM)			; $04DC02
ROUTINE_RT02_SMW_LoadOverworldLayer2AndEventsTilemaps:	%ROUTINE_RT02_SMW_LoadOverworldLayer2AndEventsTilemaps(NULLROM)		; $04DC6A
ROUTINE_SMW_SubmapSwitchProcess01_UpdateLayer1:	%ROUTINE_SMW_SubmapSwitchProcess01_UpdateLayer1(NULLROM)			; $04DCAE
ROUTINE_RT03_SMW_LoadOverworldLayer2AndEventsTilemaps:	%ROUTINE_RT03_SMW_LoadOverworldLayer2AndEventsTilemaps(NULLROM)		; $04DD40
DATATABLE_SMW_Layer2EventData:	%DATATABLE_SMW_Layer2EventData(NULLROM)					; $04DD8D
DATATABLE_RT02_SMW_BitTable:	%DATATABLE_RT02_SMW_BitTable(NULLROM)						; $04E44B
ROUTINE_RT04_SMW_LoadOverworldLayer2AndEventsTilemaps:	%ROUTINE_RT04_SMW_LoadOverworldLayer2AndEventsTilemaps(NULLROM)		; $04E453
ROUTINE_SMW_BufferEventTileToLayer2Tilemap:	%ROUTINE_SMW_BufferEventTileToLayer2Tilemap(NULLROM)				; $04E496
ROUTINE_SMW_OverworldProcess01_ActivateEvents:	%ROUTINE_SMW_OverworldProcess01_ActivateEvents(NULLROM)			; $04E570
ROUTINE_RT02_SMW_OverworldEventProcess01_DestroyTileAnimation:	%ROUTINE_RT02_SMW_OverworldEventProcess01_DestroyTileAnimation(NULLROM)	; $04E587
ROUTINE_RT01_SMW_CheckIfDestroyTileEventIsActive:	%ROUTINE_RT01_SMW_CheckIfDestroyTileEventIsActive(NULLROM)			; $04E5A7
ROUTINE_SMW_OverworldEventProcess00_CheckIfEventShouldRun:	%ROUTINE_SMW_OverworldEventProcess00_CheckIfEventShouldRun(NULLROM)		; $04E5E6
ROUTINE_RT00_SMW_CheckIfDestroyTileEventIsActive:	%ROUTINE_RT00_SMW_CheckIfDestroyTileEventIsActive(NULLROM)			; $04E677
ROUTINE_SMW_OverworldEventProcess02_SetEventTileIndexes:	%ROUTINE_SMW_OverworldEventProcess02_SetEventTileIndexes(NULLROM)		; $04E6D3
ROUTINE_RT00_SMW_OverworldEventProcess03_GetLayer2Tile:	%ROUTINE_RT00_SMW_OverworldEventProcess03_GetLayer2Tile(NULLROM)		; $04E6F9
ROUTINE_SMW_BufferEventTileToStripeImageTable:	%ROUTINE_SMW_BufferEventTileToStripeImageTable(NULLROM)			; $04E76C
ROUTINE_SMW_OverworldEventProcess07_SilentEventsAndEndOfEvent:	%ROUTINE_SMW_OverworldEventProcess07_SilentEventsAndEndOfEvent(NULLROM)	; $04E8E4
ROUTINE_RT01_SMW_OverworldEventProcess03_GetLayer2Tile:	%ROUTINE_RT01_SMW_OverworldEventProcess03_GetLayer2Tile(NULLROM)		; $04EA62
ROUTINE_RT00_SMW_OverworldEventProcess04_FadeInLayer2Tile:	%ROUTINE_RT00_SMW_OverworldEventProcess04_FadeInLayer2Tile(NULLROM)		; $04EAA4
ROUTINE_RT00_SMW_OverworldEventProcess01_DestroyTileAnimation:	%ROUTINE_RT00_SMW_OverworldEventProcess01_DestroyTileAnimation(NULLROM)	; $04EB56
ROUTINE_SMW_GetXAndYDispOfCurrentEventTileSprite:	%ROUTINE_SMW_GetXAndYDispOfCurrentEventTileSprite(NULLROM)			; $04EC67
ROUTINE_SMW_OverworldEventProcess05_GetLayer1Tile:	%ROUTINE_SMW_OverworldEventProcess05_GetLayer1Tile(NULLROM)			; $04EC78
ROUTINE_RT03_SMW_OverworldEventProcess01_DestroyTileAnimation:	%ROUTINE_RT03_SMW_OverworldEventProcess01_DestroyTileAnimation(NULLROM)	; $04ECD3
ROUTINE_RT01_SMW_OverworldEventProcess04_FadeInLayer2Tile:	%ROUTINE_RT01_SMW_OverworldEventProcess04_FadeInLayer2Tile(NULLROM)		; $04EE30
ROUTINE_RT04_SMW_OverworldEventProcess01_DestroyTileAnimation:	%ROUTINE_RT04_SMW_OverworldEventProcess01_DestroyTileAnimation(NULLROM)	; $04EE7A
INLINEDATATABLE_RT17_SMW_EmptySpace:	%INLINEDATATABLE_RT17_SMW_EmptySpace(NULLROM)					; $04EF3E
DATATABLE_SMW_QuitToTitleScreenText:	%DATATABLE_SMW_QuitToTitleScreenText(NULLROM)					; N/A
ROUTINE_SMW_DrawFlyingSwitchBlocks:	%ROUTINE_SMW_DrawFlyingSwitchBlocks(NULLROM)					; $04F280
ROUTINE_SMW_DisplayOverworldPrompt:	%ROUTINE_SMW_DisplayOverworldPrompt(NULLROM)					; $04F3E5
ROUTINE_RT00_SMW_OverworldPrompt07_DisplayingSavePrompt:	%ROUTINE_RT00_SMW_OverworldPrompt07_DisplayingSavePrompt(NULLROM)		; $04F3FA
ROUTINE_RT00_SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt:	%ROUTINE_RT00_SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt(NULLROM)	; N/A
ROUTINE_SMW_OverworldPrompt01_InitializeOverworldPrompt:	%ROUTINE_SMW_OverworldPrompt01_InitializeOverworldPrompt(NULLROM)		; $04F3FF
ROUTINE_SMW_OverworldPrompt02_ExpandPromptWindow:	%ROUTINE_SMW_OverworldPrompt02_ExpandPromptWindow(NULLROM)			; $04F411
DATATABLE_SMW_LifeExchangeText:	%DATATABLE_SMW_LifeExchangeText(NULLROM)					; $04F4B2
ROUTINE_RT00_SMW_OverworldPrompt03_OverworldLifeExchanger:	%ROUTINE_RT00_SMW_OverworldPrompt03_OverworldLifeExchanger(NULLROM)		; $04F503
ROUTINE_SMW_LoadOverworldSprites:	%ROUTINE_SMW_LoadOverworldSprites(NULLROM)					; $04F625
ROUTINE_SMW_OverworldLightningAndRandomCloudSpawning:	%ROUTINE_SMW_OverworldLightningAndRandomCloudSpawning(NULLROM)			; $04F6D0
ROUTINE_RT01_SMW_CheckIfXIsAllowedOnYSubmap:	%ROUTINE_RT01_SMW_CheckIfXIsAllowedOnYSubmap(NULLROM)				; $04F829
ROUTINE_RT01_SMW_SetOverworldSpriteFrameIndex:	%ROUTINE_RT01_SMW_SetOverworldSpriteFrameIndex(NULLROM)			; $04F833
DATATABLE_SMW_OverworldSpriteOAMIndexes:	%DATATABLE_SMW_OverworldSpriteOAMIndexes(NULLROM)				; $04F843
ROUTINE_SMW_ProcessOverworldSprites:	%ROUTINE_SMW_ProcessOverworldSprites(NULLROM)					; $04F853
ROUTINE_RT00_SMW_CheckIfXIsAllowedOnYSubmap:	%ROUTINE_RT00_SMW_CheckIfXIsAllowedOnYSubmap(NULLROM)				; $04F875
ROUTINE_RT00_SMW_OWSpr01_Lakitu:	%ROUTINE_RT00_SMW_OWSpr01_Lakitu(NULLROM)					; $04F8A6
ROUTINE_SMW_OWSpr02_BlueBird:	%ROUTINE_SMW_OWSpr02_BlueBird(NULLROM)						; $04F9A8
ROUTINE_SMW_OWSpr03_CheepCheep:	%ROUTINE_SMW_OWSpr03_CheepCheep(NULLROM)					; $04FA2E
ROUTINE_SMW_OWSpr04_PiranhaPlant:	%ROUTINE_SMW_OWSpr04_PiranhaPlant(NULLROM)					; $04FAF1
ROUTINE_SMW_OWSpr05_Cloud:	%ROUTINE_SMW_OWSpr05_Cloud(NULLROM)						; $04FB37
ROUTINE_SMW_OWSpr06_KoopaKid:	%ROUTINE_SMW_OWSpr06_KoopaKid(NULLROM)						; $04FB85
ROUTINE_SMW_OWSpr07_Smoke:	%ROUTINE_SMW_OWSpr07_Smoke(NULLROM)						; $04FC1E
ROUTINE_SMW_OWSpr08_BowserSign:	%ROUTINE_SMW_OWSpr08_BowserSign(NULLROM)					; $04FCE1
ROUTINE_SMW_OWSpr09_Bowser:	%ROUTINE_SMW_OWSpr09_Bowser(NULLROM)						; $04FD0A
ROUTINE_SMW_OWSpr0A_Boo:	%ROUTINE_SMW_OWSpr0A_Boo(NULLROM)						; $04FD70
ROUTINE_SMW_DrawOverworldSpriteShadow:	%ROUTINE_SMW_DrawOverworldSpriteShadow(NULLROM)				; $04FDE0
ROUTINE_SMW_AddZPositionToTempYPos:	%ROUTINE_SMW_AddZPositionToTempYPos(NULLROM)					; $04FE4E
ROUTINE_RT00_SMW_SetOverworldSpriteFrameIndex:	%ROUTINE_RT00_SMW_SetOverworldSpriteFrameIndex(NULLROM)			; $04FE5B
ROUTINE_SMW_GetOverworldSpriteOnScreenPosition:	%ROUTINE_SMW_GetOverworldSpriteOnScreenPosition(NULLROM)			; $04FE62
ROUTINE_SMW_UpdateOverworldSpritePosition:	%ROUTINE_SMW_UpdateOverworldSpritePosition(NULLROM)				; $04FE90
ROUTINE_SMW_CheckForPlayerToOverworldSpriteCollision:	%ROUTINE_SMW_CheckForPlayerToOverworldSpriteCollision(NULLROM)			; $04FED7
ROUTINE_RT01_SMW_OWSpr01_Lakitu:	%ROUTINE_RT01_SMW_OWSpr01_Lakitu(NULLROM)					; $04FF2E
INLINEDATATABLE_RT18_SMW_EmptySpace:	%INLINEDATATABLE_RT18_SMW_EmptySpace(NULLROM)					; $04FFB1
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank05Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_RT01_SMW_InitializeMap16Pointers:	%ROUTINE_RT01_SMW_InitializeMap16Pointers(NULLROM)				; $058000
ROUTINE_RT00_SMW_LoadSublevel:	%ROUTINE_RT00_SMW_LoadSublevel(NULLROM)					; $05801E
ROUTINE_SMW_InitializeLevelLayer1And2Tilemaps:	%ROUTINE_SMW_InitializeLevelLayer1And2Tilemaps(NULLROM)			; $05809E
ROUTINE_SMW_BufferBGTilemap:	%ROUTINE_SMW_BufferBGTilemap(NULLROM)						; $058126
ROUTINE_RT00_SMW_InitializeMap16Pointers:	%ROUTINE_RT00_SMW_InitializeMap16Pointers(NULLROM)				; $0581BB
ROUTINE_SMW_InitializeLevelData:	%ROUTINE_SMW_InitializeLevelData(NULLROM)					; $0582C8
ROUTINE_SMW_BeginLoadingLevelData:	%ROUTINE_SMW_BeginLoadingLevelData(NULLROM)					; $0583AC
ROUTINE_SMW_LoadLevelHeader:	%ROUTINE_SMW_LoadLevelHeader(NULLROM)						; $058417
ROUTINE_SMW_LoadLevelDataObject:	%ROUTINE_SMW_LoadLevelDataObject(NULLROM)					; $0585D8
ROUTINE_SMW_CheckIfLevelTilemapsNeedScrollUpdate:	%ROUTINE_SMW_CheckIfLevelTilemapsNeedScrollUpdate(NULLROM)			; $0586F1
ROUTINE_SMW_CalculateRowOrColumnOfTilemapToUpdate:	%ROUTINE_SMW_CalculateRowOrColumnOfTilemapToUpdate(NULLROM)			; $058776
ROUTINE_RT00_SMW_BufferScrollingTiles:	%ROUTINE_RT00_SMW_BufferScrollingTiles(NULLROM)				; $05881A
DATATABLE_RT04_SMW_BitTable:	%DATATABLE_RT04_SMW_BitTable(NULLROM)						; $0589BE
ROUTINE_RT01_SMW_BufferScrollingTiles:	%ROUTINE_RT01_SMW_BufferScrollingTiles(NULLROM)				; $0589CE
INLINEDATATABLE_RT19_SMW_EmptySpace:	%INLINEDATATABLE_RT19_SMW_EmptySpace(NULLROM)					; $058E19
ROUTINE_RT01_SMW_InitializeLevelLayer3:	%ROUTINE_RT01_SMW_InitializeLevelLayer3(NULLROM)				; $059000
DATATABLE_RT00_SMW_Backgrounds:	%DATATABLE_RT00_SMW_Backgrounds(NULLROM)					; $059087
INLINEDATATABLE_RT20_SMW_EmptySpace:	%INLINEDATATABLE_RT20_SMW_EmptySpace(NULLROM)					; $05A562
ROUTINE_SMW_DisplayMessage:	%ROUTINE_SMW_DisplayMessage(NULLROM)						; $05A580
ROUTINE_SMW_GiveCoins:	%ROUTINE_SMW_GiveCoins(NULLROM)						; $05B329
DATATABLE_RT03_SMW_BitTable:	%DATATABLE_RT03_SMW_BitTable(NULLROM)						; $05B35B
ROUTINE_SMW_UnusedOverworldEventPassedCheck:	%ROUTINE_SMW_UnusedOverworldEventPassedCheck(NULLROM)				; $05B363
ROUTINE_RT01_SMW_GameMode04_PrepareTitleScreen:	%ROUTINE_RT01_SMW_GameMode04_PrepareTitleScreen(NULLROM)			; $05B375
DATATABLE_SMW_FileSelectText:	%DATATABLE_SMW_FileSelectText(NULLROM)						; $05B6FE
DATATABLE_SMW_XPlayerGameText:	%DATATABLE_SMW_XPlayerGameText(NULLROM)					; $05B872
DATATABLE_SMW_SaveMenuText:	%DATATABLE_SMW_SaveMenuText(NULLROM)						; $05B8C7
DATATABLE_SMW_ContinueEndText:	%DATATABLE_SMW_ContinueEndText(NULLROM)					; $05B91C
ROUTINE_SMW_LevelTileAnimations:	%ROUTINE_SMW_LevelTileAnimations(NULLROM)					; $05B93B
INLINEDATATABLE_RT21_SMW_EmptySpace:	%INLINEDATATABLE_RT21_SMW_EmptySpace(NULLROM)					; $05BBA6
ROUTINE_SMW_HandleScrollSpriteAndLayer3Scrolling:	%ROUTINE_SMW_HandleScrollSpriteAndLayer3Scrolling(NULLROM)			; $05BC00
ROUTINE_RT01_SMW_ProcessScrollSprites:	%ROUTINE_RT01_SMW_ProcessScrollSprites(NULLROM)				; $05BC49
ROUTINE_SMW_ScrollSecondInteractiveLayer:	%ROUTINE_SMW_ScrollSecondInteractiveLayer(NULLROM)				; $05BC4A
ROUTINE_RT00_SMW_ProcessScrollSprites:	%ROUTINE_RT00_SMW_ProcessScrollSprites(NULLROM)				; $05BC76
ROUTINE_SMW_InitializeScrollSprites:	%ROUTINE_SMW_InitializeScrollSprites(NULLROM)					; $05BCD6
ROUTINE_RT00_SMW_NorSpr0E7_SpecialAutoScroll:	%ROUTINE_RT00_SMW_NorSpr0E7_SpecialAutoScroll(NULLROM)				; $05BD36
ROUTINE_RT00_SMW_MostlyUnusedScrollSpriteRoutine:	%ROUTINE_RT00_SMW_MostlyUnusedScrollSpriteRoutine(NULLROM)			; $05BD7B
ROUTINE_RT00_SMW_NorSpr0EB_UnusedSprite:	%ROUTINE_RT00_SMW_NorSpr0EB_UnusedSprite(NULLROM)				; $05BDDD
ROUTINE_RT00_SMW_NorSpr0F1_UnusedSprite:	%ROUTINE_RT00_SMW_NorSpr0F1_UnusedSprite(NULLROM)				; $05BE3A
ROUTINE_RT05_SMW_GameMode12_PrepareLevel:	%ROUTINE_RT05_SMW_GameMode12_PrepareLevel(NULLROM)				; $05BE8A
ROUTINE_RT00_SMW_NorSpr0EF_Layer2ScrollSOrL:	%ROUTINE_RT00_SMW_NorSpr0EF_Layer2ScrollSOrL(NULLROM)				; $05BEA6
ROUTINE_RT00_SMW_NorSpr0EA_Layer2Scroll:	%ROUTINE_RT00_SMW_NorSpr0EA_Layer2Scroll(NULLROM)				; $05BF0A
ROUTINE_RT00_SMW_NorSpr0E9_Layer2Smash:	%ROUTINE_RT00_SMW_NorSpr0E9_Layer2Smash(NULLROM)				; $05BF6A
ROUTINE_SMW_NorSpr0ED_Layer2Falls:	%ROUTINE_SMW_NorSpr0ED_Layer2Falls(NULLROM)					; $05BF97
ROUTINE_SMW_NorSpr0EC_UnusedSprite:	%ROUTINE_SMW_NorSpr0EC_UnusedSprite(NULLROM)					; $05BFBA
ROUTINE_SMW_NorSpr0F2_Layer2OnOffControlled:	%ROUTINE_SMW_NorSpr0F2_Layer2OnOffControlled(NULLROM)				; $05BFF6
ROUTINE_SMW_NorSpr0F3_RegularAutoScroll:	%ROUTINE_SMW_NorSpr0F3_RegularAutoScroll(NULLROM)				; $05BFFD
ROUTINE_SMW_NorSpr0F4_FastBGScroll:	%ROUTINE_SMW_NorSpr0F4_FastBGScroll(NULLROM)					; $05C01A
ROUTINE_RT00_SMW_NorSpr0F5_Layer2ScrollWhenTouched:	%ROUTINE_RT00_SMW_NorSpr0F5_Layer2ScrollWhenTouched(NULLROM)			; $05C036
ROUTINE_RT00_SMW_Layer1SpecialScrolling01_VariableScroll:	%ROUTINE_RT00_SMW_Layer1SpecialScrolling01_VariableScroll(NULLROM)		; $05C04D
ROUTINE_SMW_Layer2SpecialScrolling01_VariableScroll:	%ROUTINE_SMW_Layer2SpecialScrolling01_VariableScroll(NULLROM)			; $05C198
ROUTINE_RT00_SMW_UnusedScrollSpriteRoutine:	%ROUTINE_RT00_SMW_UnusedScrollSpriteRoutine(NULLROM)				; $05C1AE
ROUTINE_RT00_SMW_Layer2SpecialScrolling04_Unused:	%ROUTINE_RT00_SMW_Layer2SpecialScrolling04_Unused(NULLROM)			; $05C283
ROUTINE_RT00_SMW_Layer2SpecialScrolling0A_Unused:	%ROUTINE_RT00_SMW_Layer2SpecialScrolling0A_Unused(NULLROM)			; $05C32E
ROUTINE_RT00_SMW_ScrollLayer3:	%ROUTINE_RT00_SMW_ScrollLayer3(NULLROM)					; $05C406
ROUTINE_SMW_UpdateLayerPositionWithScrollSprite:	%ROUTINE_SMW_UpdateLayerPositionWithScrollSprite(NULLROM)			; $05C4F9
ROUTINE_SMW_Layer2SpecialScrolling08_Layer2ScrollSOrL:	%ROUTINE_SMW_Layer2SpecialScrolling08_Layer2ScrollSOrL(NULLROM)		; $05C51F
ROUTINE_SMW_Layer2SpecialScrolling03_Layer2Scroll:	%ROUTINE_SMW_Layer2SpecialScrolling03_Layer2Scroll(NULLROM)			; $05C5BB
ROUTINE_SMW_Layer2SpecialScrolling06_Unused:	%ROUTINE_SMW_Layer2SpecialScrolling06_Unused(NULLROM)				; $05C659
ROUTINE_SMW_Layer1SpecialScrolling05_Unused:	%ROUTINE_SMW_Layer1SpecialScrolling05_Unused(NULLROM)				; $05C69E
ROUTINE_SMW_Layer2SpecialScrolling0B_Layer2OnOffControlled:	%ROUTINE_SMW_Layer2SpecialScrolling0B_Layer2OnOffControlled(NULLROM)		; $05C71B
ROUTINE_SMW_Layer1SpecialScrolling0C_RegularAutoScroll:	%ROUTINE_SMW_Layer1SpecialScrolling0C_RegularAutoScroll(NULLROM)		; $05C787
ROUTINE_SMW_Layer2SpecialScrolling0D_FastBGScroll:	%ROUTINE_SMW_Layer2SpecialScrolling0D_FastBGScroll(NULLROM)			; $05C7BC
ROUTINE_RT01_SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched:	%ROUTINE_RT01_SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched(NULLROM)	; $05C7F0
ROUTINE_RT01_SMW_NorSpr0F5_Layer2ScrollWhenTouched:	%ROUTINE_RT01_SMW_NorSpr0F5_Layer2ScrollWhenTouched(NULLROM)			; $05C808
ROUTINE_RT00_SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched:	%ROUTINE_RT00_SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched(NULLROM)	; $05C80E
ROUTINE_RT01_SMW_Layer2SpecialScrolling02_Layer2Smash:	%ROUTINE_RT01_SMW_Layer2SpecialScrolling02_Layer2Smash(NULLROM)		; $05C880
ROUTINE_RT01_SMW_NorSpr0E9_Layer2Smash:	%ROUTINE_RT01_SMW_NorSpr0E9_Layer2Smash(NULLROM)				; $05C94F
ROUTINE_RT00_SMW_Layer2SpecialScrolling02_Layer2Smash:	%ROUTINE_RT00_SMW_Layer2SpecialScrolling02_Layer2Smash(NULLROM)		; $05C955
ROUTINE_RT01_SMW_NorSpr0E7_SpecialAutoScroll:	%ROUTINE_RT01_SMW_NorSpr0E7_SpecialAutoScroll(NULLROM)				; $05C9D1
ROUTINE_RT01_SMW_MostlyUnusedScrollSpriteRoutine:	%ROUTINE_RT01_SMW_MostlyUnusedScrollSpriteRoutine(NULLROM)			; $05C9E5
ROUTINE_RT01_SMW_NorSpr0EB_UnusedSprite:	%ROUTINE_RT01_SMW_NorSpr0EB_UnusedSprite(NULLROM)				; $05CA08
ROUTINE_RT01_SMW_NorSpr0F1_UnusedSprite:	%ROUTINE_RT01_SMW_NorSpr0F1_UnusedSprite(NULLROM)				; $05CA16
ROUTINE_RT01_SMW_NorSpr0EF_Layer2ScrollSOrL:	%ROUTINE_RT01_SMW_NorSpr0EF_Layer2ScrollSOrL(NULLROM)				; $05CA3E
ROUTINE_RT01_SMW_NorSpr0EA_Layer2Scroll:	%ROUTINE_RT01_SMW_NorSpr0EA_Layer2Scroll(NULLROM)				; $05CA48
ROUTINE_RT02_SMW_NorSpr0E7_SpecialAutoScroll:	%ROUTINE_RT02_SMW_NorSpr0E7_SpecialAutoScroll(NULLROM)				; $05CA61
ROUTINE_RT01_SMW_Layer1SpecialScrolling01_VariableScroll:	%ROUTINE_RT01_SMW_Layer1SpecialScrolling01_VariableScroll(NULLROM)		; $05CA6F
ROUTINE_RT01_SMW_UnusedScrollSpriteRoutine:	%ROUTINE_RT01_SMW_UnusedScrollSpriteRoutine(NULLROM)				; $05CB7B
ROUTINE_RT01_SMW_Layer2SpecialScrolling04_Unused:	%ROUTINE_RT01_SMW_Layer2SpecialScrolling04_Unused(NULLROM)			; $05CB9B
ROUTINE_RT01_SMW_Layer2SpecialScrolling0A_Unused:	%ROUTINE_RT01_SMW_Layer2SpecialScrolling0A_Unused(NULLROM)			; $05CBA3
ROUTINE_RT01_SMW_ScrollLayer3:	%ROUTINE_RT01_SMW_ScrollLayer3(NULLROM)					; $05CBBB
DATATABLE_RT00_SMW_SharedScrollSpriteTables:	%DATATABLE_RT00_SMW_SharedScrollSpriteTables(NULLROM)				; $05CBC3
ROUTINE_RT02_SMW_Layer2SpecialScrolling04_Unused:	%ROUTINE_RT02_SMW_Layer2SpecialScrolling04_Unused(NULLROM)			; $05CBE3
ROUTINE_RT02_SMW_Layer2SpecialScrolling0A_Unused:	%ROUTINE_RT02_SMW_Layer2SpecialScrolling0A_Unused(NULLROM)			; $05CBE5
ROUTINE_RT02_SMW_ScrollLayer3:	%ROUTINE_RT02_SMW_ScrollLayer3(NULLROM)					; $05CBEB
DATATABLE_RT01_SMW_SharedScrollSpriteTables:	%DATATABLE_RT01_SMW_SharedScrollSpriteTables(NULLROM)				; $05CBED
ROUTINE_SMW_ProcessLevelEndRoutines:	%ROUTINE_SMW_ProcessLevelEndRoutines(NULLROM)					; $05CBFF
DATATABLE_SMW_CourseClearText:	%DATATABLE_SMW_CourseClearText(NULLROM)					; $05CC16
ROUTINE_SMW_ShowCourseClearText:	%ROUTINE_SMW_ShowCourseClearText(NULLROM)					; $05CC66
DATATABLE_SMW_GotBonusStarsText:	%DATATABLE_SMW_GotBonusStarsText(NULLROM)					; $05CD3F
ROUTINE_SMW_DisplayCourseClearTextBonusStars:	%ROUTINE_SMW_DisplayCourseClearTextBonusStars(NULLROM)				; $05CD62
ROUTINE_SMW_AdjustTimeBonusDisplay:	%ROUTINE_SMW_AdjustTimeBonusDisplay(NULLROM)					; $05CDE9
ROUTINE_SMW_CalculateTimeBonusDigits:	%ROUTINE_SMW_CalculateTimeBonusDigits(NULLROM)					; $05CE3A
DATATABLE_SMW_NoBonusStarsText:	%DATATABLE_SMW_NoBonusStarsText(NULLROM)					; $05CEA3
ROUTINE_SMW_GiveTimeBonusAndBonusStars:	%ROUTINE_SMW_GiveTimeBonusAndBonusStars(NULLROM)				; $05CEC2
INLINEDATATABLE_RT22_SMW_EmptySpace:	%INLINEDATATABLE_RT22_SMW_EmptySpace(NULLROM)					; $05CFEA
DATATABLE_RT05_SMW_Map16Data:	%DATATABLE_RT05_SMW_Map16Data(NULLROM)						; $05D000
ROUTINE_RT00_SMW_SpecifySublevelToLoad:	%ROUTINE_RT00_SMW_SpecifySublevelToLoad(NULLROM)				; $05D608
INLINEDATATABLE_RT23_SMW_EmptySpace:	%INLINEDATATABLE_RT23_SMW_EmptySpace(NULLROM)					; $05D668
ROUTINE_RT01_SMW_SpecifySublevelToLoad:	%ROUTINE_RT01_SMW_SpecifySublevelToLoad(NULLROM)				; $05D708
ROUTINE_SMW_LoadOverworldLifeCounter:	%ROUTINE_SMW_LoadOverworldLifeCounter(NULLROM)					; $05DBC9
ROUTINE_RT02_SMW_HexToDec:	%ROUTINE_RT02_SMW_HexToDec(NULLROM)						; $05DC3A
INLINEDATATABLE_RT24_SMW_EmptySpace:	%INLINEDATATABLE_RT24_SMW_EmptySpace(NULLROM)					; $05DC46
ROUTINE_RT02_SMW_SpecifySublevelToLoad:	%ROUTINE_RT02_SMW_SpecifySublevelToLoad(NULLROM)				; $05E000
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank06Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
DATATABLE_RT00_SMW_LevelData:	%DATATABLE_RT00_SMW_LevelData(NULLROM)						; $068000
INLINEDATATABLE_RT25_SMW_EmptySpace:	%INLINEDATATABLE_RT25_SMW_EmptySpace(NULLROM)					; $06A5B9
DATATABLE_RT01_SMW_LevelData:	%DATATABLE_RT01_SMW_LevelData(NULLROM)						; $06A600
INLINEDATATABLE_RT26_SMW_EmptySpace:	%INLINEDATATABLE_RT26_SMW_EmptySpace(NULLROM)					; $06C964
DATATABLE_RT02_SMW_LevelData:	%DATATABLE_RT02_SMW_LevelData(NULLROM)						; $06D000
INLINEDATATABLE_RT27_SMW_EmptySpace:	%INLINEDATATABLE_RT27_SMW_EmptySpace(NULLROM)				; $06F539
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
ROUTINE_RT03_SMW_UploadPlayerGFX:	%ROUTINE_RT03_SMW_UploadPlayerGFX(NULLROM)					; N/A
INLINEDATATABLE_RT28_SMW_EmptySpace:	%INLINEDATATABLE_RT28_SMW_EmptySpace(NULLROM)					; N/A
endif
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank07Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
DATATABLE_RT03_SMW_LevelData:	%DATATABLE_RT03_SMW_LevelData(NULLROM)						; $078000
INLINEDATATABLE_RT29_SMW_EmptySpace:	%INLINEDATATABLE_RT29_SMW_EmptySpace(NULLROM)					; $0780ED
DATATABLE_RT04_SMW_LevelData:	%DATATABLE_RT04_SMW_LevelData(NULLROM)						; $078100
INLINEDATATABLE_RT30_SMW_EmptySpace:	%INLINEDATATABLE_RT30_SMW_EmptySpace(NULLROM)					; $07A179
DATATABLE_RT05_SMW_LevelData:	%DATATABLE_RT05_SMW_LevelData(NULLROM)						; $07A600
INLINEDATATABLE_RT31_SMW_EmptySpace:	%INLINEDATATABLE_RT31_SMW_EmptySpace(NULLROM)					; $07C226
DATATABLE_RT06_SMW_LevelData:	%DATATABLE_RT06_SMW_LevelData(NULLROM)						; $07C300
INLINEDATATABLE_RT32_SMW_EmptySpace:	%INLINEDATATABLE_RT32_SMW_EmptySpace(NULLROM)					; $07E76F
ROUTINE_RT02_SMW_ProcessNormalSprites:	%ROUTINE_RT02_SMW_ProcessNormalSprites(NULLROM)				; $07F000
ROUTINE_RT01_SMW_NorSpr07B_GoalTape_Status08:	%ROUTINE_RT01_SMW_NorSpr07B_GoalTape_Status08(NULLROM)				; $07F0C8
ROUTINE_SMW_InitializeNormalSpriteRAMTables:	%ROUTINE_SMW_InitializeNormalSpriteRAMTables(NULLROM)				; $07F26C
DATATABLE_SMW_CircleCoordinates:	%DATATABLE_SMW_CircleCoordinates(NULLROM)					; $07F7DB
DATATABLE_SMW_LineGuideSpeedTable:	%DATATABLE_SMW_LineGuideSpeedTable(NULLROM)					; $07F9DB
ROUTINE_SMW_SpawnSpinJumpStars:	%ROUTINE_SMW_SpawnSpinJumpStars(NULLROM)					; $07FC33
INLINEDATATABLE_RT33_SMW_EmptySpace:	%INLINEDATATABLE_RT33_SMW_EmptySpace(NULLROM)					; $07FC90
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank08Macros(StartBank, EndBank)
%BANK_START(<StartBank>)
DATATABLE_SMW_CompressedGraphics:	%DATATABLE_SMW_CompressedGraphics(NULLROM)					; $088000 (GFX32)
										; $08BFC0 (GFX33)
										; $08D9F9 (GFX00)
										; $08E231 (GFX01)
										; $08ECBB (GFX02)
										; $08F552 (GFX03)
										; $08FF7D (GFX04)
										; $098963 (GFX05)
										; $09936C (GFX06)
										; $099D10 (GFX07)
										; $09A657 (GFX08)
										; $09AFA1 (GFX09)
										; $09BA15 (GFX0A)
										; $09C39C (GFX0B)
										; $09CD63 (GFX0C)
										; $09D5D2 (GFX0D)
										; $09DDCB (GFX0E)
										; $09E6E5 (GFX0F)
										; $09EF1E (GFX10)
										; $09F7AF (GFX11)
										; $09FFBD (GFX12)
										; $0A8910 (GFX13)
										; $0A9348 (GFX14)
										; $0A9AE8 (GFX15)
										; $0AA374 (GFX16)
										; $0AA9B4 (GFX17)
										; $0AB2AD (GFX18)
										; $0ABBE4 (GFX19)
										; $0AC380 (GFX1A)
										; $0ACC66 (GFX1B)
										; $0AD47E (GFX1C)
										; $0ADC88 (GFX1D)
										; $0AE67F (GFX1E)
										; $0AEE43 (GFX1F)
										; $0AF6A1 (GFX20)
										; $0AFF65 (GFX21)
										; $0B88CD (GFX22)
										; $0B91CA (GFX23)
										; $0B9AE5 (GFX24)
										; $0BA3B5 (GFX25)
										; $0BAE21 (GFX26)
										; $0BB744 (GFX27)
										; $0BC06C (GFX28)
										; $0BC6A3 (GFX29)
										; $0BCB7B (GFX2A)
										; $0BD0F0 (GFX2B)
										; $0BD7B9 (GFX2C)
										; $0BE006 (GFX2D)
										; $0BE936 (GFX2E)
										; $0BF185 (GFX2F)
										; $0BF3BB (GFX30)
										; $0BF800 (GFX31)
INLINEDATATABLE_RT34_SMW_EmptySpace:	%INLINEDATATABLE_RT34_SMW_EmptySpace(NULLROM)					; $0BFD0D
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank0CMacros(StartBank, EndBank)
%BANK_START(<StartBank>)
DATATABLE_SMW_OverworldLayer2EventTilemap:	%DATATABLE_SMW_OverworldLayer2EventTilemap(NULLROM)				; $0C8000
INLINEDATATABLE_RT35_SMW_EmptySpace:	%INLINEDATATABLE_RT35_SMW_EmptySpace(NULLROM)					; $0C936A
ROUTINE_RT01_SMW_GameMode19_Cutscene:	%ROUTINE_RT01_SMW_GameMode19_Cutscene(NULLROM)					; $0C9380
ROUTINE_RT01_SMW_GameMode1B_EndingCinema:	%ROUTINE_RT01_SMW_GameMode1B_EndingCinema(NULLROM)				; $0C938D
ROUTINE_RT01_SMW_GameMode1D_LoadYoshisHouse:	%ROUTINE_RT01_SMW_GameMode1D_LoadYoshisHouse(NULLROM)				; $0C939A
ROUTINE_RT01_SMW_GameMode25_ShowEnemyRollcallScreen:	%ROUTINE_RT01_SMW_GameMode25_ShowEnemyRollcallScreen(NULLROM)			; $0C93A5
ROUTINE_RT01_SMW_GameMode21_DelayEnemyRollcall:	%ROUTINE_RT01_SMW_GameMode21_DelayEnemyRollcall(NULLROM)			; $0C93AD
ROUTINE_SMW_BufferCreditsBackgrounds:	%ROUTINE_SMW_BufferCreditsBackgrounds(NULLROM)					; $0C93C1
ROUTINE_SMW_UpdateCreditsBackground:	%ROUTINE_SMW_UpdateCreditsBackground(NULLROM)					; $0C9559
ROUTINE_RT02_SMW_GameMode1B_EndingCinema:	%ROUTINE_RT02_SMW_GameMode1B_EndingCinema(NULLROM)				; $0C95C7
ROUTINE_SMW_InitializeCreditsEggPositions:	%ROUTINE_SMW_InitializeCreditsEggPositions(NULLROM)				; $0CA043
ROUTINE_RT02_SMW_GameMode1D_LoadYoshisHouse:	%ROUTINE_RT02_SMW_GameMode1D_LoadYoshisHouse(NULLROM)				; $0CA08F
ROUTINE_SMW_DrawEndingThankYou:	%ROUTINE_SMW_DrawEndingThankYou(NULLROM)					; $0CA136
ROUTINE_RT03_SMW_GameMode1D_LoadYoshisHouse:	%ROUTINE_RT03_SMW_GameMode1D_LoadYoshisHouse(NULLROM)				; $0CA1D4
ROUTINE_SMW_WalkingIntoYoshisHouseDuringEnding:	%ROUTINE_SMW_WalkingIntoYoshisHouseDuringEnding(NULLROM)			; $0CA1ED
ROUTINE_SMW_ProcessCheeringYoshis:	%ROUTINE_SMW_ProcessCheeringYoshis(NULLROM)					; $0CA30D
ROUTINE_RT04_SMW_GameMode1D_LoadYoshisHouse:	%ROUTINE_RT04_SMW_GameMode1D_LoadYoshisHouse(NULLROM)				; $0CA3B4
ROUTINE_SMW_YoshisWatchInExcitementDuringEnding:	%ROUTINE_SMW_YoshisWatchInExcitementDuringEnding(NULLROM)			; $0CA439
ROUTINE_SMW_HatchYoshiEggsDuringEnding:	%ROUTINE_SMW_HatchYoshiEggsDuringEnding(NULLROM)				; $0CA524
ROUTINE_SMW_SlideInThankYouDuringEnding:	%ROUTINE_SMW_SlideInThankYouDuringEnding(NULLROM)				; $0CA65B
ROUTINE_SMW_EveryoneCheeringDuringEnding:	%ROUTINE_SMW_EveryoneCheeringDuringEnding(NULLROM)				; $0CA6B0
ROUTINE_SMW_UpdateCutsceneSpritePosition:	%ROUTINE_SMW_UpdateCutsceneSpritePosition(NULLROM)				; $0CA721
ROUTINE_SMW_HandlePlayerPoseAndAnimationTimersDuringEnding:	%ROUTINE_SMW_HandlePlayerPoseAndAnimationTimersDuringEnding(NULLROM)		; $0CA75A
ROUTINE_SMW_SpawnEndingYoshiSpriteAndDrawPlayer:	%ROUTINE_SMW_SpawnEndingYoshiSpriteAndDrawPlayer(NULLROM)			; $0CA778
ROUTINE_SMW_DrawCreditsPeachRedAndYellowYoshi:	%ROUTINE_SMW_DrawCreditsPeachRedAndYellowYoshi(NULLROM)			; $0CA7B9
ROUTINE_SMW_MakeCreditsEggsBounce:	%ROUTINE_SMW_MakeCreditsEggsBounce(NULLROM)					; $0CA8A3
ROUTINE_SMW_DrawEndingBabyYoshis:	%ROUTINE_SMW_DrawEndingBabyYoshis(NULLROM)					; $0CA8D1
ROUTINE_SMW_DrawLeaningEndingYoshis:	%ROUTINE_SMW_DrawLeaningEndingYoshis(NULLROM)					; $0CA93A
ROUTINE_SMW_DrawCameraFacingEndingYoshis:	%ROUTINE_SMW_DrawCameraFacingEndingYoshis(NULLROM)				; $0CAA0B
ROUTINE_SMW_DrawingTheEndMarioLuigiAndPeach:	%ROUTINE_SMW_DrawingTheEndMarioLuigiAndPeach(NULLROM)				; $0CAA53
ROUTINE_SMW_CreditsFadeOut:	%ROUTINE_SMW_CreditsFadeOut(NULLROM)						; $0CAB13
ROUTINE_SMW_GetLayer1And2PointersForEnemyRollcall:	%ROUTINE_SMW_GetLayer1And2PointersForEnemyRollcall(NULLROM)			; $0CAC29
ROUTINE_SMW_InitializeEnemyRollcallLayerPositions:	%ROUTINE_SMW_InitializeEnemyRollcallLayerPositions(NULLROM)			; $0CADB5
ROUTINE_RT02_SMW_GameMode25_ShowEnemyRollcallScreen:	%ROUTINE_RT02_SMW_GameMode25_ShowEnemyRollcallScreen(NULLROM)			; $0CAEAD
DATATABLE_SMW_TheEndScreenText:	%DATATABLE_SMW_TheEndScreenText(NULLROM)					; $0CB636
INLINEDATATABLE_RT36_SMW_EmptySpace:	%INLINEDATATABLE_RT36_SMW_EmptySpace(NULLROM)					; $0CB66F
DATATABLE_RT01_SMW_Backgrounds:	%DATATABLE_RT01_SMW_Backgrounds(NULLROM)					; $0CB800
DATATABLE_SMW_CastleDestructionText:	%DATATABLE_SMW_CastleDestructionText(NULLROM)					; $0CBE85
ROUTINE_SMW_DisplayCastleDestructionText:	%ROUTINE_SMW_DisplayCastleDestructionText(NULLROM)				; $0CC94E
ROUTINE_RT02_SMW_GameMode19_Cutscene:	%ROUTINE_RT02_SMW_GameMode19_Cutscene(NULLROM)					; $0CC97E
ROUTINE_SMW_DrawThankYouSpeechBubble:	%ROUTINE_SMW_DrawThankYouSpeechBubble(NULLROM)					; $0CCA83
ROUTINE_SMW_RaiseFlagUpFromRubble:	%ROUTINE_SMW_RaiseFlagUpFromRubble(NULLROM)					; $0CCACE
ROUTINE_SMW_DrawWhiteFlag:	%ROUTINE_SMW_DrawWhiteFlag(NULLROM)						; $0CCAFD
ROUTINE_RT00_SMW_HandleTNTFuse:	%ROUTINE_RT00_SMW_HandleTNTFuse(NULLROM)					; $0CCB1C
ROUTINE_SMW_DrawTNTFuseBox:	%ROUTINE_SMW_DrawTNTFuseBox(NULLROM)						; $0CCB5B
ROUTINE_RT01_SMW_DrawCastleDestructionCastleDoor:	%ROUTINE_RT01_SMW_DrawCastleDestructionCastleDoor(NULLROM)			; $0CCB7C
ROUTINE_RT01_SMW_HandleTNTFuse:	%ROUTINE_RT01_SMW_HandleTNTFuse(NULLROM)					; $0CCB80
ROUTINE_RT00_SMW_DrawCastleDestructionCastleDoor:	%ROUTINE_RT00_SMW_DrawCastleDestructionCastleDoor(NULLROM)			; $0CCBFA
ROUTINE_SMW_HandleTNTExplosion:	%ROUTINE_SMW_HandleTNTExplosion(NULLROM)					; $0CCC49
ROUTINE_RT00_SMW_HandleCastleCrumblingDown:	%ROUTINE_RT00_SMW_HandleCastleCrumblingDown(NULLROM)				; $0CCD23
ROUTINE_SMW_HandleCastleLiftoff:	%ROUTINE_SMW_HandleCastleLiftoff(NULLROM)					; $0CCDA1
ROUTINE_SMW_HandleFarawayCastleRocket:	%ROUTINE_SMW_HandleFarawayCastleRocket(NULLROM)				; $0CCED4
ROUTINE_SMW_HandleDudTNTExplosion:	%ROUTINE_SMW_HandleDudTNTExplosion(NULLROM)					; $0CCF72
ROUTINE_SMW_DelayTNTExplosionUntilPlayerComesBy:	%ROUTINE_SMW_DelayTNTExplosionUntilPlayerComesBy(NULLROM)			; $0CCFC5
ROUTINE_SMW_CheckIfPlayerCanEndCastleDestructionCutscene:	%ROUTINE_SMW_CheckIfPlayerCanEndCastleDestructionCutscene(NULLROM)		; $0CCFDE
ROUTINE_SMW_WaitForCastleDestructionTextToFinishInRoyCutscene:	%ROUTINE_SMW_WaitForCastleDestructionTextToFinishInRoyCutscene(NULLROM)	; $0CCFF7
ROUTINE_SMW_PlayerDropkicksAndStompsCastle:	%ROUTINE_SMW_PlayerDropkicksAndStompsCastle(NULLROM)				; $0CD003
ROUTINE_SMW_DrawCutsceneContactEffect:	%ROUTINE_SMW_DrawCutsceneContactEffect(NULLROM)				; $0CD061
ROUTINE_SMW_WaitBeforeMakingHammeredCastleCrumble:	%ROUTINE_SMW_WaitBeforeMakingHammeredCastleCrumble(NULLROM)			; $0CD0BC
ROUTINE_SMW_WaitForWendysCastleToBeFullyMopped:	%ROUTINE_SMW_WaitForWendysCastleToBeFullyMopped(NULLROM)			; $0CD0C9
ROUTINE_SMW_UprootCastleFromGround:	%ROUTINE_SMW_UprootCastleFromGround(NULLROM)					; $0CD0D2
ROUTINE_SMW_KickCastleAway:	%ROUTINE_SMW_KickCastleAway(NULLROM)						; $0CD108
ROUTINE_SMW_KickedCastleCreatesQuake:	%ROUTINE_SMW_KickedCastleCreatesQuake(NULLROM)					; $0CD16F
ROUTINE_SMW_WaitForPlayerVictoryPoseAfterCastleQuake:	%ROUTINE_SMW_WaitForPlayerVictoryPoseAfterCastleQuake(NULLROM)			; $0CD19C
ROUTINE_RT01_SMW_HandleCastleCrumblingDown:	%ROUTINE_RT01_SMW_HandleCastleCrumblingDown(NULLROM)				; $0CD1A7
ROUTINE_RT01_SMW_ProcessMop:	%ROUTINE_RT01_SMW_ProcessMop(NULLROM)						; $0CD1F0
ROUTINE_SMW_ShakeCutsceneCastle:	%ROUTINE_SMW_ShakeCutsceneCastle(NULLROM)					; $0CD283
ROUTINE_SMW_InitializeTNTExplosion:	%ROUTINE_SMW_InitializeTNTExplosion(NULLROM)					; $0CD295
ROUTINE_SMW_InitializeCastleCrumblingDown:	%ROUTINE_SMW_InitializeCastleCrumblingDown(NULLROM)				; $0CD2B2
ROUTINE_SMW_InitializeCastleLiftoff:	%ROUTINE_SMW_InitializeCastleLiftoff(NULLROM)					; $0CD2BD
ROUTINE_SMW_InitializeDudTNTExplosion:	%ROUTINE_SMW_InitializeDudTNTExplosion(NULLROM)				; $0CD2D0
ROUTINE_SMW_InitializeFarawayCastleRocket:	%ROUTINE_SMW_InitializeFarawayCastleRocket(NULLROM)				; $0CD2E6
ROUTINE_SMW_InitializeCastleDust:	%ROUTINE_SMW_InitializeCastleDust(NULLROM)					; $0CD31A
ROUTINE_SMW_CopyOfUpdateCutsceneSpritePosition:	%ROUTINE_SMW_CopyOfUpdateCutsceneSpritePosition(NULLROM)			; $0CD33A
ROUTINE_SMW_ClearCutsceneSpritesSubpixelPosition:	%ROUTINE_SMW_ClearCutsceneSpritesSubpixelPosition(NULLROM)			; $0CD373
ROUTINE_SMW_SpawnHammerDebris:	%ROUTINE_SMW_SpawnHammerDebris(NULLROM)					; $0CD386
ROUTINE_SMW_ProcessHammerDebris:	%ROUTINE_SMW_ProcessHammerDebris(NULLROM)					; $0CD3F4
ROUTINE_SMW_DrawQuestionMark:	%ROUTINE_SMW_DrawQuestionMark(NULLROM)						; $0CD464
ROUTINE_SMW_DrawPlayerCough:	%ROUTINE_SMW_DrawPlayerCough(NULLROM)						; $0CD4F4
ROUTINE_SMW_InitializeCastleDestructionTextTimers:	%ROUTINE_SMW_InitializeCastleDestructionTextTimers(NULLROM)			; $0CD5C6
ROUTINE_SMW_DrawWoodHammer:	%ROUTINE_SMW_DrawWoodHammer(NULLROM)						; $0CD5D9
ROUTINE_RT00_SMW_ProcessMop:	%ROUTINE_RT00_SMW_ProcessMop(NULLROM)						; $0CD6C4
ROUTINE_SMW_CarryEggAwayFromCastle:	%ROUTINE_SMW_CarryEggAwayFromCastle(NULLROM)					; $0CD7EB
INLINEDATATABLE_RT37_SMW_EmptySpace:	%INLINEDATATABLE_RT37_SMW_EmptySpace(NULLROM)					; $0CD86F
DATATABLE_RT02_SMW_Backgrounds:	%DATATABLE_RT02_SMW_Backgrounds(NULLROM)					; $0CD900
ROUTINE_RT04_SMW_LoadOverworldLayer1AndEvents:	%ROUTINE_RT04_SMW_LoadOverworldLayer1AndEvents(NULLROM)			; $0CF7DF
INLINEDATATABLE_RT38_SMW_EmptySpace:	%INLINEDATATABLE_RT38_SMW_EmptySpace(NULLROM)					; $0CFFDF
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank0DMacros(StartBank, EndBank)
%BANK_START(<StartBank>)
DATATABLE_RT00_SMW_Map16Data:	%DATATABLE_RT00_SMW_Map16Data(NULLROM)						; $0D8000
ROUTINE_SMW_ProcessExtendedObjects:	%ROUTINE_SMW_ProcessExtendedObjects(NULLROM)					; $0DA100
ROUTINE_SMW_ProcessStandardAndTilesetSpecificObjects:	%ROUTINE_SMW_ProcessStandardAndTilesetSpecificObjects(NULLROM)			; $0DA40F
ROUTINE_SMW_ProcessGrasslandObjects:	%ROUTINE_SMW_ProcessGrasslandObjects(NULLROM)					; $0DA44B
ROUTINE_SMW_ExtendedObj00_ScreenExit:	%ROUTINE_SMW_ExtendedObj00_ScreenExit(NULLROM)					; $0DA512
ROUTINE_SMW_ExtendedObj01_ScreenJump:	%ROUTINE_SMW_ExtendedObj01_ScreenJump(NULLROM)					; $0DA53D
ROUTINE_SMW_ExtendedObjXX_Generic1TileObject:	%ROUTINE_SMW_ExtendedObjXX_Generic1TileObject(NULLROM)				; $0DA548
ROUTINE_SMW_ExtendedObj42_TopLeftSlope:	%ROUTINE_SMW_ExtendedObj42_TopLeftSlope(NULLROM)				; $0DA652
ROUTINE_SMW_ExtendedObjXX_PurpleTriangle:	%ROUTINE_SMW_ExtendedObjXX_PurpleTriangle(NULLROM)				; $0DA671
ROUTINE_SMW_ExtendedObj46_MidwayBar:	%ROUTINE_SMW_ExtendedObj46_MidwayBar(NULLROM)					; $0DA68E
ROUTINE_SMW_PreserveLevelDataPointerInObjects:	%ROUTINE_SMW_PreserveLevelDataPointerInObjects(NULLROM)			; $0DA6B1
ROUTINE_SMW_RestoreLevelDataPointerInObjects:	%ROUTINE_SMW_RestoreLevelDataPointerInObjects(NULLROM)				; $0DA6BA
ROUTINE_SMW_ExtendedObj47_Door:	%ROUTINE_SMW_ExtendedObj47_Door(NULLROM)					; $0DA6CD
ROUTINE_SMW_ExtendedObjXX_LargeBush:	%ROUTINE_SMW_ExtendedObjXX_LargeBush(NULLROM)					; $0DA6EE
ROUTINE_SMW_ExtendedObj4A_ClimbingNetDoor:	%ROUTINE_SMW_ExtendedObj4A_ClimbingNetDoor(NULLROM)				; $0DA7B1
ROUTINE_SMW_ExtendedObj86_GoalSign:	%ROUTINE_SMW_ExtendedObj86_GoalSign(NULLROM)					; $0DA7E3
ROUTINE_SMW_ExtendedObj91_VerticalLevelSteepLeftSlope:	%ROUTINE_SMW_ExtendedObj91_VerticalLevelSteepLeftSlope(NULLROM)		; $0DA809
ROUTINE_RT01_SMW_HandleVerticalSubScreenCrossingForCurrentObject:	%ROUTINE_RT01_SMW_HandleVerticalSubScreenCrossingForCurrentObject(NULLROM)	; $0DA82A
ROUTINE_SMW_ExtendedObj93_VerticalLevelNormalLeftSlope:	%ROUTINE_SMW_ExtendedObj93_VerticalLevelNormalLeftSlope(NULLROM)		; $0DA83E
ROUTINE_SMW_ExtendedObj95_VerticalLevelVerySteepLeftSlope:	%ROUTINE_SMW_ExtendedObj95_VerticalLevelVerySteepLeftSlope(NULLROM)		; $0DA877
DATATABLE_RT00_SMW_BitTable:	%DATATABLE_RT00_SMW_BitTable(NULLROM)						; $0DA8A6
DATATABLE_SMW_Bank0DItemMemoryIndexes:	%DATATABLE_SMW_Bank0DItemMemoryIndexes(NULLROM)				; $0DA8AE
ROUTINE_RT00_SMW_StandardObjXX_Generic1RepeatedTileObject:	%ROUTINE_RT00_SMW_StandardObjXX_Generic1RepeatedTileObject(NULLROM)		; $0DA8B4
ROUTINE_SMW_HandleHorizontalSubScreenCrossingForCurrentObject:	%ROUTINE_SMW_HandleHorizontalSubScreenCrossingForCurrentObject(NULLROM)	; $0DA95B
ROUTINE_RT00_SMW_HandleVerticalSubScreenCrossingForCurrentObject:	%ROUTINE_RT00_SMW_HandleVerticalSubScreenCrossingForCurrentObject(NULLROM)	; $0DA97D
ROUTINE_SMW_GoDownLeftAndUpdateLevelDataPointerInObjects:	%ROUTINE_SMW_GoDownLeftAndUpdateLevelDataPointerInObjects(NULLROM)		; $0DA992
ROUTINE_SMW_GoDownRightAndUpdateLevelDataPointerInObjects:	%ROUTINE_SMW_GoDownRightAndUpdateLevelDataPointerInObjects(NULLROM)		; $0DA9B4
ROUTINE_SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects:	%ROUTINE_SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects(NULLROM)	; $0DA9D6
ROUTINE_SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects:	%ROUTINE_SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects(NULLROM)	; $0DA9EF
ROUTINE_SMW_SetMap16HighByteForCurrentObject:	%ROUTINE_SMW_SetMap16HighByteForCurrentObject(NULLROM)				; $0DAA08
ROUTINE_SMW_StandardObj0F_VerticalPipes:	%ROUTINE_SMW_StandardObj0F_VerticalPipes(NULLROM)				; $0DAA12
ROUTINE_SMW_StandardObj10_HorizontalPipes:	%ROUTINE_SMW_StandardObj10_HorizontalPipes(NULLROM)				; $0DAAA4
ROUTINE_SMW_StandardObj11_BulletShooter:	%ROUTINE_SMW_StandardObj11_BulletShooter(NULLROM)				; $0DAB0D
ROUTINE_RT00_SMW_StandardObj12_Slopes:	%ROUTINE_RT00_SMW_StandardObj12_Slopes(NULLROM)				; $0DAB3E
ROUTINE_SMW_FillInSlopeTileAir:	%ROUTINE_SMW_FillInSlopeTileAir(NULLROM)					; $0DABF7
ROUTINE_RT01_SMW_StandardObj12_Slopes:	%ROUTINE_RT01_SMW_StandardObj12_Slopes(NULLROM)				; $0DAC21
ROUTINE_SMW_StandardObj13_GroundEdgesAndVine:	%ROUTINE_SMW_StandardObj13_GroundEdgesAndVine(NULLROM)				; $0DB039
ROUTINE_SMW_StandardObj21_WideScaleGroundLedge:	%ROUTINE_SMW_StandardObj21_WideScaleGroundLedge(NULLROM)			; $0DB1C8
ROUTINE_SMW_StandardObj15_MidwayAndGoalPoint:	%ROUTINE_SMW_StandardObj15_MidwayAndGoalPoint(NULLROM)				; $0DB212
ROUTINE_SMW_ExtendedObj41_YoshiCoin:	%ROUTINE_SMW_ExtendedObj41_YoshiCoin(NULLROM)					; $0DB2CA
ROUTINE_SMW_StandardObj16_PurpleCoins:	%ROUTINE_SMW_StandardObj16_PurpleCoins(NULLROM)				; $0DB336
ROUTINE_SMW_StandardObj17_RopeAndCloudLine:	%ROUTINE_SMW_StandardObj17_RopeAndCloudLine(NULLROM)				; $0DB3BB
ROUTINE_SMW_StandardObj18_WaterWithAnimatedSurface:	%ROUTINE_SMW_StandardObj18_WaterWithAnimatedSurface(NULLROM)			; $0DB3DB
ROUTINE_SMW_StandardObj1C_DonutBridge:	%ROUTINE_SMW_StandardObj1C_DonutBridge(NULLROM)				; $0DB42B
ROUTINE_SMW_StandardObj1D_ClimbingNetWithBottomEdge:	%ROUTINE_SMW_StandardObj1D_ClimbingNetWithBottomEdge(NULLROM)			; $0DB461
ROUTINE_SMW_StandardObj1E_ClimbingNetWithSideEdge:	%ROUTINE_SMW_StandardObj1E_ClimbingNetWithSideEdge(NULLROM)			; $0DB49C
ROUTINE_SMW_StandardObj1F_SkinnyVerticalPipeBoneLog:	%ROUTINE_SMW_StandardObj1F_SkinnyVerticalPipeBoneLog(NULLROM)			; $0DB51F
ROUTINE_SMW_StandardObj20_SkinnyHorizontalPipeBoneLog:	%ROUTINE_SMW_StandardObj20_SkinnyHorizontalPipeBoneLog(NULLROM)		; $0DB547
ROUTINE_SMW_ExtendedObj68_CloudFringeBottomAndRightEdge:	%ROUTINE_SMW_ExtendedObj68_CloudFringeBottomAndRightEdge(NULLROM)		; $0DB569
ROUTINE_SMW_ExtendedObj8E_YellowSwitchBlock:	%ROUTINE_SMW_ExtendedObj8E_YellowSwitchBlock(NULLROM)				; $0DB583
ROUTINE_SMW_GrasslandObj3F_SmallBushes:	%ROUTINE_SMW_GrasslandObj3F_SmallBushes(NULLROM)				; $0DB5A8
ROUTINE_SMW_GrasslandObj3C_ArchLedge:	%ROUTINE_SMW_GrasslandObj3C_ArchLedge(NULLROM)					; $0DB5E8
ROUTINE_SMW_GrasslandObj3D_TopCloudFridge:	%ROUTINE_SMW_GrasslandObj3D_TopCloudFridge(NULLROM)				; $0DB6C1
ROUTINE_SMW_ExtendedObj88_RightTreeBranch:	%ROUTINE_SMW_ExtendedObj88_RightTreeBranch(NULLROM)				; $0DB6E1
ROUTINE_SMW_GrasslandObj3E_SideCloudFridges:	%ROUTINE_SMW_GrasslandObj3E_SideCloudFridges(NULLROM)				; $0DB6F5
ROUTINE_SMW_GrasslandObj39_RightFacingDiagonalPipe:	%ROUTINE_SMW_GrasslandObj39_RightFacingDiagonalPipe(NULLROM)			; $0DB72F
ROUTINE_SMW_GrasslandObjXX_DiagonalLedge:	%ROUTINE_SMW_GrasslandObjXX_DiagonalLedge(NULLROM)				; $0DB7AA
ROUTINE_SMW_GrasslandObj32_BlueSwitchBlocks:	%ROUTINE_SMW_GrasslandObj32_BlueSwitchBlocks(NULLROM)				; $0DB916
ROUTINE_SMW_GrasslandObj37_SmallTreeTrunk:	%ROUTINE_SMW_GrasslandObj37_SmallTreeTrunk(NULLROM)				; $0DB962
ROUTINE_SMW_GrasslandObj36_LargeTreeTrunk:	%ROUTINE_SMW_GrasslandObj36_LargeTreeTrunk(NULLROM)				; $0DB9C0
ROUTINE_SMW_GrasslandObj35_ForestGround:	%ROUTINE_SMW_GrasslandObj35_ForestGround(NULLROM)				; $0DBA0A
ROUTINE_SMW_GrasslandObj34_ForestGroundEdges:	%ROUTINE_SMW_GrasslandObj34_ForestGroundEdges(NULLROM)				; $0DBA44
ROUTINE_SMW_GrasslandObj33_ForestTreeTop:	%ROUTINE_SMW_GrasslandObj33_ForestTreeTop(NULLROM)				; $0DBA7C
ROUTINE_SMW_GrasslandObj30_IcyVerticalPipe:	%ROUTINE_SMW_GrasslandObj30_IcyVerticalPipe(NULLROM)				; $0DBB2C
ROUTINE_RT01_SMW_StandardObjXX_Generic1RepeatedTileObject:	%ROUTINE_RT01_SMW_StandardObjXX_Generic1RepeatedTileObject(NULLROM)		; $0DBB63
INLINEDATATABLE_RT39_SMW_EmptySpace:	%INLINEDATATABLE_RT39_SMW_EmptySpace(NULLROM)					; $0DBB68
DATATABLE_RT01_SMW_Map16Data:	%DATATABLE_RT01_SMW_Map16Data(NULLROM)						; $0DBC00
ROUTINE_SMW_ProcessCastleObjects:	%ROUTINE_SMW_ProcessCastleObjects(NULLROM)					; $0DC190
ROUTINE_SMW_ExtendedObj4B_ConveyorEndTile1:	%ROUTINE_SMW_ExtendedObj4B_ConveyorEndTile1(NULLROM)				; $0DC257
ROUTINE_SMW_ExtendedObj84_CastleEntrance:	%ROUTINE_SMW_ExtendedObj84_CastleEntrance(NULLROM)				; $0DC26B
ROUTINE_SMW_ExtendedObj90_LargeBossDoor:	%ROUTINE_SMW_ExtendedObj90_LargeBossDoor(NULLROM)				; $0DC318
ROUTINE_SMW_CastleObj3D_Escalator:	%ROUTINE_SMW_CastleObj3D_Escalator(NULLROM)					; $0DC341
ROUTINE_SMW_CastleObj3E_HorizontalLineOfSpikes:	%ROUTINE_SMW_CastleObj3E_HorizontalLineOfSpikes(NULLROM)			; $0DC42C
ROUTINE_SMW_CastleObj3F_VerticalLineOfSpikes:	%ROUTINE_SMW_CastleObj3F_VerticalLineOfSpikes(NULLROM)				; $0DC44C
ROUTINE_SMW_CastleObj3C_StoneBlock:	%ROUTINE_SMW_CastleObj3C_StoneBlock(NULLROM)					; $0DC46F
ROUTINE_SMW_CastleObj3B_GrassLedge:	%ROUTINE_SMW_CastleObj3B_GrassLedge(NULLROM)					; $0DC4C9
ROUTINE_SMW_CastleObj36_LargeSpikedPillar:	%ROUTINE_SMW_CastleObj36_LargeSpikedPillar(NULLROM)				; $0DC4EF
ROUTINE_SMW_CastleObj35_RockWallBackground:	%ROUTINE_SMW_CastleObj35_RockWallBackground(NULLROM)				; $0DC58A
ROUTINE_SMW_CastleObj34_VerticalDoubleEndedPipe:	%ROUTINE_SMW_CastleObj34_VerticalDoubleEndedPipe(NULLROM)			; $0DC5D8
INLINEDATATABLE_RT40_SMW_EmptySpace:	%INLINEDATATABLE_RT40_SMW_EmptySpace(NULLROM)					; $0DC620
DATATABLE_RT02_SMW_Map16Data:	%DATATABLE_RT02_SMW_Map16Data(NULLROM)						; $0DC800
ROUTINE_SMW_ProcessRopeObjects:	%ROUTINE_SMW_ProcessRopeObjects(NULLROM)					; $0DCD90
ROUTINE_SMW_ExtendedObjXX_LineGuideQuarterLargeCircle:	%ROUTINE_SMW_ExtendedObjXX_LineGuideQuarterLargeCircle(NULLROM)		; $0DCE57
ROUTINE_SMW_ExtendedObjXX_LineGuideQuarterSmallCircle:	%ROUTINE_SMW_ExtendedObjXX_LineGuideQuarterSmallCircle(NULLROM)		; $0DCE90
ROUTINE_SMW_ExtendedObj70_BitOfCanvas1:	%ROUTINE_SMW_ExtendedObj70_BitOfCanvas1(NULLROM)				; $0DCEA6
ROUTINE_SMW_ExtendedObj55_HorizontalLineGuideEnd:	%ROUTINE_SMW_ExtendedObj55_HorizontalLineGuideEnd(NULLROM)			; $0DCEBE
ROUTINE_SMW_ExtendedObj56_VerticalLineGuideEnd:	%ROUTINE_SMW_ExtendedObj56_VerticalLineGuideEnd(NULLROM)			; $0DCED8
ROUTINE_SMW_RopeObj36_HorizontalConveyorRope:	%ROUTINE_SMW_RopeObj36_HorizontalConveyorRope(NULLROM)				; $0DCEF0
ROUTINE_SMW_CastleObj37_HorizontalLineGuide:	%ROUTINE_SMW_CastleObj37_HorizontalLineGuide(NULLROM)				; $0DCF10
ROUTINE_SMW_CastleObj38_VerticalLineGuide:	%ROUTINE_SMW_CastleObj38_VerticalLineGuide(NULLROM)				; $0DCF30
ROUTINE_SMW_RopeObj3A_SlopedLineGuide:	%ROUTINE_SMW_RopeObj3A_SlopedLineGuide(NULLROM)				; $0DCF53
ROUTINE_SMW_RopeObj3B_VerySteepSlopedLineGuide:	%ROUTINE_SMW_RopeObj3B_VerySteepSlopedLineGuide(NULLROM)			; $0DD070
ROUTINE_SMW_RopeObj3C_MushroomTop:	%ROUTINE_SMW_RopeObj3C_MushroomTop(NULLROM)					; $0DD103
ROUTINE_SMW_RopeObj3D_MushroomColumn:	%ROUTINE_SMW_RopeObj3D_MushroomColumn(NULLROM)					; $0DD145
ROUTINE_SMW_RopeObj3E_HorizontalLog:	%ROUTINE_SMW_RopeObj3E_HorizontalLog(NULLROM)					; $0DD182
ROUTINE_SMW_RopeObj3F_VerticalLog:	%ROUTINE_SMW_RopeObj3F_VerticalLog(NULLROM)					; $0DD1A5
ROUTINE_SMW_RopeObj35_ColumnWithPlantOnTop:	%ROUTINE_SMW_RopeObj35_ColumnWithPlantOnTop(NULLROM)				; $0DD1CB
ROUTINE_SMW_RopeObj32_LogBridge:	%ROUTINE_SMW_RopeObj32_LogBridge(NULLROM)					; $0DD24C
INLINEDATATABLE_RT41_SMW_EmptySpace:	%INLINEDATATABLE_RT41_SMW_EmptySpace(NULLROM)					; $0DD282
DATATABLE_RT03_SMW_Map16Data:	%DATATABLE_RT03_SMW_Map16Data(NULLROM)						; $0DD400
ROUTINE_SMW_ProcessUndergroundObjects:	%ROUTINE_SMW_ProcessUndergroundObjects(NULLROM)				; $0DD990
ROUTINE_SMW_ExtendedObj60_CaveLavaInnerCorner:	%ROUTINE_SMW_ExtendedObj60_CaveLavaInnerCorner(NULLROM)			; $0DDA57
ROUTINE_SMW_ExtendedObj75_CanvasTile1:	%ROUTINE_SMW_ExtendedObj75_CanvasTile1(NULLROM)				; $0DDA61
ROUTINE_SMW_ExtendedObj7C_BitOfCanvas1:	%ROUTINE_SMW_ExtendedObj7C_BitOfCanvas1(NULLROM)				; $0DDA7A
ROUTINE_SMW_ExtendedObj7F_TorpedoLauncher:	%ROUTINE_SMW_ExtendedObj7F_TorpedoLauncher(NULLROM)				; $0DDA9E
ROUTINE_SMW_UndergroundObj38_RightLavaEdge:	%ROUTINE_SMW_UndergroundObj38_RightLavaEdge(NULLROM)				; $0DDAC4
ROUTINE_SMW_UndergroundObj39_SlopedCaveLava:	%ROUTINE_SMW_UndergroundObj39_SlopedCaveLava(NULLROM)				; $0DDAF2
ROUTINE_SMW_UndergroundObj3A_CaveLavaWithTop:	%ROUTINE_SMW_UndergroundObj3A_CaveLavaWithTop(NULLROM)				; $0DDCA9
ROUTINE_SMW_UndergroundObj3D_CeilingLedge:	%ROUTINE_SMW_UndergroundObj3D_CeilingLedge(NULLROM)				; $0DDCEA
ROUTINE_SMW_UndergroundObj3E_CeilingEdges:	%ROUTINE_SMW_UndergroundObj3E_CeilingEdges(NULLROM)				; $0DDD26
ROUTINE_SMW_UndergroundObj3F_SolidDirt:	%ROUTINE_SMW_UndergroundObj3F_SolidDirt(NULLROM)				; $0DDD5C
ROUTINE_SMW_UndergroundObj3C_VerySteepSlope:	%ROUTINE_SMW_UndergroundObj3C_VerySteepSlope(NULLROM)				; $0DDD87
ROUTINE_SMW_UndergroundObj37_LargeCanvas:	%ROUTINE_SMW_UndergroundObj37_LargeCanvas(NULLROM)				; $0DDEDC
ROUTINE_SMW_ExtendedObj71_Canvas1:	%ROUTINE_SMW_ExtendedObj71_Canvas1(NULLROM)					; $0DE05E
ROUTINE_SMW_UndergroundObj36_4SidedGround:	%ROUTINE_SMW_UndergroundObj36_4SidedGround(NULLROM)				; $0DE12C
INLINEDATATABLE_RT42_SMW_EmptySpace:	%INLINEDATATABLE_RT42_SMW_EmptySpace(NULLROM)					; $0DE186
DATATABLE_RT04_SMW_Map16Data:	%DATATABLE_RT04_SMW_Map16Data(NULLROM)						; $0DE300
ROUTINE_SMW_ProcessGhostHouseObjects:	%ROUTINE_SMW_ProcessGhostHouseObjects(NULLROM)					; $0DE890
ROUTINE_SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner:	%ROUTINE_SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner(NULLROM)		; $0DE957
ROUTINE_SMW_ExtendedObj5F_LargeBackgroundArea:	%ROUTINE_SMW_ExtendedObj5F_LargeBackgroundArea(NULLROM)			; $0DE971
ROUTINE_SMW_ExtendedObj61_GhostHouseClock:	%ROUTINE_SMW_ExtendedObj61_GhostHouseClock(NULLROM)				; $0DE98F
ROUTINE_SMW_ExtendedObj64_TopRightCobweb:	%ROUTINE_SMW_ExtendedObj64_TopRightCobweb(NULLROM)				; $0DE9E1
ROUTINE_SMW_ExtendedObj66_GhostHouseTopRightToBottomLeftBeam2:	%ROUTINE_SMW_ExtendedObj66_GhostHouseTopRightToBottomLeftBeam2(NULLROM)	; $0DEA1E
ROUTINE_SMW_ExtendedObj49_GhostHouseExit:	%ROUTINE_SMW_ExtendedObj49_GhostHouseExit(NULLROM)				; $0DEA71
ROUTINE_SMW_ExtendedObj80_GhostHouseEntrance:	%ROUTINE_SMW_ExtendedObj80_GhostHouseEntrance(NULLROM)				; $0DEADE
ROUTINE_SMW_ExtendedObj85_YoshisHouse:	%ROUTINE_SMW_ExtendedObj85_YoshisHouse(NULLROM)				; $0DEB93
ROUTINE_SMW_ExtendedObj97_SwitchPalaceRightAndBottomEdgeTile:	%ROUTINE_SMW_ExtendedObj97_SwitchPalaceRightAndBottomEdgeTile(NULLROM)		; $0DEC5C
ROUTINE_SMW_ExtendedObj81_Seaweed:	%ROUTINE_SMW_ExtendedObj81_Seaweed(NULLROM)					; $0DEC66
ROUTINE_SMW_ExtendedObj8A_GreenSwitchPalaceSwitch:	%ROUTINE_SMW_ExtendedObj8A_GreenSwitchPalaceSwitch(NULLROM)			; $0DEC7E
ROUTINE_SMW_ExtendedObj8F_GhostHouseWindow:	%ROUTINE_SMW_ExtendedObj8F_GhostHouseWindow(NULLROM)				; $0DECC1
ROUTINE_RT00_SMW_GhostHouseObj35_BrickBackground:	%ROUTINE_RT00_SMW_GhostHouseObj35_BrickBackground(NULLROM)			; $0DECC6
ROUTINE_SMW_GhostHouseObj37_HorizontalBackgroundLogAndRailing:	%ROUTINE_SMW_GhostHouseObj37_HorizontalBackgroundLogAndRailing(NULLROM)	; $0DED09
ROUTINE_SMW_GhostHouseObj38_WoodenLedge:	%ROUTINE_SMW_GhostHouseObj38_WoodenLedge(NULLROM)				; $0DED43
ROUTINE_SMW_GhostHouseObj39_VerticalBackgroundLog:	%ROUTINE_SMW_GhostHouseObj39_VerticalBackgroundLog(NULLROM)			; $0DED65
ROUTINE_SMW_GhostHouseObj3A_SolidBrickWallAndVerticalLineOfSpikes:	%ROUTINE_SMW_GhostHouseObj3A_SolidBrickWallAndVerticalLineOfSpikes(NULLROM)	; $0DED95
ROUTINE_SMW_GhostHouseObj3B_BonusGameLedge:	%ROUTINE_SMW_GhostHouseObj3B_BonusGameLedge(NULLROM)				; $0DEDB9
ROUTINE_SMW_GhostHouseObj3C_SwitchPalaceCeiling:	%ROUTINE_SMW_GhostHouseObj3C_SwitchPalaceCeiling(NULLROM)			; $0DEDDB
ROUTINE_SMW_GhostHouseObj3D_SwitchPalaceLedge:	%ROUTINE_SMW_GhostHouseObj3D_SwitchPalaceLedge(NULLROM)			; $0DEE17
ROUTINE_SMW_GhostHouseObj3E_SwitchPalaceRightFacingWall:	%ROUTINE_SMW_GhostHouseObj3E_SwitchPalaceRightFacingWall(NULLROM)		; $0DEE52
ROUTINE_SMW_GhostHouseObj3F_SwitchPalaceLeftFacingWall:	%ROUTINE_SMW_GhostHouseObj3F_SwitchPalaceLeftFacingWall(NULLROM)		; $0DEE89
ROUTINE_SMW_GhostHouseObj34_WoodLedgeOnColumn:	%ROUTINE_SMW_GhostHouseObj34_WoodLedgeOnColumn(NULLROM)			; $0DEEC0
ROUTINE_SMW_GhostHouseObj33_Cloud:	%ROUTINE_SMW_GhostHouseObj33_Cloud(NULLROM)					; $0DEF45
ROUTINE_SMW_GhostHouseObj32_GrassLedge2:	%ROUTINE_SMW_GhostHouseObj32_GrassLedge2(NULLROM)				; $0DEF67
ROUTINE_SMW_GhostHouseObj31_WoodCrate:	%ROUTINE_SMW_GhostHouseObj31_WoodCrate(NULLROM)				; $0DEFA2
ROUTINE_SMW_GhostHouseObj30_GrassLedge1:	%ROUTINE_SMW_GhostHouseObj30_GrassLedge1(NULLROM)				; $0DF02B
ROUTINE_RT01_SMW_GhostHouseObj35_BrickBackground:	%ROUTINE_RT01_SMW_GhostHouseObj35_BrickBackground(NULLROM)			; $0DF066
ROUTINE_SMW_GhostHouseObj2E_HorizontalLineOfSpikes:	%ROUTINE_SMW_GhostHouseObj2E_HorizontalLineOfSpikes(NULLROM)			; $0DF06B
INLINEDATATABLE_RT43_SMW_EmptySpace:	%INLINEDATATABLE_RT43_SMW_EmptySpace(NULLROM)					; $0DF08A
DATATABLE_SMW_CreditsEnemyNames:	%DATATABLE_SMW_CreditsEnemyNames(NULLROM)					; $0DF300
INLINEDATATABLE_RT44_SMW_EmptySpace:	%INLINEDATATABLE_RT44_SMW_EmptySpace(NULLROM)					; $0DFE9F
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank0EMacros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_RT02_SMW_HandleSPCUploads:	%ROUTINE_RT02_SMW_HandleSPCUploads(NULLROM)					; $0E8000
INLINEDATATABLE_RT45_SMW_EmptySpace:	%INLINEDATATABLE_RT45_SMW_EmptySpace(NULLROM)					; $0EF0F0
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro SMWBank0FMacros(StartBank, EndBank)
%BANK_START(<StartBank>)
ROUTINE_RT03_SMW_HandleSPCUploads:	%ROUTINE_RT03_SMW_HandleSPCUploads(NULLROM)					; $0F8000
INLINEDATATABLE_RT46_SMW_EmptySpace:	%INLINEDATATABLE_RT46_SMW_EmptySpace(NULLROM)					; $0FEF90
%BANK_END(<EndBank>)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus01_Init(Address)					; Optimization: These pointers ought to be 24-bit in the optimized code.
namespace SMW_NorSprStatus01_Init
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_ExecutePtr_Absolute

NormalSpriteInitPointers:
;$01817D
	dw SMW_NorSpr000_GreenNakedKoopa_Status01_Main				; 000 - Green Koopa, no shell
	dw SMW_NorSpr001_RedNakedKoopa_Status01_Main				; 001 - Red Koopa, no shell
	dw SMW_NorSpr002_BlueNakedKoopa_Status01_Main				; 002 - Blue Koopa, no shell
	dw SMW_NorSpr003_YellowNakedKoopa_Status01_Main				; 003 - Yellow Koopa, no shell
	dw SMW_NorSpr004_GreenKoopa_Status01_Main				; 004 - Green Koopa
	dw SMW_NorSpr005_RedKoopa_Status01_Main					; 005 - Red Koopa
	dw SMW_NorSpr006_BlueKoopa_Status01_Main				; 006 - Blue Koopa
	dw SMW_NorSpr007_YellowKoopa_Status01_Main				; 007 - Yellow Koopa
	dw SMW_NorSpr008_LeftFlyingGreenParaKoopa_Status01_Main			; 008 - Green Koopa, flying left
	dw SMW_NorSpr009_BouncingGreenParaKoopa_Status01_Main			; 009 - Green bouncing Koopa
	dw SMW_NorSpr00A_VerticalRedParaKoopa_Status01_Main			; 00A - Red vertical flying Koopa
	dw SMW_NorSpr00B_HorizontalRedParaKoopa_Status01_Main			; 00B - Red horizontal flying Koopa
	dw SMW_NorSpr00C_YellowParaKoopa_Status01_Main				; 00C - Yellow Koopa with wings
	dw SMW_NorSpr00D_BobOmb_Status01_Main					; 00D - Bob-omb
	dw SMW_NorSpr00E_Keyhole_Status01_Main					; 00E - Keyhole
	dw SMW_NorSpr00F_Goomba_Status01_Main					; 00F - Goomba
	dw SMW_NorSpr010_ParaGoomba_Status01_Main				; 010 - Bouncing Goomba with wings
	dw SMW_NorSpr011_BuzzyBeetle_Status01_Main				; 011 - Buzzy Beetle
	dw SMW_NorSpr012_Unused_Status01_Main					; 012 - Unused
	dw SMW_NorSpr013_Spiny_Status01_Main					; 013 - Spiny
	dw SMW_NorSpr014_SpinyEgg_Status01_Main					; 014 - Spiny falling
	dw SMW_NorSpr015_HorizontalCheepCheep_Status01_Main			; 015 - Fish, horizontal
	dw SMW_NorSpr016_VerticalCheepCheep_Status01_Main			; 016 - Fish, vertical
	dw SMW_NorSpr017_GeneratorCheepCheep_Status01_Main			; 017 - Fish, created from generator
	dw SMW_NorSpr018_SurfaceJumpingCheepCheep_Status01_Main			; 018 - Surface jumping fish
	dw SMW_NorSpr019_DisplayMessage_Status01_Main				; 019 - Display text from level Message Box #1
	dw SMW_NorSpr01A_ClassicPiranhaPlant_Status01_Main			; 01A - Classic Piranha Plant
	dw SMW_NorSpr01B_Football_Status01_Main					; 01B - Bouncing football in place
	dw SMW_NorSpr01C_BulletBill_Status01_Main				; 01C - Bullet Bill
	dw SMW_NorSpr01D_HoppingFlame_Status01_Main				; 01D - Hopping flame
	dw SMW_NorSpr01E_Lakitu_Status01_Main					; 01E - Lakitu
	dw SMW_NorSpr01F_MagiKoopa_Status01_Main				; 01F - Magikoopa
	dw SMW_NorSpr020_Magic_Status01_Main					; 020 - Magikoopa's magic
	dw SMW_NorSpr021_MovingCoin_Status01_Main				; 021 - Moving coin
	dw SMW_NorSpr022_GreenVerticalNetKoopa_Status01_Main			; 022 - Green vertical net Koopa
	dw SMW_NorSpr023_RedVerticalNetKoopa_Status01_Main			; 023 - Red vertical net Koopa
	dw SMW_NorSpr024_GreenHorizontalNetKoopa_Status01_Main			; 024 - Green horizontal net Koopa
	dw SMW_NorSpr025_RedHorizontalNetKoopa_Status01_Main			; 025 - Red horizontal net Koopa
	dw SMW_NorSpr026_Thwomp_Status01_Main					; 026 - Thwomp
	dw SMW_NorSpr027_Thwimp_Status01_Main					; 027 - Thwimp
	dw SMW_NorSpr028_BigBoo_Status01_Main					; 028 - Big Boo
	dw SMW_NorSpr029_KoopaKids_Status01_Main				; 029 - Koopa Kid
	dw SMW_NorSpr02A_UpsideDownPiranhaPlant_Status01_Main			; 02A - Upside down Piranha Plant
	dw SMW_NorSpr02B_SumoLightning_Status01_Main				; 02B - Sumo Brother's fire lightning
	dw SMW_NorSpr02C_YoshiEgg_Status01_Main					; 02C - Yoshi egg
	dw SMW_NorSpr02D_BabyYoshi_Status01_Main				; 02D - Baby green Yoshi
	dw SMW_NorSpr02E_SpikeTop_Status01_Main					; 02E - Spike Top
	dw SMW_NorSpr02F_PortableSpringboard_Status01_Main			; 02F - Portable spring board
	dw SMW_NorSpr030_ThrowingDryBones_Status01_Main				; 030 - Dry Bones, throws bones
	dw SMW_NorSpr031_BonyBeetle_Status01_Main				; 031 - Bony Beetle
	dw SMW_NorSpr032_LedgeDryBones_Status01_Main				; 032 - Dry Bones, stay on ledge
	dw SMW_NorSpr033_Podoboo_Status01_Main					; 033 - Fireball
	dw SMW_NorSpr034_LudwigFireball_Status01_Main				; 034 - Boss fireball
	dw SMW_NorSpr035_Yoshi_Status01_Main					; 035 - Green Yoshi
	dw SMW_NorSpr036_Unused_Status01_Main					; 036 - Unused
	dw SMW_NorSpr037_Boo_Status01_Main					; 037 - Boo
	dw SMW_NorSpr038_StraightEerie_Status01_Main				; 038 - Eerie
	dw SMW_NorSpr039_WavyEerie_Status01_Main				; 039 - Eerie, wave motion
	dw SMW_NorSpr03A_FixedUrchin_Status01_Main				; 03A - Urchin, fixed
	dw SMW_NorSpr03B_WallDetectUrchin_Status01_Main				; 03B - Urchin, wall detect
	dw SMW_NorSpr03C_WallFollowUrchin_Status01_Main				; 03C - Urchin, wall follow
	dw SMW_NorSpr03D_RipVanFish_Status01_Main				; 03D - Rip Van Fish
	dw SMW_NorSpr03E_PSwitch_Status01_Main					; 03E - POW
	dw SMW_NorSpr03F_ParachuteGoomba_Status01_Main				; 03F - Para-Goomba
	dw SMW_NorSpr040_ParachuteBobOmb_Status01_Main				; 040 - Para-Bomb
	dw SMW_NorSpr041_LongJumpDolphin_Status01_Main				; 041 - Dolphin, horizontal
	dw SMW_NorSpr042_ShortJumpDolphin_Status01_Main				; 042 - Dolphin2, horizontal
	dw SMW_NorSpr043_VerticalDolphin_Status01_Main				; 043 - Dolphin, vertical
	dw SMW_NorSpr044_TorpedoTed_Status01_Main				; 044 - Torpedo Ted
	dw SMW_NorSpr045_DirectionalCoins_Status01_Main				; 045 - Directional coins
	dw SMW_NorSpr046_DigginChuck_Status01_Main				; 046 - Diggin' Chuck
	dw SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status01_Main		; 047 - Swimming/Jumping fish
	dw SMW_NorSpr048_DigginChuckRock_Status01_Main				; 048 - Diggin' Chuck's rock
	dw SMW_NorSpr049_ShiftingPipe_Status01_Main				; 049 - Growing/shrinking pipe end
	dw SMW_NorSpr04A_GoalSphere_Status01_Main				; 04A - Goal Point Question Sphere
	dw SMW_NorSpr04B_PipeLakitu_Status01_Main				; 04B - Pipe dwelling Lakitu
	dw SMW_NorSpr04C_ExplodingBlock_Status01_Main				; 04C - Exploding Block
	dw SMW_NorSpr04D_GroundMontyMole_Status01_Main				; 04D - Ground dwelling Monty Mole
	dw SMW_NorSpr04E_LedgeMontyMole_Status01_Main				; 04E - Ledge dwelling Monty Mole
	dw SMW_NorSpr04F_JumpingPiranhaPlant_Status01_Main			; 04F - Jumping Piranha Plant
	dw SMW_NorSpr050_FireSpittingJumpingPiranhaPlant_Status01_Main		; 050 - Jumping Piranha Plant, spit fire
	dw SMW_NorSpr051_Ninji_Status01_Main					; 051 - Ninji
#LM253Hijack_MovingLedgeHoleInitFix:
	dw SMW_NorSpr052_MovingLedgeHole_Status01_Main				; 052 - Moving ledge hole in ghost house
	dw SMW_NorSpr053_ThrowBlock_Status01_Main				; 053 - Throw block sprite
	dw SMW_NorSpr054_ClimbingNetDoor_Status01_Main				; 054 - Climbing net door
	dw SMW_NorSpr055_HorizontalCheckerboardPlatform_Status01_Main		; 055 - Checkerboard platform, horizontal
	dw SMW_NorSpr056_HorizontalRockPlatform_Status01_Main			; 056 - Flying rock platform, horizontal
	dw SMW_NorSpr057_VerticalCheckerboardPlatform_Status01_Main		; 057 - Checkerboard platform, vertical
	dw SMW_NorSpr058_VerticalRockPlatform_Status01_Main			; 058 - Flying rock platform, vertical
	dw SMW_NorSpr059_HorizontalAndVerticalTurnBlockBridge_Status01_Main	; 059 - Turn block bridge, horizontal and vertical
	dw SMW_NorSpr05A_HorizontalTurnBlockBridge_Status01_Main		; 05A - Turn block bridge, horizontal
	dw SMW_NorSpr05B_BrownBuoyantPlatform_Status01_Main			; 05B - Brown platform floating in water
	dw SMW_NorSpr05C_BuoyantCheckboardPlatform_Status01_Main		; 05C - Checkerboard platform that falls
	dw SMW_NorSpr05D_OrangeBuoyantPlatform_Status01_Main			; 05D - Orange platform floating in water
	dw SMW_NorSpr05E_FloatingOrangePlatform_Status01_Main			; 05E - Orange platform, goes on forever
	dw SMW_NorSpr05F_BrownChainedPlatform_Status01_Main			; 05F - Brown platform on a chain
	dw SMW_NorSpr060_FlatPalaceSwitch_Status01_Main				; 060 - Flat green switch palace switch
	dw SMW_NorSpr061_SkullRaft_Status01_Main				; 061 - Floating skulls
	dw SMW_NorSpr062_BrownLineGuidePlatform_Status01_Main			; 062 - Brown platform, line-guided
	dw SMW_NorSpr063_CheckerboardLineGuidePlatform_Status01_Main		; 063 - Checker/brown platform, line-guided
	dw SMW_NorSpr064_LineGuideRope_Status01_Main				; 064 - Rope mechanism, line-guided
	dw SMW_NorSpr065_Chainsaw_Status01_Main					; 065 - Chainsaw, line-guided
	dw SMW_NorSpr066_UpsideDownChainsaw_Status01_Main			; 066 - Upside down chainsaw, line-guided
	dw SMW_NorSpr067_LineGuideGrinder_Status01_Main				; 067 - Grinder, line-guided
	dw SMW_NorSpr068_LineGuideFuzzy_Status01_Main				; 068 - Fuzz ball, line-guided
	dw SMW_NorSpr069_Unused_Status01_Main					; 069 - Unused
	dw SMW_NorSpr06A_CoinGameCloud_Status01_Main				; 06A - Coin game cloud
	dw SMW_NorSpr06B_LeftWallSpringboard_Status01_Main			; 06B - Spring board, left wall
	dw SMW_NorSpr06C_RightWallSpringboard_Status01_Main			; 06C - Spring board, right wall
	dw SMW_NorSpr06D_InvisibleBlock_Status01_Main				; 06D - Invisible solid block
	dw SMW_NorSpr06E_DinoRhino_Status01_Main				; 06E - Dino Rhino
	dw SMW_NorSpr06F_DinoTorch_Status01_Main				; 06F - Dino Torch
	dw SMW_NorSpr070_Pokey_Status01_Main					; 070 - Pokey
	dw SMW_NorSpr071_RedCapeSuperKoopa_Status01_Main			; 071 - Super Koopa, red cape
	dw SMW_NorSpr072_YellowCapeSuperKoopa_Status01_Main			; 072 - Super Koopa, yellow cape
	dw SMW_NorSpr073_GroundSuperKoopa_Status01_Main				; 073 - Super Koopa, feather
	dw SMW_NorSpr074_Mushroom_Status01_Main					; 074 - Mushroom
	dw SMW_NorSpr075_FireFlower_Status01_Main				; 075 - Flower
	dw SMW_NorSpr076_Star_Status01_Main					; 076 - Star
	dw SMW_NorSpr077_Feather_Status01_Main					; 077 - Feather
	dw SMW_NorSpr078_1upMushroom_Status01_Main				; 078 - 1-Up
	dw SMW_NorSpr079_VineHead_Status01_Main					; 079 - Growing Vine
	dw SMW_NorSpr07A_Fireworks_Status01_Main				; 07A - Firework
	dw SMW_NorSpr07B_GoalTape_Status01_Main					; 07B - Goal Point
	dw SMW_NorSpr07C_PrincessPeach_Status01_Main				; 07C - Princess Peach
	dw SMW_NorSpr07D_PBalloon_Status01_Main					; 07D - Balloon
	dw SMW_NorSpr07E_FlyingRedCoin_Status01_Main				; 07E - Flying Red coin
	dw SMW_NorSpr07F_Flying1up_Status01_Main				; 07F - Flying yellow 1-Up
	dw SMW_NorSpr080_Key_Status01_Main					; 080 - Key
	dw SMW_NorSpr081_ChangingItem_Status01_Main				; 081 - Changing item from translucent block
	dw SMW_NorSpr082_BonusGame_Status01_Main				; 082 - Bonus game sprite
	dw SMW_NorSpr083_LeftFlyingBlock_Status01_Main				; 083 - Left flying question block
	dw SMW_NorSpr084_HorizontalFlyingBlock_Status01_Main			; 084 - Flying question block
	dw SMW_NorSpr085_Unused_Status01_Main					; 085 - Unused (Pretty sure)
	dw SMW_NorSpr086_Wiggler_Status01_Main					; 086 - Wiggler
	dw SMW_NorSpr087_LakituCloud_Status01_Main				; 087 - Lakitu's cloud
	dw SMW_NorSpr088_WingedCage_Status01_Main				; 088 - Unused (Winged cage sprite)
	dw SMW_NorSpr089_Layer3Smasher_Status01_Main				; 089 - Layer 3 smash
	dw SMW_NorSpr08A_Bird_Status01_Main					; 08A - Bird from Yoshi's house
	dw SMW_NorSpr08B_FireplaceSmoke_Status01_Main				; 08B - Puff of smoke from Yoshi's house
	dw SMW_NorSpr08C_SideExitAndFireplace_Status01_Main			; 08C - Fireplace smoke/exit from side screen
	dw SMW_NorSpr08D_GhostHouseDoor_Status01_Main				; 08D - Ghost house exit sign and door
	dw SMW_NorSpr08E_WarpHole_Status01_Main					; 08E - Invisible "Warp Hole" blocks
	dw SMW_NorSpr08F_ScalePlatform_Status01_Main				; 08F - Scale platforms
	dw SMW_NorSpr090_GreenGasBubble_Status01_Main				; 090 - Large green gas bubble
	dw SMW_NorSpr091_CharginChuck_Status01_Main				; 091 - Chargin' Chuck
	dw SMW_NorSpr092_SplittinChuck_Status01_Main				; 092 - Splittin' Chuck
	dw SMW_NorSpr093_BouncinChuck_Status01_Main				; 093 - Bouncin' Chuck
	dw SMW_NorSpr094_WhistlinChuck_Status01_Main				; 094 - Whistlin' Chuck
	dw SMW_NorSpr095_ClappinChuck_Status01_Main				; 095 - Clappin' Chuck
	dw SMW_NorSpr096_CharginChuckCopy_Status01_Main				; 096 - Unused (Chargin' Chuck clone)
	dw SMW_NorSpr097_PuntinChuck_Status01_Main				; 097 - Puntin' Chuck
	dw SMW_NorSpr098_PitchinChuck_Status01_Main				; 098 - Pitchin' Chuck
	dw SMW_NorSpr099_VolcanoLotus_Status01_Main				; 099 - Volcano Lotus
	dw SMW_NorSpr09A_SumoBro_Status01_Main					; 09A - Sumo Brother
	dw SMW_NorSpr09B_HammerBro_Status01_Main				; 09B - Hammer Brother
	dw SMW_NorSpr09C_HammerBroPlatform_Status01_Main			; 09C - Flying blocks for Hammer Brother
	dw SMW_NorSpr09D_BubbleWithSprite_Status01_Main				; 09D - Bubble with sprite
	dw SMW_NorSpr09E_BallNChain_Status01_Main				; 09E - Ball and Chain
	dw SMW_NorSpr09F_BanzaiBill_Status01_Main				; 09F - Banzai Bill
	dw SMW_NorSpr0A0_ActivateBowserBattle_Status01_Main			; 0A0 - Activates Bowser scene
	dw SMW_NorSpr0A1_BowserBowlingBall_Status01_Main			; 0A1 - Bowser's bowling ball
	dw SMW_NorSpr0A2_MechaKoopa_Status01_Main				; 0A2 - MechaKoopa
	dw SMW_NorSpr0A3_GreyChainedPlatform_Status01_Main			; 0A3 - Grey platform on chain
	dw SMW_NorSpr0A4_SpikeBall_Status01_Main				; 0A4 - Floating Spike ball
	dw SMW_NorSpr0A5_Sparky_Status01_Main					; 0A5 - Fuzzball/Sparky, ground-guided
	dw SMW_NorSpr0A6_Hothead_Status01_Main					; 0A6 - HotHead, ground-guided
	dw SMW_NorSpr0A7_IggyBall_Status01_Main					; 0A7 - Iggy's ball
	dw SMW_NorSpr0A8_Blargg_Status01_Main					; 0A8 - Blargg
	dw SMW_NorSpr0A9_Reznor_Status01_Main					; 0A9 - Reznor
	dw SMW_NorSpr0AA_Fishbone_Status01_Main					; 0AA - Fishbone
	dw SMW_NorSpr0AB_Rex_Status01_Main					; 0AB - Rex
	dw SMW_NorSpr0AC_DownFirstWoodenSpike_Status01_Main			; 0AC - Wooden Spike, moving down and up
	dw SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status01_Main			; 0AD - Wooden Spike, moving up/down first
	dw SMW_NorSpr0AE_FishinBoo_Status01_Main				; 0AE - Fishin' Boo
	dw SMW_NorSpr0AF_BooBlock_Status01_Main					; 0AF - Boo Block
	dw SMW_NorSpr0B0_ReflectingBooBuddies_Status01_Main			; 0B0 - Reflecting stream of Boo Buddies
	dw SMW_NorSpr0B1_CreateEatBlock_Status01_Main				; 0B1 - Creating/Eating block
	dw SMW_NorSpr0B2_FallingSpike_Status01_Main				; 0B2 - Falling Spike
	dw SMW_NorSpr0B3_BowserStatueFire_Status01_Main				; 0B3 - Bowser statue fireball
	dw SMW_NorSpr0B4_NonLineGuideGrinder_Status01_Main			; 0B4 - Grinder, non-line-guided
	dw SMW_NorSpr0B5_SinkingFireball_Status01_Main				; 0B5 - Sinking fireball used in boss battles
	dw SMW_NorSpr0B6_ReflectingPodoboo_Status01_Main			; 0B6 - Reflecting fireball
	dw SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status01_Main			; 0B7 - Carrot Top lift, upper right
	dw SMW_NorSpr0B8_CarrotTopLiftUpperLeft_Status01_Main			; 0B8 - Carrot Top lift, upper left
	dw SMW_NorSpr0B9_MessageBox_Status01_Main				; 0B9 - Info Box
	dw SMW_NorSpr0BA_TimedPlatform_Status01_Main				; 0BA - Timed lift
	dw SMW_NorSpr0BB_MovingCastleStone_Status01_Main			; 0BB - Grey moving castle block
	dw SMW_NorSpr0BC_BowserStatue_Status01_Main				; 0BC - Bowser statue
	dw SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status01_Main			; 0BD - Sliding Koopa without a shell
	dw SMW_NorSpr0BE_Swooper_Status01_Main					; 0BE - Swooper bat
	dw SMW_NorSpr0BF_MegaMole_Status01_Main					; 0BF - Mega Mole
	dw SMW_NorSpr0C0_SinkingLavaPlatform_Status01_Main			; 0C0 - Grey platform on lava
	dw SMW_NorSpr0C1_WingedPlatform_Status01_Main				; 0C1 - Flying grey turnblocks
	dw SMW_NorSpr0C2_Blurp_Status01_Main					; 0C2 - Blurp fish
	dw SMW_NorSpr0C3_PorcuPuffer_Status01_Main				; 0C3 - Porcu-Puffer fish
	dw SMW_NorSpr0C4_GreyFallingPlatform_Status01_Main			; 0C4 - Grey platform that falls
	dw SMW_NorSpr0C5_BigBooBoss_Status01_Main				; 0C5 - Big Boo Boss
	dw SMW_NorSpr0C6_Spotlight_Status01_Main				; 0C6 - Dark room with spot light
	dw SMW_NorSpr0C7_InvisibleMushroom_Status01_Main			; 0C7 - Invisible mushroom
	dw SMW_NorSpr0C8_LightSwitch_Status01_Main				; 0C8 - Light switch block for dark room

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus08_Normal(Address)					; Optimization: These pointers ought to be 24-bit in the optimized code.
namespace SMW_NorSprStatus08_Normal
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Sprites_PositionDisp
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_ExecutePtr_Absolute

NormalSpriteNormalPtrs:
;$0185CC
base $000000
.NorSpr000_GreenNakedKoopa:				dw SMW_NorSpr000_GreenNakedKoopa_Status08_Main
.NorSpr001_RedNakedKoopa:				dw SMW_NorSpr001_RedNakedKoopa_Status08_Main
.NorSpr002_BlueNakedKoopa:				dw SMW_NorSpr002_BlueNakedKoopa_Status08_Main
.NorSpr003_YellowNakedKoopa:				dw SMW_NorSpr003_YellowNakedKoopa_Status08_Main
.NorSpr004_GreenKoopa:					dw SMW_NorSpr004_GreenKoopa_Status08_Main
.NorSpr005_RedKoopa:					dw SMW_NorSpr005_RedKoopa_Status08_Main
.NorSpr006_BlueKoopa:					dw SMW_NorSpr006_BlueKoopa_Status08_Main
.NorSpr007_YellowKoopa:					dw SMW_NorSpr007_YellowKoopa_Status08_Main
.NorSpr008_LeftFlyingGreenParaKoopa:			dw SMW_NorSpr008_LeftFlyingGreenParaKoopa_Status08_Main
.NorSpr009_BouncingGreenParaKoopa:			dw SMW_NorSpr009_BouncingGreenParaKoopa_Status08_Main
.NorSpr00A_VerticalRedParaKoopa:			dw SMW_NorSpr00A_VerticalRedParaKoopa_Status08_Main
.NorSpr00B_HorizontalRedParaKoopa:			dw SMW_NorSpr00B_HorizontalRedParaKoopa_Status08_Main
.NorSpr00C_YellowParaKoopa:				dw SMW_NorSpr00C_YellowParaKoopa_Status08_Main
.NorSpr00D_BobOmb:					dw SMW_NorSpr00D_BobOmb_Status08_Main
.NorSpr00E_Keyhole:					dw SMW_NorSpr00E_Keyhole_Status08_Main
.NorSpr00F_Goomba:					dw SMW_NorSpr00F_Goomba_Status08_Main
.NorSpr010_ParaGoomba:					dw SMW_NorSpr010_ParaGoomba_Status08_Main
.NorSpr011_BuzzyBeetle:					dw SMW_NorSpr011_BuzzyBeetle_Status08_Main
.NorSpr012_Unused:					dw SMW_NorSpr012_Unused_Status08_Main
.NorSpr013_Spiny:					dw SMW_NorSpr013_Spiny_Status08_Main
.NorSpr014_SpinyEgg:					dw SMW_NorSpr014_SpinyEgg_Status08_Main
.NorSpr015_HorizontalCheepCheep:			dw SMW_NorSpr015_HorizontalCheepCheep_Status08_Main
.NorSpr016_VerticalCheepCheep:				dw SMW_NorSpr016_VerticalCheepCheep_Status08_Main
.NorSpr017_GeneratorCheepCheep:				dw SMW_NorSpr017_GeneratorCheepCheep_Status08_Main
.NorSpr018_SurfaceJumpingCheepCheep:			dw SMW_NorSpr018_SurfaceJumpingCheepCheep_Status08_Main
.NorSpr019_DisplayMessage:				dw SMW_NorSpr019_DisplayMessage_Status08_Main
.NorSpr01A_ClassicPiranhaPlant:				dw SMW_NorSpr01A_ClassicPiranhaPlant_Status08_Main
.NorSpr01B_Football:					dw SMW_NorSpr01B_Football_Status08_Main
.NorSpr01C_BulletBill:					dw SMW_NorSpr01C_BulletBill_Status08_Main
.NorSpr01D_HoppingFlame:				dw SMW_NorSpr01D_HoppingFlame_Status08_Main
.NorSpr01E_Lakitu:					dw SMW_NorSpr01E_Lakitu_Status08_Main
.NorSpr01F_MagiKoopa:					dw SMW_NorSpr01F_MagiKoopa_Status08_Main
.NorSpr020_Magic:					dw SMW_NorSpr020_Magic_Status08_Main
.NorSpr021_MovingCoin:					dw SMW_NorSpr021_MovingCoin_Status08_Main
.NorSpr022_GreenVerticalNetKoopa:			dw SMW_NorSpr022_GreenVerticalNetKoopa_Status08_Main
.NorSpr023_RedVerticalNetKoopa:				dw SMW_NorSpr023_RedVerticalNetKoopa_Status08_Main
.NorSpr024_GreenHorizontalNetKoopa:			dw SMW_NorSpr024_GreenHorizontalNetKoopa_Status08_Main
.NorSpr025_RedHorizontalNetKoopa:			dw SMW_NorSpr025_RedHorizontalNetKoopa_Status08_Main
.NorSpr026_Thwomp:					dw SMW_NorSpr026_Thwomp_Status08_Main
.NorSpr027_Thwimp:					dw SMW_NorSpr027_Thwimp_Status08_Main
.NorSpr028_BigBoo:					dw SMW_NorSpr028_BigBoo_Status08_Main
.NorSpr029_KoopaKids:					dw SMW_NorSpr029_KoopaKids_Status08_Main
.NorSpr02A_UpsideDownPiranhaPlant:			dw SMW_NorSpr02A_UpsideDownPiranhaPlant_Status08_Main
.NorSpr02B_SumoLightning:				dw SMW_NorSpr02B_SumoLightning_Status08_Main
.NorSpr02C_YoshiEgg:					dw SMW_NorSpr02C_YoshiEgg_Status08_Main
.NorSpr02D_BabyYoshi:					dw SMW_NorSpr02D_BabyYoshi_Status08_Main
.NorSpr02E_SpikeTop:					dw SMW_NorSpr02E_SpikeTop_Status08_Main
.NorSpr02F_PortableSpringboard:				dw SMW_NorSpr02F_PortableSpringboard_Status08_Main
.NorSpr030_ThrowingDryBones:				dw SMW_NorSpr030_ThrowingDryBones_Status08_Main
.NorSpr031_BonyBeetle:					dw SMW_NorSpr031_BonyBeetle_Status08_Main
.NorSpr032_LedgeDryBones:				dw SMW_NorSpr032_LedgeDryBones_Status08_Main
.NorSpr033_Podoboo:					dw SMW_NorSpr033_Podoboo_Status08_Main
.NorSpr034_LudwigFireball:				dw SMW_NorSpr034_LudwigFireball_Status08_Main
.NorSpr035_Yoshi:					dw SMW_NorSpr035_Yoshi_Status08_Main
.NorSpr036_Unused:					dw SMW_NorSpr036_Unused_Status08_Main
.NorSpr037_Boo:						dw SMW_NorSpr037_Boo_Status08_Main
.NorSpr038_StraightEerie:				dw SMW_NorSpr038_StraightEerie_Status08_Main
.NorSpr039_WavyEerie:					dw SMW_NorSpr039_WavyEerie_Status08_Main
.NorSpr03A_FixedUrchin:					dw SMW_NorSpr03A_FixedUrchin_Status08_Main
.NorSpr03B_WallDetectUrchin:				dw SMW_NorSpr03B_WallDetectUrchin_Status08_Main
.NorSpr03C_WallFollowUrchin:				dw SMW_NorSpr03C_WallFollowUrchin_Status08_Main
.NorSpr03D_RipVanFish:					dw SMW_NorSpr03D_RipVanFish_Status08_Main
.NorSpr03E_PSwitch:					dw SMW_NorSpr03E_PSwitch_Status08_Main
.NorSpr03F_ParachuteGoomba:				dw SMW_NorSpr03F_ParachuteGoomba_Status08_Main
.NorSpr040_ParachuteBobOmb:				dw SMW_NorSpr040_ParachuteBobOmb_Status08_Main
.NorSpr041_LongJumpDolphin:				dw SMW_NorSpr041_LongJumpDolphin_Status08_Main
.NorSpr042_ShortJumpDolphin:				dw SMW_NorSpr042_ShortJumpDolphin_Status08_Main
.NorSpr043_VerticalDolphin:				dw SMW_NorSpr043_VerticalDolphin_Status08_Main
.NorSpr044_TorpedoTed:					dw SMW_NorSpr044_TorpedoTed_Status08_Main
.NorSpr045_DirectionalCoins:				dw SMW_NorSpr045_DirectionalCoins_Status08_Main
.NorSpr046_DigginChuck:					dw SMW_NorSpr046_DigginChuck_Status08_Main
.NorSpr047_SwimmingAndJumpingCheepCheep:		dw SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08_Main
.NorSpr048_DigginChuckRock:				dw SMW_NorSpr048_DigginChuckRock_Status08_Main
.NorSpr049_ShiftingPipe:				dw SMW_NorSpr049_ShiftingPipe_Status08_Main
.NorSpr04A_GoalSphere:					dw SMW_NorSpr04A_GoalSphere_Status08_Main
.NorSpr04B_PipeLakitu:					dw SMW_NorSpr04B_PipeLakitu_Status08_Main
.NorSpr04C_ExplodingBlock:				dw SMW_NorSpr04C_ExplodingBlock_Status08_Main
.NorSpr04D_GroundMontyMole:				dw SMW_NorSpr04D_GroundMontyMole_Status08_Main
.NorSpr04E_LedgeMontyMole:				dw SMW_NorSpr04E_LedgeMontyMole_Status08_Main
.NorSpr04F_JumpingPiranhaPlant:				dw SMW_NorSpr04F_JumpingPiranhaPlant_Status08_Main
.NorSpr050_FireSpittingJumpingPiranhaPlant:		dw SMW_NorSpr050_FireSpittingJumpingPiranhaPlant_Status08_Main
.NorSpr051_Ninji:					dw SMW_NorSpr051_Ninji_Status08_Main
.NorSpr052_MovingLedgeHole:				dw SMW_NorSpr052_MovingLedgeHole_Status08_Main
.NorSpr053_ThrowBlock:					dw SMW_NorSpr053_ThrowBlock_Status08_Main
.NorSpr054_ClimbingNetDoor:				dw SMW_NorSpr054_ClimbingNetDoor_Status08_Main
.NorSpr055_HorizontalCheckerboardPlatform:		dw SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08_Main
.NorSpr056_HorizontalRockPlatform:			dw SMW_NorSpr056_HorizontalRockPlatform_Status08_Main
.NorSpr057_VerticalCheckerboardPlatform:		dw SMW_NorSpr057_VerticalCheckerboardPlatform_Status08_Main
.NorSpr058_VerticalRockPlatform:			dw SMW_NorSpr058_VerticalRockPlatform_Status08_Main
.NorSpr059_HorizontalAndVerticalTurnBlockBridge:	dw SMW_NorSpr059_HorizontalAndVerticalTurnBlockBridge_Status08_Main
.NorSpr05A_HorizontalTurnBlockBridge:			dw SMW_NorSpr05A_HorizontalTurnBlockBridge_Status08_Main
.NorSpr05B_BrownBuoyantPlatform:			dw SMW_NorSpr05B_BrownBuoyantPlatform_Status08_Main
.NorSpr05C_BuoyantCheckboardPlatform:			dw SMW_NorSpr05C_BuoyantCheckboardPlatform_Status08_Main
.NorSpr05D_OrangeBuoyantPlatform:			dw SMW_NorSpr05D_OrangeBuoyantPlatform_Status08_Main
.NorSpr05E_FloatingOrangePlatform:			dw SMW_NorSpr05E_FloatingOrangePlatform_Status08_Main
.NorSpr05F_BrownChainedPlatform:			dw SMW_NorSpr05F_BrownChainedPlatform_Status08_Main
.NorSpr060_FlatPalaceSwitch:				dw SMW_NorSpr060_FlatPalaceSwitch_Status08_Main
.NorSpr061_SkullRaft:					dw SMW_NorSpr061_SkullRaft_Status08_Main
.NorSpr062_BrownLineGuidePlatform:			dw SMW_NorSpr062_BrownLineGuidePlatform_Status08_Main
.NorSpr063_CheckerboardLineGuidePlatform:		dw SMW_NorSpr063_CheckerboardLineGuidePlatform_Status08_Main
.NorSpr064_LineGuideRope:				dw SMW_NorSpr064_LineGuideRope_Status08_Main
.NorSpr065_Chainsaw:					dw SMW_NorSpr065_Chainsaw_Status08_Main
.NorSpr066_UpsideDownChainsaw:				dw SMW_NorSpr066_UpsideDownChainsaw_Status08_Main
.NorSpr067_LineGuideGrinder:				dw SMW_NorSpr067_LineGuideGrinder_Status08_Main
.NorSpr068_LineGuideFuzzy:				dw SMW_NorSpr068_LineGuideFuzzy_Status08_Main
.NorSpr069_Unused:					dw SMW_NorSpr069_Unused_Status08_Main
.NorSpr06A_CoinGameCloud:				dw SMW_NorSpr06A_CoinGameCloud_Status08_Main
.NorSpr06B_LeftWallSpringboard:				dw SMW_NorSpr06B_LeftWallSpringboard_Status08_Main
.NorSpr06C_RightWallSpringboard:			dw SMW_NorSpr06C_RightWallSpringboard_Status08_Main
.NorSpr06D_InvisibleBlock:				dw SMW_NorSpr06D_InvisibleBlock_Status08_Main
.NorSpr06E_DinoRhino:					dw SMW_NorSpr06E_DinoRhino_Status08_Main
.NorSpr06F_DinoTorch:					dw SMW_NorSpr06F_DinoTorch_Status08_Main
.NorSpr070_Pokey:					dw SMW_NorSpr070_Pokey_Status08_Main
.NorSpr071_RedCapeSuperKoopa:				dw SMW_NorSpr071_RedCapeSuperKoopa_Status08_Main
.NorSpr072_YellowCapeSuperKoopa:			dw SMW_NorSpr072_YellowCapeSuperKoopa_Status08_Main
.NorSpr073_GroundSuperKoopa:				dw SMW_NorSpr073_GroundSuperKoopa_Status08_Main
.NorSpr074_Mushroom:					dw SMW_NorSpr074_Mushroom_Status08_Main
.NorSpr075_FireFlower:					dw SMW_NorSpr075_FireFlower_Status08_Main
.NorSpr076_Star:					dw SMW_NorSpr076_Star_Status08_Main
.NorSpr077_Feather:					dw SMW_NorSpr077_Feather_Status08_Main
.NorSpr078_1upMushroom:					dw SMW_NorSpr078_1upMushroom_Status08_Main
.NorSpr079_VineHead:					dw SMW_NorSpr079_VineHead_Status08_Main
.NorSpr07A_Fireworks:					dw SMW_NorSpr07A_Fireworks_Status08_Main
.NorSpr07B_GoalTape:					dw SMW_NorSpr07B_GoalTape_Status08_Main
.NorSpr07C_PrincessPeach:				dw SMW_NorSpr07C_PrincessPeach_Status08_Main
.NorSpr07D_PBalloon:					dw SMW_NorSpr07D_PBalloon_Status08_Main
.NorSpr07E_FlyingRedCoin:				dw SMW_NorSpr07E_FlyingRedCoin_Status08_Main
.NorSpr07F_Flying1up:					dw SMW_NorSpr07F_Flying1up_Status08_Main
.NorSpr080_Key:						dw SMW_NorSpr080_Key_Status08_Main
.NorSpr081_ChangingItem:				dw SMW_NorSpr081_ChangingItem_Status08_Main
.NorSpr082_BonusGame:					dw SMW_NorSpr082_BonusGame_Status08_Main
.NorSpr083_LeftFlyingBlock:				dw SMW_NorSpr083_LeftFlyingBlock_Status08_Main
.NorSpr084_HorizontalFlyingBlock:			dw SMW_NorSpr084_HorizontalFlyingBlock_Status08_Main
.NorSpr085_Unused:					dw SMW_NorSpr085_Unused_Status08_Main
.NorSpr086_Wiggler:					dw SMW_NorSpr086_Wiggler_Status08_Main
.NorSpr087_LakituCloud:					dw SMW_NorSpr087_LakituCloud_Status08_Main
.NorSpr088_WingedCage:					dw SMW_NorSpr088_WingedCage_Status08_Main
.NorSpr089_Layer3Smasher:				dw SMW_NorSpr089_Layer3Smasher_Status08_Main
.NorSpr08A_Bird:					dw SMW_NorSpr08A_Bird_Status08_Main
.NorSpr08B_FireplaceSmoke:				dw SMW_NorSpr08B_FireplaceSmoke_Status08_Main
.NorSpr08C_SideExitAndFireplace:			dw SMW_NorSpr08C_SideExitAndFireplace_Status08_Main
.NorSpr08D_GhostHouseDoor:				dw SMW_NorSpr08D_GhostHouseDoor_Status08_Main
.NorSpr08E_WarpHole:					dw SMW_NorSpr08E_WarpHole_Status08_Main
.NorSpr08F_ScalePlatform:				dw SMW_NorSpr08F_ScalePlatform_Status08_Main
.NorSpr090_GreenGasBubble:				dw SMW_NorSpr090_GreenGasBubble_Status08_Main
.NorSpr091_CharginChuck:				dw SMW_NorSpr091_CharginChuck_Status08_Main
.NorSpr092_SplittinChuck:				dw SMW_NorSpr092_SplittinChuck_Status08_Main
.NorSpr093_BouncinChuck:				dw SMW_NorSpr093_BouncinChuck_Status08_Main
.NorSpr094_WhistlinChuck:				dw SMW_NorSpr094_WhistlinChuck_Status08_Main
.NorSpr095_ClappinChuck:				dw SMW_NorSpr095_ClappinChuck_Status08_Main
.NorSpr096_CharginChuckCopy:				dw SMW_NorSpr096_CharginChuckCopy_Status08_Main
.NorSpr097_PuntinChuck:					dw SMW_NorSpr097_PuntinChuck_Status08_Main
.NorSpr098_PitchinChuck:				dw SMW_NorSpr098_PitchinChuck_Status08_Main
.NorSpr099_VolcanoLotus:				dw SMW_NorSpr099_VolcanoLotus_Status08_Main
.NorSpr09A_SumoBro:					dw SMW_NorSpr09A_SumoBro_Status08_Main
.NorSpr09B_HammerBro:					dw SMW_NorSpr09B_HammerBro_Status08_Main
.NorSpr09C_HammerBroPlatform:				dw SMW_NorSpr09C_HammerBroPlatform_Status08_Main
.NorSpr09D_BubbleWithSprite:				dw SMW_NorSpr09D_BubbleWithSprite_Status08_Main
.NorSpr09E_BallNChain:					dw SMW_NorSpr09E_BallNChain_Status08_Main
.NorSpr09F_BanzaiBill:					dw SMW_NorSpr09F_BanzaiBill_Status08_Main
.NorSpr0A0_ActivateBowserBattle:			dw SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main
.NorSpr0A1_BowserBowlingBall:				dw SMW_NorSpr0A1_BowserBowlingBall_Status08_Main
.NorSpr0A2_MechaKoopa:					dw SMW_NorSpr0A2_MechaKoopa_Status08_Main
.NorSpr0A3_GreyChainedPlatform:				dw SMW_NorSpr0A3_GreyChainedPlatform_Status08_Main
.NorSpr0A4_SpikeBall:					dw SMW_NorSpr0A4_SpikeBall_Status08_Main
.NorSpr0A5_Sparky:					dw SMW_NorSpr0A5_Sparky_Status08_Main
.NorSpr0A6_Hothead:					dw SMW_NorSpr0A6_Hothead_Status08_Main
.NorSpr0A7_IggyBall:					dw SMW_NorSpr0A7_IggyBall_Status08_Main
.NorSpr0A8_Blargg:					dw SMW_NorSpr0A8_Blargg_Status08_Main
.NorSpr0A9_Reznor:					dw SMW_NorSpr0A9_Reznor_Status08_Main
.NorSpr0AA_Fishbone:					dw SMW_NorSpr0AA_Fishbone_Status08_Main
.NorSpr0AB_Rex:						dw SMW_NorSpr0AB_Rex_Status08_Main
.NorSpr0AC_DownFirstWoodenSpike:			dw SMW_NorSpr0AC_DownFirstWoodenSpike_Status08_Main
.NorSpr0AD_UpDownFirstWoodenSpike:			dw SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status08_Main
.NorSpr0AE_FishinBoo:					dw SMW_NorSpr0AE_FishinBoo_Status08_Main
.NorSpr0AF_BooBlock:					dw SMW_NorSpr0AF_BooBlock_Status08_Main
.NorSpr0B0_ReflectingBooBuddies:			dw SMW_NorSpr0B0_ReflectingBooBuddies_Status08_Main
.NorSpr0B1_CreateEatBlock:				dw SMW_NorSpr0B1_CreateEatBlock_Status08_Main
.NorSpr0B2_FallingSpike:				dw SMW_NorSpr0B2_FallingSpike_Status08_Main
.NorSpr0B3_BowserStatueFire:				dw SMW_NorSpr0B3_BowserStatueFire_Status08_Main
.NorSpr0B4_NonLineGuideGrinder:				dw SMW_NorSpr0B4_NonLineGuideGrinder_Status08_Main
.NorSpr0B5_SinkingFireball:				dw SMW_NorSpr0B5_SinkingFireball_Status08_Main
.NorSpr0B6_ReflectingPodoboo:				dw SMW_NorSpr0B6_ReflectingPodoboo_Status08_Main
.NorSpr0B7_CarrotTopLiftUpperRight:			dw SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08_Main
.NorSpr0B8_CarrotTopLiftUpperLeft:			dw SMW_NorSpr0B8_CarrotTopLiftUpperLeft_Status08_Main
.NorSpr0B9_MessageBox:					dw SMW_NorSpr0B9_MessageBox_Status08_Main
.NorSpr0BA_TimedPlatform:				dw SMW_NorSpr0BA_TimedPlatform_Status08_Main
.NorSpr0BB_MovingCastleStone:				dw SMW_NorSpr0BB_MovingCastleStone_Status08_Main
.NorSpr0BC_BowserStatue:				dw SMW_NorSpr0BC_BowserStatue_Status08_Main
.NorSpr0BD_SlidingNakedBlueKoopa:			dw SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08_Main
.NorSpr0BE_Swooper:					dw SMW_NorSpr0BE_Swooper_Status08_Main
.NorSpr0BF_MegaMole:					dw SMW_NorSpr0BF_MegaMole_Status08_Main
.NorSpr0C0_SinkingLavaPlatform:				dw SMW_NorSpr0C0_SinkingLavaPlatform_Status08_Main
.NorSpr0C1_WingedPlatform:				dw SMW_NorSpr0C1_WingedPlatform_Status08_Main
.NorSpr0C2_Blurp:					dw SMW_NorSpr0C2_Blurp_Status08_Main
.NorSpr0C3_PorcuPuffer:					dw SMW_NorSpr0C3_PorcuPuffer_Status08_Main
.NorSpr0C4_GreyFallingPlatform:				dw SMW_NorSpr0C4_GreyFallingPlatform_Status08_Main
.NorSpr0C5_BigBooBoss:					dw SMW_NorSpr0C5_BigBooBoss_Status08_Main
.NorSpr0C6_Spotlight:					dw SMW_NorSpr0C6_Spotlight_Status08_Main
.NorSpr0C7_InvisibleMushroom:				dw SMW_NorSpr0C7_InvisibleMushroom_Status08_Main
.NorSpr0C8_LightSwitch:					dw SMW_NorSpr0C8_LightSwitch_Status08_Main
base off
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExecutePtr(Address)
namespace SMW_ExecutePtr
%InsertMacroAtXPosition(<Address>)

Absolute:
	STY.b !RAM_SMW_Misc_ScratchRAM03
	PLY
	STY.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$30
	AND.w #$00FF
	ASL
	TAY
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM01
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$30
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	JMP.w [!RAM_SMW_Misc_ScratchRAM00]

Long:
;$0086FA
	STY.b !RAM_SMW_Misc_ScratchRAM05
	PLY
	STY.b !RAM_SMW_Misc_ScratchRAM02
	REP.b #$30
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM03
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAY
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM03
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	SEP.b #$30
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	JMP.w [!RAM_SMW_Misc_ScratchRAM00]
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GetRand(Address)
namespace SMW_GetRand
%InsertMacroAtXPosition(<Address>)

Main:
	PHY
	LDY.b #$01
	JSL.l CODE_01AD07
	DEY
	JSL.l CODE_01AD07
	PLY
	RTL

CODE_01AD07:
	LDA.w !RAM_SMW_Misc_RNGRoutineScratchRAM148B
	ASL
	ASL
	SEC
	ADC.w !RAM_SMW_Misc_RNGRoutineScratchRAM148B
	STA.w !RAM_SMW_Misc_RNGRoutineScratchRAM148B
	ASL.w !RAM_SMW_Misc_RNGRoutineScratchRAM148C
	LDA.b #$20
	BIT.w !RAM_SMW_Misc_RNGRoutineScratchRAM148C
	BCC.b CODE_01AD21
	BEQ.b CODE_01AD26
	BNE.b CODE_01AD23
CODE_01AD21:
	BNE.b CODE_01AD26
CODE_01AD23:
	INC.w !RAM_SMW_Misc_RNGRoutineScratchRAM148C
CODE_01AD26:
	LDA.w !RAM_SMW_Misc_RNGRoutineScratchRAM148C
	EOR.w !RAM_SMW_Misc_RNGRoutineScratchRAM148B
	STA.w !RAM_SMW_Misc_RandomByte1,y
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleSPCUploads(Address)
namespace SMW_HandleSPCUploads
%InsertMacroAtXPosition(<Address>)

SPC700UploadLoop:
	PHP
	REP.b #$30
	LDY.w #$0000
	LDA.w #$BBAA
CODE_008082:
	CMP.w !REGISTER_APUPort0
	BNE.b CODE_008082
	SEP.b #$20
	LDA.b #$CC
	BRA.b CODE_0080B3

CODE_00808D:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	XBA
	LDA.b #$00
	BRA.b CODE_0080A0

CODE_008095:
	XBA
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	XBA
CODE_00809A:
	CMP.w !REGISTER_APUPort0
	BNE.b CODE_00809A
	INC
CODE_0080A0:
	REP.b #$20
	STA.w !REGISTER_APUPort0
	SEP.b #$20
	DEX
	BNE.b CODE_008095
CODE_0080AA:
	CMP.w !REGISTER_APUPort0
	BNE.b CODE_0080AA
CODE_0080AF:
	ADC.b #$03
	BEQ.b CODE_0080AF
CODE_0080B3:
	PHA
	REP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	INY
	TAX
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	INY
	STA.w !REGISTER_APUPort2
	SEP.b #$20
	CPX.w #$0001
	LDA.b #$00
	ROL
	STA.w !REGISTER_APUPort1
	ADC.b #$7F
	PLA
	STA.w !REGISTER_APUPort0
CODE_0080D3:
	CMP.w !REGISTER_APUPort0
	BNE.b CODE_0080D3
	BVS.b CODE_00808D
	STZ.w !REGISTER_APUPort0
	STZ.w !REGISTER_APUPort1
	STZ.w !REGISTER_APUPort2
	STZ.w !REGISTER_APUPort3
	PLP
	RTS

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) == $00
UploadSPCEngine:
	LDA.b #SPC700Engine
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #SPC700Engine>>8
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #SPC700Engine>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STA.w !RAM_SMW_Misc_ScratchRAM00
	LDA.b #SPC700Engine>>8
	STA.w !RAM_SMW_Misc_ScratchRAM01
	LDA.b #SPC700Engine>>16
	STA.w !RAM_SMW_Misc_ScratchRAM02
endif
UploadDataToSPC:
	SEI
	JSR.w SPC700UploadLoop
	CLI
	RTS
endif

UploadSamples:
	LDA.b #SPC700Samples
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #SPC700Samples>>8
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #SPC700Samples>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STA.w !RAM_SMW_Misc_ScratchRAM00
	LDA.b #SPC700Samples>>8
	STA.w !RAM_SMW_Misc_ScratchRAM01
	LDA.b #SPC700Samples>>16
	STA.w !RAM_SMW_Misc_ScratchRAM02
endif
	BRA.b StrtSPCMscUpld

UploadOverworldMusicBank:
	LDA.b #OverworldMusicBank
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #OverworldMusicBank>>8
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #OverworldMusicBank>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STA.w !RAM_SMW_Misc_ScratchRAM00
	LDA.b #OverworldMusicBank>>8
	STA.w !RAM_SMW_Misc_ScratchRAM01
	LDA.b #OverworldMusicBank>>16
	STA.w !RAM_SMW_Misc_ScratchRAM02
endif
StrtSPCMscUpld:
	LDA.b #$FF
	STA.w !REGISTER_APUPort1
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	SEI
	JSR.w SPC700UploadLoop
	CLI
else
	JSR.w UploadDataToSPC
endif
	LDX.b #$03
SPC700ZeroLoop:
	STZ.w !REGISTER_APUPort0,x
	STZ.w !RAM_SMW_IO_SoundCh1,x
	STZ.w !RAM_SMW_UnusedRAM_7E1DFD,x
	DEX
	BPL.b SPC700ZeroLoop
CODE_008133:
	RTS

CODE_008134:
	LDA.w !RAM_SMW_Flag_ActiveBonusGame
	BNE.b UploadLevelMusicBank
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	CMP.b #!Define_SMW_LevelID_IntroSublevel
	BEQ.b UploadLevelMusicBank
	ORA.w !RAM_SMW_Counter_SublevelsEntered
	ORA.w !RAM_SMW_Flag_ShowPlayerStart
	BNE.b CODE_008133
UploadLevelMusicBank:
	LDA.b #LevelMusicBank
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #LevelMusicBank>>8
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #LevelMusicBank>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STA.w !RAM_SMW_Misc_ScratchRAM00
	LDA.b #LevelMusicBank>>8
	STA.w !RAM_SMW_Misc_ScratchRAM01
	LDA.b #LevelMusicBank>>16
	STA.w !RAM_SMW_Misc_ScratchRAM02
endif
	BRA.b StrtSPCMscUpld

UploadCreditsMusicBank:
	LDA.b #CreditsMusicBank
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #CreditsMusicBank>>8
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #CreditsMusicBank>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STA.w !RAM_SMW_Misc_ScratchRAM00
	LDA.b #CreditsMusicBank>>8
	STA.w !RAM_SMW_Misc_ScratchRAM01
	LDA.b #CreditsMusicBank>>16
	STA.w !RAM_SMW_Misc_ScratchRAM02
endif
	BRA.b StrtSPCMscUpld
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleSPCUploads(Address)
namespace SMW_HandleSPCUploads
%InsertMacroAtXPosition(<Address>)

CreditsMusicBank:
	incbin "SPC700/credits_music.bin"
namespace off
endmacro

macro ROUTINE_RT02_SMW_HandleSPCUploads(Address)
namespace SMW_HandleSPCUploads
%InsertMacroAtXPosition(<Address>)

SPC700Engine:
	incbin "SPC700/Engine.bin"
OverworldMusicBank:
	incbin "SPC700/overworld_music.bin"
LevelMusicBank:
	incbin "SPC700/level_music.bin"
namespace off
endmacro

macro ROUTINE_RT03_SMW_HandleSPCUploads(Address)
namespace SMW_HandleSPCUploads
%InsertMacroAtXPosition(<Address>)

SPC700Samples:
	incbin "SPC700/samples.bin"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CompressOAMTileSizeBuffer(Address)
namespace SMW_CompressOAMTileSizeBuffer
%InsertMacroAtXPosition(<Address>)

DATA_008475:
	dw $0000,$0008,$0010,$0018
	dw $0020,$0028,$0030,$0038
	dw $0040,$0048,$0050,$0058
	dw $0060,$0068,$0070
	db $78

Main:
	LDY.b #$1E
Loop:
	LDX.w DATA_008475,y
	LDA.w SMW_OAMTileSizeBuffer[$03].Slot,x
	ASL
	ASL
	ORA.w SMW_OAMTileSizeBuffer[$02].Slot,x
	ASL
	ASL
	ORA.w SMW_OAMTileSizeBuffer[$01].Slot,x
	ASL
	ASL
	ORA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	STA.w SMW_UpperOAMBuffer[$00].Slot,y
	LDA.w SMW_OAMTileSizeBuffer[$07].Slot,x
	ASL
	ASL
	ORA.w SMW_OAMTileSizeBuffer[$06].Slot,x
	ASL
	ASL
	ORA.w SMW_OAMTileSizeBuffer[$05].Slot,x
	ASL
	ASL
	ORA.w SMW_OAMTileSizeBuffer[$04].Slot,x
	STA.w SMW_UpperOAMBuffer[$01].Slot,y
	DEY
	DEY
	BPL.b Loop
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro INLINEDATATABLE_SMW_TallNumberTiles()		; 1st byte = Top half. 2nd byte = Bottom half
	db $B7,$C3		; 0
	db $B8,$B9		; 1
	db $BA,$BB		; 2
	db $BA,$BF		; 3
	db $BC,$BD		; 4
	db $BE,$BF		; 5
	db $C0,$C3		; 6
	db $C1,$B9		; 7
	db $C2,$C4		; 8
	db $B7,$C5		; 9
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_UpdateStatusBarCounters(Address)
namespace SMW_UpdateStatusBarCounters
%InsertMacroAtXPosition(<Address>)

DATA_008DF5:
	db $40,$41,$42,$43,$44

ItemBoxItemTile:
	db $24			; Mushroom
	db $26			; Fire Flower
	db $48			; Star (Unused)
	db $0E			; Feather

StarPaletteFrames:		;\ Glitch: This causes the item box star to use palettes 8,9,A. It should be A and C.
	db $00,$02,$04,$02	;/

ItemBoxItemProperties:
	db $08			; Mushroom
	db $0A			; Fire Flower
	db $00			; Star (Unused)
	db $04			; Feather

BonusStarCounterNumberTiles:
	%INLINEDATATABLE_SMW_TallNumberTiles()

Main:
	LDA.w !RAM_SMW_Timer_EndLevel
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_008E6F
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b CODE_008E6F
	DEC.w !RAM_SMW_Counter_TimerFrames
	BPL.b CODE_008E6F
	LDA.b #!Define_SMW_Counter_TimerFrames
	STA.w !RAM_SMW_Counter_TimerFrames
	LDA.w !RAM_SMW_Counter_TimerHundreds
	ORA.w !RAM_SMW_Counter_TimerTens
	ORA.w !RAM_SMW_Counter_TimerOnes
	BEQ.b CODE_008E6F
	LDX.b #$02
CODE_008E3F:
	DEC.w !RAM_SMW_Counter_TimerHundreds,x
	BPL.b CODE_008E4C
	LDA.b #$09
	STA.w !RAM_SMW_Counter_TimerHundreds,x
	DEX
	BPL.b CODE_008E3F
CODE_008E4C:
	LDA.w !RAM_SMW_Counter_TimerHundreds
	BNE.b CODE_008E60
	LDA.w !RAM_SMW_Counter_TimerTens
	AND.w !RAM_SMW_Counter_TimerOnes
	CMP.b #$09
	BNE.b CODE_008E60
	LDA.b #!Define_SMW_Sound1DF9_IncreaseMusicTempo
	STA.w !RAM_SMW_IO_SoundCh1
CODE_008E60:
	LDA.w !RAM_SMW_Counter_TimerHundreds
	ORA.w !RAM_SMW_Counter_TimerTens
	ORA.w !RAM_SMW_Counter_TimerOnes
	BNE.b CODE_008E6F
	JSL.l SMW_DamagePlayer_Kill
CODE_008E6F:
	LDA.w !RAM_SMW_Counter_TimerHundreds
	STA.w !RAM_SMW_Misc_StatusBar_TimerHundreds
	LDA.w !RAM_SMW_Counter_TimerTens
	STA.w !RAM_SMW_Misc_StatusBar_TimerTens
	LDA.w !RAM_SMW_Counter_TimerOnes
	STA.w !RAM_SMW_Misc_StatusBar_TimerOnes
	LDX.b #$10							; Optimization: What is the point of this?
	LDY.b #$00
CODE_008E85:
	LDA.w !RAM_SMW_Counter_TimerHundreds,y
	BNE.b CODE_008E95
	LDA.b #$FC
	STA.w !RAM_SMW_Misc_StatusBar_TimerHundreds-$10,x
	INY
	INX
	CPY.b #$02
	BNE.b CODE_008E85
CODE_008E95:
	LDX.b #$03
CODE_008E97:
	LDA.w !RAM_SMW_Player_MarioScoreHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.w !RAM_SMW_Player_MarioScoreLo,x
	SEC
	SBC.w #$423F
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SBC.w #$000F
	BCC.b NotAtMaxScore
	SEP.b #$20
	LDA.b #$0F
	STA.w !RAM_SMW_Player_MarioScoreHi,x
	LDA.b #$42
	STA.w !RAM_SMW_Player_MarioScoreMid,x
	LDA.b #$3F
	STA.w !RAM_SMW_Player_MarioScoreLo,x
NotAtMaxScore:
	SEP.b #$20
	DEX
	DEX
	DEX
	BPL.b CODE_008E97
	LDA.w !RAM_SMW_Player_MarioScoreHi
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Player_MarioScoreMid
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_Player_MarioScoreLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$14
	LDY.b #$00
	JSR.w UpdateStatusBarScoreTiles
	LDX.b #$00
CODE_008EE0:
	LDA.w !RAM_SMW_Misc_StatusBar_ScoreMillions,x
	BNE.b CODE_008EEF
	LDA.b #$FC
	STA.w !RAM_SMW_Misc_StatusBar_ScoreMillions,x
	INX
	CPX.b #$06
	BNE.b CODE_008EE0
CODE_008EEF:
	LDA.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_008F1D
	LDA.w !RAM_SMW_Player_LuigiScoreHi
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Player_LuigiScoreMid
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_Player_LuigiScoreLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$14
	LDY.b #$00
	JSR.w UpdateStatusBarScoreTiles
	LDX.b #$00
CODE_008F0E:
	LDA.w !RAM_SMW_Misc_StatusBar_ScoreMillions,x
	BNE.b CODE_008F1D
	LDA.b #$FC
	STA.w !RAM_SMW_Misc_StatusBar_ScoreMillions,x
	INX
	CPX.b #$06
	BNE.b CODE_008F0E
CODE_008F1D:
	LDA.w !RAM_SMW_Counter_CoinHandler
	BEQ.b CODE_008F3B
	DEC.w !RAM_SMW_Counter_CoinHandler
	INC.w !RAM_SMW_Player_CurrentCoinCount
	LDA.w !RAM_SMW_Player_CurrentCoinCount
	CMP.b #$64
	BCC.b CODE_008F3B
	INC.w !RAM_SMW_Misc_1upHandler
	LDA.w !RAM_SMW_Player_CurrentCoinCount
	SEC
	SBC.b #$64
	STA.w !RAM_SMW_Player_CurrentCoinCount
CODE_008F3B:
	LDA.w !RAM_SMW_Player_CurrentLifeCount
	BMI.b CODE_008F49
	CMP.b #$62
	BCC.b CODE_008F49
	LDA.b #$62
	STA.w !RAM_SMW_Player_CurrentLifeCount
CODE_008F49:
	LDA.w !RAM_SMW_Player_CurrentLifeCount
	INC
	JSR.w SMW_HexToDec_Bank00
	TXY
	BNE.b CODE_008F55
	LDX.b #$FC
CODE_008F55:
	STX.w !RAM_SMW_Misc_StatusBar_LivesHi
	STA.w !RAM_SMW_Misc_StatusBar_LivesLo
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Player_MarioBonusStars,x
	CMP.b #$64
	BCC.b CODE_008F73
	LDA.b #$FF
	STA.w !RAM_SMW_Flag_ActiveBonusGame
	LDA.w !RAM_SMW_Player_MarioBonusStars,x
	SEC
	SBC.b #$64
	STA.w !RAM_SMW_Player_MarioBonusStars,x
CODE_008F73:
	LDA.w !RAM_SMW_Player_CurrentCoinCount
	JSR.w SMW_HexToDec_Bank00
	TXY
	BNE.b CODE_008F7E
	LDX.b #$FC
CODE_008F7E:
	STA.w !RAM_SMW_Misc_StatusBar_CoinsLo
	STX.w !RAM_SMW_Misc_StatusBar_CoinsHi
	SEP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacter
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_Player_MarioBonusStars,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$09
	LDY.b #$10
	JSR.w CODE_009051
	LDX.b #$00
CODE_008F9D:
	LDA.w !RAM_SMW_Misc_StatusBar_BottomBonusStarsHi,x
	BNE.b CODE_008FAF
	LDA.b #$FC
	STA.w !RAM_SMW_Misc_StatusBar_BottomBonusStarsHi,x
	STA.w !RAM_SMW_Misc_StatusBar_TopBonusStarsHi,x
	INX
	CPX.b #$01
	BNE.b CODE_008F9D
CODE_008FAF:
	LDA.w !RAM_SMW_Misc_StatusBar_BottomBonusStarsHi,x
	ASL
	TAY
	LDA.w BonusStarCounterNumberTiles,y
	STA.w !RAM_SMW_Misc_StatusBar_TopBonusStarsHi,x
	LDA.w BonusStarCounterNumberTiles+$01,y
	STA.w !RAM_SMW_Misc_StatusBar_BottomBonusStarsHi,x
	INX
	CPX.b #$02
	BNE.b CODE_008FAF
	JSR.w DrawItemBoxItem
	LDA.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_008FD8
	LDX.b #$04
CODE_008FCF:
	LDA.w DATA_008DF5,x
	STA.w !RAM_SMW_Misc_StatusBar_Player,x
	DEX
	BPL.b CODE_008FCF
CODE_008FD8:
	LDA.w !RAM_SMW_Counter_YoshiCoinsToDisplay
	CMP.b #$05
	BCC.b CODE_008FE1
	LDA.b #$00
CODE_008FE1:
	DEC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$00
CODE_008FE6:
	LDY.b #$FC
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_008FEE
	LDY.b #$2E
CODE_008FEE:
	TYA
	STA.w !RAM_SMW_Misc_StatusBar_YoshiCoin1,x
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	INX
	CPX.b #$04
	BNE.b CODE_008FE6
	RTS

DATA_008FFA:
	dw $0001,$86A0,$0000,$2710,$0000,$03E8,$0000,$0064
	dw $0000,$000A,$0000,$0001

UpdateStatusBarScoreTiles:
Loop2:
	SEP.b #$20
	STZ.w !RAM_SMW_Misc_StatusBar_ScoreMillions-$14,x
Loop1:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.w DATA_008FFA+$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SBC.w DATA_008FFA,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_009039
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	INC.w !RAM_SMW_Misc_StatusBar_ScoreMillions-$14,x
	BRA.b Loop1

CODE_009039:
	INX
	INY
	INY
	INY
	INY
	CPY.b #$18
	BNE.b Loop2
	SEP.b #$20
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_UpdateStatusBarCounters(Address)
namespace SMW_UpdateStatusBarCounters
%InsertMacroAtXPosition(<Address>)

CODE_009051:
	SEP.b #$20
	STZ.w !RAM_SMW_Misc_StatusBar_ScoreMillions-$14,x
CODE_009056:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.w DATA_008FFA+$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	BCC.b CODE_00906D
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
	INC.w !RAM_SMW_Misc_StatusBar_ScoreMillions-$14,x
	BRA.b CODE_009056

CODE_00906D:
	INX
	INY
	INY
	INY
	INY
	CPY.b #$18
	BNE.b CODE_009051
	SEP.b #$20
	RTS

DrawItemBoxItem:
	LDY.b #!OAM_SMW_ItemBoxItem_NormalLevel*$04
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_00908E
	LDY.b #!OAM_SMW_ItemBoxItem_BowserReznorMortonRoyRoom
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b CODE_00908E
	LDA.b #$F0
	STA.w SMW_OAMBuffer[!OAM_SMW_ItemBoxItem_NormalLevel&$40].YDisp,y
CODE_00908E:
	STY.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w !RAM_SMW_Player_CurrentItemBox
	BEQ.b ItemBoxEmpty
	LDA.w ItemBoxItemProperties-$01,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CPY.b #$03
	BNE.b NoStarInBox
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	AND.b #$03
	PHY
	TAY
	LDA.w StarPaletteFrames,y
	PLY
	STA.b !RAM_SMW_Misc_ScratchRAM00
NoStarInBox:
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #((!RAM_SMW_Misc_StatusBar_ItemBox-!RAM_SMW_Misc_StatusBarTilemap+$01)*$08)+$10
	STA.w SMW_OAMBuffer[!OAM_SMW_ItemBoxItem_NormalLevel&$40].XDisp,y
	LDA.b #$0F
	STA.w SMW_OAMBuffer[!OAM_SMW_ItemBoxItem_NormalLevel&$40].YDisp,y
	LDA.b #$30
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[!OAM_SMW_ItemBoxItem_NormalLevel&$40].Prop,y
	LDX.w !RAM_SMW_Player_CurrentItemBox
	LDA.w ItemBoxItemTile-$01,x
	STA.w SMW_OAMBuffer[!OAM_SMW_ItemBoxItem_NormalLevel&$40].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
ItemBoxEmpty:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HexToDec(Address)
namespace SMW_HexToDec
%InsertMacroAtXPosition(<Address>)

Bank00:
	%INLINEROUTINE_SMW_HexToDec(X)
namespace off
endmacro

macro ROUTINE_RT01_SMW_HexToDec(Address)
namespace SMW_HexToDec
%InsertMacroAtXPosition(<Address>)

;Note: This one appears to be unused.
Bank04:
	%INLINEROUTINE_SMW_HexToDec(Y)
namespace off
endmacro

macro ROUTINE_RT02_SMW_HexToDec(Address)
namespace SMW_HexToDec
%InsertMacroAtXPosition(<Address>)

Bank05:
	%INLINEROUTINE_SMW_HexToDec(X)
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_HexToDec(Index)
	LD<Index>.b #$00
-:
	CMP.b #$0A
	BCC.b +
	SBC.b #$0A
	IN<Index>
	BRA.b -

+
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DropReservedItem(Address)
namespace SMW_DropReservedItem
%InsertMacroAtXPosition(<Address>)

UNK_028000:
	db $80,$40,$20,$10,$08,$04,$02,$01

Main:
	PHX
	LDA.w !RAM_SMW_Player_CurrentItemBox
	BEQ.b DropRiEnd
	STZ.w !RAM_SMW_Player_CurrentItemBox
	PHA
	LDA.b #!Define_SMW_Sound1DFC_DropItemInReserve1
	STA.w !RAM_SMW_IO_SoundCh3
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
DropRiFindSlot:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b DropRiHaveSlot
	DEX
	BPL.b DropRiFindSlot
	DEC.w !RAM_SMW_NorSpr_SlotToOverwriteWhenSlotsFull
	BPL.b ADDR_02802B
	LDA.b #!Define_SMW_MaxNormalSpriteSlot-$0A
	STA.w !RAM_SMW_NorSpr_SlotToOverwriteWhenSlotsFull
ADDR_02802B:
	LDA.w !RAM_SMW_NorSpr_SlotToOverwriteWhenSlotsFull
	CLC
	ADC.b #!Define_SMW_MaxNormalSpriteSlot-$01
	TAX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b DropRiHaveSlot
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BNE.b DropRiHaveSlot
	STZ.w !RAM_SMW_Timer_InflateFromPBalloon
DropRiHaveSlot:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	PLA
	CLC
	ADC.b #!Define_SMW_SpriteID_NorSpr074_Mushroom-$01
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$78
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$20
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	INC.w !RAM_SMW_NorSpr_Table7E1534,x
DropRiEnd:
	PLX
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_GlobalPalettes(Address)
namespace SMW_GlobalPalettes
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_SMW_Global_UseIndividualPaletteFiles == !FALSE
Sky:
.Setting00:		incbin "palettes/smw.pal":0-2
.Setting01:		incbin "palettes/smw.pal":2-4
.Setting02:		incbin "palettes/smw.pal":4-6
.Setting03:		incbin "palettes/smw.pal":6-8
.Setting04:		incbin "palettes/smw.pal":8-A
.Setting05:		incbin "palettes/smw.pal":A-C
.Setting06:		incbin "palettes/smw.pal":C-E
.Setting07:		incbin "palettes/smw.pal":E-10

Background:
.Setting00:		incbin "palettes/smw.pal":10-28
.Setting01:		incbin "palettes/smw.pal":28-40
.Setting02:		incbin "palettes/smw.pal":40-58
.Setting03:		incbin "palettes/smw.pal":58-70
.Setting04:		incbin "palettes/smw.pal":70-88
.Setting05:		incbin "palettes/smw.pal":88-A0
.Setting06:		incbin "palettes/smw.pal":A0-B8
.Setting07:		incbin "palettes/smw.pal":B8-D0

Layer3:			incbin "palettes/smw.pal":D0-F0
Foreground:		incbin "palettes/smw.pal":F0-1B0
Objects:		incbin "palettes/smw.pal":1B0-1F8
InitBossFightLudwig:	incbin "palettes/smw.pal":1F8-204
InitBossFighRoy:	incbin "palettes/smw.pal":204-21C
InitBossFightMorton:	incbin "palettes/smw.pal":21C-228
Mario:			incbin "palettes/smw.pal":228-23C
Luigi:			incbin "palettes/smw.pal":23C-250
MarioFire:		incbin "palettes/smw.pal":250-264
LuigiFire:		incbin "palettes/smw.pal":264-278
Sprites:		incbin "palettes/smw.pal":278-2CC
InitBossFightReznor:	incbin "palettes/smw.pal":2CC-2D8
InitBossFightBowser:	incbin "palettes/smw.pal":2D8-320
BowserEnd:		incbin "palettes/smw.pal":320-338
OW_Areas:		incbin "palettes/smw.pal":338-488
OW_Objects:		incbin "palettes/smw.pal":488-4DC
OW_Sprites:		incbin "palettes/smw.pal":4DC-53E
BowserLightningFlash:	incbin "palettes/smw.pal":53E-54C
OW_Layer3:		incbin "palettes/smw.pal":54C-554
DATA_00B5F4:		incbin "palettes/smw.pal":554-56C
Flashing:
	; Yellow
	incbin "palettes/smw.pal":56C-57C
	; Red
	incbin "palettes/smw.pal":57C-58C
TS_Layer3:		incbin "palettes/smw.pal":58C-59C
DATA_00B63C:		incbin "palettes/smw.pal":59C-5AC
UnknownBlueGradient:	incbin "palettes/smw.pal":5AC-5BC ; Beta Iggy/Larry platform?
IggyLarryPlatform:	incbin "palettes/smw.pal":5BC-5CC
Layer3Smasher:		incbin "palettes/smw.pal":5CC-5D4
YoshiBerry:
	; Red
	incbin "palettes/smw.pal":5D4-5E2
	; Pink
	incbin "palettes/smw.pal":5E2-5F0
	; Green
	incbin "palettes/smw.pal":5F0-5FE

Bowser:
.Normal:		incbin "palettes/smw.pal":5FE-60C
.Fade01:		incbin "palettes/smw.pal":60C-61A
.Fade02:		incbin "palettes/smw.pal":61A-628
.Fade03:		incbin "palettes/smw.pal":628-636
.Fade04:		incbin "palettes/smw.pal":636-644
.Fade05:		incbin "palettes/smw.pal":644-652
.Fade06:		incbin "palettes/smw.pal":652-660
.Fade07:		incbin "palettes/smw.pal":660-66E

EndingLuigi:		incbin "palettes/smw.pal":66E-67A
EndingMario:		incbin "palettes/smw.pal":67A-686
EndingToadstool:	incbin "palettes/smw.pal":686-692
OW_AreasPassed:		incbin "palettes/smw.pal":692-7E2			; Note: Apparently, Lunar Magic 2.53 doesn't export all the shared palettes.

else

Sky:
.Setting00:		incbin "palettes/Sky.tpl":6-8
.Setting01:		incbin "palettes/Sky.tpl":8-A
.Setting02:		incbin "palettes/Sky.tpl":A-C
.Setting03:		incbin "palettes/Sky.tpl":C-E
.Setting04:		incbin "palettes/Sky.tpl":E-10
.Setting05:		incbin "palettes/Sky.tpl":10-12
.Setting06:		incbin "palettes/Sky.tpl":12-14
.Setting07:		incbin "palettes/Sky.tpl":14-16

Background:
.Setting00:
	incbin "palettes/Background.tpl":8-14
	incbin "palettes/Background.tpl":28-34
.Setting01:
	incbin "palettes/Background.tpl":48-54
	incbin "palettes/Background.tpl":68-74
.Setting02:
	incbin "palettes/Background.tpl":88-94
	incbin "palettes/Background.tpl":A8-B4
.Setting03:
	incbin "palettes/Background.tpl":C8-D4
	incbin "palettes/Background.tpl":E8-F4
.Setting04:
	incbin "palettes/Background.tpl":108-114
	incbin "palettes/Background.tpl":128-134
.Setting05:
	incbin "palettes/Background.tpl":148-154
	incbin "palettes/Background.tpl":168-174
.Setting06:
	incbin "palettes/Background.tpl":188-194
	incbin "palettes/Background.tpl":1A8-1B4
.Setting07:
	incbin "palettes/Background.tpl":1C8-1D4
	incbin "palettes/Background.tpl":1E8-1F4
Layer3:
	incbin "palettes/smw.pal":D0-F0
Foreground:
	incbin "palettes/smw.pal":F0-1B0
Objects:
	incbin "palettes/smw.pal":1B0-1F8
InitBossFightLudwig:
	incbin "palettes/smw.pal":1F8-204
InitBossFighRoy:
	incbin "palettes/smw.pal":204-21C
InitBossFightMorton:
	incbin "palettes/smw.pal":21C-228
Mario:
	incbin "palettes/smw.pal":228-23C
Luigi:
	incbin "palettes/smw.pal":23C-250
MarioFire:
	incbin "palettes/smw.pal":250-264
LuigiFire:
	incbin "palettes/smw.pal":264-278
Sprites:
	incbin "palettes/smw.pal":278-2CC
InitBossFightReznor:
	incbin "palettes/Mode7.tpl":6-12
InitBossFightBowser:
	incbin "palettes/Mode7.tpl":26-32
BowserEnd:
	incbin "palettes/smw.pal":320-338
OW_Areas:
	incbin "palettes/smw.pal":338-488
OW_Objects:
	incbin "palettes/smw.pal":488-4DC
OW_Sprites:
	incbin "palettes/smw.pal":4DC-53E
BowserLightningFlash:
	incbin "palettes/Bowser.tpl":106-114
OW_Layer3:
	incbin "palettes/smw.pal":54C-554
DATA_00B5F4:
	incbin "palettes/smw.pal":554-56C
Flashing:
	; Yellow
	incbin "palettes/smw.pal":56C-57C
	; Red
	incbin "palettes/smw.pal":57C-58C
TS_Layer3:
	incbin "palettes/smw.pal":58C-59C
DATA_00B63C:
	incbin "palettes/smw.pal":59C-5AC
UnknownBlueGradient:
	incbin "palettes/smw.pal":5AC-5BC ; Beta Iggy/Larry platform?
IggyLarryPlatform:
	incbin "palettes/IggyLarryPlatform.tpl":6-16
Layer3Smasher:
	incbin "palettes/smw.pal":5CC-5D4
YoshiBerry:
	; Red
	incbin "palettes/smw.pal":5D4-5E2
	; Pink
	incbin "palettes/smw.pal":5E2-5F0
	; Green
	incbin "palettes/smw.pal":5F0-5FE

Bowser:
.Normal:
	incbin "palettes/Bowser.tpl":6-14
.Fade01:
	incbin "palettes/Bowser.tpl":26-34
.Fade02:
	incbin "palettes/Bowser.tpl":46-54
.Fade03:
	incbin "palettes/Bowser.tpl":66-74
.Fade04:
	incbin "palettes/Bowser.tpl":86-94
.Fade05:
	incbin "palettes/Bowser.tpl":A6-B4
.Fade06:
	incbin "palettes/Bowser.tpl":C6-D4
.Fade07:
	incbin "palettes/Bowser.tpl":E6-F4

EndingLuigi:
	incbin "palettes/smw.pal":66E-67A
EndingMario:
	incbin "palettes/smw.pal":67A-686
EndingToadstool:
	incbin "palettes/smw.pal":686-692
OW_AreasPassed:
	incbin "palettes/smw.pal":692-7E2
endif
namespace off
endmacro

;---------------------------------------------------------------------------

;Info:
;.LoadColors Parameters
;	!RAM_SMW_Misc_ScratchRAM00 = 16-bit pointer to the above table
;	!RAM_SMW_Misc_ScratchRAM04 = CGRAM address X 2 (.LoadColors)
;	!RAM_SMW_Misc_ScratchRAM06 = Number of colors to buffer
;	!RAM_SMW_Misc_ScratchRAM08 = Skip to next palette row and loop again counter
;.LoadColorInVerticalStrip Parameters
;	!RAM_SMW_Misc_ScratchRAM04 = Color to upload
;	X = CGRAM address X 2

macro ROUTINE_RT00_SMW_BufferPalettesRoutines(Address)
namespace SMW_BufferPalettesRoutines
%InsertMacroAtXPosition(<Address>)

Overworld_Main:
	PHB
	PHK
	PLB
	JSR.w Overworld_Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_BufferPalettesRoutines(Address)
namespace SMW_BufferPalettesRoutines
%InsertMacroAtXPosition(<Address>)

DATA_00ABD3:
	db $00,$18,$30,$48,$60,$78,$90,$A8
	db $00,$14,$28,$3C

DATA_00ABDF:
	dw $0000,$0038,$0070,$00A8,$00E0,$0118,$0150

Levels:
	REP.b #$30
	LDA.w #$7FDD
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.w #$0002
	JSR.w LoadColorInVerticalStrip
	LDA.w #$7FFF
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.w #$0102
	JSR.w LoadColorInVerticalStrip
	LDA.w #SMW_GlobalPalettes_Layer3
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_Objects
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0084
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0009
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w !RAM_SMW_Misc_BackgroundColorSetting
	AND.w #$000F
	ASL
	TAY
	LDA.w SMW_GlobalPalettes_Sky,y
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w #SMW_GlobalPalettes_Foreground
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_FGPaletteSetting
	AND.w #$000F
	TAY
	LDA.w DATA_00ABD3,y
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0044
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_Sprites
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_SpritePaletteSetting
	AND.w #$000F
	TAY
	LDA.w DATA_00ABD3,y
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$01C4
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_Background
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_BGPaletteSetting
	AND.w #$000F
	TAY
	LDA.w DATA_00ABD3,y
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0004
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_YoshiBerry
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0052
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0006
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_YoshiBerry
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0132
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0006
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	SEP.b #$30
	RTS

LoadColorInVerticalStrip:
	LDY.w #$0007
.Loop:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_PaletteMirror[$00].LowByte,x
	TXA
	CLC
	ADC.w #$0020
	TAX
	DEY
	BPL.b .Loop
	RTS

LoadColors:
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDY.b !RAM_SMW_Misc_ScratchRAM06
.Loop:
	LDA.b (!RAM_SMW_Misc_ScratchRAM00)
	STA.w !RAM_SMW_Palettes_PaletteMirror,x
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	DEY
	BPL.b .Loop
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.w #$0020
	STA.b !RAM_SMW_Misc_ScratchRAM04
	DEC.b !RAM_SMW_Misc_ScratchRAM08
	BPL.b LoadColors
	RTS

DATA_00AD1E:
	dw $0001,$0403,$0503
	db $02

Overworld_Sub:
;$00AD25
	REP.b #$30
	LDY.w #SMW_GlobalPalettes_OW_Areas
	LDA.w !RAM_SMW_Overworld_LevelTileSettings+!Define_SMW_LevelID_ChangeOverworldPalette-$01
	BPL.b NoSpecialWorldPassedPalette
	LDY.w #SMW_GlobalPalettes_OW_AreasPassed
NoSpecialWorldPassedPalette:
#LM180Hijack_CustomOverworldPalettes:
	STY.b !RAM_SMW_Misc_ScratchRAM00					;\ LM: Hijacks this if the overworld is set to use a custom palette (1.80+)
	LDA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad			;/
	AND.w #$000F
	DEC
	TAY
	LDA.w DATA_00AD1E,y
	AND.w #$00FF
	ASL
	TAY
	LDA.w DATA_00ABDF,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0082
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0006
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0003
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_OW_Objects
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0052
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0006
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_OW_Sprites
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0102
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0006
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_OW_Layer3
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	SEP.b #$30
	RTS

TitleScreen:
;$00ADA6
	REP.b #$30
	LDA.w #SMW_GlobalPalettes_DATA_00B63C
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_TS_Layer3
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0030
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	SEP.b #$30
	RTS

IggyLarryPlatform:
;$00ADD9
	JSR.w Levels
	REP.b #$30
	LDA.w #$0017
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w #SMW_GlobalPalettes_Layer3
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	LDA.w #SMW_GlobalPalettes_IggyLarryPlatform
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	SEP.b #$30
	RTS

ReznorAndMode7KoopaBosses:
;$00AE15						; Note: Reznor, Ludwig, Roy, Morton, Bowser
	LDA.b #$02
	STA.w !RAM_SMW_Misc_SpritePaletteSetting
	LDA.b #$07
	STA.w !RAM_SMW_Misc_FGPaletteSetting
	JSR.w Levels
	REP.b #$30
	LDA.w #$0017
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w #SMW_GlobalPalettes_DATA_00B5F4
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0018
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0003
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STZ.b !RAM_SMW_Misc_ScratchRAM08
	JSR.w LoadColors
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_UpdateNormalSpritePositionBank01(Address)
namespace SMW_UpdateNormalSpritePositionBank01
%InsertMacroAtXPosition(<Address>)

Main:
.Y:
	PHB
	PHK
	PLB
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	PLB
	RTL

.X:
;$018022
	PHB
	PHK
	PLB
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_UpdateNormalSpritePositionBank01(Address)
namespace SMW_UpdateNormalSpritePositionBank01
%InsertMacroAtXPosition(<Address>)

Sub:
.X:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxNormalSpriteSlot+$01
	TAX
	JSR.w .Y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

.Y:
;$01ABD9
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b ++
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_NorSpr_SubYPos,x
	STA.w !RAM_SMW_NorSpr_SubYPos,x
	PHP
	PHP
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	PHA
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	PLP
	ADC.b #$00
++:
	STA.w !RAM_SMW_Sprites_PositionDisp
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateNormalSpritePositionBank02(Address)
namespace SMW_UpdateNormalSpritePositionBank02
%InsertMacroAtXPosition(<Address>)

X:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxNormalSpriteSlot+$01
	TAX
	JSR.w Y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

Y:
;$02D294
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_NorSpr_SubYPos,x
	STA.w !RAM_SMW_NorSpr_SubYPos,x
	PHP
	PHP
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	PHA
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	PLP
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_PositionDisp
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateExtendedSpritePosition(Address)
namespace SMW_UpdateExtendedSpritePosition
%InsertMacroAtXPosition(<Address>)

X:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxExtendedSpriteSlot+$01
	TAX
	JSR.w Y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

Y:
;$02B560
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_ExtSpr_SubYPos,x
	STA.w !RAM_SMW_ExtSpr_SubYPos,x
	PHP
	LDY.b #$00
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	ADC.w !RAM_SMW_ExtSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_ExtSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateBounceSpritePosition(Address)
namespace SMW_UpdateBounceSpritePosition
%InsertMacroAtXPosition(<Address>)

X:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxBounceSpriteSlot+$01
	TAX
	JSR.w Y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	RTS

Y:
;$02B526
	LDA.w !RAM_SMW_BounceSpr_YSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_BounceSpr_SubYPos,x
	STA.w !RAM_SMW_BounceSpr_SubYPos,x
	PHP
	LDA.w !RAM_SMW_BounceSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	LDY.b #$00
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	ADC.w !RAM_SMW_BounceSpr_YPosLo,x
	STA.w !RAM_SMW_BounceSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_BounceSpr_YPosHi,x
	STA.w !RAM_SMW_BounceSpr_YPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateMinorExtendedSpritePosition(Address)
namespace SMW_UpdateMinorExtendedSpritePosition
%InsertMacroAtXPosition(<Address>)

X:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxMinorExtendedSpriteSlot+$01
	TAX
	JSR.w Y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	RTS

Y:
;$02B5C8
	LDA.w !RAM_SMW_MExtSpr_YSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_MExtSpr_SubYPos,x
	STA.w !RAM_SMW_MExtSpr_SubYPos,x
	PHP
	LDA.w !RAM_SMW_MExtSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	BCC.b +
	ORA.b #$F0
+:
	PLP
	ADC.w !RAM_SMW_MExtSpr_YPosLo,x
	STA.w !RAM_SMW_MExtSpr_YPosLo,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateClusterSpritePosition(Address)
namespace SMW_UpdateClusterSpritePosition
%InsertMacroAtXPosition(<Address>)

X:
	PHX
	TXA
	CLC
	ADC.b #!Define_SMW_MaxClusterSpriteSlot+$01
	TAX
	JSR.w Y
	PLX
	RTS

Y:
;$02FFA3
	LDA.w !RAM_SMW_ClusterSpr_Table7E1E52,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_ClusterSpr_Table7E1E7A,x
	STA.w !RAM_SMW_ClusterSpr_Table7E1E7A,x
	PHP
	LDA.w !RAM_SMW_ClusterSpr_Table7E1E52,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	LDY.b #$00
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	ADC.w !RAM_SMW_ClusterSpr_YPosLo,x
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_ClusterSpr_YPosHi,x
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateCutsceneSpritePosition(Address)
namespace SMW_UpdateCutsceneSpritePosition
%InsertMacroAtXPosition(<Address>)

Y:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos,x
	PHP
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	LDY.b #$00
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	ADC.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	TYA
	ADC.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,x
	RTS

X:
	PHX
	TXA
	CLC
	ADC.b #!Define_SMW_MaxCutsceneSpriteSlot+$01
	TAX
	JSR.w Y
	PLX
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CopyOfUpdateCutsceneSpritePosition(Address)
namespace SMW_CopyOfUpdateCutsceneSpritePosition
%InsertMacroAtXPosition(<Address>)

Y:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos,x
	PHP
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	LDY.b #$00
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	ADC.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	TYA
	ADC.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,x
	RTS

X:
	PHX
	TXA
	CLC
	ADC.b #!Define_SMW_MaxCutsceneSpriteSlot+$01
	TAX
	JSR.w Y
	PLX
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateOverworldSpritePosition(Address)
namespace SMW_UpdateOverworldSpritePosition
%InsertMacroAtXPosition(<Address>)

Main:
	TXA
	CLC
	ADC.b #((!Define_SMW_MaxOverworldSpriteSlot+$01)*$02)
	TAX
	JSR.w Z
	LDA.w !RAM_SMW_OWSpr_ZPosLo-((!Define_SMW_MaxOverworldSpriteSlot+$01)*$02),x
	BPL.b CODE_04FEA0
	STZ.w !RAM_SMW_OWSpr_ZPosLo-((!Define_SMW_MaxOverworldSpriteSlot+$01)*$02),x
CODE_04FEA0:
	TXA
	SEC
	SBC.b #!Define_SMW_MaxOverworldSpriteSlot+$01
	TAX
	JSR.w Y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite

X:
Y:
Z:
	LDA.w !RAM_SMW_OWSpr_XSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_OWSpr_SubXPos,x
	STA.w !RAM_SMW_OWSpr_SubXPos,x
	LDA.w !RAM_SMW_OWSpr_XSpeed,x
	PHP
	LSR
	LSR
	LSR
	LSR
	LDY.b #$00
	PLP
	BPL.b +
	ORA.b #$F0
	DEY
+:
	ADC.w !RAM_SMW_OWSpr_XPosLo,x
	STA.w !RAM_SMW_OWSpr_XPosLo,x
	TYA
	ADC.w !RAM_SMW_OWSpr_XPosHi,x
	STA.w !RAM_SMW_OWSpr_XPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdatePlayerSpritePosition(Address)
namespace SMW_UpdatePlayerSpritePosition
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Player_YSpeed
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	LDA.w !RAM_SMW_Player_WallWalkStatus
	BEQ.b IsNotRunningUpWall
	LSR
	LDA.b !RAM_SMW_Player_XSpeed
	BCC.b MovingUpLeftWall
	EOR.b #$FF
	INC
MovingUpLeftWall:
	STA.b !RAM_SMW_Player_YSpeed
IsNotRunningUpWall:
	LDX.b #$00
	JSR.w UpdatePosition
	LDX.b #$02
	JSR.w UpdatePosition
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	STA.b !RAM_SMW_Player_YSpeed
	RTS

UpdatePosition:
	LDA.b !RAM_SMW_Player_XSpeed,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	BPL.b +
	EOR.b #$FF
	INC

+:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_Multiplicand
	TXA
	BEQ.b +
	LDA.b #$28

+:
	STA.w !REGISTER_Multiplier
	NOP
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !REGISTER_ProductOrRemainderLo
	LSR
	LSR
	LSR
	LSR
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	BIT.b !RAM_SMW_Player_SubXSpeed,x
	BPL.b +
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	EOR.w #$FFFF
	INC

+:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	CLC
	ADC.w !RAM_SMW_Player_SubXPos,x
	STA.w !RAM_SMW_Player_SubXPos,x
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM01
else
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_Player_SubXPos,x
	STA.w !RAM_SMW_Player_SubXPos,x
	REP.b #$20
	PHP
	LDA.b !RAM_SMW_Player_XSpeed,x
	LSR
	LSR
	LSR
	LSR
	AND.w #$000F
	CMP.w #$0008
	BCC.b +
	ORA.w #$FFF0
+:
	PLP
endif
	ADC.b !RAM_SMW_Player_XPosLo,x
	STA.b !RAM_SMW_Player_XPosLo,x
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_UnnecessaryInvertARt(Address)
namespace SMW_UnnecessaryInvertARt
%InsertMacroAtXPosition(<Address>)

Bank01:
	%INLINEROUTINE_SMW_UnnecessaryInvertARt()
namespace off
endmacro

macro ROUTINE_RT01_SMW_UnnecessaryInvertARt(Address)
namespace SMW_UnnecessaryInvertARt
%InsertMacroAtXPosition(<Address>)

CopyOfBank01:
	%INLINEROUTINE_SMW_UnnecessaryInvertARt()
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_UnnecessaryInvertARt()
	EOR.b #$FF
	INC
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GetDrawInfo(Address)
namespace SMW_GetDrawInfo
%InsertMacroAtXPosition(<Address>)

DATA_01A361:									;\ Optimization: Unnecessary tables if the below optimization is done.
	db $10,$20								;|
										;|
DATA_01A363:									;|
	db $01,$02								;/

Bank01:
	STZ.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BEQ.b CODE_01A379
	INC.w !RAM_SMW_NorSpr_XOffscreenFlag,x
CODE_01A379:
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	REP.b #$20
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0040
	CMP.w #$0180
	SEP.b #$20
	ROL
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E15C4,x
	BNE.b CODE_01A3CB
	LDY.b #$00								;\ Optimization: The only place bit 2 of !RAM_SMW_NorSpr_YOffscreenFlag is even specifically read is SMW_GenericGFXRtMoveTileOffscreenVertically.
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x					;| I believe that routine is a leftover before Nintendo wrote a more flexible routine for moving sprite tiles offscreen and they forgot to remove it.
	CMP.b #!Define_SMW_NorSprStatus09_Stunned				;| To fix, replace the two JSR.w SMW_GenericGFXRtMoveTileOffscreenVertically with some code to set up A/Y and JMP to SMW_FinishOAMWrite_Sub.
	BEQ.b CODE_01A3A6							;| This code then needs to be updated to remove the loop and change the ADC.w table,y to ADC.b #$YY, with YY being between #$0C and #$20.
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x				;|
	AND.b #!Define_SMW_NorSpr_190FProp_2TileTallDeathFrame			;|
	BEQ.b CODE_01A3A6							;|
	INY									;|
CODE_01A3A6:									;|
	LDA.b !RAM_SMW_NorSpr_YPosLo,x						;|
	CLC									;|
	ADC.w DATA_01A361,y							;|
	PHP									;|
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo				;|
	ROL.b !RAM_SMW_Misc_ScratchRAM00					;|
	PLP									;|
	LDA.w !RAM_SMW_NorSpr_YPosHi,x						;|
	ADC.b #$00								;|
	LSR.b !RAM_SMW_Misc_ScratchRAM00					;|
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi				;|
	BEQ.b CODE_01A3C6							;|
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x					;|
	ORA.w DATA_01A363,y							;|
	STA.w !RAM_SMW_NorSpr_YOffscreenFlag,x					;|
CODE_01A3C6:									;|
	DEY									;|
	BPL.b CODE_01A3A6							;/
	BRA.b CODE_01A3CD

CODE_01A3CB:
	PLA
	PLA
CODE_01A3CD:
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_GetDrawInfo(Address)
namespace SMW_GetDrawInfo
%InsertMacroAtXPosition(<Address>)

DATA_02D374:									;\ Optimization: Same deal as the Bank 01 GetDrawInfo.
	db $0C,$1C								;|
										;|
DATA_02D376:									;|
	db $01,$02								;/

Bank02:
	STZ.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BEQ.b CODE_02D38C
	INC.w !RAM_SMW_NorSpr_XOffscreenFlag,x
CODE_02D38C:
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	REP.b #$20
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0040
	CMP.w #$0180
	SEP.b #$20
	ROL
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E15C4,x
	BNE.b CODE_02D3E7
	LDY.b #$00								;\ Optimization: Same deal as the Bank 01 GetDrawInfo.
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x				;| Glitch: This !RAM_SMW_NorSpr_PropertyBits1662 should have been !RAM_SMW_NorSpr_PropertyBits190F
	AND.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping20			;| This will cause some bank 02 sprites to think they're offscreen vertically when they're not.
	BEQ.b CODE_02D3B2							;|
	INY									;|
CODE_02D3B2:									;|
	LDA.b !RAM_SMW_NorSpr_YPosLo,x						;|
	CLC									;|
	ADC.w DATA_02D374,y							;|
	PHP									;|
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo				;|
	ROL.b !RAM_SMW_Misc_ScratchRAM00					;|
	PLP									;|
	LDA.w !RAM_SMW_NorSpr_YPosHi,x						;|
	ADC.b #$00								;|
	LSR.b !RAM_SMW_Misc_ScratchRAM00					;|
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi				;|
	BEQ.b CODE_02D3D2							;|
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x					;|
	ORA.w DATA_02D376,y							;|
	STA.w !RAM_SMW_NorSpr_YOffscreenFlag,x					;|
CODE_02D3D2:									;|
	DEY									;|
	BPL.b CODE_02D3B2							;/
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	RTS

CODE_02D3E7:
	PLA
	PLA
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_GetDrawInfo(Address)
namespace SMW_GetDrawInfo
%InsertMacroAtXPosition(<Address>)

DATA_03B75C:									;\ Optimization: Same deal as the Bank 01 GetDrawInfo.
	db $0C,$1C								;|
										;|
DATA_03B75E:									;|
	db $01,$02								;/

Bank03:
	STZ.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BEQ.b CODE_03B774
	INC.w !RAM_SMW_NorSpr_XOffscreenFlag,x
CODE_03B774:
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	REP.b #$20
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0040
	CMP.w #$0180
	SEP.b #$20
	ROL
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E15C4,x
	BNE.b CODE_03B7CF
	LDY.b #$00								;\ Optimization: Same deal as the Bank 01 GetDrawInfo.
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x				;| Glitch: Same deal as the Bank 02 GetDrawInfo.
	AND.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping20			;|
	BEQ.b CODE_03B79A							;|
	INY									;|
CODE_03B79A:									;|
	LDA.b !RAM_SMW_NorSpr_YPosLo,x						;|
	CLC									;|
	ADC.w DATA_03B75C,y							;|
	PHP									;|
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo				;|
	ROL.b !RAM_SMW_Misc_ScratchRAM00					;|
	PLP									;|
	LDA.w !RAM_SMW_NorSpr_YPosHi,x						;|
	ADC.b #$00								;|
	LSR.b !RAM_SMW_Misc_ScratchRAM00					;|
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi				;|
	BEQ.b CODE_03B7BA							;|
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x					;|
	ORA.w DATA_03B75E,y							;|
	STA.w !RAM_SMW_NorSpr_YOffscreenFlag,x					;|
CODE_03B7BA:									;|
	DEY									;|
	BPL.b CODE_03B79A							;/
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	RTS

CODE_03B7CF:
	PLA
	PLA
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ProcessNormalSprites(Address)
namespace SMW_ProcessNormalSprites
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	STA.w !RAM_SMW_Player_CarryingSomethingFlag1
	STZ.w !RAM_SMW_Player_CarryingSomethingFlag2
	STZ.w !RAM_SMW_Misc_PlayerOnSolidSprite
	STZ.w !RAM_SMW_Flag_PlayerInLakitusCloud
	LDA.w !RAM_SMW_Sprites_YoshiSlotIndex
	STA.w !RAM_SMW_Yoshi_StrayYoshiFlag
	STZ.w !RAM_SMW_Sprites_YoshiSlotIndex
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
CODE_0180A9:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	JSR.w GetNormalSpriteOAMIndexAndDecrementTimers
	JSR.w HandleSprite
	DEX
	BPL.b CODE_0180A9
	LDA.w !RAM_SMW_Flag_RunClusterSprites
	BEQ.b CODE_0180BE
	JSL.l SMW_ProcessClusterSprites_Main
CODE_0180BE:
	LDA.w !RAM_SMW_Sprites_YoshiSlotIndex
	BNE.b CODE_0180C9
	STZ.w !RAM_SMW_Player_RidingYoshiFlag
	STZ.w !RAM_SMW_Player_RelativeYPositionDuringScreenShake
CODE_0180C9:
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_ProcessNormalSprites(Address)
namespace SMW_ProcessNormalSprites
%InsertMacroAtXPosition(<Address>)

GetNormalSpriteOAMIndexAndDecrementTimers:
	PHX
	TXA
	LDX.w !RAM_SMW_Sprites_SpriteMemorySetting
	CLC
	ADC.l DATA_07F0B4,x
	TAX
	LDA.l NormalSpriteOAMIndexes,x
	PLX
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b Return018126
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return018126
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BEQ.b CODE_0180F6
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_0180F6:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BEQ.b CODE_0180FE
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
CODE_0180FE:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BEQ.b CODE_018106
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
CODE_018106:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	BEQ.b CODE_01810E
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
CODE_01810E:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
	BEQ.b CODE_018116
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
CODE_018116:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,x
	BEQ.b CODE_01811E
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,x
CODE_01811E:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	BEQ.b Return018126
	DEC.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
Return018126:
	RTS

HandleSprite:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b SMW_NorSprStatus00_EmptySlot_Main
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_018133
	JMP.w SMW_NorSprStatus08_Normal_Main

CODE_018133:
	JSL.l SMW_ExecutePtr_Absolute

SpriteStatusPtr:
base $000000
.NorSprStatus00_EmptySlot:	dw SMW_NorSprStatus00_EmptySlot_Main
.NorSprStatus01_Init:		dw SMW_NorSprStatus01_Init_Main
.NorSprStatus02_Dead:		dw SMW_NorSprStatus02_Dead_Main
.NorSprStatus03_Smushed:	dw SMW_NorSprStatus03_Smushed_Main
.NorSprStatus04_SpinJumpKill:	dw SMW_NorSprStatus04_SpinJumpKill_Main
.NorSprStatus05_SinkInLava:	dw SMW_NorSprStatus05_SinkInLava_Main
.NorSprStatus06_GoalCoins:	dw SMW_NorSprStatus06_GoalCoins_Main
.NorSprStatus07_InLimbo:	dw SMW_NorSprStatus07_InLimbo_Main
.NorSprStatus08_Normal:		dw SMW_NorSprStatus08_Return			; Note: The actual code for status 08 is called a bit earlier in the code
.NorSprStatus09_Stunned:	dw SMW_NorSprStatus09_Stunned_Main
.NorSprStatus0A_Kicked:		dw SMW_NorSprStatus0A_Kicked_Main
.NorSprStatus0B_Carried:	dw SMW_NorSprStatus0B_Carried_Main
.NorSprStatus0C_GoalPowerUp:	dw SMW_NorSprStatus0C_GoalPowerUp_Main
base off
namespace off
endmacro

macro ROUTINE_RT02_SMW_ProcessNormalSprites(Address)
namespace SMW_ProcessNormalSprites
%InsertMacroAtXPosition(<Address>)

NormalSpriteOAMIndexes:
base $000000
.SpriteMemory00:
.SpriteMemory06:
.SpriteMemory0F:
.SpriteMemory12:
	db $30,$44,$58,$6C,$80,$94,$A8,$BC
	db $D0,$E4,$28,$2C

.SpriteMemory01:
.SpriteMemory11:
	db $80,$94,$A8,$BC,$D0,$E4,$30,$58
	db $00,$00,$28,$2C

.SpriteMemory02:
	db $30,$54,$64,$74,$84,$94,$A4,$B4
	db $00,$00,$28,$2C

.SpriteMemory03:
	db $30,$54,$78,$8C,$A0,$B4,$C8,$DC
	db $F0,$F8,$28,$2C

.SpriteMemory04:
	db $30,$74,$88,$9C,$B0,$C4,$D8,$EC
	db $F8,$FC,$28,$2C

.SpriteMemory05:
	db $30,$84,$D8,$E0,$E8,$F0,$F8,$00
	db $00,$00,$28,$2C

.SpriteMemory07:
	db $00,$60,$74,$88,$9C,$B0,$C4,$00
	db $00,$00,$28,$2C

.SpriteMemory08:
	db $30,$44,$58,$6C,$80,$94,$A8,$00
	db $00,$00,$28,$2C

.SpriteMemory09:
	db $A0,$30,$34,$38,$3C,$40,$44,$48
	db $4C,$50,$28,$2C

.SpriteMemory0A:
	db $30,$48,$60,$78,$8C,$A0,$B4,$C8
	db $DC,$00,$28,$2C

.SpriteMemory0B:
	db $58,$AC,$C0,$D4,$E8,$00,$00,$00
	db $00,$00,$28,$2C

.SpriteMemory0C:
	db $58,$6C,$80,$94,$A8,$BC,$D0,$E4
	db $00,$00,$28,$2C

.SpriteMemory0D:
	db $30,$74,$B8,$C4,$D0,$DC,$E8,$F4
	db $00,$00,$28,$2C

.SpriteMemory0E:
	db $30,$48,$60,$78,$90,$A8,$C0,$D8
	db $00,$00,$28,$2C

.SpriteMemory10:
	db $30,$44,$58,$5C,$60,$64,$68,$6C
	db $70,$00,$28,$2C

.SpriteMemory13:
base off

DATA_07F0B4:
	db NormalSpriteOAMIndexes_SpriteMemory00,NormalSpriteOAMIndexes_SpriteMemory01,NormalSpriteOAMIndexes_SpriteMemory02
	db NormalSpriteOAMIndexes_SpriteMemory03,NormalSpriteOAMIndexes_SpriteMemory04,NormalSpriteOAMIndexes_SpriteMemory05
	db NormalSpriteOAMIndexes_SpriteMemory06,NormalSpriteOAMIndexes_SpriteMemory07,NormalSpriteOAMIndexes_SpriteMemory08
	db NormalSpriteOAMIndexes_SpriteMemory09,NormalSpriteOAMIndexes_SpriteMemory0A,NormalSpriteOAMIndexes_SpriteMemory0B
	db NormalSpriteOAMIndexes_SpriteMemory0C,NormalSpriteOAMIndexes_SpriteMemory0D,NormalSpriteOAMIndexes_SpriteMemory0E
	db NormalSpriteOAMIndexes_SpriteMemory0F,NormalSpriteOAMIndexes_SpriteMemory10,NormalSpriteOAMIndexes_SpriteMemory11
	db NormalSpriteOAMIndexes_SpriteMemory12,NormalSpriteOAMIndexes_SpriteMemory13
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ProcessClusterSprites(Address)
namespace SMW_ProcessClusterSprites
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDX.b #!Define_SMW_MaxClusterSpriteSlot
CODE_02F812:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_ClusterSpr_SpriteID,x
	BEQ.b CODE_02F81D
	JSR.w CODE_02F821
CODE_02F81D:
	DEX
	BPL.b CODE_02F812

Return02F820:
	RTS

CODE_02F821:
	JSL.l SMW_ExecutePtr_Absolute

ClusterSpritePtrs:
base $000000
.ClusterSpr00_Unused:		dw SMW_ClusterSpr00_Unused_Main
.ClusterSpr01_1up:		dw SMW_ClusterSpr01_1up_Main
.ClusterSpr02_Unused:		dw SMW_ClusterSpr02_Unused_Main			; Crash: Loading cluster sprite 02 will make the CPU jump to !RAM_SMW_Misc_ScratchRAM00 and do unpredictable things.
.ClusterSpr03_BooCeiling:	dw SMW_ClusterSpr03_BooCeiling_Main
.ClusterSpr04_BooRing:		dw SMW_ClusterSpr04_BooRing_Main
.ClusterSpr05_CandleFlame:	dw SMW_ClusterSpr05_CandleFlame_Main
.ClusterSpr06_SumoBroFlame:	dw SMW_ClusterSpr06_SumoBroFlame_Main
.ClusterSpr07_ReappearingBoo:	dw SMW_ClusterSpr07_ReappearingBoo_Main
.ClusterSpr08_DeathBatCeiling:	dw SMW_ClusterSpr08_DeathBatCeiling_Main
base off
namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessClusterSprites_Return02F820, SMW_ClusterSpr00_Unused_Main)

	%SetDuplicateOrNullPointer($020000, SMW_ClusterSpr02_Unused_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus00_EmptySlot(Address)
namespace SMW_NorSprStatus00_EmptySlot
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprStatus00_EmptySlot_Return, SMW_NorSprStatus07_InLimbo_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_FinishOAMWrite(Address)
; Optimization: This routine is not very well optimized.
; Is there any particular reason this routine barely used 16-bit A?

namespace SMW_FinishOAMWrite
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	STY.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_01B7DE:
	TYA
	LSR
	LSR
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	BPL.b CODE_01B7F0
	LDA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	AND.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	BRA.b CODE_01B7F3

CODE_01B7F0:
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
CODE_01B7F3:
	LDX.b #$00
	LDA.w SMW_OAMBuffer[!OAM_SMW_GenericNormalSprite&$40].XDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_01B7FE
	DEX
CODE_01B7FE:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM04
	TXA
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM05
	JSR.w CODE_01B844
	BCC.b CODE_01B819
	TYA
	LSR
	LSR
	TAX
	LDA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	ORA.b #$01
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
CODE_01B819:
	LDX.b #$00
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM06
	BPL.b CODE_01B824
	DEX
CODE_01B824:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	TXA
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	JSR.w SMW_NorSpr05F_BrownChainedPlatform_Status08_CODE_01C9BF
	BCC.b CODE_01B838
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_01B838:
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM08
	BPL.b CODE_01B7DE
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

CODE_01B844:								; Note: This routine is also called elsewhere.
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.w #$0100
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeNormalSpriteRAMTables(Address)
namespace SMW_InitializeNormalSpriteRAMTables
%InsertMacroAtXPosition(<Address>)

incsrc "sprites/SpriteProperties.asm"

ClearTables:
	STZ.w !RAM_SMW_NorSpr_Table7E164A,x
	STZ.w !RAM_SMW_NorSpr_CurrentLayerPriority,x 
	STZ.b !RAM_SMW_NorSpr_Table7E00C2,x
	STZ.w !RAM_SMW_NorSpr_Table7E151C,x
	STZ.w !RAM_SMW_NorSpr_Table7E1528,x
	STZ.w !RAM_SMW_NorSpr_Table7E1534,x
	STZ.w !RAM_SMW_NorSpr_Table7E157C,x
	STZ.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	STZ.w !RAM_SMW_NorSpr_Table7E15C4,x
	STZ.w !RAM_SMW_NorSpr_Table7E1602,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
	STZ.w !RAM_SMW_NorSpr_Table7E1626,x
	STZ.w !RAM_SMW_NorSpr_Table7E1570,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.w !RAM_SMW_NorSpr_SubXPos,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.w !RAM_SMW_NorSpr_SubYPos,x
	STZ.w !RAM_SMW_NorSpr_NoLevelCollisionFlag,x
	STZ.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	STZ.w !RAM_SMW_NorSpr_PropertyBits1656,x			;\ Optimization: Unnecessary, as these tables are given new values shortly after
	STZ.w !RAM_SMW_NorSpr_PropertyBits1662,x			;| ClearTables is not called elsewhere besides in this macro
	STZ.w !RAM_SMW_NorSpr_PropertyBits166E,x			;|
	STZ.w !RAM_SMW_NorSpr_PropertyBits167A,x			;|
	STZ.w !RAM_SMW_NorSpr_PropertyBits1686,x			;/
	STZ.w !RAM_SMW_NorSpr_Table7E187B,x
	STZ.w !RAM_SMW_NorSpr_Table7E160E,x
	STZ.w !RAM_SMW_NorSpr_Table7E1594,x
	STZ.w !RAM_SMW_NorSpr_Table7E1504,x
	STZ.w !RAM_SMW_NorSpr_UnusedTable7E1FD6,x			; Optimization: Unused
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_XOffscreenFlag,x 
	RTL

YXPPCCCTAndPropertyTables:
	PHY								; Optimization: There is no need to preserve Y when it's not modified here
	PHX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	TAX
	LDA.l Sprite166EVals,x
	AND.b #!Define_SMW_NorSpr_166EProp_Palette|!Define_SMW_NorSpr_166EProp_UseSP3And4
	PLX
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_PropertyTables
	PLY
	RTL

PropertyTables:								; Optimization: This routine can be fused with the above one to save a few bytes
	PHY								; Both because of the removed JSL.l/RTL, but also from removing 1 set of PHX/PHY/PLY/PLX
	PHX								; However, there is one place where SMW_InitializeNormalSpriteRAMTables_PropertyTables is called outside here, so that would need to be modified
	TXY
	LDX.b !RAM_SMW_NorSpr_SpriteID,y
	LDA.l Sprite1656Vals,x
	STA.w !RAM_SMW_NorSpr_PropertyBits1656,y
	LDA.l Sprite1662Vals,x
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,y
	LDA.l Sprite166EVals,x
	STA.w !RAM_SMW_NorSpr_PropertyBits166E,y
	LDA.l Sprite167AVals,x
	STA.w !RAM_SMW_NorSpr_PropertyBits167A,y
	LDA.l Sprite1686Vals,x
	STA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	LDA.l Sprite190FVals,x
	STA.w !RAM_SMW_NorSpr_PropertyBits190F,y
	PLX
	PLY
	RTL

Main:									; Optimization: This routine can be moved to before ClearTables and have all the routines here execute in sequence.
	JSL.l ClearTables						; ClearTables is not called anywhere outside of here, so its RTL can be removed.
	JSL.l YXPPCCCTAndPropertyTables
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BoostMarioSpeed(Address)					; Info: Routine that sets Mario's upwards speed when jumping on enemies.
namespace SMW_BoostMarioSpeed
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Player_ClimbingFlag
	BNE.b Return01AA41
	LDA.b #$D0
	BIT.b !RAM_SMW_IO_ControllerHold1
	BPL.b CODE_01AA3F							; Note: !Joypad_A|(!Joypad_B>>8)
	LDA.b #$A8
CODE_01AA3F:
	STA.b !RAM_SMW_Player_YSpeed
Return01AA41:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

;Credit: SubconsciousEye on Discord helped me out with the following routine.

macro ROUTINE_SMW_LevelTileAnimations(Address)
namespace SMW_LevelTileAnimations
%InsertMacroAtXPosition(<Address>)

DATA_05B93B:
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$0600,!VRAM_SMW_Layer1GFXVRAMLocation+$0640,!VRAM_SMW_Layer1GFXVRAMLocation+$0680		; Frame 0
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$0740,!VRAM_SMW_Layer1GFXVRAMLocation+$0EA0,!VRAM_SMW_Layer1GFXVRAMLocation+$0800		; Frame 1
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$0500,!VRAM_SMW_Layer1GFXVRAMLocation+$0540,!VRAM_SMW_Layer1GFXVRAMLocation+$0580		; Frame 2
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$05C0,!VRAM_SMW_Layer1GFXVRAMLocation+$0780,!VRAM_SMW_Layer1GFXVRAMLocation+$07C0		; Frame 3
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$0DA0,!VRAM_SMW_Layer1GFXVRAMLocation+$06C0,!VRAM_SMW_Layer1GFXVRAMLocation+$0700		; Frame 4
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$04C0,!VRAM_SMW_Layer1GFXVRAMLocation+$0440,!VRAM_SMW_Layer1GFXVRAMLocation+$0480		; Frame 5
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$0400,!VRAM_SMW_Layer1GFXVRAMLocation+$0000,!VRAM_SMW_Layer1GFXVRAMLocation+$0000		; Frame 6 (Last 2 entries unused)
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$0000,!VRAM_SMW_Layer1GFXVRAMLocation+$0000,!VRAM_SMW_Layer1GFXVRAMLocation+$0000		; Frame 7 (Unused)

DATA_05B96B:
	db $00,$00,$00		; Frame 0
	db $00,$00,$00		; Frame 1
	db $01,$01,$01		; Frame 2
	db $01,$01,$01		; Frame 3
	db $01,$01,$02		; Frame 4
	db $02,$02,$02		; Frame 5
	;db $02,$00,$00		; Frame 6
	;db $00,$00,$00		; Frame 7

DATA_05B97D:						; Note: The first 6 bytes of this table are also used by the above table
	db $02,$00,$00		; Frame 0
	db $00,$00,$00		; Frame 1
	db $00,$00,$00		; Frame 2
	db $01,$00,$02		; Frame 3
	db $02,$00		; Frame 4		; Note: SMW never uses frames 5-7 for anything
	;db $00

DATA_05B98B:						; Note: The first byte of this table is also used by the above table
	%SMW_AnimationTileset(0)	; Tileset 00 (Normal 1)
	%SMW_AnimationTileset(1)	; Tileset 01 (Castle 1)
	%SMW_AnimationTileset(2)	; Tileset 02 (Rope 1)
	%SMW_AnimationTileset(3)	; Tileset 03 (Underground 1)
	%SMW_AnimationTileset(4)	; Tileset 04 (Switch Palace 1)
	%SMW_AnimationTileset(4)	; Tileset 05 (Ghost House 1)
	%SMW_AnimationTileset(5)	; Tileset 06 (Rope 2)
	%SMW_AnimationTileset(4)	; Tileset 07 (Normal 2)
	%SMW_AnimationTileset(2)	; Tileset 08 (Rope 3)
	%SMW_AnimationTileset(4)	; Tileset 09 (Underground 2)
	%SMW_AnimationTileset(0)	; Tileset 0A (Switch Palace 2)
	%SMW_AnimationTileset(1)	; Tileset 0B (Castle 2)
	%SMW_AnimationTileset(0)	; Tileset 0C (Cloud/Forest)
	%SMW_AnimationTileset(4)	; Tileset 0D (Ghost House 2)
	;%SMW_AnimationTileset(0)	; Tileset 0E (Underground 3)

FrameData:						; Note: The first byte of this table is also used by the above table
.Global:
..Frame0:
	%SMW_LMStyleAnimationFrames(6C0, 6D0, 6E0, 6F0)	; ? Block
	%SMW_LMStyleAnimationFrames(6C4, 6D4, 6E4, 6F4)	; Note Block
	%SMW_LMStyleAnimationFrames(6C8, 6C8, 6C8, 6C8)	; Turn Block (Not Spinning)		; Optimization: Waste of an animation slot.
..Frame1:
	%SMW_LMStyleAnimationFrames(704, 714, 724, 734)	; Midpoint Gate
	%SMW_LMStyleAnimationFrames(6C8, 6D8, 6E8, 6F8)	; Turn Block (Spinning)
	%SMW_LMStyleAnimationFrames(B6C, B7C, BE0, BE4)	; Berry
..Frame2:
	%SMW_LMStyleAnimationFrames(779, 779, 779, 779)	; Blank (P-Switch Door)
	%SMW_LMStyleAnimationFrames(779, 779, 779, 779)	; Blank (P-Switch Coin)
	%SMW_LMStyleAnimationFrames(6B4, 6B4, 6B4, 6B4)	; Used Block
..Frame3:
	%SMW_LMStyleAnimationFrames(738, 73C, 738, 73C)	; Muncher
	%SMW_LMStyleAnimationFrames(779, 779, 779, 779)	; Blank (P-Switch ? Block)
	%SMW_LMStyleAnimationFrames(778, 778, 778, 778)	; ON/OFF Line guide (/)
..Frame4:
	%SMW_LMStyleAnimationFrames(6A0, 6A0, 6A0, 6A0)	; ON/OFF Block (ON)
	%SMW_LMStyleAnimationFrames(6CC, 6DC, 6EC, 6FC)	; Coin

.Local0:
..Frame4:
	%SMW_LMStyleAnimationFrames(700, 710, 720, 730)	; Water
..Frame5:
	%SMW_LMStyleAnimationFrames(68C, 69C, 6AC, 6BC)	; Castle Lava
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused
..Frame6:
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused

.Local1:
..Frame4:
	%SMW_LMStyleAnimationFrames(700, 710, 720, 730)	; Water
..Frame5:
	%SMW_LMStyleAnimationFrames(68C, 69C, 6AC, 6BC)	; Castle Lava
	%SMW_LMStyleAnimationFrames(600, 610, 620, 630)	; Upwards Conveyor belt, conveyor belt end
	%SMW_LMStyleAnimationFrames(630, 620, 610, 600)	; Downwards Conveyor belt, conveyor belt end
..Frame6:
	%SMW_LMStyleAnimationFrames(708, 718, 728, 718)	; Candle light effect

.Local2:
..Frame4:
	%SMW_LMStyleAnimationFrames(700, 710, 720, 730)	; Water
..Frame5:
	%SMW_LMStyleAnimationFrames(740, 750, 760, 770)	; Line-Guide End, flat conveyor rope, unused
	%SMW_LMStyleAnimationFrames(744, 754, 764, 774)	; Upwards sloped conveyor rope, conveyor belt end duplicate, unused
	%SMW_LMStyleAnimationFrames(774, 764, 754, 744)	; Downwards sloped conveyor rope, conveyor belt end duplicate, unused
..Frame6:
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused

.Local3:
..Frame4:
	%SMW_LMStyleAnimationFrames(70C, 71C, 72C, 71C)	; Background stars/crystals
..Frame5:
	%SMW_LMStyleAnimationFrames(604, 614, 624, 634)	; Upwards normal slope cavern lava
	%SMW_LMStyleAnimationFrames(608, 618, 628, 638)	; Steep slope cavern lava
	%SMW_LMStyleAnimationFrames(60C, 61C, 62C, 63C)	; Horizontal and vertical cavern lava
..Frame6:
	%SMW_LMStyleAnimationFrames(634, 624, 614, 604)	; Downwards normal slope cavern lava

.Local4:
..Frame4:
#LM120Hijack_AnimatedWaterInMoreTilesets:
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused (LM: Changes this to the data for animated water so that can be used in more tilesets (1.20+))
..Frame5:
	%SMW_LMStyleAnimationFrames(74C, 75C, 76C, 75C)	; Background lamp, unused star
	%SMW_LMStyleAnimationFrames(688, 698, 6A8, 6B8)	; Seaweed
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused
..Frame6:
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused

.Local5:
..Frame4:
	%SMW_LMStyleAnimationFrames(70C, 71C, 72C, 71C)	; Background stars/crystals (cave)
..Frame5:
	%SMW_LMStyleAnimationFrames(748, 758, 768, 758)	; Background stars (sky)
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused
..Frame6:
	%SMW_LMStyleAnimationFrames(6C0, 6C0, 6C0, 6C0)	; Unused

.AltStates:
	%SMW_LMStyleAnimationFrames(6A4, 6A4, 6A4, 6A4)	; P-Switch Door
	%SMW_LMStyleAnimationFrames(6CC, 6DC, 6EC, 6FC)	; Coin (P-Switch)
	%SMW_LMStyleAnimationFrames(6CC, 6DC, 6EC, 6FC)	; Coin (Used Block)
	%SMW_LMStyleAnimationFrames(6CC, 6DC, 6EC, 6FC)	; Coin (Muncher)
	%SMW_LMStyleAnimationFrames(6C0, 6D0, 6E0, 6F0)	; ? Block (P-Switch)
	%SMW_LMStyleAnimationFrames(77C, 77C, 77C, 77C)	; ON/OFF Line guide (\)
	%SMW_LMStyleAnimationFrames(6B0, 6B0, 6B0, 6B0)	; ON/OFF Block (Off)
	%SMW_LMStyleAnimationFrames(6B4, 6B4, 6B4, 6B4)	; Used Block (Coin)


Main:
;$05BB39
	PHB
	PHK
	PLB
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	ASL
	TAX
	REP.b #$20
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.w #$0018
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w DATA_05B93B,x
	STA.w !RAM_SMW_Graphics_TileAnimationVRAMAddress3Lo
	LDA.w DATA_05B93B+$02,x
	STA.w !RAM_SMW_Graphics_TileAnimationVRAMAddress2Lo
	LDA.w DATA_05B93B+$04,x
	STA.w !RAM_SMW_Graphics_TileAnimationVRAMAddress1Lo
	LDX.b #$04
Loop:
	PHY
	PHX
	SEP.b #$20
	TYA
	LDX.w DATA_05B96B,y
	BEQ.b GlobalAnimation
	DEX
	BNE.b TilesetSpecificAnimation
	LDX.w DATA_05B97D,y
	LDY.w !RAM_SMW_Timer_BluePSwitch,x
	BEQ.b State1Animation
	CLC
	ADC.b #$26
	BRA.b State2Animation

TilesetSpecificAnimation:
	LDY.w !RAM_SMW_Misc_LevelTilesetSetting
	CLC
	ADC.w DATA_05B98B,y
State1Animation:
State2Animation:
GlobalAnimation:
	REP.b #$30
	AND.w #$00FF
	ASL
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.w FrameData,y
	SEP.b #$10
	PLX
	STA.w !RAM_SMW_Graphics_TileAnimationSourceAddress1Lo,x
	PLY
	INY
	DEX
	DEX
	BPL.b Loop
	SEP.b #$20
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardSpriteToSpriteCollisionChecks(Address)
namespace SMW_StandardSpriteToSpriteCollisionChecks
%InsertMacroAtXPosition(<Address>)

SprClippingDispX:
	db $02,$02,$10,$14,$00,$00,$01,$08
	db $F8,$FE,$03,$06,$01,$00,$06,$02
	db $00,$E8,$FC,$FC,$04,$00,$FC,$02
	db $02,$02,$02,$02,$00,$02,$E0,$F0
	db $FC,$FC,$00,$F8,$F4,$F2,$00,$FC
	db $F2,$F0,$02,$00,$F8,$04,$02,$02
	db $08,$00,$00,$00,$FC,$03,$08,$00
	db $08,$04,$F8,$00

SprClippingWidth:
	db $0C,$0C,$10,$08,$30,$50,$0E,$28
	db $20,$14,$01,$03,$0D,$0F,$14,$24
	db $0F,$40,$08,$08,$18,$0F,$18,$0C
	db $0C,$0C,$0C,$0C,$0A,$1C,$30,$30
	db $08,$08,$10,$20,$38,$3C,$20,$18
	db $1C,$20,$0C,$10,$10,$08,$1C,$1C
	db $10,$30,$30,$40,$08,$12,$34,$0F
	db $20,$08,$20,$10

SprClippingDispY:
	db $03,$03,$FE,$08,$FE,$FE,$02,$08
	db $FE,$08,$07,$06,$FE,$FC,$06,$FE
	db $FE,$E8,$10,$10,$02,$FE,$F4,$08
	db $13,$23,$33,$43,$0A,$FD,$F8,$FC
	db $E8,$10,$00,$E8,$20,$04,$58,$FC
	db $E8,$FC,$F8,$02,$F8,$04,$FE,$FE
	db $F2,$FE,$FE,$FE,$FC,$00,$08,$F8
	db $10,$03,$10,$00

SprClippingHeight:
	db $0A,$15,$12,$08,$0E,$0E,$18,$30
	db $10,$1E,$02,$03,$16,$10,$14,$12
	db $20,$40,$34,$74,$0C,$0E,$18,$45
	db $3A,$2A,$1A,$0A,$30,$1B,$20,$12
	db $18,$18,$10,$20,$38,$14,$08,$18
	db $28,$1B,$13,$4C,$10,$04,$22,$20
	db $1C,$12,$12,$12,$08,$20,$2E,$14
	db $28,$0A,$10,$0D

MarioClipDispY:
	db $06,$14,$10,$18

MarioClippingHeight:
	db $1A,$0C,$20,$18

GetMarioClipping:
	PHX
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$00
	LDA.b !RAM_SMW_Player_DuckingFlag
	BNE.b .IsDucking
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b .NotSmall
.IsDucking:
	INX
.NotSmall:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b .NotRidingYoshi
	INX
	INX
.NotRidingYoshi:
	LDA.l MarioClippingHeight,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.l MarioClipDispY,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	PLX
	RTL

GetSpriteClippingA:
	PHY
	PHX
	TXY
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping
	TAX
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.l SprClippingDispX,x
	BPL.b .CODE_03B6B2
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
.CODE_03B6B2:
	CLC
	ADC.w !RAM_SMW_NorSpr_XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_XPosHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l SprClippingWidth,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.l SprClippingDispY,x
	BPL.b .CODE_03B6CF
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
.CODE_03B6CF:
	CLC
	ADC.w !RAM_SMW_NorSpr_YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_YPosHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.l SprClippingHeight,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	PLX
	PLY
	RTL

GetSpriteClippingB:
	PHY
	PHX
	TXY
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping
	TAX
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.l SprClippingDispX,x
	BPL.b .CODE_03B6F8
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
.CODE_03B6F8:
	CLC
	ADC.w !RAM_SMW_NorSpr_XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.l SprClippingWidth,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.l SprClippingDispY,x
	BPL.b .CODE_03B715
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
.CODE_03B715:
	CLC
	ADC.w !RAM_SMW_NorSpr_YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_YPosHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.l SprClippingHeight,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PLX
	PLY
	RTL

CheckForContact:
	PHX
	LDX.b #$01
.CODE_03B72E:
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM04,x
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM08,x
	SBC.b !RAM_SMW_Misc_ScratchRAM0A,x
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	PLA
	CLC
	ADC.b #$80
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	ADC.b #$00
	BNE.b .CODE_03B75A
	LDA.b !RAM_SMW_Misc_ScratchRAM04,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM06,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Misc_ScratchRAM02,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM06,x
	CMP.b !RAM_SMW_Misc_ScratchRAM0F
	BCC.b .CODE_03B75A
	DEX
	BPL.b .CODE_03B72E
.CODE_03B75A:
	PLX
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_InitAndMainLoop(Address)
; Note: SMW does not initialize all RAM on startup.
namespace SMW_InitAndMainLoop
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	JMP.w SMASSMWReset
NMIVector:
	JMP.w SMW_VBlankRoutine_Main
IRQVector:
	JMP.w SMW_IRQRoutine_Main

CODE_308009:
	JML.l SMAS_DisplayCopyDetectionErrorMessage_Main

SMASSMWReset:
if !Define_SMAS_Global_DisableCopyDetection == !FALSE
	NOP #2
	LDA.b #$AA
	STA.l !SRAM_SMAS_Global_CopyDetectionCheck2
	CMP.l !SRAM_SMAS_Global_CopyDetectionCheck1
	BNE.b CODE_308009
	LDA.b #$55
	STA.l !SRAM_SMAS_Global_CopyDetectionCheck2
	CMP.l !SRAM_SMAS_Global_CopyDetectionCheck1
	BNE.b CODE_308009
endif
	SEI
	STZ.w !REGISTER_IRQNMIAndJoypadEnableFlags
	STZ.w !REGISTER_HDMAEnable
	STZ.w !REGISTER_DMAEnable
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	STZ.w !REGISTER_APUPort0
	STZ.w !REGISTER_APUPort1
	STZ.w !REGISTER_APUPort2
	STZ.w !REGISTER_APUPort3
endif
	LDA.b #!ScreenDisplayRegister_SetForceBlank|!ScreenDisplayRegister_MinBrightness00
	STA.w !REGISTER_ScreenDisplayRegister
	PHK
	PLB
	REP.b #$38
else
	SEI
	STZ.w !REGISTER_IRQNMIAndJoypadEnableFlags
	STZ.w !REGISTER_HDMAEnable
	STZ.w !REGISTER_DMAEnable
	STZ.w !REGISTER_APUPort0
	STZ.w !REGISTER_APUPort1
	STZ.w !REGISTER_APUPort2
	STZ.w !REGISTER_APUPort3
	LDA.b #!ScreenDisplayRegister_SetForceBlank|!ScreenDisplayRegister_MinBrightness00
	STA.w !REGISTER_ScreenDisplayRegister
	CLC
	XCE
	REP.b #$38
	LDA.w #!Define_SMW_DirectPageLocation
	TCD
	LDA.w #!RAM_SMW_Misc_StartOfStack
	TCS
endif
	LDA.w #$F0A9
	STA.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	LDX.w #$017D
	LDY.w #SMW_OAMBuffer[$7F].YDisp
CODE_008034:
	LDA.w #$008D
	STA.l !RAM_SMW_Sprites_ResetSpriteOAMRt+$02,x
	TYA
	STA.l !RAM_SMW_Sprites_ResetSpriteOAMRt+$03,x
	SEC
	SBC.w #$0004
	TAY
	DEX
	DEX
	DEX
	BPL.b CODE_008034
	SEP.b #$30
#LM000Hijack_Bank00RTL:
	LDA.b #$6B
	STA.l !RAM_SMW_Sprites_ResetSpriteOAMRt+$0182
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) == $00
	JSR.w SMW_HandleSPCUploads_UploadSPCEngine
endif
	STZ.w !RAM_SMW_Misc_GameMode
	STZ.w !RAM_SMW_Misc_IntroLevelFlag
	JSR.w SMW_InitializeFirst8KBOfRAM_Main
	JSR.w SMW_HandleSPCUploads_UploadSamples			; Optimization: Why isn't this part of UploadSPCEngine? UploadSamples is only referenced by the upcoming JSR.w.
	JSR.w SMW_SetupHDMAWindowingEffects_Main
	LDA.b #!Define_SMW_GlobalSpriteSizeAndVRAMLocation
	STA.w !REGISTER_OAMSizeAndDataAreaDesignation
	INC.b !RAM_SMW_Flag_Lagging
CODE_00806B:
	LDA.b !RAM_SMW_Flag_Lagging					;\ Optimization: This wait for V_Blank can be improved with a WAI.
	BEQ.b CODE_00806B						;/
#SA1Pack_MainLoopStartLocation:
	CLI
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	LDA.l !SRAM_SMAS_Global_RunningDemoFlag
	BEQ.b CODE_3080D6
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP2
	ORA.w !RAM_SMW_IO_ControllerPress2CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress2CopyP2
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP2
	AND.b #!Joypad_Start>>8
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_3080B2
	JML.l SMAS_CopyOfResetToSMASTitleScreen_Main

CODE_3080B2:
	STZ.w !RAM_SMW_IO_ControllerHold1
	STZ.w !RAM_SMW_IO_ControllerPress1
	STZ.w !RAM_SMW_IO_ControllerHold2
	STZ.w !RAM_SMW_IO_ControllerPress2
	STZ.w !RAM_SMW_IO_ControllerHold1CopyP1
	STZ.w !RAM_SMW_IO_ControllerHold1CopyP2
	STZ.w !RAM_SMW_IO_ControllerHold2CopyP1
	STZ.w !RAM_SMW_IO_ControllerHold2CopyP2
	STZ.w !RAM_SMW_IO_ControllerPress1CopyP1
	STZ.w !RAM_SMW_IO_ControllerPress1CopyP2
	STZ.w !RAM_SMW_IO_ControllerPress2CopyP1
	STZ.w !RAM_SMW_IO_ControllerPress2CopyP2
CODE_3080D6:
endif
	INC.b !RAM_SMW_Counter_GlobalFrames
	JSR.w ProcessGameMode
	STZ.b !RAM_SMW_Flag_Lagging
	BRA.b CODE_00806B

namespace off
endmacro

macro ROUTINE_RT01_SMW_InitAndMainLoop(Address)
namespace SMW_InitAndMainLoop
%InsertMacroAtXPosition(<Address>)

ProcessGameMode:
	LDA.w !RAM_SMW_Misc_GameMode
	JSL.l SMW_ExecutePtr_Absolute

GameModePtrs:
base $000000
.GameMode00_LoadNintendoPresents:		dw SMW_GameMode00_LoadNintendoPresents_Main
.GameMode01_ShowNintendoPresents:		dw SMW_GameMode01_ShowNintendoPresents_Main
.GameMode02_FadeOutToTitleScreen:		dw SMW_GameMode02_FadeOutToTitleScreen_Main
.GameMode03_LoadTitleScreenSublevel:		dw SMW_GameMode03_LoadTitleScreenSublevel_Main
.GameMode04_PrepareTitleScreen:			dw SMW_GameMode04_PrepareTitleScreen_Main
.GameMode05_FadeInToTitleScreen:		dw SMW_GameMode05_FadeInToTitleScreen_Main
.GameMode06_CircleEffect:			dw SMW_GameMode06_CircleEffect_Main
.GameMode07_TitleScreenDemo:			dw SMW_GameMode07_TitleScreenDemo_Main
.GameMode08_FileSelect:				dw SMW_GameMode08_FileSelect_Main
.GameMode09_EraseFile:				dw SMW_GameMode09_EraseFile_Main
.GameMode0A_PlayerSelect:			dw SMW_GameMode0A_PlayerSelect_Main
.GameMode0B_FadeOutToOverworld:			dw SMW_GameMode0B_FadeOutToOverworld_Main
.GameMode0C_LoadOverworld:			dw SMW_GameMode0C_LoadOverworld_Main
.GameMode0D_FadeInToOverworld:			dw SMW_GameMode0D_FadeInToOverworld_Main
.GameMode0E_ShowOverworld:			dw SMW_GameMode0E_ShowOverworld_Main
.GameMode0F_MosaicFadeOutToLevel:		dw SMW_GameMode0F_MosaicFadeOutToLevel_Main
.GameMode10_BufferLevelLoadMessage:		dw SMW_GameMode10_BufferLevelLoadMessage_Main
.GameMode11_LoadSublevel:			dw SMW_GameMode11_LoadSublevel_Main
.GameMode12_PrepareLevel:			dw SMW_GameMode12_PrepareLevel_Main
.GameMode13_MosaicFadeInToLevel:		dw SMW_GameMode13_MosaicFadeInToLevel_Main
.GameMode14_InLevel:				dw SMW_GameMode14_InLevel_Main
.GameMode15_FadeOutToDeathMessage:		dw SMW_GameMode15_FadeOutToDeathMessage_Main
.GameMode16_LoadDeathMessage:			dw SMW_GameMode16_LoadDeathMessage_Main
.GameMode17_ShowDeathMessage:			dw SMW_GameMode17_ShowDeathMessage_Main
.GameMode18_FadeOutToCutscene:			dw SMW_GameMode18_FadeOutToCutscene_Main
.GameMode19_Cutscene:				dw SMW_GameMode19_Cutscene_Main
.GameMode1A_FadeOutToCredits:			dw SMW_GameMode1A_FadeOutToCredits_Main
.GameMode1B_EndingCinema:			dw SMW_GameMode1B_EndingCinema_Main
.GameMode1C_FadeOutToYoshisHouse:		dw SMW_GameMode1C_FadeOutToYoshisHouse_Main
.GameMode1D_LoadYoshisHouse:			dw SMW_GameMode1D_LoadYoshisHouse_Main
.GameMode1E_FadeInToYoshisHouse:		dw SMW_GameMode1E_FadeInToYoshisHouse_Main
.GameMode1F_ShowYoshisHouse:			dw SMW_GameMode1F_ShowYoshisHouse_Main
.GameMode20_FadeOutToEnemyRollcallDelay:	dw SMW_GameMode20_FadeOutToEnemyRollcallDelay_Main
.GameMode21_DelayEnemyRollcall:			dw SMW_GameMode21_DelayEnemyRollcall_Main
.GameMode22_FadeOutToEnemyRollcall:		dw SMW_GameMode22_FadeOutToEnemyRollcall_Main
.GameMode23_LoadEnemyRollcallScreen:		dw SMW_GameMode23_LoadEnemyRollcallScreen_Main
.GameMode24_FadeInToEnemyRollcall:		dw SMW_GameMode24_FadeInToEnemyRollcall_Main
.GameMode25_ShowEnemyRollcallScreen:		dw SMW_GameMode25_ShowEnemyRollcallScreen_Main
.GameMode26_FadeOutToTheEnd:			dw SMW_GameMode26_FadeOutToTheEnd_Main
.GameMode27_LoadTheEnd:				dw SMW_GameMode27_LoadTheEnd_Main
.GameMode28_ShowTheEnd:				dw SMW_GameMode28_ShowTheEnd_Main
.GameMode29_DoNothingOnTheEndScreen:		dw SMW_GameMode29_DoNothingOnTheEndScreen_Main
base off
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_VBlankRoutine(Address)
namespace SMW_VBlankRoutine
%InsertMacroAtXPosition(<Address>)

Main:
#SA1Pack_NMIHijack:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	LDA.b #Main>>16
	PHA
else
	PHK
endif
	PLB
	LDA.w !REGISTER_NMIEnable
	LDA.l !SRAM_SMAS_Global_RunningDemoFlag
	BNE.b CODE_0081AA
else
	SEI
	PHP							;\ Optimization: PHP/PLP is not necessary here as the interrupt call already preserves the processor flags
								;/ Can be replaced with PHD/PLD to allow the direct page register to be modified safely.
	REP.b #$30
	PHA
	PHX
	PHY
	PHB
#SA1Pack_NMIHijackEnd:
	PHK
	PLB
	SEP.b #$30
	LDA.w !REGISTER_NMIEnable
endif
	LDA.w !RAM_SMW_IO_MusicCh1				;\ Optimization: Waste of V-blank time. This ought to have been done at the start of the frame rather than during V-blank.
	BNE.b NoMusicChange					;|
	LDY.w !REGISTER_APUPort2				;|
	CPY.w !RAM_SMW_IO_CopyOfMusicCh1			;|
	BNE.b CODE_00818F					;|
NoMusicChange:							;|
	STA.w !REGISTER_APUPort2				;|
	STA.w !RAM_SMW_IO_CopyOfMusicCh1			;|
	STZ.w !RAM_SMW_IO_MusicCh1				;|
CODE_00818F:							;|
	LDA.w !RAM_SMW_IO_SoundCh1				;|
	STA.w !REGISTER_APUPort0				;|
	LDA.w !RAM_SMW_IO_SoundCh2				;|
	STA.w !REGISTER_APUPort1				;|
	LDA.w !RAM_SMW_IO_SoundCh3				;|
	STA.w !REGISTER_APUPort3				;|
	STZ.w !RAM_SMW_IO_SoundCh1				;|
	STZ.w !RAM_SMW_IO_SoundCh2				;|
	STZ.w !RAM_SMW_IO_SoundCh3				;/
CODE_0081AA:
	LDA.b #!ScreenDisplayRegister_SetForceBlank|!ScreenDisplayRegister_MinBrightness00
	STA.w !REGISTER_ScreenDisplayRegister
	STZ.w !REGISTER_HDMAEnable
	LDA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	STA.w !REGISTER_BG1And2WindowMaskSettings
	LDA.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	STA.w !REGISTER_BG3And4WindowMaskSettings
	LDA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	STA.w !REGISTER_ObjectAndColorWindowSettings
	LDA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	STA.w !REGISTER_ColorMathInitialSettings
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b RegularNMI
	JMP.w Mode7NMI

RegularNMI:
	LDA.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	AND.b #$FB
	STA.w !REGISTER_ColorMathSelectAndEnable
	LDA.b #!BGModeAndTileSizeSetting_Mode01Enable|!BGModeAndTileSizeSetting_Mode01Layer3Priority
	STA.w !REGISTER_BGModeAndTileSizeSetting
	LDA.b !RAM_SMW_Flag_Lagging
	BEQ.b RunRegularNMI
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
#LM170Hijack_VRAMRearrangement1:
	BEQ.b NMINotSpecialLv
	JMP.w CODE_00827A

RunRegularNMI:
	INC.b !RAM_SMW_Flag_Lagging
	JSR.w SMW_UpdatePaletteFromIndexedTable_Main
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BNE.b CODE_008222
	BCS.b CODE_0081F7
	JSR.w SMW_UploadStatusBarTilemap_Main
CODE_0081F7:
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	CMP.b #$08
	BNE.b CODE_008209
	LDA.w !RAM_SMW_Flag_UpdateCreditsBackground
	BEQ.b CODE_00821A
	JSL.l SMW_UpdateCreditsBackground_Main
	BRA.b CODE_00821A

CODE_008209:
#LM170Hijack_VRAMRearrangement2:
	JSL.l SMW_UploadLevelLayer1And2Tilemaps_Main
	LDA.w !RAM_SMW_Flag_UploadLoadScreenLettersToVRAM
	BEQ.b CODE_008217
	JSR.w SMW_UploadLoadingLettersTiles_Main
	BRA.b CODE_00823D

CODE_008217:
	JSR.w SMW_UploadLevelAnimations_Main
CODE_00821A:
	JSR.w SMW_RestoreSP1AfterMarioStart_Main				; Optimization: Should be removed in the optimized code. This routine is junk
	JSR.w SMW_UploadPlayerGFX_Main
	BRA.b CODE_00823D

CODE_008222:
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.b #$0A
	BNE.b CODE_008237
	LDY.w !RAM_SMW_Overworld_SubmapSwitchProcess
	DEY
	DEY
	CPY.b #$04
	BCS.b CODE_008237
	JSR.w SMW_UploadOverworldLayer1And2Tilemaps_Main
	BRA.b CODE_008243

CODE_008237:
	JSR.w SMW_UploadOverworldAnimations_Main
	JSR.w SMW_UploadPlayerGFX_Main
CODE_00823D:
	JSR.w SMW_LoadStripeImage_Sub
	JSR.w SMW_UploadOAMBuffer_Main
CODE_008243:
	JSR.w SMW_PollJoypadInputs_Main
NMINotSpecialLv:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !REGISTER_BG1HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	STA.w !REGISTER_BG1HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w !RAM_SMW_ShakingLayer1DispYLo
	STA.w !REGISTER_BG1VertScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.w !RAM_SMW_ShakingLayer1DispYHi
	STA.w !REGISTER_BG1VertScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STA.w !REGISTER_BG2HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosHi
	STA.w !REGISTER_BG2HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.w !REGISTER_BG2VertScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosHi
	STA.w !REGISTER_BG2VertScrollOffset
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BEQ.b CODE_008292
CODE_00827A:
#SA1Pack_IRQTriggerHack1:
	LDA.b #$81
	LDY.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	CPY.b #$08
	BNE.b CODE_0082A1
	LDY.w !RAM_SMW_Mirror_ScreenDisplayRegister
	STY.w !REGISTER_ScreenDisplayRegister
	LDY.w !RAM_SMW_Mirror_HDMAEnable
	STY.w !REGISTER_HDMAEnable
	JMP.w SMW_IRQRoutine_IRQNMIEnding

CODE_008292:
	LDY.b #!Define_SMW_RegularLevelStatusBarScanlineEnd
CODE_008294:
	LDA.w !REGISTER_IRQEnable
	STY.w !REGISTER_VCountTimerLo
	STZ.w !REGISTER_VCountTimerHi
	STZ.b !RAM_SMW_Flag_IRQToUse
#SA1Pack_IRQTriggerHack2:
	LDA.b #$A1
CODE_0082A1:
	STA.w !REGISTER_IRQNMIAndJoypadEnableFlags
	STZ.w !REGISTER_BG3HorizScrollOffset
	STZ.w !REGISTER_BG3HorizScrollOffset
	STZ.w !REGISTER_BG3VertScrollOffset
	STZ.w !REGISTER_BG3VertScrollOffset
	LDA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	STA.w !REGISTER_ScreenDisplayRegister
	LDA.w !RAM_SMW_Mirror_HDMAEnable
	STA.w !REGISTER_HDMAEnable
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
EndofVBlank:
	RTL
else
#SA1Pack_EndOfSNESNMI:
	REP.b #$30
	PLB
	PLY
	PLX
	PLA
	PLP
EndofVBlank:
	RTI
endif

Mode7NMI:
	LDA.b !RAM_SMW_Flag_Lagging
	BNE.b CODE_0082F7
	INC.b !RAM_SMW_Flag_Lagging
	LDA.w !RAM_SMW_Flag_UploadLoadScreenLettersToVRAM
	BEQ.b CODE_0082D4
	JSR.w SMW_UploadLoadingLettersTiles_Main
	BRA.b CODE_0082E8

CODE_0082D4:
	JSR.w SMW_RestoreSP1AfterMarioStart_Main				; Optimization: Should be removed in the optimized code. This routine is junk
	JSR.w SMW_UploadPlayerGFX_Main
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_0082E8
	JSR.w SMW_UploadMode7KoopaBossesAndLavaAnimation_Main
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BCS.b CODE_0082EB
CODE_0082E8:
	JSR.w SMW_UploadStatusBarTilemap_Main
CODE_0082EB:
	JSR.w SMW_UpdatePaletteFromIndexedTable_Main
	JSR.w SMW_LoadStripeImage_Sub
	JSR.w SMW_UploadOAMBuffer_Main
	JSR.w SMW_PollJoypadInputs_Main
CODE_0082F7:
	LDA.b #!BGModeAndTileSizeSetting_Mode01Enable|!BGModeAndTileSizeSetting_Mode01Layer3Priority
	STA.w !REGISTER_BGModeAndTileSizeSetting
	LDA.b !RAM_SMW_Mirror_M7CenterXPosLo
	CLC
	ADC.b #$80
	STA.w !REGISTER_Mode7CenterX
	LDA.b !RAM_SMW_Mirror_M7CenterXPosHi
	ADC.b #$00
	STA.w !REGISTER_Mode7CenterX
	LDA.b !RAM_SMW_Mirror_M7CenterYPosLo
	CLC
	ADC.b #$80
	STA.w !REGISTER_Mode7CenterY
	LDA.b !RAM_SMW_Mirror_M7CenterYPosHi
	ADC.b #$00
	STA.w !REGISTER_Mode7CenterY
	LDA.b !RAM_SMW_Mirror_M7MatrixALo
	STA.w !REGISTER_Mode7MatrixParameterA
	LDA.b !RAM_SMW_Mirror_M7MatrixAHi
	STA.w !REGISTER_Mode7MatrixParameterA
	LDA.b !RAM_SMW_Mirror_M7MatrixBLo
	STA.w !REGISTER_Mode7MatrixParameterB
	LDA.b !RAM_SMW_Mirror_M7MatrixBHi
	STA.w !REGISTER_Mode7MatrixParameterB
	LDA.b !RAM_SMW_Mirror_M7MatrixCLo
	STA.w !REGISTER_Mode7MatrixParameterC
	LDA.b !RAM_SMW_Mirror_M7MatrixCHi
	STA.w !REGISTER_Mode7MatrixParameterC
	LDA.b !RAM_SMW_Mirror_M7MatrixDLo
	STA.w !REGISTER_Mode7MatrixParameterD
	LDA.b !RAM_SMW_Mirror_M7MatrixDHi
	STA.w !REGISTER_Mode7MatrixParameterD
	JSR.w SMW_SetMode7PPUPointersAndLayer1Scroll_Main
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BCC.b CODE_00835C
	LDA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	STA.w !REGISTER_ScreenDisplayRegister
	LDA.w !RAM_SMW_Mirror_HDMAEnable
	STA.w !REGISTER_HDMAEnable
	LDA.b #$81
	JMP.w SMW_Mode7Layer1Scroll_Main

CODE_00835C:
	LDY.b #!Define_SMW_Mode7RoomStatusBarScanlineEnd
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b IggyLarryRoom
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBoss
	ASL
	TAX
	LDA.w SMW_PlayerState00_Normal_DATA_00F8E8,x
	CMP.b #$2A
	BNE.b NotMortonOrRoyRoom
	LDY.b #!Define_SMW_MortonRoyRoomStatusBarScanlineEnd
IggyLarryRoom:
NotMortonOrRoyRoom:
	JMP.w CODE_008294
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_UploadPlayerGFX(Address)
namespace SMW_UploadPlayerGFX
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	JSL.l MarioAndLuigi
	RTS
else
	REP.b #$20
	LDX.b #$04
	LDY.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BEQ.b CODE_00A328
	LDY.b #!CGRAM_SMW_DynamicPlayerPalette
	STY.w !REGISTER_CGRAMAddress
	LDA.w #(!REGISTER_WriteToCGRAMPort&$0000FF<<8)+$00
	STA.w DMA[$02].Parameters
	LDA.w !RAM_SMW_Pointer_PlayerPaletteLo
	STA.w DMA[$02].SourceLo
	LDY.b #SMW_GlobalPalettes_Mario>>16
	STY.w DMA[$02].SourceBank
	LDA.w #$0014
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
CODE_00A328:
	LDY.b #$80
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STA.w DMA[$02].Parameters
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$07F0
	STA.w !REGISTER_VRAMAddressLo
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDA.w #$0020
	STA.w DMA[$02].SizeLo
	LDA.w !RAM_SMW_Graphics_DynamicSpriteTile7FLo
	LDY.w !RAM_SMW_Player_CurrentCharacter
	BNE.b PlayingAsLuigi
	STA.w DMA[$02].SourceLo
	LDY.b #!RAM_SMW_Graphics_DecompressedGFX32>>16
	STY.w DMA[$02].SourceBank
else
	LDA.w !RAM_SMW_Graphics_DynamicSpriteTile7FLo
	STA.w DMA[$02].SourceLo
	LDY.b #!RAM_SMW_Graphics_DecompressedGFX32>>16
	STY.w DMA[$02].SourceBank
	LDA.w #$0020
	STA.w DMA[$02].SizeLo
endif
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo
	STA.w !REGISTER_VRAMAddressLo
	LDX.b #$00
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDY.b #$04
endif
CODE_00A355:
	LDA.w SMW_DynamicSpritePointersTop[$00].LowByte,x
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) == $00
	LDY.b #$04
endif
	STY.w !REGISTER_DMAEnable
	INX
	INX
	CPX.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BCC.b CODE_00A355
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$0100
	STA.w !REGISTER_VRAMAddressLo
	LDX.b #$00
CODE_00A375:
	LDA.w SMW_DynamicSpritePointersBottom[$00].LowByte,x
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) == $00
	LDY.b #$04
endif
	STY.w !REGISTER_DMAEnable
	INX
	INX
	CPX.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BCC.b CODE_00A375
	SEP.b #$20
	RTS

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
PlayingAsLuigi:
	JSL.l Luigi
	RTS
endif
endif
namespace off
endmacro

macro ROUTINE_RT01_SMW_UploadPlayerGFX(Address)					; Note: This is a SMAS exclusive routine macro
namespace SMW_UploadPlayerGFX
%InsertMacroAtXPosition(<Address>)

LuigiGFX:
	incbin "GFX/Luigi.bin"
	incbin "GFX/BlankLuigiTiles.bin"
namespace off
endmacro

macro ROUTINE_RT02_SMW_UploadPlayerGFX(Address)					; Note: This is a SMAS (USA) exclusive routine macro
namespace SMW_UploadPlayerGFX
%InsertMacroAtXPosition(<Address>)

Luigi:
	CLC
	ADC.w #LuigiGFX-$2000
	STA.w DMA[$02].SourceLo
	LDY.b #LuigiGFX>>16
	STY.w DMA[$02].SourceBank
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo
	STA.w !REGISTER_VRAMAddressLo
	LDY.b #$00
	CLC
CODE_33E076:
	LDA.w SMW_DynamicSpritePointersTop[$00].LowByte,y
	ADC.w #LuigiGFX-$2000
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	INY
	INY
	CPY.b #$04
	BNE.b CODE_33E076
	LDY.b #!RAM_SMW_Graphics_DecompressedGFX33>>16
	STY.w DMA[$02].SourceBank
	LDY.b #$04
CODE_33E095:
	LDA.w SMW_DynamicSpritePointersTop[$00].LowByte,y
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	INY
	INY
	CPY.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BCC.b CODE_33E095
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$0100
	STA.w !REGISTER_VRAMAddressLo
	LDY.b #LuigiGFX>>16
	STY.w DMA[$02].SourceBank
	LDY.b #$00
	CLC
CODE_33E0B9:
	LDA.w SMW_DynamicSpritePointersBottom[$00].LowByte,y
	ADC.w #LuigiGFX-$2000
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	INY
	INY
	CPY.b #$04
	BNE.b CODE_33E0B9
	LDY.b #!RAM_SMW_Graphics_DecompressedGFX33>>16
	STY.w DMA[$02].SourceBank
	LDY.b #$04
CODE_33E0D8:
	LDA.w SMW_DynamicSpritePointersBottom[$00].LowByte,y
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	INY
	INY
	CPY.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BCC.b CODE_33E0D8
	SEP.b #$20
	RTL
namespace off
endmacro

macro ROUTINE_RT03_SMW_UploadPlayerGFX(Address)				; Note: This is a SMAS (PAL) exclusive routine macro
namespace SMW_UploadPlayerGFX
%InsertMacroAtXPosition(<Address>)

MarioAndLuigi:
	REP.b #$20
	LDA.w !RAM_SMW_Player_CurrentCharacter
	AND.w #$00FF
	BEQ.b CODE_36F613
	LDA.w #LuigiGFX&$8000
	LDX.b #LuigiGFX>>16
	STX.b !RAM_SMW_Misc_ScratchRAM02
	BRA.b CODE_36F617

CODE_36F613:
	LDX.b #!RAM_SMW_Graphics_DecompressedGFX32>>16
	STX.b !RAM_SMW_Misc_ScratchRAM02

CODE_36F617:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$04
	LDY.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BEQ.b CODE_36F63F
	LDY.b #!CGRAM_SMW_DynamicPlayerPalette
	STY.w !REGISTER_CGRAMAddress
	LDA.w #(!REGISTER_WriteToCGRAMPort&$0000FF<<8)+$00
	STA.w DMA[$02].Parameters
	LDA.w !RAM_SMW_Pointer_PlayerPaletteLo
	STA.w DMA[$02].SourceLo
	LDY.b #$30
	STY.w DMA[$02].SourceBank
	LDA.w #$0014
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable

CODE_36F63F:
	LDY.b #$80
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STA.w DMA[$02].Parameters
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$07F0
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Graphics_DynamicSpriteTile7FLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w DMA[$02].SourceLo
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	STY.w DMA[$02].SourceBank
	LDA.w #$0020
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo
	STA.w !REGISTER_VRAMAddressLo
	LDY.b #$00

CODE_36F66F:
	LDA.w SMW_DynamicSpritePointersTop[$00].LowByte,y
	LDX.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_36F681
	CPY.b #$04
	BCS.b CODE_36F681
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #LuigiGFX>>16
	BRA.b CODE_36F683

CODE_36F681:
	LDX.b #!RAM_SMW_Graphics_DecompressedGFX32>>16

CODE_36F683:
	STX.w DMA[$02].SourceBank
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	LDX.b #$04
	STX.w !REGISTER_DMAEnable
	INY
	INY
	CPY.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BCC.b CODE_36F66F
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$0100
	STA.w !REGISTER_VRAMAddressLo
	LDY.b #$00

CODE_36F6A3:
	LDA.w SMW_DynamicSpritePointersBottom[$00].LowByte,y
	LDX.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_36F6B5
	CPY.b #$04
	BCS.b CODE_36F6B5
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #LuigiGFX>>16
	BRA.b CODE_36F6B7

CODE_36F6B5:
	LDX.b #!RAM_SMW_Graphics_DecompressedGFX32>>16

CODE_36F6B7:
	STX.w DMA[$02].SourceBank
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	LDX.b #$04
	STX.w !REGISTER_DMAEnable
	INY
	INY
	CPY.w !RAM_SMW_Player_NumberOfTilesToUpdate
	BCC.b CODE_36F6A3
	SEP.b #$20
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_PollJoypadInputs(Address)
namespace SMW_PollJoypadInputs
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.l !SRAM_SMAS_Global_Controller1PluggedInFlag
	TAX
	LDA.w !REGISTER_Joypad1Lo,x
	AND.b #$F0
	STA.w !RAM_SMW_IO_ControllerHold2CopyP1
	TAY
	EOR.w !RAM_SMW_IO_P1CtrlDisableHi
	AND.w !RAM_SMW_IO_ControllerHold2CopyP1
	STA.w !RAM_SMW_IO_ControllerPress2CopyP1
	STY.w !RAM_SMW_IO_P1CtrlDisableHi
	LDA.w !REGISTER_Joypad1Hi,x
	STA.w !RAM_SMW_IO_ControllerHold1CopyP1
	TAY
	EOR.w !RAM_SMW_IO_P1CtrlDisableLo
	AND.w !RAM_SMW_IO_ControllerHold1CopyP1
	STA.w !RAM_SMW_IO_ControllerPress1CopyP1
	STY.w !RAM_SMW_IO_P1CtrlDisableLo
	LDA.l !SRAM_SMAS_Global_Controller2PluggedInFlag
	TAX
	LDA.w !REGISTER_Joypad1Lo,x
	AND.b #$F0
	STA.w !RAM_SMW_IO_ControllerHold2CopyP2
	TAY
	EOR.w !RAM_SMW_IO_P2CtrlDisableHi
	AND.w !RAM_SMW_IO_ControllerHold2CopyP2
	STA.w !RAM_SMW_IO_ControllerPress2CopyP2
	STY.w !RAM_SMW_IO_P2CtrlDisableHi
	LDA.w !REGISTER_Joypad1Hi,x
	STA.w !RAM_SMW_IO_ControllerHold1CopyP2
	TAY
	EOR.w !RAM_SMW_IO_P2CtrlDisableLo
	AND.w !RAM_SMW_IO_ControllerHold1CopyP2
	STA.w !RAM_SMW_IO_ControllerPress1CopyP2
	STY.w !RAM_SMW_IO_P2CtrlDisableLo
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1,x
	AND.b #$C0
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP1,x
	STA.b !RAM_SMW_IO_ControllerHold1
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1,x
	STA.b !RAM_SMW_IO_ControllerHold2
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1,x
	AND.b #$40
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP1,x
	STA.b !RAM_SMW_IO_ControllerPress1
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1,x
	STA.b !RAM_SMW_IO_ControllerPress2
	RTS
else
	LDA.w !REGISTER_Joypad1Lo
	AND.b #$F0
	STA.w !RAM_SMW_IO_ControllerHold2CopyP1
	TAY
	EOR.w !RAM_SMW_IO_P1CtrlDisableHi
	AND.w !RAM_SMW_IO_ControllerHold2CopyP1
	STA.w !RAM_SMW_IO_ControllerPress2CopyP1
	STY.w !RAM_SMW_IO_P1CtrlDisableHi
	LDA.w !REGISTER_Joypad1Hi
	STA.w !RAM_SMW_IO_ControllerHold1CopyP1
	TAY
	EOR.w !RAM_SMW_IO_P1CtrlDisableLo
	AND.w !RAM_SMW_IO_ControllerHold1CopyP1
	STA.w !RAM_SMW_IO_ControllerPress1CopyP1
	STY.w !RAM_SMW_IO_P1CtrlDisableLo
	LDA.w !REGISTER_Joypad2Lo
	AND.b #$F0
	STA.w !RAM_SMW_IO_ControllerHold2CopyP2
	TAY
	EOR.w !RAM_SMW_IO_P2CtrlDisableHi
	AND.w !RAM_SMW_IO_ControllerHold2CopyP2
	STA.w !RAM_SMW_IO_ControllerPress2CopyP2
	STY.w !RAM_SMW_IO_P2CtrlDisableHi
	LDA.w !REGISTER_Joypad2Hi
	STA.w !RAM_SMW_IO_ControllerHold1CopyP2
	TAY
	EOR.w !RAM_SMW_IO_P2CtrlDisableLo
	AND.w !RAM_SMW_IO_ControllerHold1CopyP2
	STA.w !RAM_SMW_IO_ControllerPress1CopyP2
	STY.w !RAM_SMW_IO_P2CtrlDisableLo
	LDX.w !RAM_SMW_IO_ControllersPluggedIn
	BPL.b CODE_0086A8
	LDX.w !RAM_SMW_Player_CurrentCharacter
CODE_0086A8:
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1,x
	AND.b #$C0
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP1,x
	STA.b !RAM_SMW_IO_ControllerHold1
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1,x
	STA.b !RAM_SMW_IO_ControllerHold2
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1,x
	AND.b #$40
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP1,x
	STA.b !RAM_SMW_IO_ControllerPress1
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1,x
	STA.b !RAM_SMW_IO_ControllerPress2
	RTS
endif
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadOAMBuffer(Address)
namespace SMW_UploadOAMBuffer
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w DMA[$00].Parameters
	REP.b #$20
	STZ.w !REGISTER_OAMAddressLo
	LDA.w #(SMW_OAMBuffer[$00].XDisp&$0000FF<<8)+(!REGISTER_OAMDataWritePort&$0000FF)
	STA.w DMA[$00].Destination
	LDA.w #(SMW_OAMBuffer[$00].XDisp&$00FF00)>>8
	STA.w DMA[$00].SourceHi
	LDA.w #$0220
	STA.w DMA[$00].SizeLo
	LDY.b #$01
	STY.w !REGISTER_DMAEnable
	SEP.b #$20
	LDA.b #$80
	STA.w !REGISTER_OAMAddressHi
	LDA.b !RAM_SMW_Mirror_OAMAddressLo
	STA.w !REGISTER_OAMAddressLo
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadStatusBarTilemap(Address)
namespace SMW_UploadStatusBarTilemap
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation+$42
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008DBB:
	LDA.w PARAMS_StBr1,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008DBB
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STZ.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation+$63
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008DD8:
	LDA.w PARAMS_StBr2,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008DD8
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	RTS

PARAMS_StBr1:
	db $00,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Misc_StatusBarTilemap
	dw $001C

PARAMS_StBr2:
	db $00,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Misc_StatusBarTilemap+$1C
	dw $001B
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadLoadingLettersTiles(Address)
namespace SMW_UploadLoadingLettersTiles
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDX.b #$80
	STX.w !REGISTER_VRAMAddressIncrementValue
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo
	STA.w !REGISTER_VRAMAddressLo
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STA.w DMA[$02].Parameters
	LDA.w #!RAM_SMW_Graphics_DecompressedLoadingLetters
	STA.w DMA[$02].SourceLo
	LDX.b #!RAM_SMW_Graphics_DecompressedLoadingLetters>>16
	STX.w DMA[$02].SourceBank
	LDA.w #$00C0
	STA.w DMA[$02].SizeLo
	LDX.b #$04
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$0100
	STA.w !REGISTER_VRAMAddressLo
	LDA.w #!RAM_SMW_Graphics_DecompressedLoadingLetters+$C0
	STA.w DMA[$02].SourceLo
	LDA.w #$00C0
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$04A0
	STA.w !REGISTER_VRAMAddressLo
	LDA.w #!RAM_SMW_Graphics_DecompressedLoadingLetters+$0180
	STA.w DMA[$02].SourceLo
	LDA.w #$00C0
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$05A0
	STA.w !REGISTER_VRAMAddressLo
	LDA.w #!RAM_SMW_Graphics_DecompressedLoadingLetters+$0240
	STA.w DMA[$02].SourceLo
	LDA.w #$00C0
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	SEP.b #$20
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadLevelAnimations(Address)
namespace SMW_UploadLevelAnimations
%InsertMacroAtXPosition(<Address>)

Main:
#LM160Hijack_UploadLevelExAnimationData:
	REP.b #$20							;\ LM: Hijacks this location if the level ExAnimation feature is used (1.60+)
	LDY.b #$80							;| This routine is for uploading the animation data to VRAM.
	STY.w !REGISTER_VRAMAddressIncrementValue			;/
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STA.w DMA[$02].Parameters
	LDY.b #!RAM_SMW_Graphics_DecompressedGFX33>>16
	STY.w DMA[$02].SourceBank
	LDX.b #$04
	LDA.w !RAM_SMW_Graphics_TileAnimationVRAMAddress3Lo
	BEQ.b DontUploadAnimation3
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Graphics_TileAnimationSourceAddress3Lo
	STA.w DMA[$02].SourceLo
	LDA.w #$0080
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
DontUploadAnimation3:
	LDA.w !RAM_SMW_Graphics_TileAnimationVRAMAddress2Lo
	BEQ.b DontUploadAnimation2
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Graphics_TileAnimationSourceAddress2Lo
	STA.w DMA[$02].SourceLo
	LDA.w #$0080
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
DontUploadAnimation2:
	LDA.w !RAM_SMW_Graphics_TileAnimationVRAMAddress1Lo
	BEQ.b CODE_00A418
	STA.w !REGISTER_VRAMAddressLo
	CMP.w #$0800
	BEQ.b CODE_00A3F0
	LDA.w !RAM_SMW_Graphics_TileAnimationSourceAddress1Lo
	STA.w DMA[$02].SourceLo
	LDA.w #$0080
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	BRA.b CODE_00A418

CODE_00A3F0:
	LDA.w !RAM_SMW_Graphics_TileAnimationSourceAddress1Lo
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_Layer1GFXVRAMLocation+$0900
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Graphics_TileAnimationSourceAddress1Lo
	CLC
	ADC.w #$0040
	STA.w DMA[$02].SourceLo
	LDA.w #$0040
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
CODE_00A418:
	SEP.b #$20
	LDA.b #!CGRAM_SMW_YoshiCoinFlash
HandlePaletteAnimation:
;$00A41C
YellowFlash:
	STZ.b !RAM_SMW_Misc_ScratchRAM00
RedFlash:
	STA.w !REGISTER_CGRAMAddress
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$1C
	LSR
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.w SMW_GlobalPalettes_Flashing,y
	STA.w !REGISTER_WriteToCGRAMPort
	LDA.w SMW_GlobalPalettes_Flashing+$01,y
	STA.w !REGISTER_WriteToCGRAMPort
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UpdateCreditsBackground(Address)
namespace SMW_UpdateCreditsBackground
%InsertMacroAtXPosition(<Address>)

PARAMS_0C9559:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Misc_CreditsBackgroundBuffer
	dw $0400

PARAMS_0C9560:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Misc_CreditsBackgroundBuffer+$0400
	dw $0400

Main:
	SEP.b #$30
	PHB
	PHK
	PLB
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer2TilemapVRAMLocation+$C0
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer2TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDY.b #$06
CODE_0C957D:
	LDA.w PARAMS_0C9559,y
	STA.w DMA[$01].Parameters,y
	DEY
	BPL.b CODE_0C957D
	LDA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	ASL
	ASL
	ASL
	ORA.w DMA[$01].SourceHi
	STA.w DMA[$01].SourceHi
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer2TilemapVRAMLocation+$C0
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #(!VRAM_SMW_Layer2TilemapVRAMLocation>>8)+$04
	STA.w !REGISTER_VRAMAddressHi
	LDY.b #$06
CODE_0C95A8:
	LDA.w PARAMS_0C9560,y
	STA.w DMA[$01].Parameters,y
	DEY
	BPL.b CODE_0C95A8
	LDA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	ASL
	ASL
	ASL
	ORA.w DMA[$01].SourceHi
	STA.w DMA[$01].SourceHi
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STZ.w !RAM_SMW_Flag_UpdateCreditsBackground
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_RestoreSP1AfterMarioStart(Address)					; Optimization: This routine is trash. All it does is prevent tiles 4A-4F/5A-5F from being 4BPP, slows down level load, and wastes a byte of RAM and the amount of bytes this routine takes up.
namespace SMW_RestoreSP1AfterMarioStart
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_RestoreSP1TilesAfterMarioStart
#LM221Hijack_DisableSP1VRAMBackup1:
	BEQ.b Return00A47E							; LM: Changes the BEQ.b into BRA.b so this junk routine is skipped over. (2.21+)
	STZ.w !RAM_SMW_Flag_RestoreSP1TilesAfterMarioStart
	REP.b #$20
	LDY.b #$80
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$04A0
	STA.w !REGISTER_VRAMAddressLo
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STA.w DMA[$02].Parameters
	LDA.w #!RAM_SMW_Graphics_DecompressedOverworldGFX+$0100
	STA.w DMA[$02].SourceLo
	LDY.b #(!RAM_SMW_Graphics_DecompressedOverworldGFX>>16)
	STY.w DMA[$02].SourceBank
	LDA.w #$00C0
	STA.w DMA[$02].SizeLo
	LDX.b #$04
	STX.w !REGISTER_DMAEnable
	LDA.w #!VRAM_SMW_SpriteGFXLocationLo+$05A0
	STA.w !REGISTER_VRAMAddressLo
	LDA.w #!RAM_SMW_Graphics_DecompressedOverworldGFX+$01C0
	STA.w DMA[$02].SourceLo
	LDA.w #$00C0
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	SEP.b #$20
Return00A47E:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadMode7KoopaBossesAndLavaAnimation(Address)
namespace SMW_UploadMode7KoopaBossesAndLavaAnimation
%InsertMacroAtXPosition(<Address>)

VRAMAddressToUpload:
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$129E,!VRAM_SMW_Layer1GFXVRAMLocation+$121E,!VRAM_SMW_Layer1GFXVRAMLocation+$119E,!VRAM_SMW_Layer1GFXVRAMLocation+$111E
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$161E,!VRAM_SMW_Layer1GFXVRAMLocation+$159E,!VRAM_SMW_Layer1GFXVRAMLocation+$151E,!VRAM_SMW_Layer1GFXVRAMLocation+$149E
	dw !VRAM_SMW_Layer1GFXVRAMLocation+$141E,!VRAM_SMW_Layer1GFXVRAMLocation+$139E,!VRAM_SMW_Layer1GFXVRAMLocation+$131E,!VRAM_SMW_Layer1GFXVRAMLocation+$169E

Main:
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BCS.b CODE_0098E1
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$06
	TAX
	REP.b #$20
	LDY.b #$80
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STA.w DMA[$02].Parameters
	LDA.w #!VRAM_SMW_Layer1GFXVRAMLocation_Mode7+$0800
	STA.w !REGISTER_VRAMAddressLo
	LDA.l SMW_LevelTileAnimations_FrameData_Local1_Frame5,x			; Info: It seems that animated lava tiles are uploaded to SP4 (tiles 480-483) in the Morton, Roy, Reznor(?) and Ludwig rooms.
	STA.w DMA[$02].SourceLo
	LDY.b #!RAM_SMW_Graphics_DecompressedGFX33>>16
	STY.w DMA[$02].SourceBank
	LDA.w #$0080
	STA.w DMA[$02].SizeLo
	LDY.b #$04
	STY.w !REGISTER_DMAEnable
	CLC
CODE_0098E1:
	REP.b #$20
	LDA.w #$0004
	LDY.b #$06
	BCC.b CODE_0098EF
	LDA.w #$0008								; Optimization: This could be changed to an ASL to save 2 bytes.
	LDY.b #$16
CODE_0098EF:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #!RAM_SMW_Misc_Mode7BossTilemap
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STZ.w !REGISTER_VRAMAddressIncrementValue
	LDA.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$00
	STA.w DMA[$02].Parameters
	LDX.b #!RAM_SMW_Misc_Mode7BossTilemap>>16
	STX.w DMA[$02].SourceBank
	LDX.b #$04
CODE_009906:
	LDA.w VRAMAddressToUpload,y
	STA.w !REGISTER_VRAMAddressLo
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w DMA[$02].SourceLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w DMA[$02].SizeLo
	STX.w !REGISTER_DMAEnable
	DEY
	DEY
	BPL.b CODE_009906
	SEP.b #$20
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_UpdatePaletteFromIndexedTable(Address)
namespace SMW_UpdatePaletteFromIndexedTable
%InsertMacroAtXPosition(<Address>)

DATA_00A47F:
	dl !RAM_SMW_Palettes_DynamicPaletteBytesToUpload
	dl !RAM_SMW_Palettes_CopyOfPaletteMirror
	dl !RAM_SMW_Palettes_PaletteMirror

Main:
	LDY.w !RAM_SMW_Palettes_PaletteUploadTableIndex
	LDX.w DATA_00A47F+$02,y
	STX.b !RAM_SMW_Misc_ScratchRAM02
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w DATA_00A47F+$01,y
	XBA
	LDA.w DATA_00A47F,y
	REP.b #$10
	TAY
CODE_00A4A0:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y			; Optimization: The way this is handled means that all 3 palette tables must be in the $000000-$001FFF range.
	BEQ.b CODE_00A4CF
	STX.w DMA[$02].SourceBank
	STA.w DMA[$02].SizeLo
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STZ.w DMA[$02].SizeHi
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.w !REGISTER_CGRAMAddress
	REP.b #$20
	LDA.w #(!REGISTER_WriteToCGRAMPort&$0000FF<<8)+$00
	STA.w DMA[$02].Parameters
	INY
	TYA
	STA.w DMA[$02].SourceLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAY
	SEP.b #$20
	LDA.b #$04
	STA.w !REGISTER_DMAEnable
	BRA.b CODE_00A4A0

CODE_00A4CF:
	SEP.b #$10
	JSR.w CODE_00AE47
	LDA.w !RAM_SMW_Palettes_PaletteUploadTableIndex
	BNE.b CODE_00A4DF
	STZ.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	STZ.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload
CODE_00A4DF:
	STZ.w !RAM_SMW_Palettes_PaletteUploadTableIndex
Return00A4E2:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_UpdatePaletteFromIndexedTable(Address)
namespace SMW_UpdatePaletteFromIndexedTable
%InsertMacroAtXPosition(<Address>)

DATA_00AE41:
	db $00,$05,$0A

DATA_00AE44:
	db $20,$40,$80

CODE_00AE47:
	LDX.b #$02
CODE_00AE49:
	REP.b #$20
	LDA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDY.w DATA_00AE41,x
CODE_00AE51:
	DEY
	BMI.b CODE_00AE57
	LSR
	BRA.b CODE_00AE51

CODE_00AE57:
	SEP.b #$20
	AND.b #$1F
	ORA.w DATA_00AE44,x
	STA.w !REGISTER_FixedColorData
	DEX
	BPL.b CODE_00AE49
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadOverworldAnimations(Address)
namespace SMW_UploadOverworldAnimations
%InsertMacroAtXPosition(<Address>)

Main:
#LM240Hijack_UploadOverworldExAnimationData:
	REP.b #$10							;\ LM: Hijacks this location if the overworld ExAnimation feature is used (2.40+)
	LDA.b #$80							;| This routine is for uploading the animation data to VRAM.
	STA.w !REGISTER_VRAMAddressIncrementValue			;/
	LDY.w #!VRAM_SMW_Layer1GFXVRAMLocation+$0750
	STY.w !REGISTER_VRAMAddressLo
	LDY.w #(!REGISTER_WriteToVRAMPortLo&$0000FF<<8)+$01
	STY.w DMA[$02].Parameters
	LDY.w #!RAM_SMW_Graphics_DecompressedOverworldGFX
	STY.w DMA[$02].SourceLo
	STZ.w DMA[$02].SourceBank
	LDY.w #$0160
	STY.w DMA[$02].SizeLo
	LDA.b #$04
	STA.w !REGISTER_DMAEnable
	SEP.b #$10
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.b #$0A
	BEQ.b SMW_UpdatePaletteFromIndexedTable_Return00A4E2
	LDA.b #!CGRAM_SMW_YellowLevelTile
	JSR.w SMW_UploadLevelAnimations_YellowFlash
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #!CGRAM_SMW_RedLevelTile
	JMP.w SMW_UploadLevelAnimations_RedFlash
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadOverworldLayer1And2Tilemaps(Address)
namespace SMW_UploadOverworldLayer1And2Tilemaps
%InsertMacroAtXPosition(<Address>)

DATA_00A521:
	db $00,$04,$08,$0C

DATA_00A525:
	db $00,$08,$10,$18

Main:
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer2TilemapVRAMLocation>>8
	CLC
	ADC.w DATA_00A521,y
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00A53C:
	LDA.w PARAMS_00A586,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00A53C
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	BEQ.b NotOnMainMap					; Note: !Define_SMW_Overworld_MainMap
	LDA.b #$60
	STA.w DMA[$01].SourceHi
NotOnMainMap:
	LDA.w DMA[$01].SourceHi
	CLC
	ADC.w DATA_00A525,y
	STA.w DMA[$01].SourceHi
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer1TilemapVRAMLocation>>8
	CLC
	ADC.w DATA_00A521,y
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00A577:
	LDA.w PARAMS_00A58D,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00A577
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	RTS

PARAMS_00A586:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Overworld_Layer2Tiles

	dw $0800

PARAMS_00A58D:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)

	dw $0800
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_LoadStripeImage(Address)
namespace SMW_LoadStripeImage
%InsertMacroAtXPosition(<Address>)

if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
endif

StripeImagePtrs:
	base $000000
.Variable:			dl SMW_StripeImageUploadTable[$00].LowByte				; $00
#LM000Hijack_CustomTitleScreen:										;
.TitleScreen:			dl SMW_GameMode04_PrepareTitleScreen_TitlescreenLayer3			; $03
.OverworldBorder:		dl SMW_GameMode0C_LoadOverworld_OverworldBorderLayer3			; $06
.RemoveTextBox:			dl SMW_DisplayMessage_RemoveTextBox					; $09
.ContinueEndText:		dl SMW_ContinueEndText_Main						; $0C
.CookieMountainCutsceneBG:	dl SMW_Backgrounds_CastleDestruction_CookieMountain			; $0F
.XPlayerGameText		dl SMW_XPlayerGameText_Main						; $12
.ShowScrollArrows		dl SMW_GameMode0E_ShowOverworld_OverworldScrollArrowsImage		; $15
.RemoveScrollArrows		dl SMW_GameMode0E_ShowOverworld_RemoveOverworldScrollArrowsImage	; $18
.CloseOverworldPrompt		dl SMW_OverworldPrompt02_ExpandPromptWindow_ClearPromptWindowImage	; $1B
.SaveMenuText			dl SMW_SaveMenuText_Main						; $1E
#LM000Hijack_CustomCastleDestructionText:								;\ LM: Edit Boss Sequence Text...
.CastleDestructionText:											;| Lunar Magic will modify these pointers to point to the extended area.
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;| Otherwise, there wouldn't be enough room to use all 56 lines.
				dl SMW_CastleDestructionText_BlankLine					;| $21
				dl SMW_CastleDestructionText_Iggy_Line7					;| $24
				dl SMW_CastleDestructionText_Iggy_Line6					;| $27
				dl SMW_CastleDestructionText_Iggy_Line5					;| $2A
endif													;|
				dl SMW_CastleDestructionText_Iggy_Line4					;| $2D
				dl SMW_CastleDestructionText_Iggy_Line3					;| $30
				dl SMW_CastleDestructionText_Iggy_Line2					;| $33
				dl SMW_CastleDestructionText_Iggy_Line1					;| $36
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;|
				dl SMW_CastleDestructionText_Morton_Line8				;| $39
				dl SMW_CastleDestructionText_Morton_Line7				;| $3C
				dl SMW_CastleDestructionText_Morton_Line6				;| $3F
				dl SMW_CastleDestructionText_Morton_Line5				;| $42
endif													;|
				dl SMW_CastleDestructionText_Morton_Line4				;| $45
				dl SMW_CastleDestructionText_Morton_Line3				;| $48
				dl SMW_CastleDestructionText_Morton_Line2				;| $4B
				dl SMW_CastleDestructionText_Morton_Line1				;| $4E
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;|
				dl SMW_CastleDestructionText_BlankLine					;| $51
				dl SMW_CastleDestructionText_Lemmy_Line7				;| $54
				dl SMW_CastleDestructionText_Lemmy_Line6				;| $57
				dl SMW_CastleDestructionText_Lemmy_Line5				;| $5A
endif													;|
				dl SMW_CastleDestructionText_Lemmy_Line4				;| $5D
				dl SMW_CastleDestructionText_Lemmy_Line3				;| $60
				dl SMW_CastleDestructionText_Lemmy_Line2				;| $63
				dl SMW_CastleDestructionText_Lemmy_Line1				;| $66
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;|
				dl SMW_CastleDestructionText_Ludwig_Line8				;| $69
				dl SMW_CastleDestructionText_Ludwig_Line7				;| $6C
				dl SMW_CastleDestructionText_Ludwig_Line6				;| $6F
				dl SMW_CastleDestructionText_Ludwig_Line5				;| $72
endif													;|
				dl SMW_CastleDestructionText_Ludwig_Line4				;| $75
				dl SMW_CastleDestructionText_Ludwig_Line3				;| $78
				dl SMW_CastleDestructionText_Ludwig_Line2				;| $7B
				dl SMW_CastleDestructionText_Ludwig_Line1				;| $7E
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;|
				dl SMW_CastleDestructionText_BlankLine					;| $81
				dl SMW_CastleDestructionText_Roy_Line7					;| $84
				dl SMW_CastleDestructionText_Roy_Line6					;| $87
				dl SMW_CastleDestructionText_Roy_Line5					;| $8A
endif													;|
				dl SMW_CastleDestructionText_Roy_Line4					;| $8D
				dl SMW_CastleDestructionText_Roy_Line3					;| $90
				dl SMW_CastleDestructionText_Roy_Line2					;| $93
				dl SMW_CastleDestructionText_Roy_Line1					;| $96
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;|
				dl SMW_CastleDestructionText_Wendy_Line8				;| $99
				dl SMW_CastleDestructionText_Wendy_Line7				;| $9C
				dl SMW_CastleDestructionText_Wendy_Line6				;| $9F
				dl SMW_CastleDestructionText_Wendy_Line5				;| $A2
endif													;|
				dl SMW_CastleDestructionText_Wendy_Line4				;| $A5
				dl SMW_CastleDestructionText_Wendy_Line3				;| $A8
				dl SMW_CastleDestructionText_Wendy_Line2				;| $AB
				dl SMW_CastleDestructionText_Wendy_Line1				;| $AE
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00							;|
				dl SMW_CastleDestructionText_Larry_Line8				;| $B1
				dl SMW_CastleDestructionText_Larry_Line7				;| $B4
				dl SMW_CastleDestructionText_Larry_Line6				;| $B7
				dl SMW_CastleDestructionText_Larry_Line5				;| $BA
endif													;|
				dl SMW_CastleDestructionText_Larry_Line4				;| $BD
				dl SMW_CastleDestructionText_Larry_Line3				;| $C0
				dl SMW_CastleDestructionText_Larry_Line2				;| $C3
				dl SMW_CastleDestructionText_Larry_Line1				;/ $C6
.CaveCutsceneBG:		dl SMW_Backgrounds_CastleDestruction_Cave				; $C9
.ChocolatIslandCutsceneBG:	dl SMW_Backgrounds_CastleDestruction_ChocolateIsland			; $CC
.CutsceneCastle:		dl SMW_Backgrounds_CastleDestruction_Castle				; $CF
.CutsceneBorder:		dl SMW_GameMode19_Cutscene_CastleDestructionBorder			; $D2
.TheEndText:			dl SMW_TheEndScreenText_Main						; $D5
.CreditsEnemyNames:		dl SMW_CreditsEnemyNames_Screen01					; $D8
				dl SMW_CreditsEnemyNames_Screen02					; $DB
				dl SMW_CreditsEnemyNames_Screen03					; $DE
				dl SMW_CreditsEnemyNames_Screen04					; $E1
				dl SMW_CreditsEnemyNames_Screen05					; $E4
				dl SMW_CreditsEnemyNames_Screen06					; $E7
				dl SMW_CreditsEnemyNames_Screen07					; $EA
				dl SMW_CreditsEnemyNames_Screen08					; $ED
				dl SMW_CreditsEnemyNames_Screen09					; $F0
				dl SMW_CreditsEnemyNames_Screen10					; $F3
				dl SMW_CreditsEnemyNames_Screen11					; $F6
				dl SMW_CreditsEnemyNames_Screen12					; $F9
				dl SMW_CreditsEnemyNames_Screen13					; $FC
.OverworldCutsceneBG:		dl SMW_Backgrounds_CastleDestruction_Overworld				; $FF
	base off

Sub:
	LDY.b !RAM_SMW_Graphics_StripeImageToUpload
	LDA.w StripeImagePtrs,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w StripeImagePtrs+$01,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w StripeImagePtrs+$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w UploadToVRAM
	LDA.b !RAM_SMW_Graphics_StripeImageToUpload
	BNE.b CODE_0085F7
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexHi
	DEC
	STA.l SMW_StripeImageUploadTable[$00].LowByte
CODE_0085F7:
	STZ.b !RAM_SMW_Graphics_StripeImageToUpload
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_LoadStripeImage(Address)				; Optimization: This routine could be improved. Look at how the equivalent routine is handled in SMAS.
namespace SMW_LoadStripeImage
%InsertMacroAtXPosition(<Address>)

UploadToVRAM:
	REP.b #$10
	STA.w DMA[$01].SourceBank
	LDY.w #$0000
CODE_008726:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	BPL.b CODE_00872D
	SEP.b #$30
	RTS

CODE_00872D:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STZ.b !RAM_SMW_Misc_ScratchRAM07
	ASL
	ROL.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b #!REGISTER_WriteToVRAMPortLo
	STA.w DMA[$01].Destination
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	AND.b #$40
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	ORA.b #$01
	STA.w DMA[$01].Parameters
#LM170Hijack_VRAMRearrangement3:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM03				;\ Note: Layer GFX locations must be hardcoded due to this routine.
	STA.w !REGISTER_VRAMAddressLo					;/
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	XBA
	AND.w #$3FFF
	TAX
	INX
	INY
	INY
	TYA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w DMA[$01].SourceLo
	STX.w DMA[$01].SizeLo
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	BEQ.b CODE_008795
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDA.b #!REGISTER_WriteToVRAMPortHi
	STA.w DMA[$01].Destination
	REP.b #$21
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !REGISTER_VRAMAddressLo
	TYA
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	INC
	STA.w DMA[$01].SourceLo
	STX.w DMA[$01].SizeLo
	LDX.w #$0002
CODE_008795:
	STX.b !RAM_SMW_Misc_ScratchRAM03
	TYA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAY
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	ORA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	JMP.w CODE_008726
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UploadLevelLayer1And2Tilemaps(Address)
namespace SMW_UploadLevelLayer1And2Tilemaps
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	BNE.b ModifyLayer1
	JMP.w DoneUpdatingLayer1

ModifyLayer1:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BEQ.b HorizontalLayer1Level
	JMP.w VerticalLayer1Leve1

HorizontalLayer1Level:
	LDY.b #$81
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0087D3:
	LDA.w PARAMS_008A16,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0087D3
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	CLC
	ADC.b #$08
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0087F5:
	LDA.w PARAMS_008A1D,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0087F5
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	INC
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008815:
	LDA.w PARAMS_008A24,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008815
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	INC
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	CLC
	ADC.b #$08
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008838:
	LDA.w PARAMS_008A2B,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008838
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	JMP.w DoneUpdatingLayer1

VerticalLayer1Leve1:
	LDY.b #$80
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00885C:
	LDA.w PARAMS_008A16,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00885C
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	CLC
	ADC.b #$04
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00887E:
	LDA.w PARAMS_008A1D,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00887E
	LDA.b #$40
	STA.w DMA[$01].SizeLo
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	CLC
	ADC.b #$20
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0088A5:
	LDA.w PARAMS_008A24,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0088A5
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	CLC
	ADC.b #$20
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	CLC
	ADC.b #$04
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0088CA:
	LDA.w PARAMS_008A2B,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0088CA
	LDA.b #$40
	STA.w DMA[$01].SizeLo
	LDA.b #$02
	STA.w !REGISTER_DMAEnable

DoneUpdatingLayer1:
	LDA.b #$00
	STA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	BNE.b ModifyLayer2
	JMP.w DoneUpdatingLayer2

ModifyLayer2:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$02
	BEQ.b HorizontalLayer2Level
	JMP.w VerticalLayer2Leve1

HorizontalLayer2Level:
	LDY.b #$81
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008906:
	LDA.w PARAMS_008A32,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008906
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	CLC
	ADC.b #$08
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008928:
	LDA.w PARAMS_008A39,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008928
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	INC
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008948:
	LDA.w PARAMS_008A40,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008948
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	INC
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	CLC
	ADC.b #$08
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00896B:
	LDA.w PARAMS_008A47,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00896B
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	JMP.w DoneUpdatingLayer2

VerticalLayer2Leve1:
	LDY.b #$80
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00898F:
	LDA.w PARAMS_008A32,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00898F
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	CLC
	ADC.b #$04
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0089B1:
	LDA.w PARAMS_008A39,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0089B1
	LDA.b #$40
	STA.w DMA[$01].SizeLo
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	CLC
	ADC.b #$20
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0089D8:
	LDA.w PARAMS_008A40,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0089D8
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	STY.w !REGISTER_VRAMAddressIncrementValue
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	CLC
	ADC.b #$20
	STA.w !REGISTER_VRAMAddressLo
	LDA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	CLC
	ADC.b #$04
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_0089FD:
	LDA.w PARAMS_008A47,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_0089FD
	LDA.b #$40
	STA.w DMA[$01].SizeLo
	LDA.b #$02
	STA.w !REGISTER_DMAEnable

DoneUpdatingLayer2:
	LDA.b #$00							;\ Optimization: STZ?
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo			;/
#SA1Pack_Bank00RTL:
	RTL

PARAMS_008A16:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer1TilesToUploadBuffer
	dw $0040

PARAMS_008A1D:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$40
	dw $002C

PARAMS_008A24:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$80
	dw $0040

PARAMS_008A2B:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$C0
	dw $002C

PARAMS_008A32:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer2TilesToUploadBuffer
	dw $0040

PARAMS_008A39:
	db $01,!REGISTER_WriteToVRAMPortLo

	dl !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$40
#LM170Hijack_VRAMRearrangement4:
	dw $002C

PARAMS_008A40:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$80
	dw $0040

PARAMS_008A47:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$C0
#LM170Hijack_VRAMRearrangement5:
	dw $002C
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_IRQRoutine(Address)
namespace SMW_IRQRoutine
%InsertMacroAtXPosition(<Address>)

; Note: Don't use FastROM addressing on this routine! It could mess up time critical code.

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) == $00
	SEI
	PHP					; Optimization: Same deal about PHP/PLP as with the NMI routine above.
	REP.b #$30
	PHA
	PHX
	PHY
	PHB
	PHK
	PLB
	SEP.b #$30
endif
	LDA.w !REGISTER_IRQEnable
	BPL.b CODE_0083B2
	LDA.b #$81
	LDY.w !RAM_SMW_Misc_NMIToUseFlag
	BMI.b CODE_0083BA
IRQNMIEnding:
	STA.w !REGISTER_IRQNMIAndJoypadEnableFlags
	LDY.b #$1F
SA1Pack_RemoveJSRToWaitForHBlank2:
	JSR.w SMW_WaitForHBlank_Entry2
	LDA.b !RAM_SMW_Mirror_Layer3XPosLo
	STA.w !REGISTER_BG3HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_Layer3XPosHi
	STA.w !REGISTER_BG3HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
	STA.w !REGISTER_BG3VertScrollOffset
	LDA.b !RAM_SMW_Mirror_Layer3YPosHi
	STA.w !REGISTER_BG3VertScrollOffset
CODE_0083A8:
	LDA.b !RAM_SMW_Mirror_BGModeAndTileSizeSetting
	STA.w !REGISTER_BGModeAndTileSizeSetting
	LDA.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	STA.w !REGISTER_ColorMathSelectAndEnable
CODE_0083B2:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	RTL
else
#SA1Pack_EndOfSNESIRQ:
	REP.b #$30
	PLB
	PLY
	PLX
	PLA
	PLP
	RTI
endif

CODE_0083BA:
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_0083E3
	LDY.b !RAM_SMW_Flag_IRQToUse
	BEQ.b CODE_0083D0
	STA.w !REGISTER_IRQNMIAndJoypadEnableFlags
	LDY.b #$14
#SA1Pack_RemoveJSRToWaitForHBlank3:
	JSR.w SMW_WaitForHBlank_Entry2
	JSR.w SMW_SetMode7PPUPointersAndLayer1Scroll_Main
	BRA.b CODE_0083A8

CODE_0083D0:
	INC.b !RAM_SMW_Flag_IRQToUse
	LDA.w !REGISTER_IRQEnable
	LDA.b #!Define_SMW_LudwigMortonRoyRoomMode7ScanlineEnd
	SEC
	SBC.w !RAM_SMW_ShakingLayer1DispYLo
	STA.w !REGISTER_VCountTimerLo
	STZ.w !REGISTER_VCountTimerHi
	LDA.b #$A1
CODE_0083E3:
	LDY.w !RAM_SMW_Timer_EndLevel
	BEQ.b SMW_Mode7Layer1Scroll_Main
	LDY.w !RAM_SMW_Timer_LevelEndFade
	CPY.b #$40
	BCC.b SMW_Mode7Layer1Scroll_Main
	LDA.b #$81
	BRA.b IRQNMIEnding
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_Mode7Layer1Scroll(Address)
namespace SMW_Mode7Layer1Scroll
%InsertMacroAtXPosition(<Address>)

Main:
	STA.w !REGISTER_IRQNMIAndJoypadEnableFlags
#SA1Pack_RemoveJSRToWaitForHBlank1:
	JSR.w SMW_WaitForHBlank_Main					; Note: This routine is called during VBlank and IRQ. This JSR.w SMW_is useless if in the former.
	NOP #2
	LDA.b #!BGModeAndTileSizeSetting_Mode07Enable
	STA.w !REGISTER_BGModeAndTileSizeSetting
	LDA.b !RAM_SMW_Mirror_M7XPosLo
	STA.w !REGISTER_BG1HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_M7XPosHi
	STA.w !REGISTER_BG1HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_M7YPosLo
	STA.w !REGISTER_BG1VertScrollOffset
	LDA.b !RAM_SMW_Mirror_M7YPosHi
	STA.w !REGISTER_BG1VertScrollOffset
	BRA.b SMW_IRQRoutine_CODE_0083B2
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SetMode7PPUPointersAndLayer1Scroll(Address)
namespace SMW_SetMode7PPUPointersAndLayer1Scroll
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Layer1TilemapSize_Mode7|(!Define_SMW_Layer1TilemapVRAMLocation_Mode7<<2)
	STA.w !REGISTER_BG1AddressAndSize
	LDA.b #!Define_SMW_Layer1GFXVRAMLocation_Mode7|(!Define_SMW_Layer2GFXVRAMLocation<<4)
	STA.w !REGISTER_BG1And2TileDataDesignation
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !REGISTER_BG1HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	STA.w !REGISTER_BG1HorizScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w !RAM_SMW_ShakingLayer1DispYLo
	STA.w !REGISTER_BG1VertScrollOffset
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STA.w !REGISTER_BG1VertScrollOffset
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_WaitForHBlank(Address)
namespace SMW_WaitForHBlank
%InsertMacroAtXPosition(<Address>)

Main:
FlagSet:
	LDY.b #$20
Entry2:
	BIT.w !REGISTER_HVBlankFlagsAndJoypadStatus
	BVS.b FlagSet
FlagClear:
	BIT.w !REGISTER_HVBlankFlagsAndJoypadStatus
	BVC.b FlagClear
WasteTimeLoop:
	DEY
	BNE.b WasteTimeLoop
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

#LM300Hijack_Unknown00A1CE:							;\ LM: Converts these to be 16-bit values (3.00+)
GrndShakeDispYLo:								;|
	db $FE,$00,$02,$00							;|
										;|
GrndShakeDispYHi:								;|
	db $FF,$00,$00,$00							;/

DATA_00A1D6:
	db $12,$22,$12,$02

Main:
#LM000Hijack_RecordTitleScreenDemo1:
	LDA.w !RAM_SMW_Misc_DisplayMessage
	BEQ.b NoActiveMessage
	JSL.l SMW_DisplayMessage_Main
	RTS

NoActiveMessage:
	LDA.w !RAM_SMW_Flag_ActiveBonusGame					;\ Optimization: Wouldn't this have made more sense to be a state for Mario to be in ($7E0071)?
	BEQ.b CODE_00A200							;|
	LDA.w !RAM_SMW_Timer_BonusGameEnd					;|
	BEQ.b CODE_00A200							;|
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00	;|
	CMP.b #$48								;|
else										;|
	CMP.b #$40								;|
endif										;|
	BCS.b CODE_00A200							;|
	JSR.w SMW_DamagePlayer_DisableButtons					;|
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00	;|
	CMP.b #$24								;|
else										;|
	CMP.b #$1C								;|
endif										;|
	BCS.b CODE_00A200							;|
	JSR.w SMW_PlayerState00_Normal_SetMarioPeaceImg				;|
	LDA.b #!Define_SMW_PlayerState0D_DoAbsolutelyNothing			;|
	STA.b !RAM_SMW_Player_CurrentState					;|
CODE_00A200:									;/
	ORA.b !RAM_SMW_Player_CurrentState
	ORA.w !RAM_SMW_Timer_EndLevel
	BEQ.b CODE_00A211
	LDA.b #!Joypad_DPadD>>8
	TRB.b !RAM_SMW_IO_ControllerHold1
	LDA.b #!Joypad_X|(!Joypad_Y>>8)
	TRB.b !RAM_SMW_IO_ControllerPress1
	TRB.b !RAM_SMW_IO_ControllerPress2
CODE_00A211:
	LDA.w !RAM_SMW_Timer_PreventPause
	BEQ.b CODE_00A21B
	DEC.w !RAM_SMW_Timer_PreventPause
	BRA.b CODE_00A242

CODE_00A21B:
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_Start>>8
	BEQ.b CODE_00A242
	LDA.w !RAM_SMW_Timer_EndLevel
	BNE.b CODE_00A242
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState09_Death
	BCS.b CODE_00A242
	LDA.b #$3C
	STA.w !RAM_SMW_Timer_PreventPause
	LDY.b #!Define_SMW_Sound1DF9_UnPause
	LDA.w !RAM_SMW_Flag_Pause
	EOR.b #$01
	STA.w !RAM_SMW_Flag_Pause
	BEQ.b CODE_00A23F
	LDY.b #!Define_SMW_Sound1DF9_Pause
CODE_00A23F:
	STY.w !RAM_SMW_IO_SoundCh1
CODE_00A242:
	LDA.w !RAM_SMW_Flag_Pause
	BEQ.b CODE_00A28A
#Debug_SlowMotion:
	BRA.b CODE_00A25B
	BIT.w !RAM_SMW_IO_ControllerPress1CopyP2
	BVS.b ADDR_00A259
	LDA.w !RAM_SMW_IO_ControllerHold1CopyP2
	BPL.b CODE_00A25B
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$0F
	BNE.b CODE_00A25B
ADDR_00A259:
	BRA.b CODE_00A28A

CODE_00A25B:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_Select>>8
	BEQ.b Return00A289
	LDY.w !RAM_SMW_Overworld_LevelNumberLo
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,y
#Debug_BeatLevel1:
	BPL.b Return00A289
	LDA.w !RAM_SMW_Misc_ExitLevelAction
	BEQ.b CODE_00A270
	BPL.b Return00A289
CODE_00A270:
	LDA.b #$80
#Debug_BeatLevel2:
	BRA.b CODE_00A27E
	LDA.b #$01
	BIT.b !RAM_SMW_IO_ControllerHold1
	BPL.b ADDR_00A27B
	INC
ADDR_00A27B:
	STA.w !RAM_SMW_Flag_ActivateOverworldEvent				; Optimization: Junk
CODE_00A27E:
	STA.w !RAM_SMW_Misc_ExitLevelAction
	INC.w !RAM_SMW_Overworld_CheckIfEventPassedFlag				; Optimization: Junk
	LDA.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	STA.w !RAM_SMW_Misc_GameMode
Return00A289:
endif
	RTS

CODE_00A28A:
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b NotInMode7Level
	JSR.w InMode7Level
	JMP.w NotInNormalLevel							; Optimization: BRA.b?

NotInMode7Level:
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	JSL.l SMW_HandleStandardLevelCameraScroll_Main
	JSL.l SMW_HandleScrollSpriteAndLayer3Scrolling_Main
	JSL.l SMW_CheckIfLevelTilemapsNeedScrollUpdate_Main
#LM160Hijack_LevelExAnimations2:
	JSL.l SMW_LevelTileAnimations_Main
NotInNormalLevel:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PHA
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PHA
#LM300Hijack_Unknown00A2AF:
	STZ.w !RAM_SMW_ShakingLayer1DispYLo				;\ LM: Rewrites this code for some unknown reason. (3.00+)
	STZ.w !RAM_SMW_ShakingLayer1DispYHi				;|
	LDA.w !RAM_SMW_Timer_ShakeLayer1				;|
	BEQ.b NoLayer1Shaking						;|
	DEC.w !RAM_SMW_Timer_ShakeLayer1				;|
	AND.b #$03							;|
	TAY								;|
	LDA.w GrndShakeDispYLo,y					;|
	STA.w !RAM_SMW_ShakingLayer1DispYLo				;|
	CLC								;|
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo			;|
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo			;|
	LDA.w GrndShakeDispYHi,y					;|
	STA.w !RAM_SMW_ShakingLayer1DispYHi				;|
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi			;|
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi			;/
NoLayer1Shaking:
	JSR.w SMW_UpdateStatusBarCounters_Main
	JSL.l SMW_PlayerGFXRt_Main
	JSR.w SMW_UpdateCurrentPlayerPositionRAM_Main
	JSR.w SMW_GameMode14_InLevel_CODE_00C47E
	JSL.l SMW_ProcessNormalSprites_Main
	JSL.l Bank02
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	JMP.w SMW_CompressOAMTileSizeBuffer_Main
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

CODE_0086C7:
	REP.b #$30
	LDX.w #$0062
	LDA.w #$0202
CODE_0086CF:
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	DEX
	DEX
	BPL.b CODE_0086CF
	SEP.b #$30
	LDA.b #$F0
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt+$012E
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

UNK_009875:
	db $01,$00,$FF,$FF,$40,$00,$C0,$01

InMode7Level:
	JSR.w SMW_ManipulateMode7Image_Main
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_009888
	JMP.w CODE_009A52

CODE_009888:
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	JSL.l CODE_03C0C6
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

UNK_009A4E:
	db $FF,$01,$18,$30

CODE_009A52:
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BCS.b CODE_009A6F
	JSL.l SMW_HandleStandardLevelCameraScroll_Main
	JSL.l SMW_HandleScrollSpriteAndLayer3Scrolling_Main
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBoss
	CMP.b #$04
	BEQ.b CODE_009A6F
	JSR.w CODE_0086C7
	JSL.l CODE_02827D
	RTS

CODE_009A6F:
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

UNK_00C460:
	db $80,$40,$20,$10,$08,$04,$02,$01
	db $80,$40,$20,$10,$08,$04,$02,$01

DATA_00C470:
	db $90,$00,$90,$00

DATA_00C474:
	db $04,$FC,$04,$FC

DATA_00C478:
	db $30,$33,$33,$30,$01,$00

CODE_00C47E:
	STZ.b !RAM_SMW_Player_HidePlayerTileFlags
	LDA.w !RAM_SMW_UnusedRAM_GotInvincibleStarFromGoal			;\ Optimization: Unused function
	BPL.b CODE_00C48C							;|
	JSL.l SMW_GivePlayerStarPower_Main					;|
	STZ.w !RAM_SMW_UnusedRAM_GotInvincibleStarFromGoal			;/
CODE_00C48C:
	LDY.w !RAM_SMW_Timer_EndLevelViaKeyhole
	BEQ.b CODE_00C4BA
	STY.w !RAM_SMW_Player_FreezePlayerFlag
	STY.b !RAM_SMW_Flag_SpritesLocked
	LDX.w !RAM_SMW_Flag_KeyholeAnimationPhase
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	CMP.w DATA_00C470,x
	BNE.b CODE_00C4BC
	DEY
	BNE.b CODE_00C4B7
	INC.w !RAM_SMW_Flag_KeyholeAnimationPhase
	TXA
	LSR
	BCC.b CODE_00C4F8
	JSR.w SMW_ClearOutNormalSpriteSlots_Main
	LDA.b #$02
	LDY.b #$0B
	JSR.w SMW_PlayerState00_Normal_CODE_00C9FE
	LDY.b #$00
CODE_00C4B7:
	STY.w !RAM_SMW_Timer_EndLevelViaKeyhole
CODE_00C4BA:
	BRA.b CODE_00C4F8

CODE_00C4BC:
	CLC
	ADC.w DATA_00C474,x
	STA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	LDA.b #$22
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDA.b #$02
	STA.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	LDA.w DATA_00C478,x
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$12
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	REP.b #$20
	LDA.w #SMW_UpdateHDMAWindowBuffer_KeyholeHDMAData
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	SEP.b #$20
	LDA.w !RAM_SMW_NorSpr00E_Keyhole_XPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr00E_Keyhole_YPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_UpdateHDMAWindowBuffer_KeyholeEntry
CODE_00C4F8:
	LDA.w !RAM_SMW_Player_FreezePlayerFlag
	BEQ.b CODE_00C500
	JMP.w CODE_00C58F

CODE_00C500:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_00C569
	INC.b !RAM_SMW_Counter_LocalFrames
	LDX.b #$13
CODE_00C508:
	LDA.w !RAM_SMW_Timer_LevelEndFade,x
	BEQ.b CODE_00C510
	DEC.w !RAM_SMW_Timer_LevelEndFade,x
CODE_00C510:
	DEX
	BNE.b CODE_00C508
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_00C569
	LDA.w !RAM_SMW_Flag_ActiveBonusGame
	BEQ.b CODE_00C533
	LDA.w !RAM_SMW_Timer_BonusGameEnd
	CMP.b #$44
	BNE.b CODE_00C52A
	LDY.b #!Define_SMW_LevelMusic_DoneBonusGame
	STY.w !RAM_SMW_IO_MusicCh1
CODE_00C52A:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$08
else
	CMP.b #$01
endif
	BNE.b CODE_00C533
	LDY.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	STY.w !RAM_SMW_Misc_GameMode
CODE_00C533:
	LDY.w !RAM_SMW_Timer_BluePSwitch
	CPY.w !RAM_SMW_Timer_SilverPSwitch
	BCS.b CODE_00C53E
	LDY.w !RAM_SMW_Timer_SilverPSwitch
CODE_00C53E:
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	BMI.b CODE_00C54F
	CPY.b #$01
	BNE.b CODE_00C54F
	LDY.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
	BNE.b CODE_00C54F
	STA.w !RAM_SMW_IO_MusicCh1
CODE_00C54F:
	CMP.b #$FF
	BEQ.b CODE_00C55C
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPY.b #$18
else
	CPY.b #$1E
endif
	BNE.b CODE_00C55C
	LDA.b #!Define_SMW_Sound1DFC_PSwitchRunningOut
	STA.w !RAM_SMW_IO_SoundCh3
CODE_00C55C:
	LDX.b #$06
CODE_00C55E:
	LDA.w !RAM_SMW_UnusedRAM_7E14A8,x					;\ Optimization: Unused. These references should be increased by 3
	BEQ.b CODE_00C566							;|
	DEC.w !RAM_SMW_UnusedRAM_7E14A8,x					;/
CODE_00C566:
	DEX
	BNE.b CODE_00C55E
CODE_00C569:
	JSR.w HandlePlayerState
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_Select>>8
	BEQ.b CODE_00C58F
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) == $00
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadU>>8
#Debug_PowerUpSelect:
	BRA.b CODE_00C585
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	INC
	CMP.b #$04
	BCC.b ADDR_00C581
	LDA.b #$00
ADDR_00C581:
	STA.b !RAM_SMW_Player_CurrentPowerUp
	BRA.b CODE_00C58F
endif

CODE_00C585:
	PHB
	LDA.b #SMW_DropReservedItem_Main>>16
	PHA
	PLB
	JSL.l SMW_DropReservedItem_Main
	PLB
CODE_00C58F:
	STZ.w !RAM_SMW_Blocks_NoteBlockBounceFlag
Return00C592:
	RTS

HandlePlayerState:
	LDA.b !RAM_SMW_Player_CurrentState
	JSL.l SMW_ExecutePtr_Absolute

PlayerStatePtrs:
base $000000
.PlayerState00_Normal:			dw SMW_PlayerState00_Normal_Main
.PlayerState01_PowerDown:		dw SMW_PlayerState01_PowerDown_Main
.PlayerState02_Grow:			dw SMW_PlayerState02_Grow_Main
.PlayerState03_GotCape:			dw SMW_PlayerState03_GotCape_Main
.PlayerState04_GotFlower:		dw SMW_PlayerState04_GotFlower_Main
.PlayerState05_EnterHorizontalPipe:	dw SMW_PlayerState05_EnterHorizontalPipe_Main
.PlayerState06_EnterVerticalPipe:	dw SMW_PlayerState06_EnterVerticalPipe_Main
.PlayerState07_ShootOutOfPipe:		dw SMW_PlayerState07_ShootOutOfPipe_Main
.PlayerState08_WarpToYoshiWingsBonus:	dw SMW_PlayerState08_WarpToYoshiWingsBonus_Main
.PlayerState09_Death:			dw SMW_PlayerState09_Death_Main
.PlayerState0A_NoYoshiCutscene:		dw SMW_PlayerState0A_NoYoshiCutscene_Main
.PlayerState0B_RescuedPeach:		dw SMW_PlayerState0B_RescuedPeach_Main
.PlayerState0C_CastleDestructionMoves:	dw SMW_PlayerState0C_CastleDestructionMoves_Main
.PlayerState0D_DoAbsolutelyNothing:	dw SMW_PlayerState0D_DoAbsolutelyNothing_Main
base off
namespace off
	%SetDuplicateOrNullPointer(SMW_GameMode14_InLevel_Return00C592, SMW_PlayerState0D_DoAbsolutelyNothing_Main)
endmacro

macro ROUTINE_RT05_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

DATA_028178:
	db $F8,$38,$78,$B8,$00,$10,$20,$D0
	db $E0,$10,$40,$80,$C0,$10,$10,$20
	db $B0,$20,$50,$60,$C0,$F0,$80,$B0
	db $20,$60,$A0,$E0,$70,$F0,$70,$B0
	db $F0,$10,$20,$50,$60,$90,$A0,$D0
	db $E0,$10,$20,$50,$60,$90,$A0,$D0
	db $E0,$10,$20,$50,$60,$90,$A0,$D0
	db $E0,$50,$60,$C0,$D0,$30,$40,$70
	db $80,$B0,$C0,$30,$40,$70,$80,$B0
	db $C0,$40,$50,$80,$90,$C8,$D8,$30
	db $40,$A0,$B0,$58,$68,$B0,$C0

DATA_0281CF:
	db $70,$70,$70,$70,$20,$20,$20,$20
	db $20,$30,$30,$30,$30,$70,$80,$80
	db $80,$90,$90,$90,$A0,$50,$60,$60
	db $70,$70,$70,$70,$60,$60,$70,$70
	db $70,$40,$40,$40,$40,$40,$40,$40
	db $40,$50,$50,$50,$50,$50,$50,$50
	db $50,$60,$60,$60,$60,$60,$60,$60
	db $60,$30,$30,$30,$30,$48,$48,$48
	db $48,$48,$48,$58,$58,$58,$58,$58
	db $58,$70,$70,$78,$78,$70,$70,$80
	db $80,$88,$88,$A0,$A0,$A0,$A0

DATA_028226:
	db $E8,$E8,$E8,$E8,$E4,$E4,$E4,$E4
	db $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4
	db $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4
	db $E4,$E4,$E4,$E4,$EE,$EE,$EE,$EE
	db $EE,$C0,$C2,$C0,$C2,$C0,$C2,$C0
	db $C2,$E0,$E2,$E0,$E2,$E0,$E2,$E0
	db $E2,$C4,$A4,$C4,$A4,$C4,$A4,$C4
	db $A4,$CC,$CE,$CC,$CE,$C8,$CA,$C8
	db $CA,$C8,$CA,$CA,$C8,$CA,$C8,$CA
	db $C8,$CC,$CE,$CC,$CE,$CC,$CE,$CC
	db $CE,$CC,$CE,$CC,$CE,$CC,$CE

CODE_02827D:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_Misc_MortonRoyLudwigBackgroundXOffset
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	LSR
	ROR.w !RAM_SMW_Misc_MortonRoyLudwigBackgroundXOffset
	PHA
	LDA.w !RAM_SMW_Misc_MortonRoyLudwigBackgroundXOffset
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM06
	PLA
	LSR
	ROR.w !RAM_SMW_Misc_MortonRoyLudwigBackgroundXOffset
	LDA.w !RAM_SMW_Misc_MortonRoyLudwigBackgroundXOffset
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_Misc_MortonRoyLudwigBackgroundXOffset
	REP.b #$10
	LDY.w #$0164
	LDA.b #$66
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$F0
CODE_0282AF:
	STA.w SMW_OAMBuffer[$03].YDisp,y
	INY
	INY
	INY
	INY
	CPY.w #$018C
	BCC.b CODE_0282AF
	LDX.w #$0000
	STX.b !RAM_SMW_Misc_ScratchRAM0C
	LDX.w #$0038
	LDY.w #$00E0
	LDA.w !RAM_SMW_Sprites_BackgroundToUseInKoopaKidBattle
	CMP.b #$01
	BNE.b CODE_0282D8
	LDX.w #$0039
	STX.b !RAM_SMW_Misc_ScratchRAM0C
	LDX.w #$001D
	LDY.w #$00FC
CODE_0282D8:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$20
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CLC
	LDX.b !RAM_SMW_Misc_ScratchRAM0A
	ADC.l DATA_028178,x
	STA.w SMW_OAMBuffer[$03].XDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ShakingLayer1DispYLo
	STA.b !RAM_SMW_Misc_ScratchRAM07
	ASL
	ROR.b !RAM_SMW_Misc_ScratchRAM07
	LDA.l DATA_0281CF,x
	DEC
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM07
	STA.w SMW_OAMBuffer[$03].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Flag_UpdateBackgroundSpritesInKoopaKidRooms
	BNE.b CODE_028318
	LDA.l DATA_028226,x
	STA.w SMW_OAMBuffer[$03].Tile,y
	LDA.b #$0D
	STA.w SMW_OAMBuffer[$03].Prop,y
CODE_028318:
	REP.b #$20
	PHY
	TYA
	LSR
	LSR
	TAY
	SEP.b #$20
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$03].Slot,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b #$F0
	BCC.b CODE_028367
	LDA.w !RAM_SMW_Sprites_BackgroundToUseInKoopaKidBattle
	CMP.b #$01
	BEQ.b CODE_028367
	PLY
	PHY
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w SMW_OAMBuffer[$03].XDisp,y
	STA.w SMW_OAMBuffer[$03].XDisp,x
	LDA.w SMW_OAMBuffer[$03].YDisp,y
	STA.w SMW_OAMBuffer[$03].YDisp,x
	LDA.w SMW_OAMBuffer[$03].Tile,y
	STA.w SMW_OAMBuffer[$03].Tile,x
	LDA.w SMW_OAMBuffer[$03].Prop,y
	STA.w SMW_OAMBuffer[$03].Prop,x
	REP.b #$20
	TXA
	LSR
	LSR
	TAY
	SEP.b #$20
	LDA.b #$03
	STA.w SMW_OAMTileSizeBuffer[$03].Slot,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM03
	BCC.b CODE_028367
	INC.b !RAM_SMW_Misc_ScratchRAM04
CODE_028367:
	PLY
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEY
	DEY
	DEY
	DEY
	DEX
	BMI.b CODE_028374
	JMP.w CODE_0282D8

CODE_028374:
	SEP.b #$10
	LDA.b #$01
	STA.w !RAM_SMW_Flag_UpdateBackgroundSpritesInKoopaKidRooms
	LDA.w !RAM_SMW_Sprites_BackgroundToUseInKoopaKidBattle			;\ Glitch: This causes the flames in the Ludwig battle to turn grey very briefly.
	CMP.b #$01								;| Probably best to remove it.
	BNE.b CODE_028398							;|
	LDA.b #$CD								;|
	STA.w SMW_OAMBuffer[$2F].Prop						;|
	STA.w SMW_OAMBuffer[$30].Prop						;|
	STA.w SMW_OAMBuffer[$31].Prop						;|
	STA.w SMW_OAMBuffer[$32].Prop						;|
	STA.w SMW_OAMBuffer[$33].Prop						;|
	STA.w SMW_OAMBuffer[$34].Prop						;|
	BRA.b CODE_0283C4							;/

CODE_028398:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_0283C4
	STZ.b !RAM_SMW_Misc_ScratchRAM00
CODE_0283A0:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l DATA_0283C8,x
	TAY
	JSL.l SMW_GetRand_Main
	AND.b #$01
	BNE.b CODE_0283B7
	LDA.w SMW_OAMBuffer[$03].Tile,y
	EOR.b #$02
	STA.w SMW_OAMBuffer[$03].Tile,y
CODE_0283B7:
	LDA.b #$09
	STA.w SMW_OAMBuffer[$03].Prop,y
	INC.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$04
	BNE.b CODE_0283A0
CODE_0283C4:
	JSR.w CODE_0283CE
	RTL

DATA_0283C8:
	db $00,$04,$08,$0C

DATA_0283CC:
	db $0C,$30

CODE_0283CE:
	LDA.w !RAM_SMW_NorSpr_Table7E1534+$09
	SEC
	SBC.b #$1E
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w !RAM_SMW_NorSpr_Table7E160E+$09
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDX.b #$01
CODE_0283E0:
	STX.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarStatus,x
	BEQ.b CODE_0283F4
	BMI.b CODE_0283F1
	STA.w !RAM_SMW_Player_FreezePlayerFlag
	STA.b !RAM_SMW_Flag_SpritesLocked
	JSR.w CODE_0283F8
CODE_0283F1:
	JSR.w CODE_028439
CODE_0283F4:
	DEX
	BPL.b CODE_0283E0
	RTS

CODE_0283F8:
	LDA.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarYPosition,x
	LSR
	LSR
	LSR
	LSR
	LSR
	SEC
	ADC.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarYPosition,x
	CMP.b #$B0
	BCC.b CODE_028435
	ASL.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarStatus,x
	SEC
	ROR.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarStatus,x
	LDA.b #$30
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	CPX.b #$00
	BNE.b CODE_02842A
	LDA.w !RAM_SMW_Sprites_MortonAndRoyRightPillarStatus
	BNE.b CODE_02842A
	INC.w !RAM_SMW_Sprites_MortonAndRoyRightPillarStatus
	STZ.w !RAM_SMW_Sprites_MortonAndRoyRightPillarYPosition
	BRA.b CODE_028433

CODE_02842A:
	CPX.b #$01
	BNE.b CODE_028433
	STZ.b !RAM_SMW_Flag_SpritesLocked
	STZ.w !RAM_SMW_Player_FreezePlayerFlag
CODE_028433:
	LDA.b #$B0
CODE_028435:
	STA.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarYPosition,x
	RTS

CODE_028439:
	LDA.l DATA_0283CC,x
	TAY
	STZ.b !RAM_SMW_Misc_ScratchRAM00
CODE_028440:
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarYPosition,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.w !RAM_SMW_ShakingLayer1DispYLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$20
	BCC.b Return02848C
	CMP.b #$A4
	BCS.b CODE_02845D
	STA.w SMW_OAMBuffer[$00].YDisp,y
CODE_02845D:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C,x
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b #$E6
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_02846A
	LDA.b #$08
CODE_02846A:
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$0D
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
	INY
	INY
	INY
	INY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$90
	BCC.b CODE_028440
Return02848C:
	RTS
namespace off
endmacro

macro ROUTINE_RT06_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

DATA_028AA9:
	db $07,$03,$03,$01,$01,$01,$01,$01

Bank02:
	PHB
	PHK
	PLB
	LDA.w !RAM_SMW_Misc_1upHandler
	BEQ.b CODE_028AD5
	LDA.w !RAM_SMW_Timer_Give1up
	BEQ.b CODE_028AC3
	DEC.w !RAM_SMW_Timer_Give1up
	BRA.b CODE_028AD5

CODE_028AC3:
	DEC.w !RAM_SMW_Misc_1upHandler
	BEQ.b CODE_028ACD
	LDA.b #$23
	STA.w !RAM_SMW_Timer_Give1up
CODE_028ACD:
	LDA.b #!Define_SMW_Sound1DFC_1up
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Player_CurrentLifeCount
CODE_028AD5:
	LDA.w !RAM_SMW_Timer_StarPower
	BEQ.b CODE_028AEB
	CMP.b #$08
	BCC.b CODE_028AEB
	LSR
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_028AA9,y
	BRA.b CODE_028AF5

CODE_028AEB:
	LDA.w !RAM_SMW_Timer_UnusedPlayerSparkle
	BEQ.b CODE_028B05
	DEC.w !RAM_SMW_Timer_UnusedPlayerSparkle
	AND.b #$01
CODE_028AF5:
	ORA.b !RAM_SMW_Player_OnScreenPosXHi
	ORA.b !RAM_SMW_Player_OnScreenPosYHi
	BNE.b CODE_028B05
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CMP.b #$D0
	BCS.b CODE_028B05
	JSL.l SMW_SpawnSparkles_PlayerEntry
CODE_028B05:
	JSR.w SMW_ProcessMinorExtendedSprites_Main		;\ Optimization: Big ugly list of JSRs. All of these plus the one for cluster sprites can be integrated into one routine call.
	JSR.w SMW_ProcessBounceAndSmokeSprites_Main		;| This will save a decent chunk of bytes and cycles.
	JSR.w SMW_ProcessScoreSprites_Main			;|
	JSR.w SMW_ProcessExtendedSprites_Main			;|
	JSR.w SMW_ProcessSpinningCoinSprites_Main		;|
	JSR.w SMW_ProcessShooterSprites_Main			;|
	JSR.w SMW_ProcessGeneratorSprite_Main			;/
	JSR.w SMW_HandleCapeInteraction_Main
	JSR.w SMW_ParseLevelSpriteList_Main
	LDA.w !RAM_SMW_Timer_RespawnSprite			;\ Optimization: Couldn't the respawning sprites be made into a sprite status?
	BEQ.b CODE_028B65					;/ Seems kind of hack-y to put this code in the main level loop.
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	ORA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_Timer_DisappearingSprite
	BNE.b CODE_028B65
	DEC.w !RAM_SMW_Timer_RespawnSprite
	BNE.b CODE_028B65
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b CODE_028B65
	TYX
	LDA.b #!Define_SMW_NorSprStatus01_Init
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w !RAM_SMW_Sprites_SpriteToRespawn
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.b #$20
	AND.b #$EF
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_Sprites_YPosOfRespawningSpriteLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_Sprites_YPosOfRespawningSpriteHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
CODE_028B65:
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT07_SMW_GameMode14_InLevel(Address)
namespace SMW_GameMode14_InLevel
%InsertMacroAtXPosition(<Address>)

DATA_03C0B2:
	db $68,$6A,$6C,$6E

DATA_03C0B6:
	db $00,$03,$01,$02,$04,$02,$00,$01
	db $00,$04,$00,$02,$00,$03,$04,$01

CODE_03C0C6:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_03C0CD
	JSR.w CODE_03C11E
CODE_03C0CD:
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$13
	LDY.b #$B0
CODE_03C0D3:
	STX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$C4
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$09
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	CLC
	ADC.l DATA_03C0B6,x
	AND.b #$03
	TAX
	LDA.l DATA_03C0B2,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	TYA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03C0D3
	RTL

IggyPlatSpeed:
	db $FF,$01,$FF,$01

DATA_03C116:
	db $FF,$00,$FF,$00

IggyPlatBounds:
	db $E7,$18,$D7,$28

CODE_03C11E:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_Timer_EndLevel
	BNE.b Return03C175
	LDA.w !RAM_SMW_Timer_WaitBeforeNextTiltingPlatformPhase
	BEQ.b CODE_03C12D
	DEC.w !RAM_SMW_Timer_WaitBeforeNextTiltingPlatformPhase
CODE_03C12D:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	ORA.w !RAM_SMW_Timer_WaitBeforeNextTiltingPlatformPhase
	BNE.b Return03C175
	LDA.w !RAM_SMW_Counter_DirectionToTiltPlatform
	AND.b #$01
	TAX
	LDA.w !RAM_SMW_Counter_TiltingPlatformPhase
	CMP.b #$04
	BCC.b CODE_03C145
	INX
	INX
CODE_03C145:
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.l IggyPlatSpeed,x
	STA.b !RAM_SMW_Misc_M7RotationLo
	PHA
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.l DATA_03C116,x
	AND.b #$01
	STA.b !RAM_SMW_Misc_M7RotationHi
	PLA
	CMP.l IggyPlatBounds,x
	BNE.b Return03C175
	INC.w !RAM_SMW_Counter_DirectionToTiltPlatform
	LDA.b #$40
	STA.w !RAM_SMW_Timer_WaitBeforeNextTiltingPlatformPhase
	INC.w !RAM_SMW_Counter_TiltingPlatformPhase
	LDA.w !RAM_SMW_Counter_TiltingPlatformPhase
	CMP.b #$06
	BNE.b Return03C175
	STZ.w !RAM_SMW_Counter_TiltingPlatformPhase
Return03C175:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeSaveData(Address)			; Note: This macro is not used in the arcade version.
namespace SMW_InitializeSaveData
%InsertMacroAtXPosition(<Address>)

InitialLevelFlags:
	db $28,$03,$4D,$01,$52,$01,$53,$01
	db $5B,$08,$5C,$02,$57,$04,$30,$01

InitialOWPlayerPos:
	db $01,$01
	dw $0002,$0002
	dw $0068,$0078
	dw $0068,$0078
	dw $0006,$0007
	dw $0006,$0007

Main:
	LDX.b #!Define_SMW_Misc_SaveFileSize-$02
CODE_009F08:
	STZ.w !RAM_SMW_Overworld_SaveBuffer-$01,x
	DEX
	BNE.b CODE_009F08
	LDX.b #$0E
CODE_009F10:
	LDY.w InitialLevelFlags,x
	LDA.w InitialLevelFlags+$01,x
	STA.w !RAM_SMW_Overworld_SaveBuffer,y
#LM000Hijack_InitLevelFlags:
	DEX
	DEX
	BPL.b CODE_009F10
	LDX.b #$15
CODE_009F1F:
	LDA.w InitialOWPlayerPos,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$6F,x
	DEX
	BPL.b CODE_009F1F
	RTS
namespace off
endmacro

macro ROUTINE_SMW_ARCADE_InitializeSaveData(Address)			; Note: This macro is used exclusively by the arcade version.
namespace SMW_InitializeSaveData
%InsertMacroAtXPosition(<Address>)

InitialLevelFlags:
base $000000
.Zone1Start:
	db $28,$83,$4D,$81,$52,$81,$53,$81
	db $5B,$88,$5C,$82,$57,$84,$30,$81
.Zone1End:
	db $29,$89,$2A,$8A,$27,$85,$26,$8C
	db $25,$89,$15,$04
.Zone2End:
	db $15,$86,$09,$8E,$04,$83,$05,$83
	db $06,$8A,$07,$8A,$3E,$04
.Zone3End:
	db $3E,$85,$3C,$8D,$2B,$85,$2E,$8C
	db $3D,$8C,$40,$8C,$0F,$02
.Zone4End:
	db $0F,$83,$10,$86,$0E,$85,$42,$08
.Zone5End:
	db $42,$89,$44,$8D,$47,$85,$20,$85
	db $22,$08
.Zone6End:
	db $22,$8A,$21,$85,$24,$8A,$23,$83
	db $1B,$85,$1D,$8A,$1C,$89
	db $1A,$8C,$18,$02
.Zone7End:
base off

InitialLevelFlagsStartAndEndIndex:
	db InitialLevelFlags_Zone1Start,InitialLevelFlags_Zone1End,InitialLevelFlags_Zone2End,InitialLevelFlags_Zone3End
	db InitialLevelFlags_Zone4End,InitialLevelFlags_Zone5End,InitialLevelFlags_Zone6End,InitialLevelFlags_Zone7End

InitialOWPlayerPos:
base $000000
.Zone1Start:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00
	db $01,$01
	dw $0002,$0002
	dw $0068,$0078
	dw $0068,$0078
	dw $0006,$0007
	dw $0006,$0007
	db $00,$00,$00,$00
.Zone1End:
	db $7E,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00
	db $00,$00
	dw $0002,$0002
	dw $0058,$0118
	dw $0058,$0118
	dw $0005,$0011
	dw $0005,$0011
	db $00,$01,$00,$00
.Zone2End:
	db $7F,$6F,$00,$00,$00,$80,$00,$00
	db $00,$00,$00,$00,$00,$00,$00
	db $02,$02
	dw $0002,$0002
	dw $0058,$0128
	dw $0058,$0128
	dw $0005,$0012
	dw $0005,$0012
	db $01,$01,$00,$00
.Zone3End:
	db $7F,$6F,$05,$F8,$00,$C0,$00,$00
	db $00,$00,$00,$00,$00,$00,$00
	db $00,$00
	dw $0002,$0002
	dw $0148,$0058
	dw $0148,$0058
	dw $0014,$0005
	dw $0014,$0005
	db $01,$01,$00,$01
.Zone4End:
	db $7F,$6F,$05,$F8,$0D,$C0,$00,$00
	db $00,$00,$00,$00,$00,$00,$00
	db $03,$03
	dw $0002,$0002
	dw $0088,$0178
	dw $0088,$0178
	dw $0008,$0017
	dw $0008,$0017
	db $01,$01,$00,$01
.Zone5End:
	db $7F,$6F,$05,$F8,$0D,$ED,$01,$00
	db $00,$00,$00,$00,$40,$00,$00
	db $00,$00
	dw $0002,$0002
	dw $0188,$0168
	dw $0188,$0168
	dw $0018,$0016
	dw $0018,$0016
	db $01,$01,$01,$01
.Zone6End:
	db $7F,$6F,$05,$F8,$0D,$ED,$01,$00
	db $02,$7C,$00,$00,$70,$00,$00
	db $00,$00
	dw $0002,$0002
	dw $00E8,$0178
	dw $00E8,$0178
	dw $000E,$0017
	dw $000E,$0017
	db $01,$01,$01,$01
.Zone7End:
base off

InitialOWPlayerPosIndex:
	dw InitialOWPlayerPos_Zone1End-$01,InitialOWPlayerPos_Zone2End-$01,InitialOWPlayerPos_Zone3End-$01,InitialOWPlayerPos_Zone4End-$01
	dw InitialOWPlayerPos_Zone5End-$01,InitialOWPlayerPos_Zone6End-$01,InitialOWPlayerPos_Zone7End-$01

Main:
	LDX.b #!Define_SMW_Misc_SaveFileSize-$02
CODE_009F08:
	STZ.w !RAM_SMW_Overworld_SaveBuffer-$01,x
	DEX
	BNE.b CODE_009F08
	LDX.w !RAM_SMW_Misc_ZoneSelectionCursorPos
	LDA.w InitialLevelFlagsStartAndEndIndex+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w InitialLevelFlagsStartAndEndIndex
	TAX

CODE_009F10:
	LDY.w InitialLevelFlags,x
	LDA.w InitialLevelFlags+$01,x
	STA.w !RAM_SMW_Overworld_SaveBuffer,y
	INX
	INX
	CPX.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_009F10
	REP.b #$30
	LDA.w !RAM_SMW_Misc_ZoneSelectionCursorPos
	ASL
	TAX
	LDY.w InitialOWPlayerPosIndex,x
	LDX.w #$0028
CODE_009F1F:
	LDA.w InitialOWPlayerPos,y
	STA.w !RAM_SMW_Overworld_SaveBuffer+$60,x
	DEY
	DEX
	BPL.b CODE_009F1F
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_LoadSaveBufferData(Address)			; Optimization: Wouldn't it be better to load the save data stuff from the actual save file? That save file buffer seems like a waste of RAM.
namespace SMW_LoadSaveBufferData
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$10
	LDX.w #!Define_SMW_Misc_SaveFileSize-$03
Loop:
	LDA.w !RAM_SMW_Overworld_SaveBuffer,x
	STA.w !RAM_SMW_Overworld_LevelTileSettings,x
	DEX
	BPL.b Loop
	SEP.b #$10
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_LoadSublevel(Address)					; Optimization: This routine, along with its subroutines, are poorly optimized.
namespace SMW_LoadSublevel
%InsertMacroAtXPosition(<Address>)

Main:
	PHP
	SEP.b #$20
	REP.b #$10
	LDX.w #$0000							;\ Optimization: Why use 025 as the default background tile when it's 000?
InitializeLayer2BackgroundLoLoop:					;| Also, why not put the LDA.b #$25 outside the loop since A never changes?
	LDA.b #$25							;| Alternatively, what about using DMA here?
	STA.l !RAM_SMW_Blocks_Layer2TilesLo,x				;|
	STA.l !RAM_SMW_Blocks_Layer2TilesLo+$0200,x			;/
	INX
	CPX.w #$0200
	BNE.b InitializeLayer2BackgroundLoLoop
	STZ.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	LDA.b !RAM_SMW_Pointer_Layer2DataBank
#LM000Hijack_LoadCustomLayer2Properties:
	CMP.b #$FF
	BNE.b Layer2Level
#LM_JMLHere_OriginalBG:
	REP.b #$10							;\ Optimization: X/Y is already 16-bit!
	LDY.w #$0000							;/
	LDX.b !RAM_SMW_Pointer_Layer2DataLo
	CPX.w #SMW_Backgrounds_Layer2_Cave
	BCC.b Page1Background
	LDY.w #$0001							; Optimization: INY?
Page1Background:
	LDX.w #$0000
	TYA
SetBackgroundPageNumberLoop:
	STA.l !RAM_SMW_Blocks_Layer2TilesHi,x
	STA.l !RAM_SMW_Blocks_Layer2TilesHi+$0200,x
	INX
	CPX.w #$0200
	BNE.b SetBackgroundPageNumberLoop
	LDA.b #SMW_Backgrounds_Layer2>>16
	STA.b !RAM_SMW_Pointer_Layer2DataBank
#LM_JMLHere_Layer2BG:
	STZ.w !RAM_SMW_UnusedRAM_CopyOfLevelTilesetSetting		; Optimization: Junk
	STZ.w !RAM_SMW_Misc_LevelTilesetSetting
	LDX.w #!RAM_SMW_Blocks_Layer2TilesLo				;\ Optimization: These can be removed for the optimized version of this routine
	STX.b !RAM_SMW_Misc_ScratchRAM0D				;|
	REP.b #$20							;/
	JSR.w SMW_BufferBGTilemap_Main
Layer2Level:
#LM_JMLHere_Layer2Level:
	SEP.b #$20
	LDX.w #$0000							;\ Optimization: An unrolled loop that is not only slower than just using DMA, but also wastes more space than setting up a DMA.
CODE_058079:								;| I have a feeling that whoever wrote this was still used to writing NES code or something.
	LDA.b #$00							;|
	JSR.w SMW_InitializeLevelData_Hi				;|
	DEX								;| Why decrement X (and increment it in both subroutines) when it could have just been done in this loop?
	LDA.b #$25							;|
	JSR.w SMW_InitializeLevelData_Lo				;|
	CPX.w #$0200							;|
	BNE.b CODE_058079						;/
	STZ.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	JSR.w SMW_BeginLoadingLevelData_Main
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_GameMode
	CMP.b #!Define_SMW_GameMode22_FadeOutToEnemyRollcall
	BPL.b CODE_05809C
	JSL.l CODE_02A751
CODE_05809C:
	PLP
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_LoadSublevel(Address)
namespace SMW_LoadSublevel
%InsertMacroAtXPosition(<Address>)

CODE_02A751:
	PHB
	PHK
	PLB
	JSR.w SMW_InitializeAllSpritesOnLevelLoad_Main
	JSR.w SMW_LoadSpritesOnLevelLoad_Main
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BMI.b CODE_02A763
	JSL.l SMW_ProcessNormalSprites_Main
CODE_02A763:
	LDA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	BEQ.b CODE_02A771
	LDA.w !RAM_SMW_Flag_PreventYoshiCarryOver
	BNE.b CODE_02A771
	JSL.l SMW_SpawnMountedYoshiOnLevelLoad_Main
CODE_02A771:
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_InitializeAllSpritesOnLevelLoad(Address)
namespace SMW_InitializeAllSpritesOnLevelLoad
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$3F				; Glitch: This needs to be #$7F so all sprites can load in the new sublevel.
CODE_02ABF4:
	STZ.w !RAM_SMW_Sprites_LoadStatus,x
	DEX
	BPL.b CODE_02ABF4
	LDA.b #$FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
CODE_02AC00:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_02AC11
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	BRA.b CODE_02AC13

CODE_02AC11:
	STX.b !RAM_SMW_Misc_ScratchRAM00
CODE_02AC13:
	DEX
	BPL.b CODE_02AC00
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_02AC48
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_NorSprStatus0B_Carried
	STA.w !RAM_SMW_NorSpr_CurrentStatus
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	STA.b !RAM_SMW_NorSpr_SpriteID
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	PHA
	LDX.b #$00
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	STA.w !RAM_SMW_NorSpr_Table7E15F6
CODE_02AC48:
	REP.b #$10
	LDX.w #$027A
CODE_02AC4D:
	STZ.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo,x
	DEX
	BPL.b CODE_02AC4D
	SEP.b #$10
	STZ.w !RAM_SMW_L1ScrollSpr_SpriteID
	STZ.w !RAM_SMW_L2ScrollSpr_SpriteID
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_LoadSpritesOnLevelLoad(Address)
namespace SMW_LoadSpritesOnLevelLoad
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCC.b CODE_02ACA1
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	PHA
	LDA.b #$01
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PHA
	SEC
	SBC.b #$60
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PHA
	SBC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STZ.w !RAM_SMW_Misc_ScratchRAM7E18B6
CODE_02AC7A:
	JSR.w SMW_ParseLevelSpriteList_Entry2				;\ Optimization: Why is the sprite list routine called twice?
	JSR.w SMW_ParseLevelSpriteList_Entry2				;/
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	INC.w !RAM_SMW_Misc_ScratchRAM7E18B6
	LDA.w !RAM_SMW_Misc_ScratchRAM7E18B6
	CMP.b #$20
	BCC.b CODE_02AC7A
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PLA
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	RTS

CODE_02ACA1:
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	PHA
	LDA.b #$01
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PHA
	SEC
	SBC.b #$60
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	PHA
	SBC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	STZ.w !RAM_SMW_Misc_ScratchRAM7E18B6
CODE_02ACBA:
	JSR.w SMW_ParseLevelSpriteList_Entry2				;\ Optimization: Why is the sprite list routine called twice?
	JSR.w SMW_ParseLevelSpriteList_Entry2				;/
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	INC.w !RAM_SMW_Misc_ScratchRAM7E18B6
	LDA.w !RAM_SMW_Misc_ScratchRAM7E18B6
	CMP.b #$20
	BCC.b CODE_02ACBA
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PLA
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnMountedYoshiOnLevelLoad(Address)
namespace SMW_SpawnMountedYoshiOnLevelLoad
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DFA_TurnOnYoshiDrum
	STA.w !RAM_SMW_IO_SoundCh2
	LDX.b #!Define_SMW_MaxNormalSpriteSlot-$0B
	LDA.w !RAM_SMW_Flag_DisableBonusGameSprite
	BNE.b CODE_00FC98
	LDX.b #$05
	LDA.w !RAM_SMW_Sprites_SpriteMemorySetting
	CMP.b #$0A
	BEQ.b CODE_00FC98
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	TYX
	BPL.b CODE_00FC98
	LDX.b #!Define_SMW_MaxNormalSpriteSlot-$08
CODE_00FC98:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_YPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr035_Yoshi_DisableWaterSplashTimer,x
	LDA.w !RAM_SMW_Yoshi_CurrentYoshiColor
	STA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BEQ.b CODE_00FCD5
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
CODE_00FCD5:
	INC.w !RAM_SMW_Player_RidingYoshiFlag
	INC.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	LDA.b !RAM_SMW_Player_FacingDirection
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	DEC.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	INX
	STX.w !RAM_SMW_Sprites_YoshiSlotIndex
	STX.w !RAM_SMW_Yoshi_StrayYoshiFlag
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

; Optimization: The below routine is pretty badly optimized. There are a bunch of REP and SEPs that literally do nothing.
; This is because they change the size of A to 16-bit, then Y is changed, then A is set back to be 8-bit.
; Also, the routine constantly stores and loads Y from $02 and $05 so it can index two indirects, yet one of those indirects can be indexed with X as the location it indexes never changes.
; Also, the last part of the routine unnecessarily loads and stores to $00 during each loop for no reason. The carry flag also doesn't need to be manually cleared either.

macro ROUTINE_SMW_BufferBGTilemap(Address)
namespace SMW_BufferBGTilemap
%InsertMacroAtXPosition(<Address>)

Main:
	PHP
	REP.b #$30
	LDY.w #$0000
	STY.b !RAM_SMW_Misc_ScratchRAM03
	STY.b !RAM_SMW_Misc_ScratchRAM05
	SEP.b #$30
	LDA.b #!RAM_SMW_Blocks_Layer2TilesLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_058136:
	SEP.b #$20
	REP.b #$10
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM07
	INY
	REP.b #$20
	STY.b !RAM_SMW_Misc_ScratchRAM03
	SEP.b #$20
	AND.b #$80
	BEQ.b CODE_05816A
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	AND.b #$7F
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	INY
	REP.b #$20
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b !RAM_SMW_Misc_ScratchRAM05
CODE_05815A:
	SEP.b #$20
	STA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_05815A
	REP.b #$20
	STY.b !RAM_SMW_Misc_ScratchRAM05
	JMP.w CODE_058188

CODE_05816A:
	REP.b #$20
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	SEP.b #$20
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	INY
	REP.b #$20
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	SEP.b #$20
	STA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	REP.b #$20
	INY
	STY.b !RAM_SMW_Misc_ScratchRAM05
	SEP.b #$20
	DEC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_05816A
CODE_058188:
	REP.b #$20
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	SEP.b #$20
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	CMP.b #$FF
	BNE.b CODE_058136
	INY
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	CMP.b #$FF
	BNE.b CODE_058136
	REP.b #$20
	LDA.w #SMW_Map16Data_Backgrounds
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0000
CODE_0581A5:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Pointer_Map16Tiles,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	CPX.w #$0400
	BNE.b CODE_0581A5
	PLP
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_InitializeLevelData(Address)			; Optimization: Unrolled loop that should be replaced with a DMA transfer.
namespace SMW_InitializeLevelData
%InsertMacroAtXPosition(<Address>)

Lo:
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$00),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$01),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$02),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$03),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$04),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$05),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$06),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$07),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$08),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$09),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0A),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0B),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0C),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0D),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0E),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0F),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$10),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$11),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$12),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$13),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$14),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$15),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$16),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$17),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$18),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$19),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$1A),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$1B),x
	INX
	RTS

Hi:
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$00),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$01),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$02),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$03),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$04),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$05),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$06),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$07),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$08),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$09),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$0A),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$0B),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$0C),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$0D),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$0E),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$0F),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$10),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$11),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$12),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$13),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$14),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$15),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$16),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$17),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$18),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$19),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$1A),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($0200*$1B),x
	INX
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_BeginLoadingLevelData(Address)
namespace SMW_BeginLoadingLevelData
%InsertMacroAtXPosition(<Address>)

Main:
	PHP
#LM160Hijack_InitializeLevelExAnimations:
	SEP.b #$30
	STZ.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	JSR.w SMW_LoadLevelHeader_Main
	JSR.w SMW_InitializeMap16Pointers_Main
Loop:
#LM000Hijack_GetSuperGFXBypassTableLocation:
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	CMP.b #$09
	BEQ.b IsBossLevel
	CMP.b #$0B
	BEQ.b IsBossLevel
	CMP.b #$10
	BEQ.b IsBossLevel
	LDY.b #$00						;\ Optimization: LDA.b [$65]?
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y			;/ There is no need to load Y here.
	CMP.b #$FF
	BEQ.b BlankLevelData
	JSR.w SMW_LoadLevelDataObject_Main
BlankLevelData:
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting			;\ Optimization: Would an indexed table of values be out of the question?
	BEQ.b NotLayer2Level					;|
	CMP.b #$0A						;|
	BEQ.b NotLayer2Level					;|
	CMP.b #$0C						;|
	BEQ.b NotLayer2Level					;|
	CMP.b #$0D						;|
	BEQ.b NotLayer2Level					;|
	CMP.b #$0E						;|
	BEQ.b NotLayer2Level					;|
	CMP.b #$11						;|
	BEQ.b NotLayer2Level					;|
	CMP.b #$1E						;|
	BEQ.b NotLayer2Level					;/
	INC.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	CMP.b #$02
	BEQ.b LoadLevelDone
	LDA.b !RAM_SMW_Pointer_Layer2DataLo
	CLC
	ADC.b #$05
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.b !RAM_SMW_Pointer_Layer2DataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_Layer1DataHi
	LDA.b !RAM_SMW_Pointer_Layer2DataBank
	STA.b !RAM_SMW_Pointer_Layer1DataBank
	STZ.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	JMP.w Loop

NotLayer2Level:
IsBossLevel:
LoadLevelDone:
	STZ.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	PLP
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_LoadLevelHeader(Address)					; Optimization: This whole routine could easily be inserted where the JSR.w to it is.
namespace SMW_LoadLevelHeader
%InsertMacroAtXPosition(<Address>)

VerticalTable:		; LM: These are the "Screen Mode" values. They also affect "Layout", but not "Layer 2 Interact" for some reason.
	db $00		; 00 Horizontal level
	db $00		; 01 Horizontal layer 2 level (no layer 2 interaction)
	db $80		; 02 Horizontal layer 2 level (layer 2 interaction)
	db $01		; 03 Do not use this level mode!
	db $81		; 04 Do not use this level mode!
	db $02		; 05 Do not use this level mode!
	db $82		; 06 Do not use this level mode!
	db $03		; 07 Vertical layer 2 level (no layer 2 interaction)
	db $83		; 08 Vertical layer 2 level (layer 2 interaction)
	db $00		; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	db $01		; 0A Vertical level
	db $00		; 0B Horizontal boss level (Larry, Iggy)
	db $00		; 0C Horizontal dark BG level
	db $01		; 0D Vertical dark BG level
	db $00		; 0E Horizontal level
	db $00		; 0F Horizontal layer 2 level (no layer 2 interaction)
	db $00		; 10 Horizontal boss level (Bowser)
	db $00		; 11 Horizontal dark BG level
	db $00		; 12 Cannot use this level mode!
	db $00		; 13 Cannot use this level mode!
	db $00		; 14 Cannot use this level mode!
	db $00		; 15 Cannot use this level mode!
	db $00		; 16 Cannot use this level mode!
	db $00		; 17 Cannot use this level mode!
	db $00		; 18 Cannot use this level mode!
	db $00		; 19 Cannot use this level mode!
	db $00		; 1A Cannot use this level mode!
	db $00		; 1B Cannot use this level mode!
	db $00		; 1C Cannot use this level mode!
	db $00		; 1D Cannot use this level mode!
	db $00		; 1E Horizontal translucent level
	db $80		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

LevMainScrnTbl:		; LM: These are the "TM & TMW" values
	db $15		; 00 Horizontal level
	db $15		; 01 Horizontal layer 2 level (no layer 2 interaction)
	db $17		; 02 Horizontal layer 2 level (layer 2 interaction)
	db $15		; 03 Do not use this level mode!
	db $15		; 04 Do not use this level mode!
	db $15		; 05 Do not use this level mode!
	db $17		; 06 Do not use this level mode!
	db $15		; 07 Vertical layer 2 level (no layer 2 interaction)
	db $17		; 08 Vertical layer 2 level (layer 2 interaction)
	db $15		; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	db $15		; 0A Vertical level
	db $15		; 0B Horizontal boss level (Larry, Iggy)
	db $15		; 0C Horizontal dark BG level
	db $15		; 0D Vertical dark BG level
	db $04		; 0E Horizontal level
	db $04		; 0F Horizontal layer 2 level (no layer 2 interaction)
	db $15		; 10 Horizontal boss level (Bowser)
	db $17		; 11 Horizontal dark BG level
	db $15		; 12 Cannot use this level mode!
	db $15		; 13 Cannot use this level mode!
	db $15		; 14 Cannot use this level mode!
	db $15		; 15 Cannot use this level mode!
	db $15		; 16 Cannot use this level mode!
	db $15		; 17 Cannot use this level mode!
	db $15		; 18 Cannot use this level mode!
	db $15		; 19 Cannot use this level mode!
	db $15		; 1A Cannot use this level mode!
	db $15		; 1B Cannot use this level mode!
	db $15		; 1C Cannot use this level mode!
	db $15		; 1D Cannot use this level mode!
	db $01		; 1E Horizontal translucent level
	db $02		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

LevSubScrnTbl:		; LM: These are the "TS & TSW" values
	db $02		; 00 Horizontal level
	db $02		; 01 Horizontal layer 2 level (no layer 2 interaction)
	db $00		; 02 Horizontal layer 2 level (layer 2 interaction)
	db $02		; 03 Do not use this level mode!
	db $02		; 04 Do not use this level mode!
	db $02		; 05 Do not use this level mode!
	db $00		; 06 Do not use this level mode!
	db $02		; 07 Vertical layer 2 level (no layer 2 interaction)
	db $00		; 08 Vertical layer 2 level (layer 2 interaction)
	db $00		; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	db $02		; 0A Vertical level
	db $00		; 0B Horizontal boss level (Larry, Iggy)
	db $02		; 0C Horizontal dark BG level
	db $02		; 0D Vertical dark BG level
	db $13		; 0E Horizontal level
	db $13		; 0F Horizontal layer 2 level (no layer 2 interaction)
	db $00		; 10 Horizontal boss level (Bowser)
	db $00		; 11 Horizontal dark BG level
	db $02		; 12 Cannot use this level mode!
	db $02		; 13 Cannot use this level mode!
	db $02		; 14 Cannot use this level mode!
	db $02		; 15 Cannot use this level mode!
	db $02		; 16 Cannot use this level mode!
	db $02		; 17 Cannot use this level mode!
	db $02		; 18 Cannot use this level mode!
	db $02		; 19 Cannot use this level mode!
	db $02		; 1A Cannot use this level mode!
	db $02		; 1B Cannot use this level mode!
	db $02		; 1C Cannot use this level mode!
	db $02		; 1D Cannot use this level mode!
	db $16		; 1E Horizontal translucent level
	db $15		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

LevCGADSUBtable:	; LM: These are the "CGADSUB" values
	db $24		; 00 Horizontal level
	db $24		; 01 Horizontal layer 2 level (no layer 2 interaction)
	db $24		; 02 Horizontal layer 2 level (layer 2 interaction)
	db $24		; 03 Do not use this level mode!
	db $24		; 04 Do not use this level mode!
	db $24		; 05 Do not use this level mode!
	db $20		; 06 Do not use this level mode!
	db $24		; 07 Vertical layer 2 level (no layer 2 interaction)
	db $24		; 08 Vertical layer 2 level (layer 2 interaction)
	db $20		; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	db $24		; 0A Vertical level
	db $20		; 0B Horizontal boss level (Larry, Iggy)
	db $70		; 0C Horizontal dark BG level
	db $70		; 0D Vertical dark BG level
	db $24		; 0E Horizontal level
	db $24		; 0F Horizontal layer 2 level (no layer 2 interaction)
	db $20		; 10 Horizontal boss level (Bowser)
	db $FF		; 11 Horizontal dark BG level
	db $24		; 12 Cannot use this level mode!
	db $24		; 13 Cannot use this level mode!
	db $24		; 14 Cannot use this level mode!
	db $24		; 15 Cannot use this level mode!
	db $24		; 16 Cannot use this level mode!
	db $24		; 17 Cannot use this level mode!
	db $24		; 18 Cannot use this level mode!
	db $24		; 19 Cannot use this level mode!
	db $24		; 1A Cannot use this level mode!
	db $24		; 1B Cannot use this level mode!
	db $24		; 1C Cannot use this level mode!
	db $24		; 1D Cannot use this level mode!
	db $21		; 1E Horizontal translucent level
	db $22		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

SpecialLevTable:	; LM: These are the "Fight Mode" values
	db $00		; 00 Horizontal level
	db $00		; 01 Horizontal layer 2 level (no layer 2 interaction)
	db $00		; 02 Horizontal layer 2 level (layer 2 interaction)
	db $00		; 03 Do not use this level mode!
	db $00		; 04 Do not use this level mode!
	db $00		; 05 Do not use this level mode!
	db $00		; 06 Do not use this level mode!
	db $00		; 07 Vertical layer 2 level (no layer 2 interaction)
	db $00		; 08 Vertical layer 2 level (layer 2 interaction)
	db $C0		; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	db $00		; 0A Vertical level
	db $80		; 0B Horizontal boss level (Larry, Iggy)
	db $00		; 0C Horizontal dark BG level
	db $00		; 0D Vertical dark BG level
	db $00		; 0E Horizontal level
	db $00		; 0F Horizontal layer 2 level (no layer 2 interaction)
	db $C1		; 10 Horizontal boss level (Bowser)
	db $00		; 11 Horizontal dark BG level
	db $00		; 12 Cannot use this level mode!
	db $00		; 13 Cannot use this level mode!
	db $00		; 14 Cannot use this level mode!
	db $00		; 15 Cannot use this level mode!
	db $00		; 16 Cannot use this level mode!
	db $00		; 17 Cannot use this level mode!
	db $00		; 18 Cannot use this level mode!
	db $00		; 19 Cannot use this level mode!
	db $00		; 1A Cannot use this level mode!
	db $00		; 1B Cannot use this level mode!
	db $00		; 1C Cannot use this level mode!
	db $00		; 1D Cannot use this level mode!
	db $00		; 1E Horizontal translucent level
	db $00		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

LevXYPPCCCTtbl:		; LM: These are the "Sprite Layer" values.
			; Glitch: The $30s cause sprites to appear in front of tiles with priority in those level modes, which is undesireable in some cases.
	db $20		; 00 Horizontal level
	db $20		; 01 Horizontal layer 2 level (no layer 2 interaction)
	db $20		; 02 Horizontal layer 2 level (layer 2 interaction)
	db $30		; 03 Do not use this level mode!
	db $30		; 04 Do not use this level mode!
	db $30		; 05 Do not use this level mode!
	db $30		; 06 Do not use this level mode!
	db $30		; 07 Vertical layer 2 level (no layer 2 interaction)
	db $30		; 08 Vertical layer 2 level (layer 2 interaction)
	db $30		; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	db $30		; 0A Vertical level
	db $30		; 0B Horizontal boss level (Larry, Iggy)
	db $30		; 0C Horizontal dark BG level
	db $30		; 0D Vertical dark BG level
	db $20		; 0E Horizontal level
	db $20		; 0F Horizontal layer 2 level (no layer 2 interaction)
	db $30		; 10 Horizontal boss level (Bowser)
	db $30		; 11 Horizontal dark BG level
	db $30		; 12 Cannot use this level mode!
	db $30		; 13 Cannot use this level mode!
	db $30		; 14 Cannot use this level mode!
	db $30		; 15 Cannot use this level mode!
	db $30		; 16 Cannot use this level mode!
	db $30		; 17 Cannot use this level mode!
	db $30		; 18 Cannot use this level mode!
	db $30		; 19 Cannot use this level mode!
	db $30		; 1A Cannot use this level mode!
	db $30		; 1B Cannot use this level mode!
	db $30		; 1C Cannot use this level mode!
	db $30		; 1D Cannot use this level mode!
	db $30		; 1E Horizontal translucent level
	db $30		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

TimerTable:
	db $00,$02,$03,$04

LevelMusicTable:
	db !Define_SMW_LevelMusic_HereWeGo
	db !Define_SMW_LevelMusic_CaveDrums
	db !Define_SMW_LevelMusic_Piano
	db !Define_SMW_LevelMusic_Castle
	db !Define_SMW_LevelMusic_GhostHouse
	db !Define_SMW_LevelMusic_WaterLevel
	db !Define_SMW_LevelMusic_BossBattle
	db !Define_SMW_LevelMusic_SwitchPalace

Main:
;$0584E3
	LDY.b #$00
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	TAX
	AND.b #$1F
	INC
	STA.b !RAM_SMW_Misc_ScreensInLvl
	TXA
	LSR
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_Misc_BGPaletteSetting
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	AND.b #$1F
	STA.w !RAM_SMW_Misc_LevelModeSetting
	TAX
	LDA.l LevXYPPCCCTtbl,x
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.l LevMainScrnTbl,x
	STA.w !RAM_SMW_Mirror_MainScreenLayers
	LDA.l LevSubScrnTbl,x
	STA.w !RAM_SMW_Mirror_SubScreenLayers
	LDA.l LevCGADSUBtable,x
	STA.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	LDA.l SpecialLevTable,x
	STA.w !RAM_SMW_Misc_NMIToUseFlag
	LDA.l VerticalTable,x
	STA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	LDA.b !RAM_SMW_Misc_ScreensInLvl
	LDX.b #$01
	BCC.b LevelModeEven
	TAX
	LDA.b #$01
LevelModeEven:
	STA.b !RAM_SMW_Camera_LastScreenHoriz
	STX.b !RAM_SMW_Camera_LastScreenVert
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	LSR
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_Misc_BackgroundColorSetting
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	AND.b #$0F
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	TXA
	LSR
	LSR
	LSR
	LSR
	AND.b #$07
	TAX
	LDA.l LevelMusicTable,x
	LDX.w !RAM_SMW_Misc_MusicRegisterBackup
	BPL.b CODE_05855C
	ORA.b #$80
CODE_05855C:
	CMP.w !RAM_SMW_Misc_MusicRegisterBackup
	BNE.b CODE_058563
	ORA.b #$40
CODE_058563:
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #!BGModeAndTileSizeSetting_Mode01Layer3Priority<<4
	LSR
	LSR
	LSR
	LSR
	ORA.b #!BGModeAndTileSizeSetting_Mode01Enable
	STA.b !RAM_SMW_Mirror_BGModeAndTileSizeSetting
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	BNE.b CODE_058590
	LDA.l TimerTable,x
	STA.w !RAM_SMW_Counter_TimerHundreds
	STZ.w !RAM_SMW_Counter_TimerTens
	STZ.w !RAM_SMW_Counter_TimerOnes
CODE_058590:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$07
	STA.w !RAM_SMW_Misc_FGPaletteSetting
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$38
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_Misc_SpritePaletteSetting
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	AND.b #$0F
	STA.w !RAM_SMW_Misc_LevelTilesetSetting
	STA.w !RAM_SMW_UnusedRAM_CopyOfLevelTilesetSetting		; Optimization: Junk
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	AND.b #$C0
	ASL
	ROL
	ROL
	STA.w !RAM_SMW_Misc_ItemMemorySetting
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	AND.b #$30
	LSR
	LSR
	LSR
	LSR
	CMP.b #$03
	BNE.b HeaderVHscroll
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	LDA.b #$00
HeaderVHscroll:
	STA.w !RAM_SMW_Flag_Layer1VerticalScrollLevelSetting
	LDA.b !RAM_SMW_Pointer_Layer1DataLo				;\ Optimization: 16-bit A would be useful here.
	CLC								;|
	ADC.b #$05							;|
	STA.b !RAM_SMW_Pointer_Layer1DataLo				;|
	LDA.b !RAM_SMW_Pointer_Layer1DataHi				;|
	ADC.b #$00							;|
	STA.b !RAM_SMW_Pointer_Layer1DataHi				;/
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_LoadLevelDataObject(Address)
namespace SMW_LoadLevelDataObject
%InsertMacroAtXPosition(<Address>)

CODE_0585D8:
	LDA.b !RAM_SMW_Blocks_ObjectNumber
	BNE.b CODE_0585E2
	LDA.b !RAM_SMW_Blocks_SizeOrType
	CMP.b #$02
	BCC.b Return0585FE
CODE_0585E2:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$F0
	ORA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	AND.b #$F0
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
Return0585FE:
	RTS

Main:
	SEP.b #$30
	LDY.b #$00
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Blocks_SizeOrType
	INY
	TYA
	CLC
	ADC.b !RAM_SMW_Pointer_Layer1DataLo
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.b !RAM_SMW_Pointer_Layer1DataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_Layer1DataHi
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Blocks_ObjectNumber
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$60
	LSR
	ORA.b !RAM_SMW_Blocks_ObjectNumber
	STA.b !RAM_SMW_Blocks_ObjectNumber
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LDY.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_058637
	LSR
CODE_058637:
	AND.b #$01
	BEQ.b CODE_05863E
	JSR.w CODE_0585D8						; Optimization: This routine is only called here and is small enough to fit here.
CODE_05863E:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$0F
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	AND.b #$0F
	ORA.b !RAM_SMW_Blocks_SubScrPos
	STA.b !RAM_SMW_Blocks_SubScrPos
	REP.b #$20
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_LevelDataLayoutTables_LoTablePtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_HiTablePtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	AND.w #$001F
	ASL
	TAY
	SEP.b #$20
	LDA.b #SMW_LevelDataLayoutTables_LoTablePtrs>>16
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b [!RAM_SMW_Misc_ScratchRAM03],y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b [!RAM_SMW_Misc_ScratchRAM06],y
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM03],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b [!RAM_SMW_Misc_ScratchRAM06],y
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b #SMW_LevelDataLayoutTables_Main>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$80
	ASL
	ADC.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	STA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	STA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	ASL
	CLC
	ADC.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	TAY
#LM300Hijack_CustomLevelDimensions09:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$10
	BEQ.b LoadNoHiCoord
	INC.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	INC.b !RAM_SMW_Pointer_HiMap16BlockDataHi
LoadNoHiCoord:
	LDA.b !RAM_SMW_Blocks_ObjectNumber
	BNE.b LevLoadJsrNrm
	JSR.w LevLoadExtObj						; Optimization: Why not JSL.l to SMW_ProcessExtendedObjects_Main directly?
	JMP.w LevLoadContinue						; Optimization: BRA.b?

LevLoadJsrNrm:
	JSR.w LevLoadNrmObj						; Optimization: Why not JSL.l to SMW_ProcessStandardAndTilesetSpecificObjects_Main directly?
LevLoadContinue:
	SEP.b #$20
	REP.b #$10
	LDY.w #$0000							;\ Optimization: Again with the unnecessary Y load to index the first entry in an indirect.
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y				;/
	CMP.b #$FF
	BEQ.b LevelDataEnd
	JMP.w Main

LevelDataEnd:
	RTS								; Optimization: This could have pointed to one of the below RTSs, but given that those bits of code are useless anyway, it's no big deal.

LevLoadExtObj:
	SEP.b #$30							;\ Optimization: A/X/Y are already 8-bit!
	JSL.l SMW_ProcessExtendedObjects_Main				;|
	RTS								;/

LevLoadNrmObj:
	SEP.b #$30							;\ Optimization: A/X/Y are already 8-bit!
	JSL.l SMW_ProcessStandardAndTilesetSpecificObjects_Main		;|
	RTS								;/
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_InitializeMap16Pointers(Address)
namespace SMW_InitializeMap16Pointers
%InsertMacroAtXPosition(<Address>)

DATA_0581BB:
	db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	db $FF,$FF,$FF,$FF,$FF,$FF,$E0,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $FE,$00,$7F,$FF,$FF,$FF,$FF,$FF
	db $FF,$FF,$E0,$00,$00,$03,$FF,$FF
	db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

Main:
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	ASL
	TAX
	LDA.b #DATA_0581BB>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b #DATA_00E55E>>16
	STA.b !RAM_SMW_Pointer_SlopeSteepnessBank
	LDA.b #$C4
	STA.w !RAM_SMW_Blocks_LowestNumberSolidMap16TileForSprites
	LDA.b #$CA
	STA.w !RAM_SMW_Blocks_HighestNumberSolidMap16TileForSprites
	REP.b #$20
	LDA.w #DATA_00E55E
	STA.b !RAM_SMW_Pointer_SlopeSteepnessLo
	LDA.l TilesetMap16Ptrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #SMW_Map16Data_Global
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w #DATA_0581BB
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	STZ.b !RAM_SMW_Misc_ScratchRAM09
	STZ.b !RAM_SMW_Misc_ScratchRAM0B
	REP.b #$10
	LDY.w #$0000
	TYX
CODE_058237:
	SEP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_05823D:
	ASL.b !RAM_SMW_Misc_ScratchRAM0C
	BCC.b CODE_058253
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_Pointer_Map16Tiles,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JMP.w CODE_058262

CODE_058253:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Pointer_Map16Tiles,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_058262:
	SEP.b #$20
	INX
	INX
	INC.b !RAM_SMW_Misc_ScratchRAM09
	INC.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	CMP.b #$08
	BNE.b CODE_05823D
	STZ.b !RAM_SMW_Misc_ScratchRAM0B
	INY
	CPY.w #$0040
	BNE.b CODE_058237
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	BEQ.b CODE_058281
	CMP.b #$07
	BNE.b CODE_0582C5
CODE_058281:
	LDA.b #$FF
	STA.w !RAM_SMW_Blocks_LowestNumberSolidMap16TileForSprites
	STA.w !RAM_SMW_Blocks_HighestNumberSolidMap16TileForSprites
	REP.b #$30
	LDA.w #DATA_00E5C8
	STA.b !RAM_SMW_Pointer_SlopeSteepnessLo
	LDA.w #$01C4
	ASL
	TAY
	LDA.w #SMW_Map16Data_SlopedPipeTiles
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0003
CODE_05829D:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Pointer_Map16Tiles,y
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	INY
	DEX
	BPL.b CODE_05829D
	LDA.w #$01EC
	ASL
	TAY
	LDX.w #$0003
CODE_0582B5:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Pointer_Map16Tiles,y
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	INY
	DEX
	BPL.b CODE_0582B5
CODE_0582C5:
	SEP.b #$30
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_InitializeMap16Pointers(Address)
namespace SMW_InitializeMap16Pointers
%InsertMacroAtXPosition(<Address>)

TilesetMap16Ptrs:
	dw SMW_Map16Data_Grassland	; Tileset 0 (Normal 1)
	dw SMW_Map16Data_Castle		; Tileset 1 (Castle 1)
	dw SMW_Map16Data_Rope		; Tileset 2 (Rope 1)
	dw SMW_Map16Data_Underground	; Tileset 3 (Underground 1)
	dw SMW_Map16Data_GhostHouse	; Tileset 4 (Switch Palace 1)
	dw SMW_Map16Data_GhostHouse	; Tileset 5 (Ghost House 1)
	dw SMW_Map16Data_Rope		; Tileset 6 (Rope 2)
	dw SMW_Map16Data_Grassland	; Tileset 7 (Normal 2)
	dw SMW_Map16Data_Rope		; Tileset 8 (Rope 3)
	dw SMW_Map16Data_Underground	; Tileset 9 (Underground 2)
	dw SMW_Map16Data_Underground	; Tileset A (Switch Palace 2)
	dw SMW_Map16Data_Underground	; Tileset B (Castle 2)
	dw SMW_Map16Data_Grassland	; Tileset C (Cloud/Forest)
	dw SMW_Map16Data_GhostHouse	; Tileset D (Ghost House 2)
	dw SMW_Map16Data_Underground	; Tileset E (Underground 3)
namespace off
endmacro

macro ROUTINE_RT02_SMW_InitializeMap16Pointers(Address)
namespace SMW_InitializeMap16Pointers
%InsertMacroAtXPosition(<Address>)

DATA_00E55E:

	db $00,$00									;\ Tiles 16E-16F
	db $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03		;| Tiles 170-17F
	db $03,$03,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06,$06		;| Tiles 180-18F
	db $06,$07,$07,$07,$07,$07,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09		;| Tiles 190-19F
	db $0A,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$0C,$0C,$0D		;| Tiles 1A0-1AF
	db $0D,$0D,$0D,$0D,$0E,$0F,$10,$11,$03,$03,$04,$04,$09,$09,$0A,$0A		;| Tiles 1B0-1BF
	db $0C,$0C,$0D,$0D,$12,$13,$14,$15,$16,$17,$1C,$1D,$1E,$1F,$18,$19		;| Tiles 1C0-1CF
	db $1A,$1B,$08,$09,$0A,$0B,$0C,$0D						;/ Tiles 1D0-1D7

DATA_00E5C8:

	db $00,$00									;\ Tiles 16E-16F
	db $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03		;| Tiles 170-17F
	db $03,$03,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06,$06		;| Tiles 180-18F
	db $06,$07,$07,$07,$07,$07,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09		;| Tiles 190-19F
	db $0A,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$0C,$0C,$0D		;| Tiles 1A0-1AF
	db $0D,$0D,$0D,$0D,$0E,$0F,$10,$11,$03,$03,$04,$04,$09,$09,$0A,$0A		;| Tiles 1B0-1BF
	db $0C,$0C,$0D,$0D,$0C,$0D,$0D,$0C,$16,$17,$1C,$1D,$1E,$1F,$18,$19		;| Tiles 1C0-1CF
	db $1A,$1B,$08,$09,$0A,$0B,$0C,$0D						;/ Tiles 1D0-1D7
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SpecifySublevelToLoad(Address)				; Optimzation: This routine is not very well optimized
namespace SMW_SpecifySublevelToLoad
%InsertMacroAtXPosition(<Address>)

DATA_05D608:
	db $FF,$1F,$20,$FF,$0B,$0D,$0E,$0F
	db $28,$09,$10,$21,$22,$23,$24,$25
	db $27,$60,$FF,$12,$02,$07,$FF,$FF
	db $4E,$FF,$4D,$4A,$4C,$4B,$36,$35
	db $61,$63,$62,$48,$46,$06,$05,$04
	db $00,$01,$03,$19,$FF,$1D,$1A,$14
	db $44,$45,$42,$3E,$40,$41,$43,$3D
	db $3B,$39,$38,$4F,$17,$1B,$15,$29
	db $1C,$30,$2A,$32,$2C,$37,$34,$2E
	db $6D,$6C,$6B,$6A,$69,$64,$65,$66
	db $67,$68,$56,$53,$54,$5F,$57,$59
	db $51,$5A,$5D,$50,$5C,$FF,$FF,$FF
namespace off
endmacro

macro ROUTINE_RT01_SMW_SpecifySublevelToLoad(Address)
namespace SMW_SpecifySublevelToLoad
%InsertMacroAtXPosition(<Address>)

DATA_05D708:
	db $00,$60,$C0,$00

DATA_05D70C:
	db $60,$90,$C0,$00

L2VertScrollSettings:			; Info: Layer 2 vertical scroll setting...
	db $03				; Slow
	db $01				; Constant
	db $01				; Constant
	db $00				; None
	db $00				; None
	db $02				; Variable
	db $02				; Variable
	db $01				; Constant
#LM300Hijack_CustomL2VerticalScroll:	; LM: (3.00+)
	db $00				; None/Variable 2
	db $00				; None/Variable 3
	db $00				; None/Variable 4
	db $00				; None/Slow 2
	db $00				; None
	db $00				; None
	db $00				; None
	db $00				; None

L2HorzScrollSettings:
	db $02				; Variable
	db $02				; Variable
	db $01				; Constant
	db $00				; None
	db $01				; Constant
	db $02				; Variable
	db $01				; Constant
	db $00				; None
#LM300Hijack_CustomL2HorizontalScroll:	; LM: (3.00+)
	db $00				; None/Variable
	db $00				; None/Variable
	db $00				; None/Variable
	db $00				; None/Variable
	db $00				; None
	db $00				; None
	db $00				; None
	db $00				; None

DATA_05D730:
	db $00,$30,$60,$80,$A0,$B0,$C0,$E0
	db $10,$30,$50,$60,$70,$90,$00,$00

DATA_05D740:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $01,$01,$01,$01,$01,$01,$01,$01

DATA_05D750:
	db $10,$80,$00,$E0,$10,$70,$00,$E0

DATA_05D758:
	db $00,$00,$00,$00,$01,$01,$01,$01

LevelEntranceTileset:
	db $05,$01,$02,$06,$08,$01

LevelEntranceLayer1:
	dl SMW_LEVEL_L1_GhostHouseEntrance
	dl SMW_LEVEL_L1_CastleEntrance
	dl SMW_LEVEL_L1_NoYoshiEntrance1
	dl SMW_LEVEL_L1_NoYoshiEntrance2
	dl SMW_LEVEL_L1_NoYoshiEntrance3
	dl SMW_LEVEL_L1_CastleEntrance2

LevelEntranceLayer2:
	dl SMW_LEVEL_L1_BlankEntrance
	dw SMW_Backgrounds_Layer2_Mountains	:	db $FF
	dw SMW_Backgrounds_Layer2_Mountains	:	db $FF
	dw SMW_Backgrounds_Layer2_Stars		:	db $FF
	dw SMW_Backgrounds_Layer2_Rocks2	:	db $FF
	dw SMW_Backgrounds_Layer2_Black		:	db $FF

LevelEntranceLayer3:
	db $03,$00,$00,$00,$00,$00

LevelEntranceYPos:
	db $70,$70,$60,$70,$70,$70

Main:
;$05D796
	PHB
	PHK
	PLB
	SEP.b #$30
	STZ.w !RAM_SMW_Flag_OverrideNoYoshiIntroForMidwayEntrance
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BNE.b CODE_05D7A8
	LDY.w !RAM_SMW_Flag_ActiveBonusGame
	BEQ.b CODE_05D7AB
CODE_05D7A8:
	JSR.w CODE_05DBAC
CODE_05D7AB:
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	BNE.b CODE_05D7B3
	JMP.w CODE_05D83E

CODE_05D7B3:
	LDX.b !RAM_SMW_Player_XPosHi
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
#LM300Hijack_CustomLevelDimensions01:
	BEQ.b CODE_05D7BD
	LDX.b !RAM_SMW_Player_YPosHi
CODE_05D7BD:
	LDA.w !RAM_SMW_Misc_SubscreenExitEntranceNumberLo,x
	STA.w !RAM_SMW_UnusedRAM_7E17BB					; Optimization: This is unused
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	BEQ.b CODE_05D7D2						; Note: !Define_SMW_Overworld_MainMap
	LDA.b #$01
CODE_05D7D2:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_Flag_UseSecondaryEntrance			;\ Note: Levels in SMW can only use either main entrances or secondary entrances for screen exits.
	BEQ.b CODE_05D83B						;/ LM Allows you to mix and match.
	REP.b #$30
	LDA.w #$0000
	SEP.b #$20
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
#LM250Hijack_Expand05F800:
	LDA.w DATA_05F800,y
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	STA.w !RAM_SMW_UnusedRAM_7E17BB					; Optimization: This is unused
#LM250Hijack_Expand05FA00:
	LDA.w DATA_05FA00,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$0F
	TAX
	LDA.l DATA_05D730,x
	STA.b !RAM_SMW_Player_YPosLo
	LDA.l DATA_05D740,x
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$30
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.l DATA_05D708,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.l DATA_05D70C,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
#LM250Hijack_Expand05FC00:
	LDA.w DATA_05FC00,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.l DATA_05D750,x
	STA.b !RAM_SMW_Player_XPosLo
	LDA.l DATA_05D758,x
	STA.b !RAM_SMW_Player_XPosHi
	LDA.w DATA_05FE00,y
#LM250Hijack_ExpandAndModify05FE00:
	AND.b #$07
	STA.w !RAM_SMW_Misc_LevelHeaderEntranceSettings
CODE_05D83B:
	JMP.w CODE_05D8B7

CODE_05D83E:
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	BNE.b CODE_05D8A2
	REP.b #$30
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	AND.w #$000F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	AND.w #$000F
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	AND.w #$0010
	ASL
	ASL
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	AND.w #$0010
	ASL
	ASL
	ASL
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	AND.w #$00FF
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	AND.w #$000F
	BEQ.b CODE_05D899
	TXA
	CLC
	ADC.w #$0400
	TAX
CODE_05D899:
	SEP.b #$20
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	STA.w !RAM_SMW_Overworld_LevelNumberLo
CODE_05D8A2:
	CMP.b #$25
	BCC.b CODE_05D8A9
	SEC
	SBC.b #$24
CODE_05D8A9:
	STA.w !RAM_SMW_UnusedRAM_7E17BB				; Optimization: This is unused
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	BEQ.b CODE_05D8B5					; Note: !Define_SMW_Overworld_MainMap
	LDA.b #$01
CODE_05D8B5:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_05D8B7:
	REP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ASL
	CLC									; Optimization: X could have been set here and transfered here to save a few bytes later in this routine
	ADC.b !RAM_SMW_Misc_ScratchRAM0E
	TAY
	SEP.b #$20
	LDA.w Layer1DataPtrs,y							;\ Optimization: There is no reason not to use 16-bit A here.
	STA.b !RAM_SMW_Pointer_Layer1DataLo					;|
	LDA.w Layer1DataPtrs+$01,y						;|
	STA.b !RAM_SMW_Pointer_Layer1DataHi					;|
	LDA.w Layer1DataPtrs+$02,y						;|
	STA.b !RAM_SMW_Pointer_Layer1DataBank					;|
	LDA.w Layer2DataPtrs,y							;|
	STA.b !RAM_SMW_Pointer_Layer2DataLo					;|
	LDA.w Layer2DataPtrs+$01,y						;|
	STA.b !RAM_SMW_Pointer_Layer2DataHi					;|
	LDA.w Layer2DataPtrs+$02,y						;|
	STA.b !RAM_SMW_Pointer_Layer2DataBank					;|
	REP.b #$20								;|\ Optimization: If X were stored to earlier, then changing A's size wouldn't be necessary
#LM000Hijack_StoreSublevelNumber:						;|| From there, the following two tables could be made to use X instead of Y.
	LDA.b !RAM_SMW_Misc_ScratchRAM0E					;||
	ASL									;||
	TAY									;||
	LDA.w #$0000								;||
	SEP.b #$20								;||
	LDA.w SpriteDataPtrs,y							;||
	STA.b !RAM_SMW_Pointer_SpriteListDataLo					;||
	LDA.w SpriteDataPtrs+$01,y						;|/
	STA.b !RAM_SMW_Pointer_SpriteListDataHi					;|
#LM100Hijack_RemoveHardcodedSpriteListBank:					;|
	LDA.b #SMW_SpriteDataBank>>16						;|
	STA.b !RAM_SMW_Pointer_SpriteListDataBank				;/
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo]
	AND.b #$3F
	STA.w !RAM_SMW_Sprites_SpriteMemorySetting
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo]
	AND.b #$C0
	STA.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	REP.b #$10								;\ Optimization: A is already 8-bit and X/Y 16-bit!
	SEP.b #$20								;/
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w DATA_05F000,y
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.l L2HorzScrollSettings,x
	STA.w !RAM_SMW_Flag_Layer2HorizontalScrollLevelSetting
	LDA.l L2VertScrollSettings,x
	STA.w !RAM_SMW_Flag_Layer2VerticalScrollLevelSetting
	LDA.b #$01
	STA.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	LDA.w DATA_05F200,y
	AND.b #$C0
	CLC
	ASL
	ROL
	ROL
	STA.w !RAM_SMW_Misc_LevelLayer3Settings
	STZ.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STZ.b !RAM_SMW_Mirror_CurrentLayer2YPosHi
	LDA.w DATA_05F600,y
	AND.b #$80
	STA.w !RAM_SMW_Flag_DisableNoYoshiIntro
	LDA.w DATA_05F600,y
	AND.b #$60
	LSR
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_LevelLayoutFlags
	LDA.w !RAM_SMW_Flag_UseSecondaryEntrance
	BNE.b CODE_05D9A1
	LDA.w DATA_05F000,y
	AND.b #$0F
	TAX
	LDA.l DATA_05D730,x
	STA.b !RAM_SMW_Player_YPosLo
	LDA.l DATA_05D740,x
	STA.b !RAM_SMW_Player_YPosHi
	LDA.w DATA_05F200,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$07
	TAX
	LDA.l DATA_05D750,x
	STA.b !RAM_SMW_Player_XPosLo
	LDA.l DATA_05D758,x
	STA.b !RAM_SMW_Player_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$38
	LSR
	LSR
#LM000Hijack_ExpandedLevelHeader:
	LSR
	STA.w !RAM_SMW_Misc_LevelHeaderEntranceSettings
	LDA.w DATA_05F400,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$03
	TAX
	LDA.l DATA_05D70C,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$0C
	LSR
	LSR
	TAX
	LDA.l DATA_05D708,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w DATA_05F600,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_05D9A1:
#LM300Hijack_CustomLevelDimensions02:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BEQ.b CODE_05D9B8
	LDY.w #$0000
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	AND.b #$1F
	STA.b !RAM_SMW_Player_YPosHi
	INC
	STA.b !RAM_SMW_Camera_LastScreenVert
	LDA.b #$01
	STA.w !RAM_SMW_Flag_Layer1VerticalScrollLevelSetting
CODE_05D9B8:
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	BNE.b CODE_05D9EC
	LDA.b !RAM_SMW_Misc_ScratchRAM02			;\ Optimization: $13CD can likely be made into free RAM.
	LSR							;|
	LSR							;|
	LSR							;|
	LSR							;|
	STA.w !RAM_SMW_UnusedRAM_DisableMidpoint		;/
	STZ.w !RAM_SMW_Flag_GotMidpoint
	LDY.w !RAM_SMW_Overworld_LevelNumberLo			;\ Optimization: If that SEP.b #$10 was done a bit earlier, then $7E13C0 would be free RAM. 
	LDA.w DATA_05D608,y					;|
	STA.w !RAM_SMW_Overworld_CurrentEventNumber		;|
	SEP.b #$10						;/
	LDX.w !RAM_SMW_Overworld_LevelNumberLo
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,x
	AND.b #$40
	BEQ.b CODE_05D9EC
	STA.w !RAM_SMW_Flag_OverrideNoYoshiIntroForMidwayEntrance
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Player_XPosHi
	JMP.w CODE_05DA17

CODE_05D9EC:
	REP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.b #$1F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b CODE_05DA01
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Player_XPosHi
	JMP.w CODE_05DA17

CODE_05DA01:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Player_YPosHi
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	SEP.b #$10
	LDY.w !RAM_SMW_Flag_Layer2VerticalScrollLevelSetting
	CPY.b #$03
	BEQ.b CODE_05DA12
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosHi
CODE_05DA12:
	LDA.b #$01
	STA.w !RAM_SMW_Flag_Layer1VerticalScrollLevelSetting
CODE_05DA17:
	SEP.b #$30
	LDA.w !RAM_SMW_Overworld_LevelNumberLo				;\ Optimization: Junk code.
	CMP.b #$52							;| All this does is force the special world levels to have no-yoshi intros, except all of them disable the intros anyway in the header settings. 
	BCC.b CODE_05DA24						;|
	LDX.b #$03							;|
	BRA.b CODE_05DA38						;/

CODE_05DA24:
	LDX.b #$04
	LDY.b #$04
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	AND.b #$0F
CODE_05DA2C:
	CMP.l LevelEntranceTileset,x
	BEQ.b CODE_05DA38
	DEX
	BPL.b CODE_05DA2C
CODE_05DA35:
	JMP.w CODE_05DAD7

CODE_05DA38:
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	BNE.b CODE_05DA35
	LDA.w !RAM_SMW_Flag_ShowPlayerStart
	BNE.b CODE_05DA35
	LDA.w !RAM_SMW_Flag_DisableNoYoshiIntro
	BNE.b CODE_05DA35
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	CMP.b #$31
	BEQ.b CODE_05DA5E
	CMP.b #$32
	BEQ.b CODE_05DA5E
	CMP.b #$34
	BEQ.b CODE_05DA5E
	CMP.b #$35
	BEQ.b CODE_05DA5E
	CMP.b #$40
	BNE.b CODE_05DA60
CODE_05DA5E:
	LDX.b #$05
CODE_05DA60:
	LDA.w !RAM_SMW_Flag_OverrideNoYoshiIntroForMidwayEntrance
	BNE.b CODE_05DAD0
	LDA.l LevelEntranceYPos,x
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b #$01
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b #$30
	STA.b !RAM_SMW_Player_XPosLo
	STZ.b !RAM_SMW_Player_XPosHi
	LDA.b #$C0
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STZ.w !RAM_SMW_Misc_LevelHeaderEntranceSettings
	LDA.b #SMW_LEVEL_SP_0BD
	STA.b !RAM_SMW_Pointer_SpriteListDataLo
	LDA.b #SMW_LEVEL_SP_0BD>>8
	STA.b !RAM_SMW_Pointer_SpriteListDataHi
	LDA.b #SMW_LEVEL_SP_0BD>>16
	STA.b !RAM_SMW_Pointer_SpriteListDataBank
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo]						;\ LM: Hijacks here for something related to the custom level dimensions
	AND.b #$3F										;/
	STA.w !RAM_SMW_Sprites_SpriteMemorySetting
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo]
	AND.b #$C0
	STA.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	STZ.w !RAM_SMW_Flag_Layer2HorizontalScrollLevelSetting
	STZ.w !RAM_SMW_Flag_Layer2VerticalScrollLevelSetting
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	STZ.b !RAM_SMW_Misc_LevelLayoutFlags
	LDA.l LevelEntranceLayer3,x
	STA.w !RAM_SMW_Misc_LevelLayer3Settings
	STX.b !RAM_SMW_Misc_ScratchRAM00
	TXA
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.w LevelEntranceLayer1,y
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.w LevelEntranceLayer1+$01,y
	STA.b !RAM_SMW_Pointer_Layer1DataHi
	LDA.w LevelEntranceLayer1+$02,y
	STA.b !RAM_SMW_Pointer_Layer1DataBank
	LDA.w LevelEntranceLayer2,y
	STA.b !RAM_SMW_Pointer_Layer2DataLo
	LDA.w LevelEntranceLayer2+$01,y
	STA.b !RAM_SMW_Pointer_Layer2DataHi
	LDA.w LevelEntranceLayer2+$02,y
	STA.b !RAM_SMW_Pointer_Layer2DataBank
CODE_05DAD0:
	LDA.l LevelEntranceTileset,x
	STA.w !RAM_SMW_Misc_LevelTilesetSetting
CODE_05DAD7:
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	BEQ.b CODE_05DAEB
	LDA.w !RAM_SMW_Flag_ActiveBonusGame
	BNE.b CODE_05DAEB
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	CMP.b #!Define_SMW_LevelID_ChocolateIsland2
#LM000Hijack_DisableChocolateIsland2Gimmick:
	BNE.b CODE_05DAEB					; LM: Changes BNE.b to BRA.b if Chocolate Island 2's gimmick is disabled.
	JSR.w HandleChocolateIsland2Gimmick
CODE_05DAEB:
	PLB
	SEP.b #$30
	RTL

HandleChocolateIsland2Gimmick:
	SEP.b #$30
	LDY.b #$04
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y		;\ Note: It seems that Chocolate Island 2 uses the item memory bits to determine what section of the level you're on.
	AND.b #$C0					;| Crash: Which means that if you uses item memory 3, the game will crash.
	CLC						;|
	ROL						;|
	ROL						;|
	ROL						;|
	JSL.l SMW_ExecutePtr_Long			;/

PtrsLong05DAFF:
	dl YoshiCoinCheck
	dl CoinsCollectedCheck
	dl TimeRemainingCheck

Layer1Ptrs:
	dw SMW_LEVEL_L1_0CD
	dw SMW_LEVEL_L1_024_5
	dw SMW_LEVEL_L1_024_5
	dw SMW_LEVEL_L1_0CF
	dw SMW_LEVEL_L1_024_1
	dw SMW_LEVEL_L1_024_2
	dw SMW_LEVEL_L1_0CE
	dw SMW_LEVEL_L1_024_3
	dw SMW_LEVEL_L1_024_4

SpritePtrs:
	dw SMW_LEVEL_SP_0CD
	dw SMW_LEVEL_SP_024_5
	dw SMW_LEVEL_SP_024_5
	dw SMW_LEVEL_SP_0CF
	dw SMW_LEVEL_SP_024_1
	dw SMW_LEVEL_SP_024_2
	dw SMW_LEVEL_SP_0CE
	dw SMW_LEVEL_SP_024_3
	dw SMW_LEVEL_SP_024_4

Layer2Ptrs:
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2
	dw SMW_Backgrounds_Layer2_Rocks2

YoshiCoinCheck:
	LDX.b #$00
	LDA.w !RAM_SMW_Counter_YoshiCoinsToDisplay
	CMP.b #$04
	BEQ.b CODE_05DB49
	LDX.b #$02
CODE_05DB49:
	REP.b #$20
	LDA.l Layer1Ptrs,x
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.l SpritePtrs,x
	STA.b !RAM_SMW_Pointer_SpriteListDataLo
	LDA.l Layer2Ptrs,x
	STA.b !RAM_SMW_Pointer_Layer2DataLo
	SEP.b #$20
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo]
	AND.b #$7F
	STA.w !RAM_SMW_Sprites_SpriteMemorySetting
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo]
	AND.b #$80
	STA.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	RTS

CoinsCollectedCheck:
	LDX.b #$0A
	LDA.w !RAM_SMW_Counter_GreenStarBlock
	CMP.b #$16
	BPL.b CODE_05DB7F
	LDX.b #$08
	CMP.b #$0A
	BPL.b CODE_05DB7F
	LDX.b #$06
CODE_05DB7F:
	JMP.w CODE_05DB49

TimeRemainingCheck:
	LDX.b #$0C
	LDA.w !RAM_SMW_Counter_TimerHundreds
	CMP.b #$02
	BMI.b CODE_05DBA6
	LDA.w !RAM_SMW_Counter_TimerTens
	CMP.b #$03
	BMI.b CODE_05DBA6
	BNE.b CODE_05DB9B
	LDA.w !RAM_SMW_Counter_TimerOnes
	CMP.b #$05
	BMI.b CODE_05DBA6
CODE_05DB9B:
	LDX.b #$0E
	LDA.w !RAM_SMW_Counter_TimerTens
	CMP.b #$05
	BMI.b CODE_05DBA6
	LDX.b #$10
CODE_05DBA6:
	JMP.w CODE_05DB49

BonusLevelSublevelsLo:
	db $00,$C8,$00

CODE_05DBAC:
	LDY.b #$00
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BEQ.b CODE_05DBB5
	LDY.b #$01
CODE_05DBB5:
	LDX.b !RAM_SMW_Player_XPosHi
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BEQ.b CODE_05DBBF
	LDX.b !RAM_SMW_Player_YPosHi
CODE_05DBBF:
	LDA.w BonusLevelSublevelsLo,y
#LM000Hijack_RecodedScreenExits:
	STA.w !RAM_SMW_Misc_SubscreenExitEntranceNumberLo,x
	INC.w !RAM_SMW_Counter_SublevelsEntered
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_SpecifySublevelToLoad(Address)
namespace SMW_SpecifySublevelToLoad
%InsertMacroAtXPosition(<Address>)

Layer1DataPtrs:
	incsrc "levels/pointers/layer1.asm"
Layer2DataPtrs:
	incsrc "levels/pointers/layer2.asm"
SpriteDataPtrs:
	incsrc "levels/pointers/sprites.asm"

DATA_05F000:
	incsrc "levels/properties/1.asm"
DATA_05F200:
	incsrc "levels/properties/2.asm"
DATA_05F400:
	incsrc "levels/properties/3.asm"
DATA_05F600:
	incsrc "levels/properties/4.asm"
DATA_05F800:
	incsrc "levels/properties/5.asm"
DATA_05FA00:
	incsrc "levels/properties/6.asm"
DATA_05FC00:
	incsrc "levels/properties/7.asm"
DATA_05FE00:
	incsrc "levels/properties/8.asm"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GraphicsDecompressionRoutines(Address)
namespace SMW_GraphicsDecompressionRoutines
%InsertMacroAtXPosition(<Address>)

UNK_00B882:
	dl SMW_GFX33
	dl SMW_GFX32

DecompressGFX32And33:
	REP.b #$10
#LM000Hijack_MoveGFX32And33_1:
	LDY.w #SMW_GFX33
	STY.b !RAM_SMW_Misc_ScratchRAM8A
#LM000Hijack_MoveGFX32And33_2:
	LDA.b #(SMW_GFX33>>16)
	STA.b !RAM_SMW_Misc_ScratchRAM8C
#LM000Hijack_4BPPGFX33_1:
	LDY.w #!RAM_SMW_Graphics_DecompressedGFX32		; LM: Changes this to point to !RAM_SMW_Graphics_DecompressedGFX33 if the below hijack exists.
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #!RAM_SMW_Graphics_DecompressedGFX32>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w BeginDecompression
#LM000Hijack_4BPPGFX33_2:
	LDA.b #!RAM_SMW_Graphics_DecompressedGFX33>>16		;\ LM: This code gets skipped over so that GFX33's graphics can be 4BPP
	STA.b !RAM_SMW_Misc_ScratchRAM8F			;|
	REP.b #$30						;|
	LDA.w #!RAM_SMW_Graphics_DecompressedGFX33+$2FFE	;|
	STA.b !RAM_SMW_Misc_ScratchRAM8D			;|
	LDX.w #$23FF						;|
CODE_00B8AD:							;|
	LDY.w #$0008						;|
CODE_00B8B0:							;|
	LDA.l !RAM_SMW_Graphics_DecompressedGFX32,x		;|
	AND.w #$00FF						;|
	STA.b [!RAM_SMW_Misc_ScratchRAM8D]			;|
	DEX							;|
	DEC.b !RAM_SMW_Misc_ScratchRAM8D			;|
	DEC.b !RAM_SMW_Misc_ScratchRAM8D			;|
	DEY							;|
	BNE.b CODE_00B8B0					;|
	LDY.w #$0008						;|
CODE_00B8C4:							;|
	DEX							;|
	LDA.l !RAM_SMW_Graphics_DecompressedGFX32,x		;|
	STA.b [!RAM_SMW_Misc_ScratchRAM8D]			;|
	DEX							;|
	BMI.b CODE_00B8D7					;|
	DEC.b !RAM_SMW_Misc_ScratchRAM8D			;|
	DEC.b !RAM_SMW_Misc_ScratchRAM8D			;|
	DEY							;|
	BNE.b CODE_00B8C4					;|
	BRA.b CODE_00B8AD					;/

CODE_00B8D7:
#LM000Hijack_MoveGFX32And33_3:
	LDA.w #SMW_GFX32
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	SEP.b #$20
BeginDecompression:
	REP.b #$10
	LDY.w #$0000
CODE_00B8E3:
#LM182Hijack_CustomCompressionPatch:
	JSR.w ReadByte						;\ LM: Hijacks this when installing either of the optional compression routine hijacks (1.82+)
	CMP.b #$FF						;/
	BNE.b CODE_00B8ED
	SEP.b #$10
	RTS

CODE_00B8ED:
	STA.b !RAM_SMW_Misc_ScratchRAM8F
	AND.b #$E0
	CMP.b #$E0
	BEQ.b CODE_00B8FF
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	REP.b #$20
	AND.w #$001F
	BRA.b CODE_00B911

CODE_00B8FF:
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	ASL
	ASL
	ASL
	AND.b #$E0
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	AND.b #$03
	XBA
	JSR.w ReadByte
	REP.b #$20
CODE_00B911:
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM8D
	SEP.b #$20
	PLA
	BEQ.b CODE_00B930
	BMI.b CODE_00B966
	ASL
	BPL.b CODE_00B93F
	ASL
	BPL.b CODE_00B94C
	JSR.w ReadByte
	LDX.b !RAM_SMW_Misc_ScratchRAM8D
CODE_00B926:
	STA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INC
	INY
	DEX
	BNE.b CODE_00B926
	JMP.w CODE_00B8E3

CODE_00B930:
	JSR.w ReadByte
	STA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	LDX.b !RAM_SMW_Misc_ScratchRAM8D
	DEX
	STX.b !RAM_SMW_Misc_ScratchRAM8D
	BNE.b CODE_00B930
	BRA.b CODE_00B8E3

CODE_00B93F:
	JSR.w ReadByte
	LDX.b !RAM_SMW_Misc_ScratchRAM8D
CODE_00B944:
	STA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	DEX
	BNE.b CODE_00B944
	BRA.b CODE_00B8E3

CODE_00B94C:
	JSR.w ReadByte
	XBA
	JSR.w ReadByte
	LDX.b !RAM_SMW_Misc_ScratchRAM8D
CODE_00B955:
	XBA
	STA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	DEX
	BEQ.b CODE_00B963
	XBA
	STA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	DEX
	BNE.b CODE_00B955
CODE_00B963:
	JMP.w CODE_00B8E3

CODE_00B966:
	JSR.w ReadByte
	XBA
	JSR.w ReadByte
if !Define_Global_ROMToAssemble&(!ROM_SMW_J|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	XBA
endif
	TAX
CODE_00B96E:
	PHY
	TXY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	TYX
	PLY
	STA.b [!RAM_SMW_Misc_ScratchRAM00],y
	INY
	INX
	REP.b #$20
	DEC.b !RAM_SMW_Misc_ScratchRAM8D
	SEP.b #$20
	BNE.b CODE_00B96E
	JMP.w CODE_00B8E3

ReadByte:
	LDA.b [!RAM_SMW_Misc_ScratchRAM8A]
	LDX.b !RAM_SMW_Misc_ScratchRAM8A
	INX
	BNE.b CODE_00B98F
	LDX.w #$8000							; Todo: This could be a potential trap if one uses hirom addressing and inserts their GFX somewhere with 64KB banks.
	INC.b !RAM_SMW_Misc_ScratchRAM8C
CODE_00B98F:
	STX.b !RAM_SMW_Misc_ScratchRAM8A
	RTS

GraphicsPtrLo:
	db SMW_GFX00,SMW_GFX01,SMW_GFX02,SMW_GFX03,SMW_GFX04,SMW_GFX05,SMW_GFX06,SMW_GFX07
	db SMW_GFX08,SMW_GFX09,SMW_GFX0A,SMW_GFX0B,SMW_GFX0C,SMW_GFX0D,SMW_GFX0E,SMW_GFX0F
	db SMW_GFX10,SMW_GFX11,SMW_GFX12,SMW_GFX13,SMW_GFX14,SMW_GFX15,SMW_GFX16,SMW_GFX17
	db SMW_GFX18,SMW_GFX19,SMW_GFX1A,SMW_GFX1B,SMW_GFX1C,SMW_GFX1D,SMW_GFX1E,SMW_GFX1F
	db SMW_GFX20,SMW_GFX21,SMW_GFX22,SMW_GFX23,SMW_GFX24,SMW_GFX25,SMW_GFX26,SMW_GFX27
	db SMW_GFX28,SMW_GFX29,SMW_GFX2A,SMW_GFX2B,SMW_GFX2C,SMW_GFX2D,SMW_GFX2E,SMW_GFX2F
	db SMW_GFX30,SMW_GFX31

GraphicsPtrHi:
	db SMW_GFX00>>8,SMW_GFX01>>8,SMW_GFX02>>8,SMW_GFX03>>8,SMW_GFX04>>8,SMW_GFX05>>8,SMW_GFX06>>8,SMW_GFX07>>8
	db SMW_GFX08>>8,SMW_GFX09>>8,SMW_GFX0A>>8,SMW_GFX0B>>8,SMW_GFX0C>>8,SMW_GFX0D>>8,SMW_GFX0E>>8,SMW_GFX0F>>8
	db SMW_GFX10>>8,SMW_GFX11>>8,SMW_GFX12>>8,SMW_GFX13>>8,SMW_GFX14>>8,SMW_GFX15>>8,SMW_GFX16>>8,SMW_GFX17>>8
	db SMW_GFX18>>8,SMW_GFX19>>8,SMW_GFX1A>>8,SMW_GFX1B>>8,SMW_GFX1C>>8,SMW_GFX1D>>8,SMW_GFX1E>>8,SMW_GFX1F>>8
	db SMW_GFX20>>8,SMW_GFX21>>8,SMW_GFX22>>8,SMW_GFX23>>8,SMW_GFX24>>8,SMW_GFX25>>8,SMW_GFX26>>8,SMW_GFX27>>8
	db SMW_GFX28>>8,SMW_GFX29>>8,SMW_GFX2A>>8,SMW_GFX2B>>8,SMW_GFX2C>>8,SMW_GFX2D>>8,SMW_GFX2E>>8,SMW_GFX2F>>8
	db SMW_GFX30>>8,SMW_GFX31>>8

GraphicsPtrBank:
	db SMW_GFX00>>16,SMW_GFX01>>16,SMW_GFX02>>16,SMW_GFX03>>16,SMW_GFX04>>16,SMW_GFX05>>16,SMW_GFX06>>16,SMW_GFX07>>16
	db SMW_GFX08>>16,SMW_GFX09>>16,SMW_GFX0A>>16,SMW_GFX0B>>16,SMW_GFX0C>>16,SMW_GFX0D>>16,SMW_GFX0E>>16,SMW_GFX0F>>16
	db SMW_GFX10>>16,SMW_GFX11>>16,SMW_GFX12>>16,SMW_GFX13>>16,SMW_GFX14>>16,SMW_GFX15>>16,SMW_GFX16>>16,SMW_GFX17>>16
	db SMW_GFX18>>16,SMW_GFX19>>16,SMW_GFX1A>>16,SMW_GFX1B>>16,SMW_GFX1C>>16,SMW_GFX1D>>16,SMW_GFX1E>>16,SMW_GFX1F>>16
	db SMW_GFX20>>16,SMW_GFX21>>16,SMW_GFX22>>16,SMW_GFX23>>16,SMW_GFX24>>16,SMW_GFX25>>16,SMW_GFX26>>16,SMW_GFX27>>16
	db SMW_GFX28>>16,SMW_GFX29>>16,SMW_GFX2A>>16,SMW_GFX2B>>16,SMW_GFX2C>>16,SMW_GFX2D>>16,SMW_GFX2E>>16,SMW_GFX2F>>16
	db SMW_GFX30>>16,SMW_GFX31>>16

Main:
;$00BA28
	PHB
	PHY
	PHK
	PLB
	LDA.w GraphicsPtrLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	LDA.w GraphicsPtrHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM8B
	LDA.w GraphicsPtrBank,y
	STA.b !RAM_SMW_Misc_ScratchRAM8C
	LDA.b #!RAM_SMW_Graphics_GraphicDecompressionBuffer
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #!RAM_SMW_Graphics_GraphicDecompressionBuffer>>8
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #!RAM_SMW_Graphics_GraphicDecompressionBuffer>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
#LM_JMLHere_DecompressAnyGraphics:
	JSR.w BeginDecompression
	PLY
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

;Credit: Cut Man gave me a decompressed version of GFX27, since the tool that usually does that doesn't work for me.

macro DATATABLE_SMW_CompressedGraphics(Address)
check bankcross off
%InsertMacroAtXPosition(<Address>)

	%SMW_INCGFX(GFX32)	:	%SMW_INCGFX(GFX33)	:	%SMW_INCGFX(GFX00)	:	%SMW_INCGFX(GFX01)
	%SMW_INCGFX(GFX02)	:	%SMW_INCGFX(GFX03)	:	%SMW_INCGFX(GFX04)	:	%SMW_INCGFX(GFX05)
	%SMW_INCGFX(GFX06)	:	%SMW_INCGFX(GFX07)	:	%SMW_INCGFX(GFX08)	:	%SMW_INCGFX(GFX09)
	%SMW_INCGFX(GFX0A)	:	%SMW_INCGFX(GFX0B)	:	%SMW_INCGFX(GFX0C)	:	%SMW_INCGFX(GFX0D)
	%SMW_INCGFX(GFX0E)	:	%SMW_INCGFX(GFX0F)	:	%SMW_INCGFX(GFX10)	:	%SMW_INCGFX(GFX11)
	%SMW_INCGFX(GFX12)	:	%SMW_INCGFX(GFX13)	:	%SMW_INCGFX(GFX14)	:	%SMW_INCGFX(GFX15)
	%SMW_INCGFX(GFX16)	:	%SMW_INCGFX(GFX17)	:	%SMW_INCGFX(GFX18)	:	%SMW_INCGFX(GFX19)
	%SMW_INCGFX(GFX1A)	:	%SMW_INCGFX(GFX1B)	:	%SMW_INCGFX(GFX1C)	:	%SMW_INCGFX(GFX1D)
	%SMW_INCGFX(GFX1E)	:	%SMW_INCGFX(GFX1F)	:	%SMW_INCGFX(GFX20)	:	%SMW_INCGFX(GFX21)
	%SMW_INCGFX(GFX22)	:	%SMW_INCGFX(GFX23)	:	%SMW_INCGFX(GFX24)	:	%SMW_INCGFX(GFX25)
	%SMW_INCGFX(GFX26)	:	%SMW_INCGFX(GFX27)	:	%SMW_INCGFX(GFX28)	:	%SMW_INCGFX(GFX29)
	%SMW_INCGFX(GFX2A)	:	%SMW_INCGFX(GFX2B)	:	%SMW_INCGFX(GFX2C)	:	%SMW_INCGFX(GFX2D)
	%SMW_INCGFX(GFX2E)	:	%SMW_INCGFX(GFX2F)	:	%SMW_INCGFX(GFX30)	:	%SMW_INCGFX(GFX31)
check bankcross on
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_LoadOverworldLifeCounter(Address)
namespace SMW_LoadOverworldLifeCounter
%InsertMacroAtXPosition(<Address>)

DATA_05DBC9:
	db $50,$88,$00,$03
	db $FE,$38
	db $FE,$38
	db $FF

UNK_05DBD2:					;\ Note: This seems to be the big world 1-8 numbers shown in beta screenshots
	dw $3CB8,$3CB9				;|
	dw $3CBA,$3CBB				;|
	dw $3CBA,$BCBA				;|
	dw $3CBC,$3CBD				;|
	dw $3CBE,$3CBF				;|
	dw $3CC0,$BCB7				;|
	dw $3CC1,$3CB9				;|
	dw $3CC2,$BCC2				;/

Main:
	PHB
	PHK
	PLB
	LDX.b #$08
CODE_05DBF7:
	LDA.w DATA_05DBC9,x
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	BPL.b CODE_05DBF7
	LDX.b #$00
	LDA.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_05DC0A
	LDX.b #$01
CODE_05DC0A:
	LDA.w !RAM_SMW_Player_MariosLives,x
	INC
	JSR.w SMW_HexToDec_Bank05
	CPX.b #$00
	BEQ.b CODE_05DC23
	CLC
	ADC.b #$22
	STA.l SMW_StripeImageUploadTable[$03].LowByte
	LDA.b #$39
	STA.l SMW_StripeImageUploadTable[$03].HighByte
	TXA
CODE_05DC23:
	CLC
	ADC.b #$22
	STA.l SMW_StripeImageUploadTable[$02].LowByte
	LDA.b #$39
	STA.l SMW_StripeImageUploadTable[$02].HighByte
	LDA.b #$08
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$20
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessLevelEndRoutines(Address)
namespace SMW_ProcessLevelEndRoutines
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.w !RAM_SMW_Pointer_CurrentLevelEndProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs05CC0E:
	dw SMW_ShowCourseClearText_Main
	dw SMW_DisplayCourseClearTextBonusStars_Main
	dw SMW_GiveTimeBonusAndBonusStars_Main
	dw SMW_GiveTimeBonusAndBonusStars_Return
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ShowCourseClearText(Address)
namespace SMW_ShowCourseClearText
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$00
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Player_MarioBonusStars,x
CODE_05CC6E:
	CMP.b #$0A
	BCC.b CODE_05CC77
	SBC.b #$0A
	INY
	BRA.b CODE_05CC6E

CODE_05CC77:
	CPY.w !RAM_SMW_Counter_TimerTens
	BNE.b CODE_05CC84
	CPY.w !RAM_SMW_Counter_TimerOnes
	BNE.b CODE_05CC84
	INC.w !RAM_SMW_Misc_1upHandler
CODE_05CC84:
	LDA.b #$01
	STA.w !RAM_SMW_Flag_DisableLayer3Scroll
	LDA.b #!BGModeAndTileSizeSetting_Mode01Layer3Priority
	TSB.b !RAM_SMW_Mirror_BGModeAndTileSizeSetting
	REP.b #$30
	STZ.b !RAM_SMW_Mirror_Layer3XPosLo
	STZ.b !RAM_SMW_Mirror_Layer3YPosLo
	LDY.w #$004A
	TYA
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_05CC9D:
	LDA.w SMW_CourseClearText_Main,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	DEX
	DEY
	DEY
	BPL.b CODE_05CC9D
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	SEP.b #$20
	LDA.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_05CCC8
	LDY.w #$0000
CODE_05CCB9:
	LDA.w SMW_CourseClearText_Luigi,y
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INX
	INX
	INY
	CPY.w #SMW_CourseClearText_LuigiEnd-SMW_CourseClearText_Luigi
	BNE.b CODE_05CCB9
CODE_05CCC8:
	LDY.w #$0002
	LDA.b #$04
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_05CCD3:
	LDA.w !RAM_SMW_Counter_TimerHundreds,y
	STA.l SMW_StripeImageUploadTable[$19].LowByte,x
	DEY
	DEX
	DEX
	BPL.b CODE_05CCD3
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_05CCE4:
	LDA.l SMW_StripeImageUploadTable[$19].LowByte,x
	AND.b #$0F
	BNE.b CODE_05CCF9
	LDA.b #$FC
	STA.l SMW_StripeImageUploadTable[$19].LowByte,x
	INX
	INX
	CPX.w #$0004
	BNE.b CODE_05CCE4
CODE_05CCF9:
	SEP.b #$10
	JSR.w SMW_CalculateTimeBonusDigits_Main
	REP.b #$20
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_Counter_LevelEndScoreTallyLo
	LDX.b #$42
	LDY.b #$00
	JSR.w SMW_AdjustTimeBonusDisplay_Main
	LDX.b #$00
CODE_05CD10:
	LDA.l SMW_StripeImageUploadTable[$20].LowByte,x
	AND.w #$000F
	BNE.b CODE_05CD26
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$20].LowByte,x
	INX
	INX
	CPX.b #$08
	BNE.b CODE_05CD10
CODE_05CD26:
	SEP.b #$20
	INC.w !RAM_SMW_Pointer_CurrentLevelEndProcess
	LDA.b #$28
	STA.w !RAM_SMW_Timer_DisplayBonusStars
	LDA.b #$4A
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	INC
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$30
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_AdjustTimeBonusDisplay(Address)
namespace SMW_AdjustTimeBonusDisplay
%InsertMacroAtXPosition(<Address>)

DATA_05CDE9:
	dw $0000,$2710
	dw $0000,$03E8
	dw $0000,$0064
	dw $0000,$000A
	dw $0000,$0001

Main:
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo,x
	AND.w #$FF00
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo,x
CODE_05CE08:
	PHX
	TYX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	SBC.l DATA_05CDE9+$02,x
else
	SBC.w DATA_05CDE9+$02,x
endif
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	SBC.l DATA_05CDE9,x
else
	SBC.w DATA_05CDE9,x
endif
	STA.b !RAM_SMW_Misc_ScratchRAM04
	PLX
	BCC.b CODE_05CE2F
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo,x
	INC
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo,x
	BRA.b CODE_05CE08

CODE_05CE2F:
	INX
	INX
	INY
	INY
	INY
	INY
	CPY.b #$14
	BNE.b Main
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CalculateTimeBonusDigits(Address)
namespace SMW_CalculateTimeBonusDigits
%InsertMacroAtXPosition(<Address>)

DATA_05CE3A:
	dw $0000,$0064,$00C8,$012C

DATA_05CE42:
	db $00,$0A,$14,$1E,$28,$32,$3C,$46
	db $50,$5A

Main:
	REP.b #$20
	LDA.w !RAM_SMW_Counter_TimerHundreds
	ASL
	TAX
	LDA.w DATA_05CE3A,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Counter_TimerTens
	TAX
	LDA.w DATA_05CE42,x
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Counter_TimerOnes
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_Multiplicand
	LDA.b #$32
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !REGISTER_ProductOrRemainderHi
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !REGISTER_Multiplicand
	LDA.b #$32
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM03
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DisplayCourseClearTextBonusStars(Address)
namespace SMW_DisplayCourseClearTextBonusStars
%InsertMacroAtXPosition(<Address>)

DATA_05CD62:
	%INLINEDATATABLE_SMW_TallNumberTiles()

Main:
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	BEQ.b CODE_05CDD5
	DEC.w !RAM_SMW_Timer_DisplayBonusStars
	BPL.b Return05CDE8
	LDY.b #$22
	TYA
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_05CD89:
	LDA.w SMW_GotBonusStarsText_Main,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	DEY
	BPL.b CODE_05CD89
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	AND.b #$0F
	ASL
	TAY
	LDA.w DATA_05CD62+$01,y
	STA.l SMW_StripeImageUploadTable[$0C].LowByte,x
	LDA.w DATA_05CD62,y
	STA.l SMW_StripeImageUploadTable[$10].LowByte,x
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	AND.b #$F0
	LSR
	LSR
	LSR
	LSR
	BEQ.b CODE_05CDC9
	ASL
	TAY
	LDA.w DATA_05CD62+$01,y
	STA.l SMW_StripeImageUploadTable[$0B].LowByte,x
	LDA.w DATA_05CD62,y
	STA.l SMW_StripeImageUploadTable[$0F].LowByte,x
CODE_05CDC9:
	LDA.b #$22
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	INC
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
CODE_05CDD5:
	DEC.w !RAM_SMW_Timer_WaitBeforeScoreTally
	BPL.b Return05CDE8
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	STA.w !RAM_SMW_Timer_DisplayBonusStars
	INC.w !RAM_SMW_Pointer_CurrentLevelEndProcess
	LDA.b #!Define_SMW_Sound1DFC_DrumrollStart
	STA.w !RAM_SMW_IO_SoundCh3
Return05CDE8:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GiveTimeBonusAndBonusStars(Address)
namespace SMW_GiveTimeBonusAndBonusStars
%InsertMacroAtXPosition(<Address>)

DATA_05CEC2:
	db $0A,$00,$64,$00

DATA_05CEC6:
	db $01,$00,$0A,$00

Main:
	PHB
	PHK
	PLB
	REP.b #$20
	LDX.b #$00
	LDA.w !RAM_SMW_Player_CurrentCharacter
	AND.w #$00FF
	BEQ.b CODE_05CEDB
	LDX.b #$03
CODE_05CEDB:
	LDY.b #$02
	LDA.w !RAM_SMW_Counter_LevelEndScoreTallyLo
	BEQ.b CODE_05CF05
	CMP.w #$0063
	BCS.b CODE_05CEE9
	LDY.b #$00
CODE_05CEE9:
	SEC
	SBC.w DATA_05CEC2,y
	STA.w !RAM_SMW_Counter_LevelEndScoreTallyLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w DATA_05CEC6,y
	CLC
	ADC.w !RAM_SMW_Player_MarioScoreLo,x
	STA.w !RAM_SMW_Player_MarioScoreLo,x
	LDA.w !RAM_SMW_Player_MarioScoreHi,x
	ADC.w #$0000
	STA.w !RAM_SMW_Player_MarioScoreHi,x
CODE_05CF05:
	LDX.w !RAM_SMW_Counter_BonusStarsEarned
	BEQ.b CODE_05CF36
	SEP.b #$20
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_05CF34
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Player_MarioBonusStars,x
	CLC
	ADC.b #$01
	STA.w !RAM_SMW_Player_MarioBonusStars,x
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	DEC
	STA.w !RAM_SMW_Counter_BonusStarsEarned
	AND.b #$0F
	CMP.b #$0F
	BNE.b CODE_05CF34
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	SEC
	SBC.b #$06
	STA.w !RAM_SMW_Counter_BonusStarsEarned
CODE_05CF34:
	REP.b #$20
CODE_05CF36:
	LDA.w !RAM_SMW_Counter_LevelEndScoreTallyLo
	BNE.b CODE_05CF4D
	LDX.w !RAM_SMW_Counter_BonusStarsEarned
	BNE.b CODE_05CF4D
	LDX.b #$30
	STX.w !RAM_SMW_Timer_WaitBeforeScoreTally
	INC.w !RAM_SMW_Pointer_CurrentLevelEndProcess
	LDX.b #!Define_SMW_Sound1DFC_DrumrollEnd
	STX.w !RAM_SMW_IO_SoundCh3
CODE_05CF4D:
	LDY.b #$1E
	TYA
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM0A
CODE_05CF59:
	LDA.w SMW_NoBonusStarsText_Main,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	DEX
	DEY
	DEY
	BPL.b CODE_05CF59
	LDA.w !RAM_SMW_Counter_LevelEndScoreTallyLo
	BEQ.b CODE_05CFA0
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	CLC
	ADC.w #$0006
	TAX
	LDY.b #$00
	JSR.w SMW_AdjustTimeBonusDisplay_Main
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_05CF8A:
	LDA.l SMW_StripeImageUploadTable[$02].LowByte,x
	AND.w #$000F
	BNE.b CODE_05CFA0
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INX
	INX
	CPX.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_05CF8A
CODE_05CFA0:
	SEP.b #$20
	REP.b #$10
	LDA.w !RAM_SMW_Timer_DisplayBonusStars
	BEQ.b CODE_05CFDC
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	AND.b #$0F
	ASL
	TAY
	LDA.w SMW_DisplayCourseClearTextBonusStars_DATA_05CD62,y
	STA.l SMW_StripeImageUploadTable[$0A].LowByte,x
	LDA.w SMW_DisplayCourseClearTextBonusStars_DATA_05CD62+$01,y
	STA.l SMW_StripeImageUploadTable[$0E].LowByte,x
	LDA.w !RAM_SMW_Counter_BonusStarsEarned
	AND.b #$F0
	LSR
	LSR
	LSR
	BEQ.b CODE_05CFDC
	TAY
	LDA.w SMW_DisplayCourseClearTextBonusStars_DATA_05CD62,y
	STA.l SMW_StripeImageUploadTable[$09].LowByte,x
	LDA.w SMW_DisplayCourseClearTextBonusStars_DATA_05CD62+$01,y
	STA.l SMW_StripeImageUploadTable[$0D].LowByte,x
CODE_05CFDC:
	REP.b #$20
	SEP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$30
	PLB
Return:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DisplayOverworldPrompt(Address)
namespace SMW_DisplayOverworldPrompt
%InsertMacroAtXPosition(<Address>)

Main:
	DEC
	JSL.l SMW_ExecutePtr_Absolute

Ptrs04F3EA:
	dw SMW_OverworldPrompt01_InitializeOverworldPrompt_Main
	dw SMW_OverworldPrompt02_ExpandPromptWindow_Main
	dw SMW_OverworldPrompt03_OverworldLifeExchanger_Main
	dw SMW_OverworldPrompt04_ShrinkPromptWindow_Main
	dw SMW_OverworldPrompt05_InitializeOverworldPrompt_Main
	dw SMW_OverworldPrompt06_ExpandPromptWindow_Main
	dw SMW_OverworldPrompt07_DisplayingSavePrompt_Main
	dw SMW_OverworldPrompt08_ShrinkPromptWindow_Main
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	dw SMW_OverworldPrompt09_InitializeOverworldPrompt_Main
	dw SMW_OverworldPrompt0A_ExpandPromptWindow_Main
	dw SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt_Main
	dw SMW_OverworldPrompt0C_ShrinkPromptWindow_Main
endif
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldPrompt01_InitializeOverworldPrompt(Address)
namespace SMW_OverworldPrompt01_InitializeOverworldPrompt
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DFC_MessageBox
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Pointer_DisplayOverworldPrompt
CODE_04F407:
	STZ.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	STZ.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	STZ.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	STZ.w !RAM_SMW_Mirror_HDMAEnable
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt01_InitializeOverworldPrompt_Main, SMW_OverworldPrompt05_InitializeOverworldPrompt_Main)

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt01_InitializeOverworldPrompt_Main, SMW_OverworldPrompt09_InitializeOverworldPrompt_Main)
endif
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldPrompt02_ExpandPromptWindow(Address)
namespace SMW_OverworldPrompt02_ExpandPromptWindow
%InsertMacroAtXPosition(<Address>)

DATA_04F411:
	db $04,$FC

DATA_04F413:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	db $48,$00
else
	db $68,$00
endif

Main:
	LDX.b #$00
	LDA.w !RAM_SMW_Player_MariosLives
	CMP.w !RAM_SMW_Player_LuigisLives
	BPL.b CODE_04F420
	INX
CODE_04F420:
	STX.w !RAM_SMW_Flag_WhoGetsLivesInExchangeMenu
	LDX.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	CMP.l DATA_04F413,x
	BNE.b CODE_04F44B
	INC.w !RAM_SMW_Pointer_DisplayOverworldPrompt
	LDA.w !RAM_SMW_Pointer_DisplayOverworldPrompt
	CMP.b #$07
	BNE.b CODE_04F43D
	LDY.b #!Define_SMW_StripeImage_SaveMenuText
	STY.b !RAM_SMW_Graphics_StripeImageToUpload
CODE_04F43D:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	CMP.b #$0B
	BNE.b +
	PHX
	PHA
	LDX.b #SMW_QuitToTitleScreenText_EndEnd-SMW_QuitToTitleScreenText_Main+$01

-:
	LDA.w SMW_QuitToTitleScreenText_Main,x
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	BPL.b -
	PLA
	PLX
+:
endif
	DEC
	AND.b #$03
	BNE.b Return04F44A
	STZ.w !RAM_SMW_Pointer_DisplayOverworldPrompt
	STZ.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	BRA.b SMW_OverworldPrompt01_InitializeOverworldPrompt_CODE_04F407

Return04F44A:
	RTS

CODE_04F44B:
	CLC
	ADC.l DATA_04F411,x
	STA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	CLC
	ADC.b #$80
	XBA
	REP.b #$10
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.w #$018E
else
	LDX.w #$016E
endif
	LDA.b #$FF
CODE_04F45E:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$50,x
	STZ.w !RAM_SMW_Misc_HDMAWindowEffectTable+$51,x
	DEX
	DEX
	BPL.b CODE_04F45E
	SEP.b #$10
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	LSR
	ADC.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	LSR
	AND.b #$FE
	TAX
endif
	LDA.b #$80
	SEC
	SBC.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	REP.b #$20
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDX.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
endif
	LDY.b #$48
CODE_04F47F:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$C8,y
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$110,x
else
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$A8,y
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$F0,x
endif
	DEY
	DEY
	DEX
	DEX
	BPL.b CODE_04F47F
	STZ.w !RAM_SMW_Palettes_BackgroundColorLo
	SEP.b #$20
	LDA.b #$22
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDA.b #$20
	JMP.w SMW_SubmapSwitchProcess00_InitializeWindowHDMA_CODE_04DB95

ClearPromptWindowImage:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%StripeImageHeader(.ClearLine1, $09, $0E, 0, $0015, 3)
elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	%StripeImageHeader(.ClearLine1, $04, $0E, 0, $002D, 3)
else
	%StripeImageHeader(.ClearLine1, $04, $0E, 0, $0025, 3)
endif
	db $FC,$38
.ClearLine1End
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%StripeImageHeader(.ClearLine2, $08, $10, 0, $001F, 3)
else
	%StripeImageHeader(.ClearLine2, $04, $10, 0, $002D, 3)
endif
.ClearLine2End
	db $FC,$38
	%StripeImageHeader(.ClearLine3, $0F, $11, 0, $0003, 3)
	db $FC,$38
.ClearLine3End
	%StripeImageHeader(.ClearLine4, $08, $12, 0, $001D, 3)
	db $FC,$38
.ClearLine4End
	db $FF

namespace off
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt02_ExpandPromptWindow_Main, SMW_OverworldPrompt04_ShrinkPromptWindow_Main)
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt02_ExpandPromptWindow_Main, SMW_OverworldPrompt06_ExpandPromptWindow_Main)
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt02_ExpandPromptWindow_Main, SMW_OverworldPrompt08_ShrinkPromptWindow_Main)

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt02_ExpandPromptWindow_Main, SMW_OverworldPrompt0A_ExpandPromptWindow_Main)
	%SetDuplicateOrNullPointer(SMW_OverworldPrompt02_ExpandPromptWindow_Main, SMW_OverworldPrompt0C_ShrinkPromptWindow_Main)
endif
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldPrompt03_OverworldLifeExchanger(Address)
namespace SMW_OverworldPrompt03_OverworldLifeExchanger
%InsertMacroAtXPosition(<Address>)

DATA_04F503:
	db $7D,$38,$7E,$78

DATA_04F507:
	db $7E,$38,$7D,$78

DATA_04F50B:
	db $7D,$B8,$7E,$F8

DATA_04F50F:
	db $7E,$B8,$7D,$F8

Main:
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP2
	AND.b #!Joypad_Start>>8
	BEQ.b DontCloseExchange
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Player_MariosLives,x
	STA.w !RAM_SMW_Player_CurrentLifeCount
	JSL.l SMW_CloseOverworldPrompt_Main
	RTS

DontCloseExchange:
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1
	AND.b #(!Joypad_Y>>8)|(!Joypad_B>>8)
	BNE.b CODE_04F53B
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP2
	AND.b #(!Joypad_Y>>8)|(!Joypad_B>>8)
	BEQ.b CODE_04F56C
	EOR.b #(!Joypad_Y>>8)|(!Joypad_B>>8)
CODE_04F53B:
	LDX.b #$01
	ASL
	BCS.b CODE_04F541
	DEX
CODE_04F541:
	CPX.w !RAM_SMW_Flag_WhoGetsLivesInExchangeMenu
	BEQ.b CODE_04F54B
	LDA.b #$18
	STA.w !RAM_SMW_Timer_LifeExchangeBlinkingArrowFrames
CODE_04F54B:
	STX.w !RAM_SMW_Flag_WhoGetsLivesInExchangeMenu
	TXA
	EOR.b #$01
	TAY
	LDA.w !RAM_SMW_Player_MariosLives,x
	BEQ.b CODE_04F56C
	BMI.b CODE_04F56C
	LDA.w !RAM_SMW_Player_MariosLives,y
	CMP.b #$62
	BPL.b CODE_04F56C
	INC
	STA.w !RAM_SMW_Player_MariosLives,y
	DEC.w !RAM_SMW_Player_MariosLives,x
	LDA.b #!Define_SMW_Sound1DFC_StepOnLevelTile
	STA.w !RAM_SMW_IO_SoundCh3
CODE_04F56C:
	REP.b #$20
	LDA.w #$7848
	STA.w SMW_OAMBuffer[$27].XDisp
	LDA.w #$7890
	STA.w SMW_OAMBuffer[$28].XDisp
	LDA.w #$340A
	STA.w SMW_OAMBuffer[$27].Tile
	LDA.w #$360A
	STA.w SMW_OAMBuffer[$28].Tile
	SEP.b #$20
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$27].Slot
	STA.w SMW_OAMTileSizeBuffer[$28].Slot
	JSL.l SMW_LoadOverworldLifeCounter_Main
	LDY.b #SMW_LifeExchangeText_End-SMW_LifeExchangeText_Main
	TYA
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_04F5A1:
	LDA.w SMW_LifeExchangeText_Main,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	DEY
	BPL.b CODE_04F5A1
	INX
	REP.b #$20
	LDY.w !RAM_SMW_Player_MariosLives
	BMI.b MarioGameOver
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$22].LowByte,x
	STA.l SMW_StripeImageUploadTable[$23].LowByte,x
MarioGameOver:
	LDY.w !RAM_SMW_Player_LuigisLives
	BMI.b LuigiGameOver
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$26].LowByte,x
	STA.l SMW_StripeImageUploadTable[$27].LowByte,x
LuigiGameOver:
	SEP.b #$20
	INC.w !RAM_SMW_Timer_LifeExchangeBlinkingArrowFrames
	LDA.w !RAM_SMW_Timer_LifeExchangeBlinkingArrowFrames
	AND.b #$18
	BEQ.b CODE_04F600
	LDA.w !RAM_SMW_Flag_WhoGetsLivesInExchangeMenu
	ASL
	TAY
	REP.b #$20
	LDA.w DATA_04F503,y
	STA.l SMW_StripeImageUploadTable[$1A].LowByte,x
	LDA.w DATA_04F507,y
	STA.l SMW_StripeImageUploadTable[$1B].LowByte,x
	LDA.w DATA_04F50B,y
	STA.l SMW_StripeImageUploadTable[$1E].LowByte,x
	LDA.w DATA_04F50F,y
	STA.l SMW_StripeImageUploadTable[$1F].LowByte,x
	SEP.b #$20
CODE_04F600:
	LDA.w !RAM_SMW_Player_MariosLives
	JSR.w CODE_04F60E
	TXA
	CLC
	ADC.b #$0A
	TAX
	LDA.w !RAM_SMW_Player_LuigisLives
CODE_04F60E:
	INC
	PHX
	JSL.l CODE_00974C
	TXY
	BNE.b CODE_04F619
	LDX.b #$FC
CODE_04F619:
	TXY
	PLX
	STA.l SMW_StripeImageUploadTable[$12].LowByte,x
	TYA
	STA.l SMW_StripeImageUploadTable[$11].LowByte,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_OverworldPrompt03_OverworldLifeExchanger(Address)
namespace SMW_OverworldPrompt03_OverworldLifeExchanger
%InsertMacroAtXPosition(<Address>)

CODE_00974C:
	JSR.w SMW_HexToDec_Bank00
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldPrompt07_DisplayingSavePrompt(Address)
namespace SMW_OverworldPrompt07_DisplayingSavePrompt
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank00
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_OverworldPrompt07_DisplayingSavePrompt(Address)
namespace SMW_OverworldPrompt07_DisplayingSavePrompt
%InsertMacroAtXPosition(<Address>)

Bank00:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
endif
	RTL

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
Sub:
	LDY.b #$06
	JSR.w SMW_HandleMenuCursor_Main
	TXA
	BNE.b NotFirstOption
	STZ.w !RAM_SMW_IO_SoundCh3
	LDA.b #!Define_SMW_Sound1DF9_MidwayPoint
	STA.w !RAM_SMW_IO_SoundCh1
	JSL.l SMW_SaveGame_Main
NotFirstOption:
	JSL.l SMW_CloseOverworldPrompt_Main
	RTS
endif
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt(Address)				; Note: This is a SMAS exclusive routine macro
namespace SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank30
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt(Address)				; Note: This is a SMAS exclusive routine macro
namespace SMW_OverworldPrompt0B_ShowQuitToTitleScreenPrompt
%InsertMacroAtXPosition(<Address>)

Bank30:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDY.b #$06
	JSR.w SMW_HandleMenuCursor_Main
	TXA
	BEQ.b CODE_309BBC
	JML.l SMAS_ResetToSMASTitleScreen_Main

CODE_309BBC:
	JSL.l SMW_CloseOverworldPrompt_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeStatusBarTilemap(Address)
namespace SMW_InitializeStatusBarTilemap
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation+$2E
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008D10:
	LDA.w PARAMS_008D90,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008D10
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation+$42
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008D2F:
	LDA.w PARAMS_008D97,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008D2F
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation+$63
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008D4E:
	LDA.w PARAMS_008D9E,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008D4E
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation+$8E
	STA.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_008D6D:
	LDA.w PARAMS_008DA5,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_008D6D
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	LDX.b #(SMW_StatusBarTilemap_ThirdRowEnd-SMW_StatusBarTilemap_SecondRow-$02)/2
	LDY.b #SMW_StatusBarTilemap_ThirdRowEnd-SMW_StatusBarTilemap_SecondRow-$02
BufferStatusCounterRAMLoop:
	LDA.w SMW_StatusBarTilemap_SecondRow,y
	STA.w !RAM_SMW_Misc_StatusBarTilemap,x
	DEY
	DEY
	DEX
	BPL.b BufferStatusCounterRAMLoop
	LDA.b #!Define_SMW_Counter_TimerFrames
	STA.w !RAM_SMW_Counter_TimerFrames
	RTS

PARAMS_008D90:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl SMW_StatusBarTilemap_TopRow
	dw SMW_StatusBarTilemap_TopRowEnd-SMW_StatusBarTilemap_TopRow

PARAMS_008D97:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl SMW_StatusBarTilemap_SecondRow
	dw SMW_StatusBarTilemap_SecondRowEnd-SMW_StatusBarTilemap_SecondRow

PARAMS_008D9E:
	db $01,!REGISTER_WriteToVRAMPortLo

	dl SMW_StatusBarTilemap_ThirdRow
	dw SMW_StatusBarTilemap_ThirdRowEnd-SMW_StatusBarTilemap_ThirdRow

PARAMS_008DA5:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl SMW_StatusBarTilemap_BottomRow
	dw SMW_StatusBarTilemap_BottomRowEnd-SMW_StatusBarTilemap_BottomRow
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode09_EraseFile(Address)
namespace SMW_GameMode09_EraseFile
%InsertMacroAtXPosition(<Address>)

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
DATA_009B17:
	db $04,$02,$01
endif

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	REP.b #$20
	LDA.w #$39C9
	LDY.b #$60
	JSR.w SMW_FileSelectColorMath_Main
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b NotPressingXY
endif

CODE_009B2C:
	DEC.w !RAM_SMW_Misc_GameMode
	DEC.w !RAM_SMW_Misc_GameMode
	JSR.w SMW_HandleMenuCursor_CODE_009B11
	JMP.w SMW_GameMode07_TitleScreenDemo_InitializeSaveData

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
NotPressingXY:
	LDY.b #$08
	JSR.w SMW_HandleMenuCursor_Main
	CPX.b #$03
	BNE.b CODE_009B6D
	LDY.b #$02
CODE_009B43:
	LSR.w !RAM_SMW_Misc_WhichFileToErase
	BCC.b CODE_009B67
	PHY
	LDA.w SMW_SaveFileLocations_Hi,y
	XBA
	LDA.w SMW_SaveFileLocations_Lo,y
	REP.b #$10
	TAX
	LDY.w #!SRAM_SMW_MarioB_StartLocation-!SRAM_SMW_MarioA_StartLocation
	LDA.b #$00
CODE_009B58:
	STA.l !SRAM_SMW_MarioA_StartLocation,x
	STA.l !SRAM_SMW_MarioA_Backup,x
	INX
	DEY
	BNE.b CODE_009B58
	SEP.b #$10
	PLY
CODE_009B67:
	DEY
	BPL.b CODE_009B43
	JMP.w SMW_GameMode07_TitleScreenDemo_FadeOutToTitleScreen	;\ Note: Seems kind of odd for the code to not jump to CODE_009B2C. This JMP.w is what causes END to cause a fadeout.
									;/ If it jumped to CODE_009B2C instead, then it would be like when you press X/Y.
CODE_009B6D:
	STX.w !RAM_SMW_Misc_BlinkingCursorPos
	LDA.w DATA_009B17,x
	ORA.w !RAM_SMW_Misc_WhichFileToErase
	STA.w !RAM_SMW_Misc_WhichFileToErase
	STA.b !RAM_SMW_Misc_ScratchRAM05
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDY.b #$0C
else
	LDX.b #$00
endif
	JMP.w SMW_BufferFileSelectText_Entry3
endif
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_SaveFileLocations(Address)
namespace SMW_SaveFileLocations
%InsertMacroAtXPosition(<Address>)

Hi:
	db (!Define_SMW_Misc_SaveFileSize*$00)>>8
	db (!Define_SMW_Misc_SaveFileSize*$01)>>8
	db (!Define_SMW_Misc_SaveFileSize*$02)>>8
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	db (!Define_SMW_Misc_SaveFileSize*$03)>>8
endif

Lo:
	db (!Define_SMW_Misc_SaveFileSize*$00)
	db (!Define_SMW_Misc_SaveFileSize*$01)
	db (!Define_SMW_Misc_SaveFileSize*$02)
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	db (!Define_SMW_Misc_SaveFileSize*$03)
endif
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GameMode08_FileSelect(Address)
namespace SMW_GameMode08_FileSelect
%InsertMacroAtXPosition(<Address>)

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
InitializeZoneSelectionImage:
	db $52,$06,$C0,$0C
	db $FC,$38
	db $52,$10,$C0,$08
	db $FC,$38
	db $52,$06,$00,$01
	db $FC,$38
	db $FF

ZoneSelectionCursorPos:
	db $06,$46,$86,$C6,$10
	db $50,$90

ZoneSelectionCursorRange:
	db $07,$FF

ZoneSelectionCursorWrapAroundValue:
	db $00,$06
endif

Main:
	REP.b #$20
	LDA.w #$7393
	LDY.b #$20
	JSR.w SMW_FileSelectColorMath_Main
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #(!Joypad_Start>>8)|(!Joypad_B>>8)
	BNE.b CODE_009C6D
	LDA.b !RAM_SMW_IO_ControllerPress2
	BMI.b CODE_009C6D
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CODE_009C39
	LDY.b #!Define_SMW_Sound1DFC_ShootFireball
	STY.w !RAM_SMW_IO_SoundCh3
	LSR
	LSR
	LSR
	TAX
	LDY.w !RAM_SMW_Misc_ZoneSelectionCursorPos
	INY
	CMP.b #$01
	BNE.b CODE_009C2D
	DEY
	DEY

CODE_009C2D:
	TYA
	CMP.w ZoneSelectionCursorRange,x
	BNE.b CODE_009C36
	LDY.w ZoneSelectionCursorWrapAroundValue,x

CODE_009C36:
	STY.w !RAM_SMW_Misc_ZoneSelectionCursorPos

CODE_009C39:
	REP.b #$10
	LDY.w #$3D2E
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$1F
	CMP.b #$18
	BCC.b CODE_009C49
	LDY.w #$38FC

CODE_009C49:
	LDX.w #$0000

CODE_009C4C:
	LDA.w InitializeZoneSelectionImage,x
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	CPX.w #$0013
	BNE.b CODE_009C4C
	LDX.w !RAM_SMW_Misc_ZoneSelectionCursorPos
	LDA.w ZoneSelectionCursorPos,x
	STA.l SMW_StripeImageUploadTable[$06].HighByte
	REP.b #$20
	TYA
	STA.l SMW_StripeImageUploadTable[$08].LowByte
	SEP.b #$30
	RTS

CODE_009C6D:
	LDA.b #!Define_SMW_Sound1DFC_Coin
	STA.w !RAM_SMW_IO_SoundCh3
	SEP.b #$10
	LDA.w !RAM_SMW_Misc_ZoneSelectionCursorPos
	BEQ.b CODE_009C7C
	STZ.w !RAM_SMW_Misc_IntroLevelFlag

CODE_009C7C:
	INC.w !RAM_SMW_Misc_GameMode
	JSR.w SMW_InitializeSaveData_Main
elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	INC.w !RAM_SMW_Misc_GameMode
	LDA.l !SRAM_SMAS_Global_CurrentSaveFile
	STA.w !RAM_SMW_Misc_CurrentSaveFile
	TAX
	JSR.w SMW_BufferFileSelectText_CODE_009DB5
	BNE.b +
	STZ.w !RAM_SMW_Misc_IntroLevelFlag
	LDY.w #$0000
-:
	LDA.l !SRAM_SMW_MarioA_StartLocation,x
	STA.w !RAM_SMW_Overworld_SaveBuffer,y
	INX
	INY
	CPY.w #!Define_SMW_Misc_SaveFileSize-$02
	BCC.b -
+:
	SEP.b #$10
else
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	INC.w !RAM_SMW_Misc_GameMode
	LDA.l !SRAM_SMAS_Global_CurrentSaveFile
	TAX
	BRA.b CODE_009CEF

else
	LDY.b #$02
	JSR.w SMW_HandleMenuCursor_Entry2
	INC.w !RAM_SMW_Misc_GameMode
	CPX.b #$03
	BNE.b CODE_009CEF
endif
	STZ.w !RAM_SMW_Misc_WhichFileToErase
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDY.b #$0C
else
	LDX.b #$00
endif
	JMP.w SMW_BufferFileSelectText_Entry2

CODE_009CEF:
	STX.w !RAM_SMW_Misc_CurrentSaveFile
	JSR.w SMW_BufferFileSelectText_CODE_009DB5
	BNE.b CODE_009D22
	PHX
	STZ.w !RAM_SMW_Misc_IntroLevelFlag
	LDA.b #!SRAM_SMW_MarioB_StartLocation
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_009CFF:
	LDA.l !SRAM_SMW_MarioA_StartLocation,x
	PHX
	TYX
	STA.l !SRAM_SMW_MarioA_StartLocation,x
	PLX
	INX
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_009CFF
	PLX
	LDY.w #$0000
CODE_009D14:
	LDA.l !SRAM_SMW_MarioA_StartLocation,x
	STA.w !RAM_SMW_Overworld_SaveBuffer,y
	INX
	INY
	CPY.w #!Define_SMW_Misc_SaveFileSize-$02
	BCC.b CODE_009D14
CODE_009D22:
	SEP.b #$10
endif
	LDY.b #!Define_SMW_StripeImage_XPlayerGameText
	INC.w !RAM_SMW_Misc_GameMode
SetStripeImage:							; Note: This label is referenced in other routines.
	STY.b !RAM_SMW_Graphics_StripeImageToUpload
	LDX.b #$00
	JMP.w SMW_HandleMenuCursor_CODE_009ED4
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_FileSelectColorMath(Address)
namespace SMW_FileSelectColorMath
%InsertMacroAtXPosition(<Address>)

Main:
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	STY.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	SEP.b #$20
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_BufferFileSelectText(Address)
namespace SMW_BufferFileSelectText
%InsertMacroAtXPosition(<Address>)

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
Main:
	LDX.b #SMW_FileSelectText_SelectFile-SMW_FileSelectText_Main
	REP.b #$10
	LDY.w #$0000

Loop:
	LDA.l SMW_FileSelectText_Main,x
	PHX
	TYX
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	PLX
	INX
	INY
	CPY.w #$00CC
	BNE.b Loop
	SEP.b #$10
	RTS

UNK_009CB2:
	db $60

elseif !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
DATA_009CD2:
	dw $31D4,$38FC,$319D,$38FC
	dw $318D,$38FC,$38FC,$38FC

Main:
Entry2:
	STZ.b !RAM_SMW_Misc_ScratchRAM05
Entry3:
	STY.b !RAM_SMW_Misc_ScratchRAM06
	LDX.b #(SMW_FileSelectText_SelectFileEnd-SMW_FileSelectText_Main)+$02
-:
	LDA.l SMW_FileSelectText_Main-$01,x
	STA.l SMW_StripeImageUploadTable[$00].LowByte-$01,x
	DEX
	BNE.b -
	LDA.b #$76
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$02
CODE_009D5B:
	STX.b !RAM_SMW_Misc_ScratchRAM04
	LSR.b !RAM_SMW_Misc_ScratchRAM05
	BCS.b CODE_009DA6
	JSR.w CODE_009DB5
	BNE.b CODE_009DA6
	LDA.l !SRAM_SMW_MarioA_StartLocation+$8C,x
	SEP.b #$10

CODE_009D76:
	JSR.w SMW_HexToDec_Bank00
	TXY
CODE_009D7A:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	TYA
	BNE.b CODE_009D85
	LDY.b #$FC
CODE_009D85:
	TYA
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	LDA.b #$38
	STA.l SMW_StripeImageUploadTable[$01].HighByte,x
	STA.l SMW_StripeImageUploadTable[$02].HighByte,x
	REP.b #$20
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$09].LowByte,x
	LDY.b !RAM_SMW_Misc_ScratchRAM06

-:
	LDA.w DATA_009CD2,y
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	INX
	INX
	DEY
	DEY
	DEY
	DEY
	BPL.b -
	SEP.b #$20
CODE_009DA6:
	SEP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$2A
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	DEX
	BPL.b CODE_009D5B
	RTS

CODE_009DB5:
	LDA.w SMW_SaveFileLocations_Hi,x
	XBA
	LDA.w SMW_SaveFileLocations_Lo,x
	REP.b #$30
	TAX
	CLC
	ADC.w #!SRAM_SMW_MarioA_Backup
	TAY
CODE_009DC4:
	PHX
	PHY
	LDA.l !SRAM_SMW_MarioA_StartLocation+(!Define_SMW_Misc_SaveFileSize-$02),x
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	SEP.b #$20
	LDY.w #!Define_SMW_Misc_SaveFileSize-$02
CODE_009DD1:
	LDA.l !SRAM_SMW_MarioA_StartLocation,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM8A
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	BCC.b CODE_009DDE
	INC.b !RAM_SMW_Misc_ScratchRAM8B
CODE_009DDE:
	INX
	DEY
	BNE.b CODE_009DD1
	REP.b #$20
	PLY
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	CMP.w #!Define_SMW_ChecksumCompliment
	BEQ.b CODE_009DF7
	CPX.w #!SRAM_SMW_MarioA_Backup-$01
	BCS.b CODE_009DF7
	PHX
	TYX
	PLY
	BRA.b CODE_009DC4
CODE_009DF7:
	SEP.b #$20
	RTS
else
Main:
	LDX.b #SMW_FileSelectText_SelectFile-SMW_FileSelectText_Main
Entry2:
	STZ.b !RAM_SMW_Misc_ScratchRAM05
Entry3:
	REP.b #$10
	LDY.w #$0000
CODE_009D41:
	LDA.l SMW_FileSelectText_Main,x
	PHX
	TYX
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	PLX
	INX
	INY
	CPY.w #$00CC
	BNE.b CODE_009D41
	SEP.b #$10
	LDA.b #$84
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$02
CODE_009D5B:
	STX.b !RAM_SMW_Misc_ScratchRAM04
	LSR.b !RAM_SMW_Misc_ScratchRAM05
	BCS.b CODE_009DA6
	JSR.w CODE_009DB5
	BNE.b CODE_009DA6
	LDA.l !SRAM_SMW_MarioA_StartLocation+$8C,x
	SEP.b #$10
	CMP.b #!Define_SMW_Counter_TotalExits
	BCC.b CODE_009D76
	LDY.b #$87
	LDA.b #$88
	BRA.b CODE_009D7A

CODE_009D76:
	JSR.w SMW_HexToDec_Bank00
	TXY
CODE_009D7A:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	TYA
	BNE.b CODE_009D85
	LDY.b #$FC
CODE_009D85:
	TYA
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	LDA.b #$38
	STA.l SMW_StripeImageUploadTable[$01].HighByte,x
	STA.l SMW_StripeImageUploadTable[$02].HighByte,x
	REP.b #$20
	LDY.b #$03
CODE_009D98:
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	INX
	INX
	DEY
	BNE.b CODE_009D98
	SEP.b #$20
CODE_009DA6:
	SEP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$24
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	DEX
	BPL.b CODE_009D5B
	RTS

CODE_009DB5:
	LDA.w SMW_SaveFileLocations_Hi,x
	XBA
	LDA.w SMW_SaveFileLocations_Lo,x
	REP.b #$30
	TAX
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	ADC.w #(!Define_SMW_Misc_SaveFileSize*$04)
else
	ADC.w #(!Define_SMW_Misc_SaveFileSize*$03)
endif
	TAY
CODE_009DC4:
	PHX
	PHY
	LDA.l !SRAM_SMW_MarioA_StartLocation+(!Define_SMW_Misc_SaveFileSize-$02),x
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	SEP.b #$20
	LDY.w #!Define_SMW_Misc_SaveFileSize-$02
CODE_009DD1:
	LDA.l !SRAM_SMW_MarioA_StartLocation,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM8A
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	BCC.b CODE_009DDE
	INC.b !RAM_SMW_Misc_ScratchRAM8B
CODE_009DDE:
	INX
	DEY
	BNE.b CODE_009DD1
	REP.b #$20
	PLY
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	CMP.w #!Define_SMW_ChecksumCompliment
	BEQ.b CODE_009DF7
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	CPX.w #(!Define_SMW_Misc_SaveFileSize*$04)-$01
else
	CPX.w #(!Define_SMW_Misc_SaveFileSize*$03)-$01
endif
	BCS.b CODE_009DF7
	PHX
	TYX
	PLY
	BRA.b CODE_009DC4
CODE_009DF7:
	SEP.b #$20
	RTS

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
SMASEntry:
	JSR.w CODE_009DB5
	SEP.b #$10
	RTL
endif
endif
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GameMode0A_PlayerSelect(Address)
namespace SMW_GameMode0A_PlayerSelect
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold2CopyP2
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP2
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b NotPressingXY
	JML.l SMAS_ResetToSMASTitleScreen_Main

elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP2
	STA.b !RAM_SMW_IO_ControllerPress1
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress2CopyP2
	STA.b !RAM_SMW_IO_ControllerPress2
	ORA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b NotPressingXY
	JML.l SMAS_CopyOfResetToSMASTitleScreen_Main
else
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b NotPressingXY
	DEC.w !RAM_SMW_Misc_GameMode
	JMP.w SMW_GameMode09_EraseFile_CODE_009B2C
endif
NotPressingXY:
	LDY.b #$04
	JSR.w SMW_HandleMenuCursor_Entry2
	STX.w !RAM_SMW_Flag_TwoPlayerGame
	JSR.w SMW_LoadSaveBufferData_Main
	JSL.l SMW_LoadOverworldLayer2AndEventsTilemaps_Main
Entry2:								; Info: Called after selecting "Continue" after a game over.
	LDA.b #!Define_SMW_LevelMusic_MusicFade
	STA.w !RAM_SMW_IO_MusicCh1
	LDA.b #$FF
	STA.w !RAM_SMW_Player_LuigisLives
	LDX.w !RAM_SMW_Flag_TwoPlayerGame
	LDA.b #!Define_SMW_Counter_StartingLives
InitializeLivesTo5Loop:
	STA.w !RAM_SMW_Player_MariosLives,x
	DEX
	BPL.b InitializeLivesTo5Loop
	STA.w !RAM_SMW_Player_CurrentLifeCount
	STZ.w !RAM_SMW_Player_CurrentCoinCount
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	STZ.b !RAM_SMW_Player_CurrentPowerUp
	STZ.w !RAM_SMW_Player_CurrentItemBox
	STZ.w !RAM_SMW_Flag_ShowContinueAndEnd
	REP.b #$20
	STZ.w !RAM_SMW_Player_MariosCoins
	STZ.w !RAM_SMW_Player_MariosPowerUp
	STZ.w !RAM_SMW_Player_MariosYoshi
	STZ.w !RAM_SMW_Player_CurrentItemBox			; Optimization: This should be moved to before/after the REP/SEP so that $0DC3 can be 100% free RAM.
	STZ.w !RAM_SMW_Player_MarioBonusStars
	STZ.w !RAM_SMW_Player_MarioScoreLo
	STZ.w !RAM_SMW_Player_LuigiScoreLo
	SEP.b #$20
	STZ.w !RAM_SMW_Player_MarioScoreHi
	STZ.w !RAM_SMW_Player_LuigiScoreHi
	STZ.w !RAM_SMW_Misc_ExitLevelAction
	STZ.w !RAM_SMW_Player_CurrentCharacter
CODE_009E62:
	JSR.w SMW_SetKeepGameModeActiveTimer_OneFrame
	LDY.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	JMP.w SMW_GameMode07_TitleScreenDemo_FadeOutToOverworld
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SaveGame(Address)
namespace SMW_SaveGame
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	PHB
	PHK
	PLB
	LDX.w !RAM_SMW_Misc_CurrentSaveFile
	LDA.w SMW_SaveFileLocations_Hi,x
	XBA
	LDA.w SMW_SaveFileLocations_Lo,x
	REP.b #$10
	TAX
CODE_009BD9:
	LDY.w #$0000
	STY.b !RAM_SMW_Misc_ScratchRAM8A
CODE_009BDE:
	LDA.w !RAM_SMW_Overworld_SaveBuffer,y
	STA.l !SRAM_SMW_MarioA_StartLocation,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM8A
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	BCC.b CODE_009BEE
	INC.b !RAM_SMW_Misc_ScratchRAM8B
CODE_009BEE:
	INX
	INY
	CPY.w #!Define_SMW_Misc_SaveFileSize-$02
	BCC.b CODE_009BDE
	REP.b #$20
	LDA.w #!Define_SMW_ChecksumCompliment
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM8A
	STA.l !SRAM_SMW_MarioA_StartLocation,x
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	CPX.w #(!Define_SMW_Misc_SaveFileSize*$04)
else
	CPX.w #(!Define_SMW_Misc_SaveFileSize*$03)
endif
	BCS.b CODE_009C0F
	TXA
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	ADC.w #(!Define_SMW_Misc_SaveFileSize*$03)+$02
else
	ADC.w #(!Define_SMW_Misc_SaveFileSize*$02)+$02
endif
	TAX
	SEP.b #$20
	BRA.b CODE_009BD9

CODE_009C0F:
	SEP.b #$30
	PLB
endif
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DisplayingContinueEnd(Address)
namespace SMW_DisplayingContinueEnd
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
endif
	RTL

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
Sub:
	DEC
	JSL.l SMW_ExecutePtr_Absolute

Ptrs009B8D:
	dw Initialize
	dw Display

Initialize:
	LDY.b #!Define_SMW_StripeImage_ContinueEndText
	JSR.w SMW_GameMode08_FileSelect_SetStripeImage
	INC.w !RAM_SMW_Flag_ShowContinueAndEnd
endif
	RTS

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
Display:
	LDY.b #$00
	JSR.w SMW_HandleMenuCursor_Main
	TXA
	BNE.b LoadTitlescreen
	JMP.w SMW_GameMode0A_PlayerSelect_Entry2

LoadTitlescreen:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	JML.l SMAS_ResetToSMASTitleScreen_Main
elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	JML.l SMAS_CopyOfResetToSMASTitleScreen_Main
else
	JMP.w SMW_GameMode07_TitleScreenDemo_FadeOutToTitleScreen
endif
endif
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode07_TitleScreenDemo(Address)
namespace SMW_GameMode07_TitleScreenDemo
%InsertMacroAtXPosition(<Address>)

ItrCntrlrSqnc:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $41,$0D,$C1,$30,$00,$10,$42,$26
	db $41,$58,$81,$17,$00,$7A,$82,$0C
	db $00,$34,$C1,$2A,$41,$50,$C1,$0C
	db $00,$30,$01,$20,$E1,$01,$00,$60
	db $41,$30,$80,$10,$00,$30,$41,$4E
	db $00,$20,$60,$01,$00,$30,$60,$01
	db $00,$30,$60,$01,$00,$30,$60,$01
	db $00,$30,$60,$01,$00,$30,$41,$15
	db $C1,$30,$00,$30,$FF
else
	db $41,$0F,$C1,$30,$00,$10,$42,$20
	db $41,$70,$81,$11,$00,$80,$82,$0C
	db $00,$30,$C1,$30,$41,$60,$C1,$10
	db $00,$40,$01,$30,$E1,$01,$00,$60
	db $41,$4E,$80,$10,$00,$30,$41,$58
	db $00,$20,$60,$01,$00,$30,$60,$01
	db $00,$30,$60,$01,$00,$30,$60,$01
	db $00,$30,$60,$01,$00,$30,$41,$1A
	db $C1,$30,$00,$30,$FF
endif

Main:
	JSR.w SMW_CheckWhichControllersArePluggedIn_Main
	JSR.w CODE_009CBE
	BNE.b InitializeFileSelect
	JSR.w SMW_DamagePlayer_DisableButtons
#LM000Hijack_CustomTitleScreenDemo:
	LDX.w !RAM_SMW_Misc_TitleScreenMovementDataIndex
	DEC.w !RAM_SMW_Timer_TitleScreenInputTimer
	BNE.b CODE_009C82
	LDA.w ItrCntrlrSqnc+$01,x
	STA.w !RAM_SMW_Timer_TitleScreenInputTimer
	INX
	INX
	STX.w !RAM_SMW_Misc_TitleScreenMovementDataIndex
CODE_009C82:
	LDA.w ItrCntrlrSqnc-$02,x
	CMP.b #$FF
	BNE.b CODE_009C8F
FadeOutToTitleScreen:
	LDY.b #!Define_SMW_GameMode02_FadeOutToTitleScreen
FadeOutToOverworld:							; Note: This label is called in the GameMode0A code and has nothing to do with the title screen demo
	STY.w !RAM_SMW_Misc_GameMode
	RTS

CODE_009C8F:
	AND.b #(!Joypad_DPadR>>8)|(!Joypad_DPadL>>8)|(!Joypad_DPadD>>8)|(!Joypad_DPadU>>8)|(!Joypad_Start>>8)|!Joypad_X|(!Joypad_Y>>8)|!Joypad_A|(!Joypad_B>>8)
	STA.b !RAM_SMW_IO_ControllerHold1
	CMP.w ItrCntrlrSqnc-$02,x
	BNE.b CODE_009C9A
	AND.b #(!Joypad_DPadR>>8)|(!Joypad_DPadL>>8)|(!Joypad_DPadD>>8)|(!Joypad_DPadU>>8)|(!Joypad_Start>>8)|(!Joypad_B>>8)
CODE_009C9A:
	STA.b !RAM_SMW_IO_ControllerPress1
	JMP.w SMW_GameMode14_InLevel_Main

InitializeFileSelect:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDA.l !SRAM_SMAS_Global_RunningDemoFlag
	BNE.b +
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold2CopyP2
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP2
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b ++
+:
	JML.l SMAS_ResetToSMASTitleScreen_Main

++:
elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP2
	AND.b #!Joypad_Y>>8
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress2CopyP2
	AND.b #!Joypad_X
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b +
	JML.l SMAS_CopyOfResetToSMASTitleScreen_Main

+:
endif
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	LDA.b #$04
	STA.w !REGISTER_MainScreenLayers
	LDA.b #$13
	STA.w !REGISTER_SubScreenLayers
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	STZ.w !RAM_SMW_Mirror_HDMAEnable				; Glitch: This disables all HDMA effects you may have active on the title screen when accessing the file select menu.
endif
InitializeSaveData:							; Note: This label is only referenced in the GameMode09 code.
	LDA.b #!Define_SMW_LevelID_IntroSublevel
	STA.w !RAM_SMW_Misc_IntroLevelFlag
	JSR.w SMW_InitializeSaveData_Main
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDY.b #$0E
	JSR.w SMW_BufferFileSelectText_Main
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$4E].LowByte
elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
else
	JSR.w SMW_BufferFileSelectText_Main
endif
	JMP.w SMW_GameMode01_ShowNintendoPresents_CODE_009417

CODE_009CBE:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold2CopyP2
	AND.b #!Joypad_X|!Joypad_A
	BNE.b Return009CCA
	LDA.w !RAM_SMW_IO_ControllerHold1CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP2
else
	LDA.b !RAM_SMW_IO_ControllerHold2
	AND.b #!Joypad_X|!Joypad_A
	BNE.b Return009CCA
	LDA.b !RAM_SMW_IO_ControllerHold1
endif
	AND.b #(!Joypad_Start>>8)|(!Joypad_Select>>8)|!Joypad_X|(!Joypad_Y>>8)|!Joypad_A|(!Joypad_B>>8)
	BNE.b Return009CCA						;\ Optimization: Branch to Z if not 0, otherwise go to Z.
Return009CCA:								;/
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CloseOverworldPrompt(Address)
namespace SMW_CloseOverworldPrompt
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_Pointer_DisplayOverworldPrompt
	INC.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	LDY.b #!Define_SMW_StripeImage_CloseOverworldPrompt
	JSR.w SMW_GameMode08_FileSelect_SetStripeImage
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetEnemyRollcallParallaxHDMA(Address)
namespace SMW_SetEnemyRollcallParallaxHDMA
%InsertMacroAtXPosition(<Address>)

Init:
	LDA.b #$58
	STA.w SMW_ParallaxScrollHDMA[$00].Scanline1
	STA.w SMW_ParallaxScrollHDMA[$01].Scanline1
	STA.w SMW_ParallaxScrollHDMA[$02].Scanline1
	STZ.w SMW_ParallaxScrollHDMA[$00].End
	STZ.w SMW_ParallaxScrollHDMA[$01].End
	STZ.w SMW_ParallaxScrollHDMA[$02].End
	LDX.b #$04
CODE_0092C8:
	LDA.w PARAMS_009313,x
	STA.w HDMA[$05].Parameters,x
	LDA.w PARAMS_009318,x
	STA.w HDMA[$06].Parameters,x
	LDA.w PARAMS_00931D,x
	STA.w HDMA[$07].Parameters,x
	DEX
	BPL.b CODE_0092C8
	LDA.b #$00
	STA.w HDMA[$05].IndirectSourceBank
	STA.w HDMA[$06].IndirectSourceBank
	STA.w HDMA[$07].IndirectSourceBank
	LDA.b #$E0
	STA.w !RAM_SMW_Mirror_HDMAEnable
Main:
	REP.b #$30
	LDY.w #$0008
	LDX.w #$0014
CODE_0092F5:
	LDA.w !RAM_SMW_Mirror_CurrentLayer1XPosLo,y
	STA.w SMW_ParallaxScrollHDMA[$00].PosLo1,x
	STA.w SMW_ParallaxScrollHDMA[$00].PosLo2,x
	LDA.w !RAM_SMW_Misc_Layer1XPosLo,y
	STA.w SMW_ParallaxScrollHDMA[$00].PosLo3,x
	TXA
	SEC
	SBC.w #$000A
	TAX
	DEY
	DEY
	DEY
	DEY
	BPL.b CODE_0092F5
	SEP.b #$30
	RTS

PARAMS_009313:
	db $02,!REGISTER_BG1HorizScrollOffset
	dl SMW_ParallaxScrollHDMA[$00].Scanline1

PARAMS_009318:
	db $02,!REGISTER_BG2HorizScrollOffset
	dl SMW_ParallaxScrollHDMA[$01].Scanline1

PARAMS_00931D:
	db $02,!REGISTER_BG3HorizScrollOffset
	dl SMW_ParallaxScrollHDMA[$02].Scanline1
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateEntirePalette(Address)
namespace SMW_UpdateEntirePalette
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Palettes_PaletteMirror
	STZ.w !RAM_SMW_Palettes_PaletteMirror+$01
	STZ.w !REGISTER_CGRAMAddress
	LDX.b #$06
Loop:
	LDA.w PARAMS_009249,x
	STA.w DMA[$02].Parameters,x
	DEX
	BPL.b Loop
	LDA.b #$04
	STA.w !REGISTER_DMAEnable
	RTS

PARAMS_009249:
	db $00,!REGISTER_WriteToCGRAMPort
	dl !RAM_SMW_Palettes_PaletteMirror
	dw $0200
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckWhichControllersArePluggedIn(Address)
namespace SMW_CheckWhichControllersArePluggedIn
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !REGISTER_JoypadSerialPort1
	LSR
	LDA.w !REGISTER_JoypadSerialPort2
	ROL
	AND.b #$03
	BEQ.b NoControllerPluggedIn
	CMP.b #$03
	BNE.b OneControllerPluggedIn
	ORA.b #$80
OneControllerPluggedIn:
	DEC
NoControllerPluggedIn:
	STA.w !RAM_SMW_IO_ControllersPluggedIn
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_GenericSpriteOAMData(Address)
namespace SMW_GenericSpriteOAMData
%InsertMacroAtXPosition(<Address>)

Tiles:
base $000000
.Koopa:
	db $82,$A0		;\ Stand/Walk 1
	db $82,$A2		;| Walk 2
	db $84,$A4		;| Turn
	db $8C			;| Shell 1
	db $8A			;| Shell 2
	db $8E			;/ Shell 3

.NakedKoopa:
	db $C8
	db $CA
	db $CA
	db $CE
	db $CC
	db $86
	db $4E

.NakedBlueKoopa:
	db $E0
	db $E2
	db $E2
	db $CE
	db $E4
	db $E0
	db $E0

.ParachuteGoomba:
	db $A3,$A3,$B3,$B3
	db $E9,$E8,$F9,$F8
	db $E8,$E9,$F8,$F9
	db $E2,$E6

.Goomba:
	db $AA
	db $A8
	db $A8
	db $AA

.ParachuteBomb:
	db $A2,$A2,$B2,$B2
	db $C3,$C2,$D3,$D2
	db $C2,$C3,$D2,$D3
	db $E2,$E6

.BobOmb:
	db $CA
	db $CC
	db $CA

.PiranhaPlant:
	db $AC,$CE
	db $AE,$CE
	db $83,$83,$C4,$C4
	db $83,$83,$C5,$C5

.Football:
	db $8A

.BulletBill:
	db $A6
	db $A4
	db $A6
	db $A8

.Spiny:
	db $80
	db $82
	db $80

.SpinyEgg:
	db $84,$84,$84,$84
	db $94,$94,$94,$94

.DisplayMessage:					;\ Todo: Unused?
	db $A0,$B0,$A0,$D0				;/

.BuzzyBeetle:
	db $82
	db $80
	db $82
	db $00
	db $00
	db $00
	db $86
	db $84
	db $88

.SpikeTop:
	db $EC
	db $8C
	db $A8
	db $AA
	db $8E
	db $AC

.HoppingFlame:
	db $AE
	db $8E

.Lakitu:
	db $EC,$EE
	db $CE,$EE
	db $A8,$EE

.MovingLedgeHole:					;\ Todo: Unused?
	db $40,$40					;/

.Magikoopa:
	db $A0,$C0
	db $A0,$C0
	db $A4,$C4
	db $A4,$C4
	db $A0,$C0
	db $A0,$C0

.SpriteTurnBlock:
	db $40

.NetKoopa:
	db $07,$27
	db $4C,$29
	db $4E,$2B
	db $82,$A0
	db $84,$A4

.CheepCheep:
	db $67,$69,$88,$CE

.Thwomp:						;\ Todo: Unused?
	db $8E,$AE					;/

.Thwimp:
	db $A2,$A2,$B2,$B2

.YoshiEgg:
	db $00

.BabyYoshi:						;\ Todo: Unused?
	db $40						;|
	db $44						;|
	db $42						;|
	db $2C						;/

.PSwitch:
	db $42

.PortableSpringboard:
	db $28,$28,$28,$28
	db $4C,$4C,$4C,$4C
	db $83,$83,$6F,$6F

.ThrowingDryBones:					;\ Todo: Unused?
	db $AC,$BC					;|
	db $AC,$A6					;/

.BonyBeetle:
	db $8C
	db $AA
	db $86
	db $84

.LedgeDryBones:						;\ Todo: Unused?
	db $DC,$EC					;|
	db $DE,$EE					;/

.Podoboo:
	db $06,$06,$16,$16
	db $07,$07,$17,$17
	db $16,$16,$06,$06
	db $17,$17,$07,$07

.LudwigFire:						;\ Todo: Unused?
	db $84,$86					;/

.Yoshi:							;\ Todo: Unused?
	db $00,$00					;|
	db $00,$0E					;|
	db $2A,$24					;|
	db $02,$06					;|
	db $0A,$20					;|
	db $22,$28					;|
	db $26,$2E					;|
	db $40,$42					;|
	db $0C						;/

.Sprite036:
	db $04,$2B

.Eerie:
	db $6A
	db $ED

.Boo:
	db $88
	db $8C
	db $A8
	db $8E
	db $AA
	db $AE
	db $8C
	db $88
	db $A8

.RipVanFish:
	db $AE
	db $AC
	db $8C
	db $8E

.VerticalDolphin:
	db $CE,$EE

.DigginChuckRock:
	db $C4
	db $C6

.MontyMole:
	db $82
	db $84
	db $86

.LedgeMontyDirtMole:
.GoalSphere:
	db $8C

.GroundMontyDirtMole:
	db $CE,$CE,$88,$89
	db $CE,$CE,$89,$88

.SumoLightning:
	db $F3,$CE,$F3,$CE

.Ninji:
	db $A7
	db $A9
base off

TilesOffset:
	db Tiles_NakedKoopa,Tiles_NakedKoopa,Tiles_NakedBlueKoopa,Tiles_NakedKoopa
	db Tiles_Koopa,Tiles_Koopa,Tiles_Koopa,Tiles_Koopa
	db Tiles_Koopa,Tiles_Koopa,Tiles_Koopa,Tiles_Koopa
	db Tiles_Koopa,Tiles_BobOmb,Tiles_Koopa,Tiles_Goomba
	db Tiles_Goomba,Tiles_BuzzyBeetle,Tiles_Koopa,Tiles_Spiny
	db Tiles_SpinyEgg,Tiles_CheepCheep,Tiles_CheepCheep,Tiles_CheepCheep
	db Tiles_CheepCheep,Tiles_DisplayMessage,Tiles_PiranhaPlant,Tiles_Football
	db Tiles_BulletBill,Tiles_HoppingFlame,Tiles_Lakitu,Tiles_Magikoopa
	db Tiles_Koopa,Tiles_Koopa,Tiles_NetKoopa,Tiles_NetKoopa
	db Tiles_NetKoopa,Tiles_NetKoopa,Tiles_Thwomp,Tiles_Thwimp
	db Tiles_Koopa,Tiles_Koopa,Tiles_PiranhaPlant,Tiles_SumoLightning
	db Tiles_YoshiEgg,Tiles_BabyYoshi,Tiles_SpikeTop,Tiles_PortableSpringboard
	db Tiles_ThrowingDryBones,Tiles_BonyBeetle,Tiles_LedgeDryBones,Tiles_Podoboo
	db Tiles_LudwigFire,Tiles_Yoshi,Tiles_Sprite036,Tiles_Boo
	db Tiles_Eerie,Tiles_Eerie,Tiles_VerticalDolphin,Tiles_VerticalDolphin
	db Tiles_VerticalDolphin,Tiles_RipVanFish,Tiles_PSwitch,Tiles_ParachuteGoomba
	db Tiles_ParachuteBomb,Tiles_VerticalDolphin,Tiles_VerticalDolphin,Tiles_VerticalDolphin
	db Tiles_Koopa,Tiles_DigginChuckRock,Tiles_Koopa,Tiles_CheepCheep
	db Tiles_DigginChuckRock,Tiles_Koopa,Tiles_GoalSphere,Tiles_MontyMole
	db Tiles_SpriteTurnBlock,Tiles_MontyMole,Tiles_MontyMole,Tiles_PiranhaPlant
	db Tiles_PiranhaPlant,Tiles_Ninji,Tiles_MovingLedgeHole,Tiles_SpriteTurnBlock

XDisp:
	db $00,$08,$00,$08

YDisp:
	db $00,$00,$08,$08

Prop:
	db $00,$00,$00,$00
	db $00,$40,$00,$40
	db $00,$40,$80,$C0
	db $40,$40,$00,$00
	db $40,$00,$C0,$80
	db $40,$40,$40,$40
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_GenericGFXRtDraw4Tiles8x8Square(Address)
namespace SMW_GenericGFXRtDraw4Tiles8x8Square
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_GenericGFXRtDraw4Tiles8x8Square(Address)
namespace SMW_GenericGFXRtDraw4Tiles8x8Square
%InsertMacroAtXPosition(<Address>)

Sub:
	LDY.b #$00
Entry1:								; Note: This is only called by the portable springboard (?)
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STY.b !RAM_SMW_Misc_ScratchRAM0F
	JSR.w SMW_GetDrawInfo_Bank01
	LDY.b !RAM_SMW_Misc_ScratchRAM0F			;\ Optimization: Why load $0F into Y then transfer it into A when Y is not used before being overwritten?
	TYA							;/
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_Table7E1602,x
	ASL
	ASL
	ADC.w SMW_GenericSpriteOAMData_TilesOffset,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM04
	PHX
Loop:
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w SMW_GenericSpriteOAMData_XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w SMW_GenericSpriteOAMData_YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	LDA.w SMW_GenericSpriteOAMData_Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	LDA.w SMW_GenericSpriteOAMData_Prop,x
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b Loop
	PLX
	LDA.b #$03
	LDY.b #$00
	JSR.w SMW_FinishOAMWrite_Sub
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GenericGFXRtDraw2Tiles16x16sStacked(Address)
namespace SMW_GenericGFXRtDraw2Tiles16x16sStacked
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	BPL.b RightsideUp
	JSR.w UpsideDown
	RTS

RightsideUp:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TYA
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BCS.b CODE_019D81
	ADC.b #$04
CODE_019D81:
	TAY
	PHY
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_Table7E1602,x
	ASL
	CLC
	ADC.w SMW_GenericSpriteOAMData_TilesOffset,y
	TAX
	PLY
	LDA.w SMW_GenericSpriteOAMData_Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_GenericSpriteOAMData_Tiles+$01,x
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].YDisp,y
CODE_019DA9:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	LDA.b #$00
	ORA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	BCS.b CODE_019DBE
	ORA.b #$40
CODE_019DBE:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	JSR.w SMW_GenericGFXRtMoveTileOffscreenVertically_Main
	RTS

UpsideDown:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TYA
	CLC
	ADC.b #$08
	TAY
	PHY
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_Table7E1602,x
	ASL
	CLC
	ADC.w SMW_GenericSpriteOAMData_TilesOffset,y
	TAX
	PLY
	LDA.w SMW_GenericSpriteOAMData_Tiles,x
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w SMW_GenericSpriteOAMData_Tiles+$01,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].YDisp,y
	JMP.w CODE_019DA9
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_GenericGFXRtDraw1Tile16x16(Address)
namespace SMW_GenericGFXRtDraw1Tile16x16
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub_Entry1
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_GenericGFXRtDraw1Tile16x16(Address)
namespace SMW_GenericGFXRtDraw1Tile16x16
%InsertMacroAtXPosition(<Address>)

Sub:
.Entry2:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	BRA.b CODE_019F0F

.Entry1:
	STZ.b !RAM_SMW_Misc_ScratchRAM04
CODE_019F0F:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x			;\ Optimization: !RAM_SMW_Misc_ScratchRAM02 isn't used in this routine.
	STA.b !RAM_SMW_Misc_ScratchRAM02			;/
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_Table7E1602,x
	CLC
	ADC.w SMW_GenericSpriteOAMData_TilesOffset,y
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	TAX
	LDA.w SMW_GenericSpriteOAMData_Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	LDA.b #$00
	ORA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	BCS.b CODE_019F44
	EOR.b #$40
CODE_019F44:
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	JSR.w SMW_GenericGFXRtMoveTileOffscreenVertically_Main
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GenericGFXRtMoveTileOffscreenVertically(Address)
namespace SMW_GenericGFXRtMoveTileOffscreenVertically
%InsertMacroAtXPosition(<Address>)

; Optimization: Junk routine. See ROUTINE_SMW_GetDrawInfo for an explaination of how to disable this routine.
; This routine is like a poor man's version of FinishOAMWrite that is likely an old leftover routine.

Main:
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BEQ.b Return01A40A
	PHX
	LSR
	BCC.b CODE_01A3F8
	PHA
	LDA.b #$01
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	TYA
	ASL
	ASL
	TAX
	LDA.b #$80
	STA.w SMW_OAMBuffer[$40].XDisp,x
	PLA
CODE_01A3F8:
	LSR
	BCC.b CODE_01A409
	LDA.b #$01
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	TYA
	ASL
	ASL
	TAX
	LDA.b #$80
	STA.w SMW_OAMBuffer[$41].XDisp,x
CODE_01A409:
	PLX
Return01A40A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DisplayMessage(Address)
namespace SMW_DisplayMessage
%InsertMacroAtXPosition(<Address>)

DATA_05A580:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	dw $6751,$2751,$E750,$A750
else
	dw $A751,$8751,$6751,$4751
	dw $2751,$0751,$E750,$C750
endif

DATA_05A590:
	db $14,$45,$3F,$08,$00,$29,$AA,$27
	db $26,$84,$95,$A9,$15,$13,$CE,$A7
	db $A4,$25,$A5,$05,$A6,$2A,$28

DATA_05A5A7:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	dw LevelMsg00,LevelMsg00,LevelMsg00,LevelMsg00
	dw LevelMsg01,LevelMsg02,LevelMsg03,LevelMsg04
	dw LevelMsg05,LevelMsg06,LevelMsg07,LevelMsg08
	dw LevelMsg09,LevelMsg0A,LevelMsg0B,LevelMsg0C
	dw LevelMsg0D,LevelMsg0E,LevelMsg0F,LevelMsg10
	dw LevelMsg11,LevelMsg12,LevelMsg13,LevelMsg14
	dw LevelMsg15
else
	dw LevelMsg01,LevelMsg01,LevelMsg01,LevelMsg01
	dw LevelMsg00,LevelMsg05,LevelMsg08,LevelMsg0A
	dw LevelMsg0C,LevelMsg11,LevelMsg0F,LevelMsg06
	dw LevelMsg10,LevelMsg13,LevelMsg15,LevelMsg09
	dw LevelMsg14,LevelMsg0D,LevelMsg0E,LevelMsg12
	dw LevelMsg0B,LevelMsg07,LevelMsg02,LevelMsg04
	dw LevelMsg03
endif

DATA_05A5D9:
	base $0000
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%InsertVersionExclusiveFile(incsrc, ../SMW/strings/LevelMessageText_, SMW_J.asm, )
else
	%InsertVersionExclusiveFile(incsrc, ../SMW/strings/LevelMessageText_, SMW_U.asm, )
endif
	base off

RemoveTextBox:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%InsertVersionExclusiveFile(incbin, ../SMW/images/menus/NoText_, SMW_J.bin, )
else
	%InsertVersionExclusiveFile(incbin, ../SMW/images/menus/NoText_, SMW_U.bin, )
endif

DATA_05B106:
	db $4C,$50

DATA_05B108:
	db $50,$00

DATA_05B10A:
	db $04,$FC

Main:
;$05B10C
	PHB
	PHK
	PLB
	LDX.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	CMP.w DATA_05B108,x
	BNE.b CODE_05B191
	TXA
	BEQ.b ExpandingMessage
	STZ.w !RAM_SMW_Misc_DisplayMessage
	STZ.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	STZ.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	STZ.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	STZ.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	STZ.w !RAM_SMW_Mirror_HDMAEnable				; Glitch: This STZ should be TRB and an LDA.b #$80 should be added before this line, or else displaying a message will disable other HDMA channels.
	LDA.b #$02
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	BRA.b CODE_05B18E						; Optimization: PLB : RTL would do the same thing in fewer cycles.

ExpandingMessage:
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	ORA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BEQ.b CODE_05B16E
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_05B18E
	DEC.w !RAM_SMW_Timer_DisplaySpecialMessage
	BNE.b CODE_05B18E
	PLB
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_05B16E
	DEC.w !RAM_SMW_Timer_DisplaySpecialMessage
	BNE.b CODE_05B16E
else
	LDA.w !RAM_SMW_Timer_DisplaySpecialMessage
	BEQ.b CODE_05B16E
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_05B18E
	DEC.w !RAM_SMW_Timer_DisplaySpecialMessage
	BNE.b CODE_05B18E
endif
	LDA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	BEQ.b SetInitialYPosForIntroMarch
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	BEQ.b SetInitialYPosForIntroMarch
CODE_05B14F:
	PLB
else
	BEQ.b CODE_05B16E
CODE_05B14F:
	PLB
endif
	INC.w !RAM_SMW_Overworld_CheckIfEventPassedFlag		;\ Optimization: Junk
	LDA.b #$01						;|
	STA.w !RAM_SMW_Flag_ActivateOverworldEvent		;/
	BRA.b ExitToOverworldForSwitchBlockEvent

SetInitialYPosForIntroMarch:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	PLB
endif
	LDA.b #$8E
	STA.w !RAM_SMW_Overworld_MarioYPosLo			;\ LM: Moving Mario on the overworld will cause LM to NOP this line to disable the goal walk.
								;| This has the side effect of the game not autosaving after the goal walk though!
								;| All FuSoYa has to do to fix this is put a JSL.l to the save routine one byte earlier, but he seemed reluctant to do that.
								;/ Alternatively, he could add a way to modify the goal walk, and I even provided the ASM to do so, but he wasn't interested.
ExitToOverworldNoEvent:
	STZ.w !RAM_SMW_Misc_IntroLevelFlag
	LDA.b #$00
ExitToOverworldForSwitchBlockEvent:
	STA.w !RAM_SMW_Misc_ExitLevelAction
	LDA.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	STA.w !RAM_SMW_Misc_GameMode
	RTL

CODE_05B16E:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_Start>>8)|(!Joypad_Select>>8)|!Joypad_X|(!Joypad_Y>>8)|!Joypad_A|(!Joypad_B>>8)
	BEQ.b CODE_05B18E
	EOR.b !RAM_SMW_IO_ControllerPress1
	AND.b #(!Joypad_Start>>8)|(!Joypad_Select>>8)|(!Joypad_Y>>8)|(!Joypad_B>>8)
	BEQ.b CODE_05B186
	LDA.b !RAM_SMW_IO_ControllerHold2
	AND.b #!Joypad_X|!Joypad_A
	BEQ.b CODE_05B18E
	EOR.b !RAM_SMW_IO_ControllerPress2
	AND.b #!Joypad_X|!Joypad_A
	BNE.b CODE_05B18E
CODE_05B186:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	LDA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BNE.b CODE_05B14F
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	BNE.b SetInitialYPosForIntroMarch
else
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	BNE.b SetInitialYPosForIntroMarch
endif
	INC.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
CODE_05B18E:
	JMP.w CODE_05B299						; Optimization: PLB : RTL would do the same thing in 1 fewer byte.

CODE_05B191:
	CMP.w DATA_05B106,x
	BNE.b CODE_05B1A0
	TXA
	BEQ.b DisplayText
	JSR.w RemoveSwitchBlocks
	LDA.b #!Define_SMW_StripeImage_RemoveTextBox
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
CODE_05B1A0:
	JMP.w CODE_05B250

DisplayText:
	LDX.b #$16							;\ LM: Inserts a JSL.l to a custom message text routine at $03BB90, as well as a JMP.w that skips the below code up to CODE_05B250
CODE_05B1A5:								;| This hijack mainly allows you to have 2 messages per overworld level and not be limited to only being able to edit the messages SMW originally used.
	LDY.b #$01							;|
	LDA.w DATA_05A590,x						;|
	BPL.b CODE_05B1AF						;|
	INY								;|
	AND.b #$7F							;|
CODE_05B1AF:								;|
	CPY.w !RAM_SMW_Misc_DisplayMessage				;|
	BNE.b CODE_05B1B9						;|
	CMP.w !RAM_SMW_Overworld_LevelNumberLo				;|
	BEQ.b CODE_05B1BC						;|
CODE_05B1B9:								;|
	DEX								;|
	BNE.b CODE_05B1A5						;|
CODE_05B1BC:								;|
	LDY.w !RAM_SMW_Misc_DisplayMessage				;|
	CPY.b #$03							;|
	BNE.b CODE_05B1C5						;|
	LDX.b #$18							;|
CODE_05B1C5:								;|
	CPX.b #$04							;|
	BCS.b CODE_05B1D1						;|
	INX								;|
	STX.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1			;|
	DEX								;|
	JSR.w DrawSwitchBlocks						;|
CODE_05B1D1:								;|
	CPX.b #$16							;|
	BNE.b CODE_05B1DB						;|
	LDA.w !RAM_SMW_Player_RidingYoshiFlag				;|
	BEQ.b CODE_05B1DB						;|
	INX								;|
CODE_05B1DB:								;|
	TXA								;|
	ASL								;|
	TAX								;|
	REP.b #$20							;|
	LDA.w DATA_05A5A7,x						;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	REP.b #$10							;|
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo			;|
	TAX								;|
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00			;|
	LDY.w #$0006							;|
CODE_05B1EF:								;|
	LDA.w DATA_05A580,y						;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x			;|
	XBA								;|
	CLC								;|
	ADC.w #$0020							;|
	XBA								;|
	STA.l SMW_StripeImageUploadTable[$14].LowByte,x			;|
	LDA.w #$2300							;|
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x			;|
	STA.l SMW_StripeImageUploadTable[$15].LowByte,x			;|
else									;|
	LDY.w #$000E							;|
CODE_05B1EF:								;|
	LDA.w DATA_05A580,y						;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x			;|
	LDA.w #$2300							;|
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x			;|
endif									;|
	PHY								;|
	SEP.b #$20							;|
	LDA.b #$12							;|
	STA.b !RAM_SMW_Misc_ScratchRAM02				;|
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00			;|
	LDY.b !RAM_SMW_Misc_ScratchRAM00				;|
CODE_05ADB2:								;|
	LDA.w DATA_05A5D9,y						;|
	CMP.b #$59							;|
	BEQ.b CODE_05ADC0						;|
	CMP.b #$5B							;|
	BEQ.b CODE_05ADC0						;|
	DEY								;|
	LDA.b #$5D							;|
									;|
CODE_05ADC0:								;|
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x			;|
	INY								;|
	LDA.w DATA_05A5D9,y						;|
	STA.l SMW_StripeImageUploadTable[$16].LowByte,x			;|
	LDA.b #$39							;|
	STA.l SMW_StripeImageUploadTable[$02].HighByte,x		;|
	STA.l SMW_StripeImageUploadTable[$16].HighByte,x		;|
	INX								;|
	INX								;|
	INY								;|
	DEC.b !RAM_SMW_Misc_ScratchRAM02				;|
	BNE.b CODE_05ADB2						;|
	STY.b !RAM_SMW_Misc_ScratchRAM00				;|
	REP.b #$20							;|
	TXA								;|
	CLC								;|
	ADC.w #$002C							;|
	TAX								;|
else									;|
	STZ.b !RAM_SMW_Misc_ScratchRAM03				;|
	LDY.b !RAM_SMW_Misc_ScratchRAM00				;|
CODE_05B208:								;|
	LDA.b #$1F							;|
	BIT.w !RAM_SMW_Misc_ScratchRAM03				;|
	BMI.b CODE_05B218						;|
	LDA.w DATA_05A5D9,y						;|
	STA.w !RAM_SMW_Misc_ScratchRAM03				;|
	AND.b #$7F							;|
	INY								;|
CODE_05B218:								;|
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x			;|
	LDA.b #$39							;|
	STA.l SMW_StripeImageUploadTable[$02].HighByte,x		;|
	INX								;|
	INX								;|
	DEC.b !RAM_SMW_Misc_ScratchRAM02				;|
	BNE.b CODE_05B208						;|
	STY.b !RAM_SMW_Misc_ScratchRAM00				;|
	REP.b #$20							;|
	INX								;|
	INX								;|
	INX								;|
	INX								;|
endif									;|
	PLY								;|
	DEY								;|
	DEY								;|
	BPL.b CODE_05B1EF						;|
	LDA.w #$00FF							;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x			;|
	TXA								;|
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo			;|
	SEP.b #$30							;|
	LDA.b #$01							;|
	STA.w !RAM_SMW_Flag_DisableLayer3Scroll				;|
	STZ.b !RAM_SMW_Mirror_Layer3XPosLo				;|
	STZ.b !RAM_SMW_Mirror_Layer3XPosHi				;|
	STZ.b !RAM_SMW_Mirror_Layer3YPosLo				;|
	STZ.b !RAM_SMW_Mirror_Layer3YPosHi				;/
CODE_05B250:
	LDX.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	CLC
	ADC.w DATA_05B10A,x
	STA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	CLC
	ADC.b #$80
	XBA
	LDA.b #$80
	SEC
	SBC.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	REP.b #$20
	LDX.b #$00
	LDY.b #$50
CODE_05B26D:
	CPX.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	BCC.b CODE_05B275
	LDA.w #$00FF
CODE_05B275:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$4C,y
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$9C,x
	INX
	INX
	DEY
	DEY
	BNE.b CODE_05B26D
	SEP.b #$20
	LDA.b #$22
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDY.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BEQ.b CODE_05B28E
	LDA.b #$20
CODE_05B28E:
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$22
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	LDA.b #$80
	STA.w !RAM_SMW_Mirror_HDMAEnable				; Glitch: This STA should be TSB, or else displaying a message will disable other HDMA channels.
CODE_05B299:
	PLB
	RTL

SwitchBlockTileAndProperties:
.Yellow:
	db $AD,$35,$AD,$75,$AD,$B5,$AD,$F5
	db $A7,$35,$A7,$75,$B7,$35,$B7,$75

.Blue:
	db $BD,$37,$BD,$77,$BD,$B7,$BD,$F7
	db $A7,$37,$A7,$77,$B7,$37,$B7,$77

.Red:
	db $AD,$39,$AD,$79,$AD,$B9,$AD,$F9
	db $A7,$39,$A7,$79,$B7,$39,$B7,$79

.Green:
	db $BD,$3B,$BD,$7B,$BD,$BB,$BD,$FB
	db $A7,$3B,$A7,$7B,$B7,$3B,$B7,$7B

SwitchBlockXAndYDisp:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	db $38,$4B,$40,$4B,$38,$53,$40,$53
	db $60,$4B,$68,$4B,$60,$53,$68,$53
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	db $50,$57,$58,$57,$50,$5F,$58,$5F
	db $92,$57,$9A,$57,$92,$5F,$9A,$5F
else
	db $50,$4F,$58,$4F,$50,$57,$58,$57
	db $92,$4F,$9A,$4F,$92,$57,$9A,$57
endif

DrawSwitchBlocks:
;$05B2EB
	PHX
	TXA
	ASL
	ASL
	ASL
	ASL
	TAX
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$20
	LDY.b #$1C
.Loop:
	LDA.w SwitchBlockTileAndProperties,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w SwitchBlockXAndYDisp,x
	STA.w SMW_OAMBuffer[$00].XDisp,y
	PLX
	INX
	INX
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEY
	DEY
	DEY
	DEY
	BPL.b .Loop
	STZ.w SMW_UpperOAMBuffer[$00].Slot
	SEP.b #$20
	PLX
	RTS

RemoveSwitchBlocks:
	LDY.b #$1C
	LDA.b #$F0
.Loop:
	STA.w SMW_OAMBuffer[$00].YDisp,y
	DEY
	DEY
	DEY
	DEY
	BPL.b .Loop
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DamagePlayer(Address)
namespace SMW_DamagePlayer
%InsertMacroAtXPosition(<Address>)

Hurt:
	LDA.b !RAM_SMW_Player_CurrentState
	BNE.b Return
	LDA.w !RAM_SMW_Timer_PlayerHurt
	ORA.w !RAM_SMW_Timer_StarPower
	ORA.w !RAM_SMW_Timer_EndLevel
	BNE.b Return
	STZ.w !RAM_SMW_Counter_PinkBerryCloudCoins
	LDA.w !RAM_SMW_Player_WallWalkStatus
	BEQ.b NotOnWall
	PHB
	PHK
	PLB
	JSR.w SMW_RunPlayerBlockCode_ADDR_00EB42
	PLB
NotOnWall:
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b Kill
	CMP.b #$02
	BNE.b PowerDown
	LDA.w !RAM_SMW_Player_CapeFlyingPhase
	BEQ.b PowerDown
	LDY.b #!Define_SMW_Sound1DF9_HurtWhileFlying				;\ Glitch: While this doesn't cause problems in the original SMW, the fact that this affects Y instead of A may causes problems in custom code.
	STY.w !RAM_SMW_IO_SoundCh1						;/
	LDA.b #$01
	STA.w !RAM_SMW_Player_SpinJumpFlag
	LDA.b #$30
	STA.w !RAM_SMW_Timer_PlayerHurt
	BRA.b CODE_00F622

PowerDown:
	LDY.b #!Define_SMW_Sound1DF9_IntoPipe					;\ Glitch: While this doesn't cause problems in the original SMW, the fact that this affects Y instead of A may causes problems in custom code.
	STY.w !RAM_SMW_IO_SoundCh1						;/
	JSL.l SMW_DropReservedItem_Main
	LDA.b #!Define_SMW_PlayerState01_PowerDown
	STA.b !RAM_SMW_Player_CurrentState
	STZ.b !RAM_SMW_Player_CurrentPowerUp
	LDA.b #$2F
	BRA.b SetHurtAnimationTimer

Kill:
;$00F606
	LDA.b #$90
	STA.b !RAM_SMW_Player_YSpeed
PitFall:
	LDA.b #!Define_SMW_LevelMusic_MarioDied
	STA.w !RAM_SMW_IO_MusicCh1
	LDA.b #$FF
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
	LDA.b #!Define_SMW_PlayerState09_Death
	STA.b !RAM_SMW_Player_CurrentState
	STZ.w !RAM_SMW_Player_SpinJumpFlag
	LDA.b #$30
SetHurtAnimationTimer:
	STA.w !RAM_SMW_Player_AnimationTimer
	STA.b !RAM_SMW_Flag_SpritesLocked
CODE_00F622:
	STZ.w !RAM_SMW_Player_CapeFlyingPhase
	STZ.w !RAM_SMW_UnusedRAM_7E188A				; Optimization: This is unused
Return:
	RTL

KillAndDisableButtons:
;$00F629
	JSL.l SMW_DamagePlayer_Kill
DisableButtons:
	STZ.b !RAM_SMW_IO_ControllerHold1
	STZ.b !RAM_SMW_IO_ControllerPress1
	STZ.b !RAM_SMW_IO_ControllerHold2
	STZ.b !RAM_SMW_IO_ControllerPress2
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerState09_Death(Address)
namespace SMW_PlayerState09_Death
%InsertMacroAtXPosition(<Address>)

UNK_00D0AE:
	db $7C,$00,$80,$00,$00,$06,$00,$01

Main:
	STZ.b !RAM_SMW_Player_CurrentPowerUp
	LDA.b #$3E
	STA.w !RAM_SMW_Player_CurrentPose
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_00D0C6
	DEC.w !RAM_SMW_Player_AnimationTimer
CODE_00D0C6:
	LDA.w !RAM_SMW_Player_AnimationTimer
	BNE.b DeathNotDone
	LDA.b #$80
	STA.w !RAM_SMW_Misc_ExitLevelAction
	LDA.w !RAM_SMW_Flag_PreventYoshiCarryOver
	BNE.b CODE_00D0D8
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
CODE_00D0D8:
	DEC.w !RAM_SMW_Player_CurrentLifeCount
	BPL.b DeathNotGameOver
	LDA.b #!Define_SMW_LevelMusic_GameOver
	STA.w !RAM_SMW_IO_MusicCh1
	LDX.b #SMW_DrawLoadingLetters_TileData_TopTiles_OVER-SMW_DrawLoadingLetters_TileData
	BRA.b DeathShowMessage

DeathNotGameOver:
	LDY.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	LDA.w !RAM_SMW_Counter_TimerHundreds						;\ Glitch: If the player dies when the timer is 0, then the time up message will display even if the timer was initially set to 000 on level load.
	ORA.w !RAM_SMW_Counter_TimerTens						;|
	ORA.w !RAM_SMW_Counter_TimerOnes						;|
	BNE.b DeathNotTimeUp								;/
	LDX.b #SMW_DrawLoadingLetters_TileData_TopTiles_UP-SMW_DrawLoadingLetters_TileData
DeathShowMessage:
	STX.w !RAM_SMW_Misc_DeathMessageToDisplay
	LDA.b #$C0
	STA.w !RAM_SMW_Timer_DisplayDeathMessageAnimation
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_TimeToDisplayDeathMessage
	LDY.b #!Define_SMW_GameMode15_FadeOutToDeathMessage
DeathNotTimeUp:
	STY.w !RAM_SMW_Misc_GameMode
	RTS

DeathNotDone:
	CMP.b #$26
	BCS.b DeathNotDoneEnd
	STZ.b !RAM_SMW_Player_XSpeed
	JSR.w SMW_UpdatePlayerSpritePosition_Main
	JSR.w SMW_HandlePlayerPhysics_CODE_00D92E
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	LSR
	AND.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
DeathNotDoneEnd:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SetPlayerPose(Address)
namespace SMW_SetPlayerPose
%InsertMacroAtXPosition(<Address>)

DATA_00CE79:
	db $2A,$2B,$2C,$2D,$2E,$2F

DATA_00CE7F:
	db $2C,$2C,$2C,$2B,$2B,$2C,$2C,$2B
	db $2B,$2C,$2D,$2A,$2A,$2D,$2D,$2A
	db $2A,$2D,$2D,$2A,$2A,$2D,$2E,$2A
	db $2A,$2E

DATA_00CE99:
	db $00,$00,$25,$44,$00,$00,$0F,$45

DATA_00CEA1:
	db $00,$00,$00,$00,$01,$01,$01,$01

DATA_00CEA9:
	db $02,$07,$06,$09,$02,$07,$06,$09

Main:
	LDA.w !RAM_SMW_Timer_CapeFlapAnimation
	BNE.b lbl14A2Not0
	LDX.w !RAM_SMW_Player_CapeImage
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b MarioAnimAir
	LDY.b #$04
	BIT.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00CECD
	CMP.b #$0C
	BEQ.b CODE_00CEFD
	LDA.b !RAM_SMW_Player_SwimmingFlag
	BNE.b CODE_00CEFD
	BRA.b MrioNtInWtr

CODE_00CECD:
	INX
	CPX.b #$05
	BCS.b CODE_00CED6
	LDX.b #$05
	BRA.b CODE_00CF0A

CODE_00CED6:
	CPX.b #$0B
	BCC.b CODE_00CF0A
	LDX.b #$07
	BRA.b CODE_00CF0A

MarioAnimAir:
	LDA.b !RAM_SMW_Player_XSpeed
	BNE.b CODE_00CEF0
	LDY.b #$08
MrioNtInWtr:
	TXA
	BEQ.b CODE_00CF0A
	DEX
	CPX.b #$03
	BCC.b CODE_00CF0A
	LDX.b #$02
	BRA.b CODE_00CF0A

CODE_00CEF0:
	BPL.b CODE_00CEF5
	EOR.b #$FF
	INC
CODE_00CEF5:
	LSR
	LSR
	LSR
	TAY
	LDA.w AnimationSpeedTable,y
	TAY
CODE_00CEFD:
	INX
	CPX.b #$03
	BCS.b CODE_00CF04
	LDX.b #$05
CODE_00CF04:
	CPX.b #$07
	BCC.b CODE_00CF0A
	LDX.b #$03
CODE_00CF0A:
	STX.w !RAM_SMW_Player_CapeImage
	TYA
	LDY.b !RAM_SMW_Player_SwimmingFlag
	BEQ.b CODE_00CF13
	ASL
CODE_00CF13:
	STA.w !RAM_SMW_Timer_CapeFlapAnimation
lbl14A2Not0:
	LDA.w !RAM_SMW_Player_SpinJumpFlag
	ORA.w !RAM_SMW_Timer_ActiveCapeSpin
	BEQ.b CODE_00CF4E
	STZ.b !RAM_SMW_Player_DuckingFlag
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$06
	TAX
	TAY
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00CF2F
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00CF2F
	INY
CODE_00CF2F:
	LDA.w DATA_00CEA9,y
	STA.w !RAM_SMW_Player_CapeImage
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00CF3A
	INX
CODE_00CF3A:
	LDA.w DATA_00CEA1,x
	STA.b !RAM_SMW_Player_FacingDirection
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	CPY.b #$02
	BNE.b CODE_00CF48
	JSR.w SMW_InitializeCapeSwingOrNetPunch_Main
CODE_00CF48:
	LDA.w DATA_00CE99,x
	JMP.w CODE_00D01A

CODE_00CF4E:
	LDA.w !RAM_SMW_Player_SlidingOnGround
	BEQ.b CODE_00CF62
	BPL.b CODE_00CF85
	LDA.w !RAM_SMW_Player_SlopePlayerIsOn1
	LSR
	LSR
	ORA.b !RAM_SMW_Player_FacingDirection
	TAY
	LDA.w DATA_00CE7F,y
	BRA.b CODE_00CF85

CODE_00CF62:
	LDA.b #$3C
	LDY.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00CF6B
	LDA.b #$1D
CODE_00CF6B:
	LDY.b !RAM_SMW_Player_DuckingFlag
	BNE.b CODE_00CF85
	LDA.w !RAM_SMW_Timer_DisplayPlayerShootFireballPose
	BEQ.b CODE_00CF7E
	LDA.b #$3F
	LDY.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00CF85
	LDA.b #$16
	BRA.b CODE_00CF85

CODE_00CF7E:
	LDA.b #$0E
	LDY.w !RAM_SMW_Timer_DisplayPlayerKickingPose
	BEQ.b CODE_00CF88
CODE_00CF85:
	JMP.w CODE_00D01A

CODE_00CF88:
	LDA.b #$1D
	LDY.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	BNE.b CODE_00CF85
	LDA.b #$0F
	LDY.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
	BNE.b CODE_00CF85
	LDA.b #$00
	LDX.w !RAM_SMW_Flag_PlayerInLakitusCloud
	BNE.b MarioAnimNoAbs1
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00CFB7
	LDY.w !RAM_SMW_Timer_ShowRunningFramesBeforeTakeOff
	BNE.b CODE_00CFBC
	LDY.w !RAM_SMW_Player_CapeFlyingPhase
	BEQ.b CODE_00CFAE
	LDA.w DATA_00CE79-$01,y
CODE_00CFAE:
	LDY.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00D01A
	LDA.b #$09
	BRA.b CODE_00D01A

CODE_00CFB7:
	LDA.w !RAM_SMW_Player_TurningAroundFlag
	BNE.b CODE_00D01A
CODE_00CFBC:
Entry2:
	LDA.b !RAM_SMW_Player_XSpeed
	BPL.b MarioAnimNoAbs1
	EOR.b #$FF
	INC
MarioAnimNoAbs1:
	TAX
	BNE.b CODE_00CFD4
	XBA
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadU>>8
	BEQ.b CODE_00D002
	LDA.b #$03
	STA.w !RAM_SMW_Player_OverrideWalkingFrames
	BRA.b CODE_00D002

CODE_00CFD4:
	LDA.b !RAM_SMW_Flag_IceLevel
	BEQ.b CODE_00CFE3
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadR>>8)|(!Joypad_DPadL>>8)
	BEQ.b CODE_00D003
	LDA.b #$68
	STA.w !RAM_SMW_Player_AnimationSpeedIndex
CODE_00CFE3:
	LDA.w !RAM_SMW_Player_WalkingFrame
	LDY.w !RAM_SMW_Player_AnimationTimer
	BNE.b CODE_00D003
	DEC
	BPL.b CODE_00CFF3
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	LDA.w WalkingPoseCount,y
CODE_00CFF3:
	XBA
	TXA
	LSR
	LSR
	LSR
	ORA.w !RAM_SMW_Player_AnimationSpeedIndex
	TAY
	LDA.w AnimationSpeedTable,y
	STA.w !RAM_SMW_Player_AnimationTimer
CODE_00D002:
	XBA
CODE_00D003:
	STA.w !RAM_SMW_Player_WalkingFrame
	CLC
	ADC.w !RAM_SMW_Player_OverrideWalkingFrames
	LDY.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00D014
	CLC
	ADC.b #$07
	BRA.b CODE_00D01A

CODE_00D014:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPX.b #$3A
else
	CPX.b #$2F
endif
	BCC.b CODE_00D01A
	ADC.b #$03
CODE_00D01A:
	LDY.w !RAM_SMW_Player_WallWalkStatus
	BEQ.b MarioAnimNo45
	TYA
	AND.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
	LDA.b #$10
	CPY.b #$06
	BCC.b MarioAnimNo45
	LDA.w !RAM_SMW_Player_WalkingFrame
	CLC
	ADC.b #$11
MarioAnimNo45:
	STA.w !RAM_SMW_Player_CurrentPose
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_SetPlayerPose(Address)
namespace SMW_SetPlayerPose
%InsertMacroAtXPosition(<Address>)

WalkingPoseCount:
	db $01,$02,$02,$02

AnimationSpeedTable:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $09,$08,$06,$05,$04,$03,$03,$02
	db $09,$08,$06,$05,$04,$03,$03,$02
	db $09,$08,$06,$05,$04,$03,$03,$02
	db $07,$06,$05,$04,$03,$03,$02,$01
	db $07,$06,$05,$04,$03,$03,$02,$01
	db $05,$04,$04,$03,$03,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $04,$03,$03,$02,$02,$01,$01,$01
	db $04,$03,$03,$02,$02,$01,$01,$01
	db $02,$02,$02,$02,$02,$02,$02,$02
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_E1) != $00
	db $0A,$08,$07,$06,$05,$04,$03,$02
	db $0A,$08,$07,$06,$05,$04,$03,$02
	db $0A,$08,$07,$06,$05,$04,$03,$02
	db $08,$07,$06,$05,$04,$03,$02,$01
	db $08,$07,$06,$05,$04,$03,$02,$01
	db $05,$04,$04,$03,$03,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $05,$04,$03,$03,$02,$02,$01,$01
	db $04,$03,$03,$02,$02,$01,$01,$01
	db $04,$03,$03,$02,$02,$01,$01,$01
	db $02,$02,$02,$02,$02,$02,$02,$02
else
	db $0A,$08,$06,$04,$03,$02,$01,$01
	db $0A,$08,$06,$04,$03,$02,$01,$01
	db $0A,$08,$06,$04,$03,$02,$01,$01
	db $08,$06,$04,$03,$02,$01,$01,$01
	db $08,$06,$04,$03,$02,$01,$01,$01
	db $05,$04,$03,$02,$01,$01,$01,$01
	db $05,$04,$03,$02,$01,$01,$01,$01
	db $05,$04,$03,$02,$01,$01,$01,$01
	db $05,$04,$03,$02,$01,$01,$01,$01
	db $05,$04,$03,$02,$01,$01,$01,$01
	db $05,$04,$03,$02,$01,$01,$01,$01
	db $04,$03,$02,$01,$01,$01,$01,$01
	db $04,$03,$02,$01,$01,$01,$01,$01
	db $02,$02,$02,$02,$02,$02,$02,$02
endif
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleOverworldStarPipeWarp(Address)
namespace SMW_HandleOverworldStarPipeWarp
%InsertMacroAtXPosition(<Address>)

DATA_048431:
	db $11,!Define_SMW_Overworld_MainMap
	db $0A,!Define_SMW_Overworld_MainMap
	db $09,!Define_SMW_Overworld_MainMap
	db $0B,!Define_SMW_Overworld_MainMap
	db $12,!Define_SMW_Overworld_MainMap
	db $0A,!Define_SMW_Overworld_MainMap
	db $07,!Define_SMW_Overworld_MainMap
	db $0A,!Define_SMW_Overworld_VanillaDome
	db $03,!Define_SMW_Overworld_VanillaDome
	db $10,!Define_SMW_Overworld_ValleyOfBowser
	db $12,!Define_SMW_Overworld_ValleyOfBowser
	db $1C,!Define_SMW_Overworld_ValleyOfBowser
	db $14,!Define_SMW_Overworld_ValleyOfBowser
	db $12,!Define_SMW_Overworld_StarWorld
	db $00,!Define_SMW_Overworld_VanillaDome
	db $12,!Define_SMW_Overworld_StarWorld
	db $10,!Define_SMW_Overworld_MainMap
	db $17,!Define_SMW_Overworld_StarWorld
	db $14,!Define_SMW_Overworld_MainMap
	db $1C,!Define_SMW_Overworld_StarWorld
	db $14,!Define_SMW_Overworld_MainMap
	db $1C,!Define_SMW_Overworld_StarWorld
	db $17,!Define_SMW_Overworld_StarWorld
	db $11,!Define_SMW_Overworld_SpecialWorld
	db $11,!Define_SMW_Overworld_SpecialWorld
	db $14,!Define_SMW_Overworld_ValleyOfBowser
	db $06,!Define_SMW_Overworld_YoshisIsland

DATA_048467:
	dw $0007,$0003,$0010,$000E
	dw $0017,$0018,$0012,$0014
	dw $000B,$0003,$0001,$0009
	dw $0009,$001D,$000E,$0018
	dw $000F,$0016,$0010,$0018
	dw $0002,$001D,$0018,$0013
	dw $0011,$0003,$0007

DATA_04849D:
	dw $04A8,$0438,$0908,$0928
	dw $09C8,$0948,$0D28,$0118
	dw $00A8,$0098,$00B8,$0128
	dw $00A8,$0078,$0D28,$0408
	dw $0D78,$0108,$0DC8,$0148
	dw $0DC8,$0948,$0B18,$0D78
	dw $0268,$0DC8,$0D28

DATA_0484D3:
	dw $0148,$00B8,$0038,$0018
	dw $0098,$0098,$01D8,$0078
	dw $0038,$0108,$00E8,$0178
	dw $0188,$0128,$0188,$00E8
	dw $0168,$00F8,$0188,$0108
	dw $01D8,$0038,$0138,$0188
	dw $0078,$01D8,$01D8

GetIndex:
;$048509
	LDY.w !RAM_SMW_Player_CurrentCharacter			;\ LM: Hijacks here to allow for more star/pipe warp indexes (1.90+)
	LDA.w !RAM_SMW_Overworld_MarioMap,y			;/
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDY.b #$34
CODE_04851A:
	LDA.w DATA_048431,y
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w #$0200
	BCS.b CODE_048531
	CMP.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	BNE.b CODE_048531
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	CMP.w DATA_048467,y
	BEQ.b CODE_048535
CODE_048531:
	DEY
	DEY
	BPL.b CODE_04851A
CODE_048535:
	STY.w !RAM_SMW_Overworld_StarPipeIndex
	SEP.b #$20
	RTS

SetPlayerDestination:
;$04853B
	PHB
	PHK
	PLB
	REP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDY.w !RAM_SMW_Overworld_StarPipeIndex
	LDA.w DATA_04849D,y
	PHA
	AND.w #$01FF
	STA.w !RAM_SMW_Overworld_MarioXPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	LDA.w DATA_0484D3,y
	STA.w !RAM_SMW_Overworld_MarioYPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	PLA
	LSR
	XBA								;\ LM: Hijacks here to allow for more star/pipe warp indexes (1.90+)
	AND.w #$000F							;/
	STA.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapLo
	REP.b #$10
	JSR.w SMW_HandleOverworldPathExits_SetLayerPositions
	SEP.b #$30
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleOverworldPathExits(Address)
namespace SMW_HandleOverworldPathExits
%InsertMacroAtXPosition(<Address>)

DATA_049964:
	dw $0140,$0028	: db !Define_SMW_Overworld_MainMap
	dw $0150,$0058	: db !Define_SMW_Overworld_MainMap
	dw $0010,$0048	: db !Define_SMW_Overworld_YoshisIsland
	dw $0010,$0098	: db !Define_SMW_Overworld_YoshisIsland
	dw $00A0,$00D8	: db !Define_SMW_Overworld_MainMap
	dw $0140,$0058	: db !Define_SMW_Overworld_VanillaDome
	dw $0090,$01E8	: db !Define_SMW_Overworld_ValleyOfBowser
	dw $0160,$00E8	: db !Define_SMW_Overworld_MainMap
	dw $00A0,$01C8	: db !Define_SMW_Overworld_MainMap
	dw $0160,$0088	: db !Define_SMW_Overworld_ForestOfIlluision
	dw $0108,$0190	: db !Define_SMW_Overworld_MainMap
	dw $01E8,$0010	: db !Define_SMW_Overworld_ForestOfIlluision
	dw $0110,$01C8	: db !Define_SMW_Overworld_MainMap
	dw $01F0,$0088	: db !Define_SMW_Overworld_ForestOfIlluision

DATA_0499AA:
	dw $0000,$0048	: db !Define_SMW_Overworld_YoshisIsland
	dw $0000,$0098	: db !Define_SMW_Overworld_YoshisIsland
	dw $0150,$0028	: db !Define_SMW_Overworld_MainMap
	dw $0160,$0058	: db !Define_SMW_Overworld_MainMap
	dw $0150,$0058	: db !Define_SMW_Overworld_VanillaDome
	dw $0090,$00D8	: db !Define_SMW_Overworld_MainMap
	dw $0150,$00E8	: db !Define_SMW_Overworld_MainMap
	dw $00A0,$01E8	: db !Define_SMW_Overworld_ValleyOfBowser
	dw $0150,$0088	: db !Define_SMW_Overworld_ForestOfIlluision
	dw $00B0,$01C8	: db !Define_SMW_Overworld_MainMap
	dw $01E8,$0000	: db !Define_SMW_Overworld_ForestOfIlluision
	dw $0108,$01A0	: db !Define_SMW_Overworld_MainMap
	dw $0200,$0088	: db !Define_SMW_Overworld_ForestOfIlluision
	dw $0100,$01C8	: db !Define_SMW_Overworld_MainMap

DATA_0499F0:
	db $00,$04
	db $00,$09
	db $14,$02
	db $15,$05
	db $14,$05
	db $09,$0D
	db $15,$0E
	db $09,$1E
	db $15,$08
	db $0A,$1C
	db $1E,$00
	db $10,$19
	db $1F,$08
	db $10,$1C

DATA_049A0C:
	dw $FFEF,$FFD8		; Yoshi's Island
	dw $FFEF,$0080		; Vanilla Dome
	dw $FFEF,$0128		; Forest of Illusion
	dw $00F0,$FFD8		; Valley of Bowser
	dw $00F0,$0080		; Special World
	dw $00F0,$0128		; Star World

Main:
;$049A24
	REP.b #$20
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$00FF
	STA.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapLo
	LDA.w #$001A						;\ LM: Hijacks here to allow for more path exit indexes (2.40+)
	STA.b !RAM_SMW_Misc_ScratchRAM02			;/
	LDY.b #$41
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
Loop:
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x			;\ Glitch: This code will malfunction if the player is not aligned to the layer 1 paths correctly.
	CMP.w DATA_049964,y					;| This can be fixed by using AND.w #$FFF0 before each of these CMPs and changing the ones digit of the 16-bit values in .DATA_049964 and .DATA_0499AA to 0.
	BNE.b CODE_049A85					;| Todo: Other things might be necessary to fix this bug.
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x			;|
	CMP.w DATA_049964+$02,y					;|
	BNE.b CODE_049A85					;/
	LDA.w DATA_049964+$04,y
	AND.w #$00FF
	CMP.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapLo
	BNE.b CODE_049A85
	LDA.w DATA_0499AA,y
	STA.w !RAM_SMW_Overworld_MarioYPosLo,x
	LDA.w DATA_0499AA+$02,y
	STA.w !RAM_SMW_Overworld_MarioXPosLo,x
	LDA.w DATA_0499AA+$04,y
	AND.w #$00FF
	STA.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapLo
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w DATA_0499F0,y
	AND.w #$00FF
	STA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	LDA.w DATA_0499F0+$01,y
	AND.w #$00FF
	STA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	BRA.b CODE_049A90

CODE_049A85:
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	DEY
	DEY
	DEY
	DEY
	DEY
	BPL.b Loop
CODE_049A90:
	SEP.b #$20
	RTS

SetLayerPositions:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$FF00
	ORA.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapLo
	STA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$00FF
	BNE.b CODE_049AB0
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_CODE_04983F

CODE_049AB0:
	DEC
	ASL
	ASL
	TAY
	LDA.w DATA_049A0C,y
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDA.w DATA_049A0C+$02,y
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandlePlayerLevelCollision(Address)
namespace SMW_HandlePlayerLevelCollision
%InsertMacroAtXPosition(<Address>)

DATA_00E90A:
	db $01,$02,$11

DATA_00E90D:
	db $FF,$FF,$01,$00

DATA_00E911:
	db $02,$0D

DATA_00E913:
	db $01,$00,$FF,$FF,$01,$00,$01,$00
	db $FF,$FF,$FF,$FF

DATA_00E91F:
	db $00,$00,$00,$00,$FF,$FF,$01,$00
	db $FF,$FF,$01,$00

Main:
	JSR.w SMW_ResetPlayerLevelCollisionRAM_Main
	LDA.w !RAM_SMW_Player_DisableObjectInteractionFlag
	BEQ.b CODE_00E938
	JSR.w SMW_RunPlayerBlockCode_CODE_00EE1D
	BRA.b CODE_00E98C

CODE_00E938:
	LDA.w !RAM_SMW_Player_OnGroundFlag
	STA.b !RAM_SMW_Misc_ScratchRAM8D
	STZ.w !RAM_SMW_Player_OnGroundFlag
	LDA.b !RAM_SMW_Player_InAirFlag
	STA.b !RAM_SMW_Misc_ScratchRAM8F
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	BPL.b CODE_00E978
	AND.b #$82
	STA.b !RAM_SMW_Misc_ScratchRAM8E
	LDA.b #$01
	STA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.b !RAM_SMW_Player_XPosLo
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	JSR.w SMW_RunPlayerBlockCode_Main
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.b !RAM_SMW_Player_XPosLo
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
CODE_00E978:
	ASL.w !RAM_SMW_Player_OnGroundFlag
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$41
	STA.b !RAM_SMW_Misc_ScratchRAM8E
	ASL
	BMI.b CODE_00E98C
	STZ.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	ASL.b !RAM_SMW_Misc_ScratchRAM8D
	JSR.w SMW_RunPlayerBlockCode_Main
CODE_00E98C:
	LDA.w !RAM_SMW_Flag_SideExits
	BEQ.b NoSideExit
	REP.b #$20
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CMP.w #$00FA
	SEP.b #$20
	BCC.b CODE_00E9FB
	JSL.l SMW_DisplayMessage_ExitToOverworldNoEvent
	RTS

NoSideExit:
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CMP.b #$F0
	BCS.b CODE_00EA08
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$03
	BNE.b CODE_00E9FB
	REP.b #$20
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_Layer1XPosLo
	CLC
	ADC.w #$00E8
	CMP.b !RAM_SMW_Player_XPosLo
	BEQ.b CODE_00E9C8
	BMI.b CODE_00E9C8
	INY
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.w #$0008
	CMP.w !RAM_SMW_Misc_Layer1XPosLo
CODE_00E9C8:
	SEP.b #$20
	BEQ.b CODE_00E9FB
	BPL.b CODE_00E9FB
	LDA.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	BNE.b CODE_00E9F6
	LDA.b #$80
	TSB.b !RAM_SMW_Player_BlockedFlags
	REP.b #$20
	LDA.w !RAM_SMW_L1ScrollSpr_XSpeedLo
	LSR
	LSR
	LSR
	LSR
	SEP.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Player_XSpeed
	EOR.w DATA_00E90D+$01,y
	BMI.b CODE_00E9F6
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_XSpeed
	LDA.w !RAM_SMW_L1ScrollSpr_SubXPosLo
	STA.w !RAM_SMW_Player_SubXPos
CODE_00E9F6:
	LDA.w DATA_00E90A,y
	TSB.b !RAM_SMW_Player_BlockedFlags
CODE_00E9FB:
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$1C
	CMP.b #$1C
	BNE.b CODE_00EA0D
	LDA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	BNE.b CODE_00EA0D
CODE_00EA08:
	JSR.w SMW_DamagePlayer_KillAndDisableButtons
	BRA.b CODE_00EA32

CODE_00EA0D:
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$03
	BEQ.b CODE_00EA34
	AND.b #$02
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_00E90D,y
	STA.b !RAM_SMW_Player_XPosLo
	SEP.b #$20
	LDA.b !RAM_SMW_Player_BlockedFlags
	BMI.b CODE_00EA34
	LDA.b #$03
	STA.w !RAM_SMW_Player_AnimationSpeedIndex
	LDA.b !RAM_SMW_Player_XSpeed
	EOR.w DATA_00E90D,y
	BPL.b CODE_00EA34
CODE_00EA32:
	STZ.b !RAM_SMW_Player_XSpeed
CODE_00EA34:
	LDA.w !RAM_SMW_Player_CurrentLayerPriority
	CMP.b #$01
	BNE.b CODE_00EA42
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	BNE.b CODE_00EA42
	STZ.w !RAM_SMW_Player_CurrentLayerPriority
CODE_00EA42:
	STZ.w !RAM_SMW_Player_CanJumpOutOfWater
	LDA.b !RAM_SMW_Flag_UnderwaterLevel
	BNE.b CODE_00EA5E
	LSR.b !RAM_SMW_Misc_ScratchRAM8A
	BCC.b CODE_00EAA3
	LDA.b !RAM_SMW_Player_SwimmingFlag
	BNE.b CODE_00EA65
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00EA65
	LSR.b !RAM_SMW_Misc_ScratchRAM8A
	BCC.b Return00EAA5
	JSR.w SMW_SpawnPlayerWaterSplashAndManyBreathBubbles_Main
	STZ.b !RAM_SMW_Player_YSpeed
CODE_00EA5E:
	LDA.b #$01
	STA.b !RAM_SMW_Player_SwimmingFlag
CODE_00EA62:
	JMP.w SMW_SpawnPlayerBreathBubble_Main

CODE_00EA65:
	LSR.b !RAM_SMW_Misc_ScratchRAM8A
	BCS.b CODE_00EA5E
	LDA.b !RAM_SMW_Player_SwimmingFlag
	BEQ.b Return00EAA5
	LDA.b #$FC
	CMP.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00EA75
	STA.b !RAM_SMW_Player_YSpeed
CODE_00EA75:
	INC.w !RAM_SMW_Player_CanJumpOutOfWater
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|!Joypad_A|(!Joypad_B>>8)
	CMP.b #(!Joypad_DPadU>>8)|!Joypad_A|(!Joypad_B>>8)
	BNE.b CODE_00EA62
	LDA.b !RAM_SMW_IO_ControllerHold2
	BPL.b CODE_00EA92
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	BNE.b CODE_00EA92
	INC
	STA.w !RAM_SMW_Player_SpinJumpFlag
	LDA.b #!Define_SMW_Sound1DFC_SpinJump
	STA.w !RAM_SMW_IO_SoundCh3
CODE_00EA92:
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$08
	BNE.b CODE_00EA62
	JSR.w SMW_SpawnPlayerWaterSplashAndManyBreathBubbles_Main
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	LDA.b #$AA
	STA.b !RAM_SMW_Player_YSpeed
CODE_00EAA3:
	STZ.b !RAM_SMW_Player_SwimmingFlag
Return00EAA5:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnPlayerWaterSplashAndManyBreathBubbles(Address)
namespace SMW_SpawnPlayerWaterSplashAndManyBreathBubbles
%InsertMacroAtXPosition(<Address>)

SplashInitialYPosLo:
	db $08,$FC,$10,$04

SplashInitialYPosHi:
	db $00,$FF,$00,$00

Main:
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00FDB3
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_00FDAB:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_00FDB4
	DEY
	BPL.b CODE_00FDAB
CODE_00FDB3:
	INY
CODE_00FDB4:
	PHX
	LDX.b #$00
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00FDBC
	INX
CODE_00FDBC:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00FDC3
	INX
	INX
CODE_00FDC3:
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w SplashInitialYPosLo,x
	PHP
	AND.b #$F0
	CLC
	ADC.b #$03
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	PLP
	ADC.w SplashInitialYPosHi,x
	STA.w !RAM_SMW_MExtSpr_YPosHi,y
	PLX
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.b !RAM_SMW_Player_XPosHi
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	LDA.b #!Define_SMW_SpriteID_MExtSpr07_WaterSplash
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_MExtSpr_Timer,y
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return00FE0D
	STZ.b !RAM_SMW_Player_YSpeed
	LDY.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00FDFE
	STZ.b !RAM_SMW_Player_XSpeed
CODE_00FDFE:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$06
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_00FE05
	DEY
CODE_00FE05:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_00FE16
CODE_00FE0A:
	DEY
	BPL.b CODE_00FE05
Return00FE0D:
	RTS

BubbleInitialYPosLo:
	db $10,$16,$13,$1C

BubbleInitialXPosLo:
	db $00,$04,$0A,$07

CODE_00FE16:
	LDA.b #!Define_SMW_SpriteID_ExtSpr12_BreathBubble
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	TYA
	ASL
	ASL
	ASL
	ADC.b #$F7
	STA.w !RAM_SMW_ExtSpr12_BreathBubble_AnimationFrameCounter,y
	LDA.b !RAM_SMW_Player_YPosLo
	ADC.w BubbleInitialYPosLo,y
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b !RAM_SMW_Player_XPosLo
	ADC.w BubbleInitialXPosLo,y
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,y
	JMP.w CODE_00FE0A
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnPlayerBreathBubble(Address)
namespace SMW_SpawnPlayerBreathBubble
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$3F
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)|!Joypad_A|(!Joypad_B>>8)
	BNE.b CODE_00FD12
	LDY.b #$7F
CODE_00FD12:
	TYA
	AND.b !RAM_SMW_Counter_LocalFrames
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return00FD23
	LDX.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_00FD1B:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	BEQ.b CODE_00FD26
	DEX
	BPL.b CODE_00FD1B
Return00FD23:
	RTS

InitialXPosLo:
	db $02,$0A

CODE_00FD26:
	LDA.b #!Define_SMW_SpriteID_ExtSpr12_BreathBubble
	STA.w !RAM_SMW_ExtSpr_SpriteID,x
	LDY.b !RAM_SMW_Player_FacingDirection
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w InitialXPosLo,y
	STA.w !RAM_SMW_ExtSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,x
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00FD47
	LDA.b #$04
	LDY.b !RAM_SMW_Player_DuckingFlag
	BEQ.b CODE_00FD49
CODE_00FD47:
	LDA.b #$0C
CODE_00FD49:
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
	STZ.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ResetPlayerLevelCollisionRAM(Address)
namespace SMW_ResetPlayerLevelCollisionRAM
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Player_AnimationSpeedIndex
	STZ.b !RAM_SMW_Player_BlockedFlags
	STZ.w !RAM_SMW_Player_SlopePlayerIsOn1
	STZ.w !RAM_SMW_Player_SlopePlayerIsOn2
	STZ.b !RAM_SMW_Misc_ScratchRAM8A
	STZ.b !RAM_SMW_Misc_ScratchRAM8B
	STZ.w !RAM_SMW_Sprites_Layer2IsTouchedFlag
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

DATA_00EAB9:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $D6,$2B
else
	db $DE,$23
endif

DATA_00EABB:
	db $20,$E0

DATA_00EABD:
	db $08,$00,$F8,$FF

WaterSlopeMap16Numbers:
	db $71,$72,$76,$77,$7B,$7C,$81,$86
	db $8A,$8B,$8F,$90,$94,$95,$99,$9A
	db $9E,$9F,$A3,$A4,$A8,$A9,$AD,$AE
	db $B2,$B3

Main:
;$00EADB
	LDA.b !RAM_SMW_Player_YPosLo
	AND.b #$0F
	STA.b !RAM_SMW_Player_YPosInBlock
	LDA.w !RAM_SMW_Player_WallWalkStatus
	BNE.b CODE_00EAE9
	JMP.w CODE_00EB77

CODE_00EAE9:
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_Player_XSpeed
	SEC
	SBC.w DATA_00EAB9,y
	EOR.w DATA_00EAB9,y
	BMI.b CODE_00EB48
	LDA.b !RAM_SMW_Player_InAirFlag
	ORA.w !RAM_SMW_Player_CarryingSomethingFlag2
	ORA.b !RAM_SMW_Player_DuckingFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_00EB48
	LDA.w !RAM_SMW_Player_WallWalkStatus
	CMP.b #$06
	BCS.b CODE_00EB22
	LDX.b !RAM_SMW_Player_YPosInBlock
	CPX.b #$08
	BCC.b Return00EB76
	CMP.b #$04
	BCS.b CODE_00EB73
	ORA.b #$04
	STA.w !RAM_SMW_Player_WallWalkStatus
CODE_00EB19:
	LDA.b !RAM_SMW_Player_XPosLo
	AND.b #$F0
	ORA.b #$08
	STA.b !RAM_SMW_Player_XPosLo
	RTS

CODE_00EB22:
	LDX.b #$60
	TYA
	BEQ.b CODE_00EB29
	LDX.b #$66
CODE_00EB29:
	JSR.w CODE_00EFE8
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_00EB34
	INX
	INX
	BRA.b CODE_00EB37

CODE_00EB34:
	JSR.w CODE_00EFE8
CODE_00EB37:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_WallRun
	BNE.b CODE_00EB19
	LDA.b #$02
	TRB.w !RAM_SMW_Player_WallWalkStatus
	RTS

ADDR_00EB42:
	LDA.w !RAM_SMW_Player_WallWalkStatus
	AND.b #$01
	TAY
CODE_00EB48:
	LDA.w DATA_00EABB,y
	STA.b !RAM_SMW_Player_XSpeed
	TYA
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_00EABD,y
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w #$0008
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00EB64
	LDA.w #$0010
CODE_00EB64:
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	LDA.b #$24
	STA.b !RAM_SMW_Player_InAirFlag
	LDA.b #$E0
	STA.b !RAM_SMW_Player_YSpeed
CODE_00EB73:
	STZ.w !RAM_SMW_Player_WallWalkStatus
Return00EB76:
	RTS

CODE_00EB77:
	LDX.b #$00
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00EB83
	LDA.b !RAM_SMW_Player_DuckingFlag
	BNE.b CODE_00EB83
	LDX.b #$18
CODE_00EB83:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00EB8D
	TXA
	CLC
	ADC.b #$30
	TAX
CODE_00EB8D:
	LDA.b !RAM_SMW_Player_XPosLo
	AND.b #$0F
	TAY
	CLC
	ADC.b #$08
	AND.b #$0F
	STA.b !RAM_SMW_Player_XPosInBlock
	STZ.b !RAM_SMW_Player_HorizontalSideOfBlockBeingTouched
	CPY.b #$08
	BCC.b CODE_00EBA5
	TXA
	ADC.b #$0B
	TAX
	INC.b !RAM_SMW_Player_HorizontalSideOfBlockBeingTouched
CODE_00EBA5:
	LDA.b !RAM_SMW_Player_YPosInBlock
	CLC
	ADC.w UnknownData00E8A4,x
	AND.b #$0F
	STA.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
#LMBlockOffset_HeadInside:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_HeadInside
	BEQ.b CODE_00EBDD
	CPY.b #$11
	BCC.b CODE_00EC24
	CPY.b #$6E
	BCC.b CODE_00EBC9
	TYA
	JSL.l SMW_CheckForWaterSlope_Main
	BCC.b CODE_00EC24
	LDA.b #$01
	TSB.b !RAM_SMW_Misc_ScratchRAM8A
	BRA.b CODE_00EC24

CODE_00EBC9:
	INX
	INX
	INX
	INX
	TYA
	LDY.b #$00
	CMP.b #$1E
	BEQ.b CODE_00EBDA
	CMP.b #$52
	BEQ.b CODE_00EBDA
	LDY.b #$02
CODE_00EBDA:
	JMP.w CODE_00EC6F

CODE_00EBDD:
	CPY.b #$9C
	BNE.b CODE_00EBE8
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$01
	BEQ.b CODE_00EC06
CODE_00EBE8:
	CPY.b #$20
	BEQ.b CODE_00EC01
	CPY.b #$1F
	BEQ.b CODE_00EBFD
	LDA.w !RAM_SMW_Timer_BluePSwitch
	BEQ.b CODE_00EC21
	CPY.b #$28
	BEQ.b CODE_00EC01
	CPY.b #$27
	BNE.b CODE_00EC21
CODE_00EBFD:
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_00EC24
CODE_00EC01:
	JSR.w CODE_00F443
	BCS.b CODE_00EC24
CODE_00EC06:
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	BNE.b CODE_00EC24
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_DPadU>>8
	BEQ.b CODE_00EC24
	LDA.b #!Define_SMW_Sound1DFC_Door1
	STA.w !RAM_SMW_IO_SoundCh3
	JSR.w SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel_Main
	LDA.b #!Define_SMW_PlayerState0D_DoAbsolutelyNothing
	STA.b !RAM_SMW_Player_CurrentState
	JSR.w SMW_DamagePlayer_DisableButtons
	BRA.b CODE_00EC24

CODE_00EC21:
	JSR.w CODE_00F28C
CODE_00EC24:
#LMBlockOffset_MarioSide:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_MarioSide
	BEQ.b CODE_00EC35
	CPY.b #$11
	BCC.b CODE_00EC3A
	CPY.b #$6E
	BCS.b CODE_00EC3A
	INX
	INX
	BRA.b CODE_00EC4E

CODE_00EC35:
	LDA.b #$10
	JSR.w CODE_00F2C9
CODE_00EC3A:
#LMBlockOffset_BodyInside:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_BodyInside
	BNE.b CODE_00EC46
	LDA.b #$08
	JSR.w CODE_00F2C9
	BRA.b CODE_00EC8A

CODE_00EC46:
	CPY.b #$11
	BCC.b CODE_00EC8A
	CPY.b #$6E
	BCS.b CODE_00EC8A
CODE_00EC4E:
	LDA.b !RAM_SMW_Player_FacingDirection
	CMP.b !RAM_SMW_Player_HorizontalSideOfBlockBeingTouched
	BEQ.b CODE_00EC5F
	JSR.w CheckIfEnteringHorizontalPipe
	PHX
	JSR.w CheckIfGrabbingThrowBlock
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	PLX
CODE_00EC5F:
	LDA.b #$03
	STA.w !RAM_SMW_Player_AnimationSpeedIndex
	LDY.b !RAM_SMW_Player_HorizontalSideOfBlockBeingTouched
	LDA.b !RAM_SMW_Player_XPosLo
	AND.b #$0F
	CMP.w SMW_HandlePlayerLevelCollision_DATA_00E911,y
	BEQ.b CODE_00EC8A
CODE_00EC6F:
	LDA.w !RAM_SMW_Blocks_NoteBlockBounceFlag
	BEQ.b CODE_00EC7B
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$52
	BEQ.b CODE_00EC8A
CODE_00EC7B:
	LDA.w SMW_HandlePlayerLevelCollision_DATA_00E90A,y
	TSB.b !RAM_SMW_Player_BlockedFlags
	AND.b #$03
	TAY
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	JSL.l CheckIfPlayerTouchingHurtBlock_IgnoreYoshi
CODE_00EC8A:
#LMBlockOffset_MarioBelow:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_MarioBelow
	BNE.b CODE_00ECB1
	LDA.b #$02
	JSR.w CODE_00F2C2
	LDY.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00ECA3
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$21
	BCC.b CODE_00ECA3
	CMP.b #$25
	BCC.b CODE_00ECA6
CODE_00ECA3:
	JMP.w CODE_00ED4A

CODE_00ECA6:
	SEC
	SBC.b #$04
	LDY.b #$00
	JSL.l SMW_CheckIfBlockWasHit_Entry3
	BRA.b CODE_00ED0D

CODE_00ECB1:
	CPY.b #$11
	BCC.b CODE_00ECA3
	CPY.b #$6E
	BCC.b CODE_00ECFA
	CPY.b #$D8
	BCC.b CODE_00ECDA
	REP.b #$20
	LDA.b !RAM_SMW_Blocks_YPosLo
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Blocks_YPosLo
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_Entry2
	BEQ.b CODE_00ECF8
	CPY.b #$6E
	BCC.b CODE_00ED4A
	CPY.b #$D8
	BCS.b CODE_00ED4A
	LDA.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
	SBC.b #$0F
	STA.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
CODE_00ECDA:
	TYA
	SEC
	SBC.b #$6E
	TAY
	REP.b #$20
	LDA.b [!RAM_SMW_Pointer_SlopeSteepnessLo],y
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	SEP.b #$20
	ORA.b !RAM_SMW_Player_XPosInBlock
	REP.b #$10
	TAY
	LDA.w SMW_SlopeDataTables_ShapeOfSlope,y
	SEP.b #$10
	BMI.b CODE_00ED0F
CODE_00ECF8:
	BRA.b CODE_00ED4A

CODE_00ECFA:
	LDA.b #$02
	JSR.w CODE_00F3E9
	TYA
	LDY.b #$00
	JSL.l CheckIfPlayerTouchingHurtBlock_IgnoreYoshi
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$1E
	BEQ.b CODE_00ED3B
CODE_00ED0D:
	LDA.b #$F0
CODE_00ED0F:
	CLC
	ADC.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
	BPL.b CODE_00ED4A
	CMP.b #$F9
	BCS.b CODE_00ED28
	LDY.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00ED28
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$FC
	ORA.b #$09
	STA.b !RAM_SMW_Player_BlockedFlags
	STZ.b !RAM_SMW_Player_XSpeed
	BRA.b CODE_00ED3B

CODE_00ED28:
	LDY.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00ED37
	EOR.b #$FF
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Player_YPosLo
	BCC.b CODE_00ED37
	INC.b !RAM_SMW_Player_YPosHi
CODE_00ED37:
	LDA.b #$08
	TSB.b !RAM_SMW_Player_BlockedFlags
CODE_00ED3B:
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00ED4A
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.w !RAM_SMW_IO_SoundCh1				;\ Note: !Define_SMW_Sound1DF9_HitHead
	BNE.b CODE_00ED4A					;|
	INC							;|
	STA.w !RAM_SMW_IO_SoundCh1				;/
CODE_00ED4A:
#LMBlockOffset_MarioAbove:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_MarioAbove
	BNE.b CODE_00ED52
	JMP.w CODE_00EDDB

CODE_00ED52:
	CPY.b #$6E
	BCS.b CODE_00ED5E
	LDA.b #$03
	JSR.w CODE_00F3E9
	JMP.w CODE_00EDF7

CODE_00ED5E:
	CPY.b #$D8
	BCC.b CODE_00ED86
	CPY.b #$FB
	BCC.b CODE_00ED69
	JMP.w SMW_DamagePlayer_KillAndDisableButtons

CODE_00ED69:
	REP.b #$20
	LDA.b !RAM_SMW_Blocks_YPosLo
	SEC
	SBC.w #$0010
	STA.b !RAM_SMW_Blocks_YPosLo
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_Entry2
	BEQ.b CODE_00EDE9
	CPY.b #$6E
	BCC.b CODE_00EDE9
	CPY.b #$D8
	BCS.b CODE_00EDE9
	LDA.b !RAM_SMW_Player_YPosInBlock
	ADC.b #$10
	STA.b !RAM_SMW_Player_YPosInBlock
CODE_00ED86:
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$03
	BEQ.b CODE_00ED91
	CMP.b #$0E
	BNE.b CODE_00ED95
CODE_00ED91:
	CPY.b #$D2
	BCS.b CODE_00EDE9
CODE_00ED95:
	TYA
	SEC
	SBC.b #$6E
	TAY
	LDA.b [!RAM_SMW_Pointer_SlopeSteepnessLo],y
	PHA
	REP.b #$20
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	SEP.b #$20
	ORA.b !RAM_SMW_Player_XPosInBlock
	PHX
	REP.b #$10
	TAX
	LDA.b !RAM_SMW_Player_YPosInBlock
	SEC
	SBC.w SMW_SlopeDataTables_ShapeOfSlope,x
	BPL.b CODE_00EDB9
	INC.w !RAM_SMW_Player_OnGroundFlag
CODE_00EDB9:
	SEP.b #$10
	PLX
	PLY
	CMP.w SMW_SlopeDataTables_Player_SnapToSlopeDistance,y
	BCS.b CODE_00EDE9
	STA.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
	STZ.b !RAM_SMW_Player_YPosInBlock
	JSR.w CODE_00F005
	CPY.b #$1C
	BCC.b CODE_00EDD5
	LDA.b #$08
	STA.w !RAM_SMW_Timer_PlayerSlidesWhenTuring
	JMP.w CODE_00EED1

CODE_00EDD5:
	JSR.w CODE_00EFBC
	JMP.w CODE_00EE85

CODE_00EDDB:
	CPY.b #$05
	BNE.b CODE_00EDE4
	JSR.w SMW_DamagePlayer_KillAndDisableButtons
	BRA.b CODE_00EDE9

CODE_00EDE4:
	LDA.b #$04
	JSR.w CODE_00F2C2
CODE_00EDE9:
#LMBlockOffset_TopCorner:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_TopCorner
	BNE.b CODE_00EDF3
	JSR.w CODE_00F309
	BRA.b CODE_00EE1D

CODE_00EDF3:
	CPY.b #$6E
	BCS.b CODE_00EE1D
CODE_00EDF7:
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return00EE39
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$03
	BEQ.b CODE_00EE06
	CMP.b #$0E
	BNE.b CODE_00EE11
CODE_00EE06:
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CPY.b #$59
	BCC.b CODE_00EE11
	CPY.b #$5C
	BCC.b CODE_00EE1D
CODE_00EE11:
	LDA.b !RAM_SMW_Player_YPosInBlock
	AND.b #$0F
	STZ.b !RAM_SMW_Player_YPosInBlock
	CMP.b #$08
	STA.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
	BCC.b CODE_00EE3A
CODE_00EE1D:
	LDA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	BEQ.b CODE_00EE2D
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00EE2D
	STZ.b !RAM_SMW_Misc_ScratchRAM8E
	LDY.b #$20
	JMP.w CODE_00EEE1

CODE_00EE2D:
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$04
	ORA.b !RAM_SMW_Player_InAirFlag
	BNE.b Return00EE39
CODE_00EE35:
	LDA.b #$24
	STA.b !RAM_SMW_Player_InAirFlag
Return00EE39:
	RTS

CODE_00EE3A:
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$02
	BEQ.b CODE_00EE48
	CMP.b #$08
	BNE.b CODE_00EE57
CODE_00EE48:
	TYA
	SEC
	SBC.b #$0C
	CMP.b #$02
	BCS.b CODE_00EE57
	ASL
	TAX
	JSR.w CODE_00EFCD
	BRA.b CODE_00EE83

CODE_00EE57:
	JSR.w CheckIfGrabbingThrowBlock
	LDY.b #$03
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$1E
	BNE.b CODE_00EE78
	LDX.b !RAM_SMW_Misc_ScratchRAM8F
	BEQ.b CODE_00EE83
	LDX.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00EE83
	LDX.w !RAM_SMW_Player_SpinJumpFlag
	BEQ.b CODE_00EE83
	LDA.b #$21
	JSL.l SMW_CheckIfBlockWasHit_Entry3
	BRA.b CODE_00EE1D

CODE_00EE78:
	CMP.b #$32
	BNE.b CODE_00EE7F
	STZ.w !RAM_SMW_Flag_ActiveCreateEatBlock
CODE_00EE7F:
	JSL.l CheckIfPlayerTouchingHurtBlock
CODE_00EE83:
	LDY.b #$20
CODE_00EE85:
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00EE8F
	LDA.b !RAM_SMW_Misc_ScratchRAM8D
	CMP.b #$02
	BCC.b Return00EE39
CODE_00EE8F:
	LDX.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed2
	BEQ.b CODE_00EED1
	DEX
	TXA
	AND.b #$03
	BEQ.b CODE_00EEAA
	CMP.b #$02
	BCS.b CODE_00EED1
	REP.b #$20
	LDA.b !RAM_SMW_Blocks_XPosLo
	SEC
	SBC.w #$0010
	STA.b !RAM_SMW_Blocks_XPosLo
	SEP.b #$20
CODE_00EEAA:
	TXA
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Flag_ActivatedGreenSwitch,x
	BNE.b CODE_00EED1
	INC
	STA.w !RAM_SMW_Flag_ActivatedGreenSwitch,x
	STA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	PHY
	STX.w !RAM_SMW_Sprites_ColorOfFlatPalaceSwitchToSpawn
	JSR.w SpawnFlatPalaceSwitch
	PLY
	LDA.b #!Define_SMW_LevelMusic_PassedLevel
	STA.w !RAM_SMW_IO_MusicCh1
	LDA.b #$FF
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
	LDA.b #$08
	STA.w !RAM_SMW_Timer_EndLevel
CODE_00EED1:
	INC.w !RAM_SMW_Player_OnGroundFlag
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_Player_VerticalDirectionToPushOutOfBlock
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b !RAM_SMW_Player_YPosHi
	SBC.b !RAM_SMW_Player_YPosInBlock
	STA.b !RAM_SMW_Player_YPosHi
CODE_00EEE1:
	LDA.w SMW_SlopeDataTables_SlopeType,y
	BNE.b CODE_00EEEF
	LDX.w !RAM_SMW_Player_SlidingOnGround
	BEQ.b CODE_00EF05
	LDX.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_00EF02
CODE_00EEEF:
	STA.w !RAM_SMW_Player_SlopePlayerIsOn2
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b CODE_00EF05
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	ORA.w !RAM_SMW_Player_SlidingOnGround
	BNE.b CODE_00EF05
	LDX.b #$1C
CODE_00EF02:
	STX.w !RAM_SMW_Player_SlidingOnGround
CODE_00EF05:
	LDX.w SMW_SlopeDataTables_Player_SlopeType,y
	STX.w !RAM_SMW_Player_SlopePlayerIsOn1
	CPY.b #$1C
	BCS.b CODE_00EF38
	LDA.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_00EF31
	LDA.w SMW_SlopeDataTables_SlopeType,y
	BEQ.b CODE_00EF31
	EOR.b !RAM_SMW_Player_XSpeed
	BPL.b CODE_00EF31
	STX.w !RAM_SMW_Player_AnimationSpeedIndex
	LDA.b !RAM_SMW_Player_XSpeed
	BPL.b CODE_00EF26
	EOR.b #$FF
	INC
CODE_00EF26:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$34
else
	CMP.b #$28
endif
	BCC.b CODE_00EF2F
	LDA.w SMW_SlopeDataTables_Player_TowardsPeakYSpeed,y
	BRA.b CODE_00EF60

CODE_00EF2F:
	LDY.b #$20
CODE_00EF31:
	LDA.b !RAM_SMW_Player_YSpeed
	CMP.w SMW_SlopeDataTables_Player_StationaryYSpeed,y
	BCC.b CODE_00EF3B
CODE_00EF38:
	LDA.w SMW_SlopeDataTables_Player_StationaryYSpeed,y
CODE_00EF3B:
	LDX.b !RAM_SMW_Misc_ScratchRAM8E
	BPL.b CODE_00EF60
	INC.w !RAM_SMW_Sprites_Layer2IsTouchedFlag
	PHA
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer2XDisp-$01
	AND.w #$FF00
	BPL.b CODE_00EF50
	ORA.w #$00FF
CODE_00EF50:
	XBA
	EOR.w #$FFFF
	INC
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	SEP.b #$20
	PLA
	CLC
	ADC.b #$28
CODE_00EF60:
	STA.b !RAM_SMW_Player_YSpeed
	TAX
	BPL.b CODE_00EF68
	INC.w !RAM_SMW_Player_OnGroundFlag
CODE_00EF68:
	STZ.w !RAM_SMW_Flag_StandingOnBetaCage
	STZ.b !RAM_SMW_Player_InAirFlag
	STZ.b !RAM_SMW_Player_ClimbingFlag
	STZ.w !RAM_SMW_Camera_BounceOffSpringFlag
	STZ.w !RAM_SMW_Player_SpinJumpFlag
	LDA.b #$04
	TSB.b !RAM_SMW_Player_BlockedFlags
	LDY.w !RAM_SMW_Player_CapeFlyingPhase
	BNE.b CODE_00EF99
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00EF95
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	BEQ.b CODE_00EF95
	LDA.w !RAM_SMW_Yoshi_StompGroundFlag
	BEQ.b CODE_00EF95
	JSL.l SMW_YoshiStompRoutine_Main
	LDA.b #!Define_SMW_Sound1DFC_YoshiStompsEnemy
	STA.w !RAM_SMW_IO_SoundCh3
CODE_00EF95:
	STZ.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	RTS

CODE_00EF99:
	STZ.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	STZ.w !RAM_SMW_Player_CapeFlyingPhase
	CPY.b #$05
	BCS.b CallGroundPound
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	CMP.b #$02
	BNE.b Return00EFAD
	SEC
	ROR.w !RAM_SMW_Player_SlidingOnGround
Return00EFAD:
	RTS

CallGroundPound:
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	BEQ.b Return00EFBB
	JSL.l TriggerCapeDiveGroundPound
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
Return00EFBB:
	RTS

CODE_00EFBC:
	LDX.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CPX.b #$CE
	BCC.b Return00EFE7
	CPX.b #$D2
	BCS.b Return00EFE7
	TXA
	SEC
	SBC.b #$CC
	ASL
	TAX
CODE_00EFCD:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return00EFE7
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w SMW_HandlePlayerLevelCollision_DATA_00E913,x
	STA.b !RAM_SMW_Player_XPosLo
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w SMW_HandlePlayerLevelCollision_DATA_00E91F,x
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
Return00EFE7:
	RTS

CODE_00EFE8:
	JSR.w SMW_GetPlayerLevelCollisionMap16ID_Main
	BNE.b ADDR_00EFF0
	JMP.w CODE_00F309

ADDR_00EFF0:
	CPY.b #$11
	BCC.b Return00F004
	CPY.b #$6E
	BCS.b Return00F004
	TYA
	LDY.b #$00
	JSL.l SMW_CheckIfBlockWasHit_Main
	PLA
	PLA
	JMP.w ADDR_00EB42

Return00F004:
	RTS

CODE_00F005:
	TYA
	SEC
	SBC.b #$0E
	CMP.b #$02
	BCS.b Return00F04C
	EOR.b #$01
	CMP.b !RAM_SMW_Player_FacingDirection
	BNE.b Return00F04C
	TAX
	LSR
	LDA.b !RAM_SMW_Player_XPosInBlock
	BCC.b CODE_00F01B
	EOR.b #$0F
CODE_00F01B:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$09
else
	CMP.b #$08
endif
	BCS.b Return00F04C
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00F035
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$80
	STA.b !RAM_SMW_Player_YSpeed
	STA.w !RAM_SMW_Camera_BounceOffSpringFlag
	PLA
	PLA
	JMP.w CODE_00EE35

CODE_00F035:
	LDA.b !RAM_SMW_Player_XSpeed
	SEC
	SBC.w DATA_00EAB9,x
	EOR.w DATA_00EAB9,x
	BMI.b Return00F04C
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	ORA.b !RAM_SMW_Player_DuckingFlag
	BNE.b Return00F04C
	INX
	INX
	STX.w !RAM_SMW_Player_WallWalkStatus
Return00F04C:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

UnknownData00E8A4:
	db $10,$00,$20,$00,$20,$00,$18,$00
	db $1A,$00,$16,$00,$10,$00,$20,$00
	db $20,$00,$12,$00,$1A,$00,$0F,$00
	db $08,$00,$20,$00,$20,$00,$12,$00
	db $1A,$00,$0F,$00,$08,$00,$20,$00
	db $20,$00,$1D,$00,$28,$00,$19,$00
	db $13,$00,$30,$00,$30,$00,$1D,$00
	db $28,$00,$19,$00,$13,$00,$30,$00
	db $30,$00,$1A,$00,$28,$00,$16,$00
	db $10,$00,$30,$00,$30,$00,$1A,$00
	db $28,$00,$16,$00,$10,$00,$30,$00
	db $30,$00,$18,$00,$18,$00,$18,$00
	db $18,$00,$18,$00,$18,$00
namespace off
endmacro

macro ROUTINE_RT02_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

CheckIfPlayerTouchingHurtBlock:
	XBA
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b SMW_CheckIfBlockWasHit_Entry2
	XBA
.IgnoreYoshi:
	CMP.b #$2F
	BEQ.b CODE_00F154
	CMP.b #$59
	BCC.b CODE_00F144
	CMP.b #$5C
	BCS.b CODE_00F140
	XBA
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$05
	BEQ.b CODE_00F154
	CMP.b #$0D
	BEQ.b CODE_00F154
	XBA
CODE_00F140:
	CMP.b #$5D
	BCC.b CODE_00F14C
CODE_00F144:
	CMP.b #$66
	BCC.b SMW_CheckIfBlockWasHit_Main
	CMP.b #$6A
	BCS.b SMW_CheckIfBlockWasHit_Main
CODE_00F14C:
	XBA
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$01
	BNE.b SMW_CheckIfBlockWasHit_Entry2
CODE_00F154:
	PHB
	LDA.b #(SMW_DamagePlayer_Hurt>>16)+$01				; Glitch: Why bank 01?
	PHA
	PLB
	JSL.l SMW_DamagePlayer_Hurt
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT03_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

CheckIfGrabbingThrowBlock:
	CPY.b #$2E
	BNE.b Return00F28B
	BIT.b !RAM_SMW_IO_ControllerPress1
	BVC.b Return00F28B
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b Return00F28B
	LDA.b #SMW_GrabThrowBlockBlock_Main>>16
	PHA
	PLB
	JSL.l SMW_GrabThrowBlockBlock_Main
	BMI.b CODE_00F289
	LDA.b #$02
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
CODE_00F289:
	PHK
	PLB
Return00F28B:
	RTS

CODE_00F28C:
	TYA
	SEC
	SBC.b #$6F
	CMP.b #$04
	BCS.b CODE_00F2C0
	CMP.w !RAM_SMW_Counter_1upCheckPointsCollected
	BEQ.b CODE_00F2A8
	INC
	CMP.w !RAM_SMW_Counter_1upCheckPointsCollected
	BEQ.b Return00F2BF
	LDA.w !RAM_SMW_Counter_1upCheckPointsCollected
	CMP.b #$04
	BCS.b Return00F2BF
	LDA.b #$FF
CODE_00F2A8:
	INC
	STA.w !RAM_SMW_Counter_1upCheckPointsCollected
	CMP.b #$04
	BNE.b Return00F2BF
	PHX
	JSL.l SMW_TriggerHidden1up_Main
	JSR.w GetOverworldLevelIndex
	ORA.w !RAM_SMW_Flag_Collected1upCheckpoints,y
	STA.w !RAM_SMW_Flag_Collected1upCheckpoints,y
	PLX
Return00F2BF:
	RTS

CODE_00F2C0:
	LDA.b #$01
CODE_00F2C2:
	CPY.b #$06
	BCS.b CODE_00F2C9
	TSB.b !RAM_SMW_Misc_ScratchRAM8A
	RTS

CODE_00F2C9:
	CPY.b #$38
	BNE.b CODE_00F2EE
	LDA.b #$02
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	JSR.w SMW_SpawnGlitterEffectForCoin_Main
	LDA.w !RAM_SMW_UnusedRAM_DisableMidpoint		;\ Optimization: $13CD is never 00, so this branch will never execute
#LM000Hijack_Unknown00F2DB:					;|
	BEQ.b CODE_00F2E0					;/
	JSR.w SMW_PlayerState00_Normal_SetMidpointFlag
CODE_00F2E0:
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_00F2E8
	LDA.b #$01
	STA.b !RAM_SMW_Player_CurrentPowerUp
CODE_00F2E8:
	LDA.b #!Define_SMW_Sound1DF9_MidwayPoint
	STA.w !RAM_SMW_IO_SoundCh1
	RTS

CODE_00F2EE:
	CPY.b #$06
	BEQ.b CODE_00F2FC
	CPY.b #$07
	BCC.b CODE_00F309
	CPY.b #$1D
	BCS.b CODE_00F309
	ORA.b #$80
CODE_00F2FC:
	CMP.b #$01
	BNE.b CODE_00F302
	ORA.b #$18
CODE_00F302:
	TSB.b !RAM_SMW_Misc_ScratchRAM8B
	LDA.b !RAM_SMW_Player_HorizontalSideOfBlockBeingTouched
	STA.b !RAM_SMW_Misc_ScratchRAM8C
	RTS

CODE_00F309:
	CPY.b #$2F
	BCS.b CODE_00F311
	CPY.b #$2A
	BCS.b CODE_00F32B
CODE_00F311:
	CPY.b #$6E
	BNE.b Return00F376
	LDA.b #$0F
	JSL.l SMW_SpawnScoreSpriteAtPlayerPosition_Main
	INC.w !RAM_SMW_UnusedRAM_3upMoonsCounter			; Optimization: These address would make for some nice free RAM
	PHX
	JSR.w GetOverworldLevelIndex
	ORA.w !RAM_SMW_Flag_CollectedMoons,y
	STA.w !RAM_SMW_Flag_CollectedMoons,y
	PLX
	BRA.b CODE_00F36B

CODE_00F32B:
	BNE.b CODE_00F332
	LDA.w !RAM_SMW_Timer_BluePSwitch
	BEQ.b Return00F376
CODE_00F332:
	CPY.b #$2D
	BEQ.b CODE_00F33F
	BCC.b CODE_00F367
	LDA.b !RAM_SMW_Blocks_YPosLo
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_Blocks_YPosLo
CODE_00F33F:
	JSL.l CODE_00F377
	INC.w !RAM_SMW_Counter_YoshiCoinsToDisplay
	LDA.w !RAM_SMW_Counter_YoshiCoinsToDisplay
	CMP.b #$05
	BCC.b CODE_00F358
	PHX
	JSR.w GetOverworldLevelIndex
	ORA.w !RAM_SMW_Flag_Collected5YoshiCoins,y
	STA.w !RAM_SMW_Flag_Collected5YoshiCoins,y
	PLX
CODE_00F358:
	LDA.b #!Define_SMW_Sound1DF9_YoshiCoin
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$01
	JSL.l SMW_GiveCoins_MultipleCoins_NoCoinSound
	LDY.b #$18
	BRA.b CODE_00F36D

CODE_00F367:
	JSL.l SMW_GiveCoins_OneCoin
CODE_00F36B:
	LDY.b #$01
CODE_00F36D:
	STY.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	JSR.w SMW_SpawnGlitterEffectForCoin_Main
Return00F376:
	RTS

CODE_00F377:
	LDA.w !RAM_SMW_Counter_YoshiCoinsCollected
	INC.w !RAM_SMW_Counter_YoshiCoinsCollected
	CLC
	ADC.b #$09
	CMP.b #$0D
	BCC.b CODE_00F386
	LDA.b #$0D
CODE_00F386:
	BRA.b SMW_SpawnScoreSpriteAtPlayerPosition_Main
namespace off
endmacro

macro ROUTINE_RT04_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

GetOverworldLevelIndex:
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	AND.b #$07
	TAX
	LDA.l SMW_BitTable_Bank05,x
	RTS

CheckIfEnteringHorizontalPipe:
	CPY.b #$3F
	BNE.b Return00F376
	LDY.b !RAM_SMW_Misc_ScratchRAM8F
	BEQ.b CODE_00F3CF
	JMP.w CODE_00F43F

CODE_00F3CF:
	PHX
	TAX
	LDA.b !RAM_SMW_Player_XPosLo
	TXY
	BEQ.b CODE_00F3D9
	EOR.b #$FF
	INC
CODE_00F3D9:
	AND.b #$0F
	ASL
	CLC
	ADC.b #$20
	LDY.b #!Define_SMW_PlayerState05_EnterHorizontalPipe
	BRA.b CODE_00F40A

DATA_00F3E3:
	db $0A,$FF

PIPE_BUTTONS:
	db !Joypad_DPadL>>8,!Joypad_DPadR>>8,!Joypad_DPadU>>8,!Joypad_DPadD>>8

CODE_00F3E9:
	XBA
	TYA
	SEC
	SBC.b #$37
	CMP.b #$02
	BCS.b Return00F442
	TAY
	LDA.b !RAM_SMW_Player_XPosInBlock
	SBC.w DATA_00F3E3,y
	CMP.b #$05
	BCS.b CODE_00F43F
	PHX
	XBA
	TAX
	LDA.b #$20
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00F408
	LDA.b #$30
CODE_00F408:
	LDY.b #!Define_SMW_PlayerState06_EnterVerticalPipe
CODE_00F40A:
	STA.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.w PIPE_BUTTONS,x
	BEQ.b CODE_00F43E
	STA.b !RAM_SMW_Flag_SpritesLocked
	AND.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
	STX.b !RAM_SMW_Player_PipeAction
	TXA
	LSR
	TAX
	BNE.b CODE_00F430
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00F430
	LDA.b !RAM_SMW_Player_FacingDirection
	EOR.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
	LDA.b #$08
	STA.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
CODE_00F430:
	INX
	STX.w !RAM_SMW_Yoshi_InPipe
	STY.b !RAM_SMW_Player_CurrentState
	JSR.w SMW_DamagePlayer_DisableButtons
	LDA.b #!Define_SMW_Sound1DF9_IntoPipe
	STA.w !RAM_SMW_IO_SoundCh1
CODE_00F43E:
	PLX
CODE_00F43F:
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
Return00F442:
	RTS

CODE_00F443:
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b #$04
	AND.b #$0F
	CMP.b #$08
	RTS
namespace off
endmacro

macro ROUTINE_RT05_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

SpawnFlatPalaceSwitch:
	LDA.b #$20
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDY.b #$02						; Note: It seems that the flat palace switch sprite spawns in a hardcoded slot...
	LDA.b #!Define_SMW_SpriteID_NorSpr060_FlatPalaceSwitch
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.b #$F0
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	CLC
	ADC.b #$10
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.b !RAM_SMW_Blocks_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	LDA.b #$5F
	STA.w !RAM_SMW_NorSpr060_FlatPalaceSwitch_WaitBeforeEraseSwitchObject,y
	RTS
namespace off
endmacro

macro ROUTINE_RT06_SMW_RunPlayerBlockCode(Address)
namespace SMW_RunPlayerBlockCode
%InsertMacroAtXPosition(<Address>)

TriggerCapeDiveGroundPound:
	LDA.b #$30
	STA.w !RAM_SMW_Timer_ShakeLayer1
	STZ.w !RAM_SMW_UnusedRAM_7E14A9					; Optimization: Unused
	PHB
	PHK
	PLB
	LDX.b #!Define_SMW_MaxNormalSpriteSlot-$02
KillSprLoopStart:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b GroundPoundNextSpr
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b GroundPoundNextSpr
	LDA.w !RAM_SMW_NorSpr_PropertyBits166E,x
	AND.b #!Define_SMW_NorSpr_166EProp_ImmuneToCape
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b GroundPoundNextSpr
	LDA.b #$35
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_CheckForPlayerAttackToNormalSpriteCollision_CODE_029404
GroundPoundNextSpr:
	DEX
	BPL.b KillSprLoopStart
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CheckForWaterSlope(Address)
namespace SMW_CheckForWaterSlope
%InsertMacroAtXPosition(<Address>)

Main:
	PHX
	LDX.b #$19
CODE_00F050:
	CMP.l SMW_RunPlayerBlockCode_WaterSlopeMap16Numbers,x
	BEQ.b CODE_00F05A
	DEX
	BPL.b CODE_00F050
	CLC
CODE_00F05A:
	PLX
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_GetPlayerLevelCollisionMap16ID(Address)
namespace SMW_GetPlayerLevelCollisionMap16ID
%InsertMacroAtXPosition(<Address>)

WallRun:
MarioBelow:
MarioAbove:
MarioSide:
TopCorner:
HeadInside:
BodyInside:
Main:
	INX
	INX
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_00E832-$02,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w DATA_00E89C,x
	STA.b !RAM_SMW_Blocks_YPosLo
Entry2:
	JSR.w Sub
	RTS

Sub:
	SEP.b #$20
	STZ.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed2
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM8E
	BPL.b CODE_00F472
	JMP.w CODE_00F4EC

CODE_00F472:
	BNE.b CODE_00F4A6
	REP.b #$20
	LDA.b !RAM_SMW_Blocks_YPosLo
#LM300Hijack_CustomLevelDimensions03:
	CMP.w #$01B0
	SEP.b #$20
	BCS.b CODE_00F4A0
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Blocks_XPosHi
	CPX.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b CODE_00F4A0
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
#LM300Hijack_CustomLevelDimensions04:
	ADC.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_YPosHi
#LM300Hijack_CustomLevelDimensions05:
	ADC.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	BRA.b CODE_00F4CD

CODE_00F4A0:
	PLX
	LDY.b #$25							;\ Glitch: Because !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo is not set here, going out of bounds can potentially cause Mario to interact with random map16 tiles on page 00.
CODE_00F4A3:								;|
	LDA.b #$00							;/ LM: Lunar Magic 3.04 fixes this bug
	RTS

CODE_00F4A6:
	LDA.b !RAM_SMW_Blocks_XPosHi
	CMP.b #$02
	BCS.b CODE_00F4E7
	LDX.b !RAM_SMW_Blocks_YPosHi
	CPX.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b CODE_00F4E7
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_XPosHi
	ADC.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x
CODE_00F4CD:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM02
	PLX
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
#LM000Hijack_ProcessCustomPlayerBlockCode:
	JSL.l SMW_ModifyMap16IDForSpecialBlocks_Main
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$00
	RTS

CODE_00F4E7:
	PLX
	LDY.b #$25
	BRA.b CODE_00F4A3

CODE_00F4EC:
	ASL
	BNE.b CODE_00F51B
	REP.b #$20
	LDA.b !RAM_SMW_Blocks_YPosLo
#LM300Hijack_CustomLevelDimensions06:
	CMP.w #$01B0
	SEP.b #$20
	BCS.b CODE_00F4E7
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Blocks_XPosHi
	CPX.b #$10
	BCS.b CODE_00F4E7
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
#LM300Hijack_CustomLevelDimensions07:
	ADC.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_YPosHi
#LM300Hijack_CustomLevelDimensions08:
	ADC.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
	BRA.b CODE_00F4CD

CODE_00F51B:
	LDA.b !RAM_SMW_Blocks_XPosHi
	CMP.b #$02
	BCS.b CODE_00F4E7
	LDX.b !RAM_SMW_Blocks_YPosHi
	CPX.b #$0E
	BCS.b CODE_00F4E7
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_XPosHi
	ADC.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x
	JMP.w CODE_00F4CD
namespace off
endmacro

macro ROUTINE_RT01_SMW_GetPlayerLevelCollisionMap16ID(Address)
namespace SMW_GetPlayerLevelCollisionMap16ID
%InsertMacroAtXPosition(<Address>)

DATA_00E832:
	dw $0008,$000E,$000E,$0008
	dw $0005,$000B,$0008,$0002
	dw $0002,$0008,$000B,$0005
	dw $0008,$000E,$000E,$0008
	dw $0005,$000B,$0008,$0002
	dw $0002,$0008,$000B,$0005
	dw $0008,$000E,$000E,$0008
	dw $0005,$000B,$0008,$0002
	dw $0002,$0008,$000B,$0005
	dw $0008,$000E,$000E,$0008
	dw $0005,$000B,$0008,$0002
	dw $0002,$0008,$000B,$0005
	dw $0010,$0020,$0007,$0000
	dw $FFF0

DATA_00E89C:
	dw $0008,$0018,$001A,$0016
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ModifyMap16IDForSpecialBlocks(Address)
namespace SMW_ModifyMap16IDForSpecialBlocks
%InsertMacroAtXPosition(<Address>)

Main:
#LM_JMLHere_ModifyMap16IDForSpecialBlocks:
	TAY
	BNE.b CODE_00F577
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CPY.b #$29
	BNE.b PSwitchNotInvQBlk
	LDY.w !RAM_SMW_Timer_BluePSwitch
	BEQ.b Return00F594
	LDA.b #$24
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	RTL

PSwitchNotInvQBlk:
	CPY.b #$2B
	BEQ.b PSwitchCoinBrown
	TYA
	SEC
	SBC.b #$EC
	CMP.b #$10
	BCS.b CODE_00F592
	INC
	STA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed2
	BRA.b CODE_00F571

PSwitchCoinBrown:
	LDY.w !RAM_SMW_Timer_BluePSwitch
	BEQ.b Return00F594
CODE_00F571:
	LDA.b #$32
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	RTL

CODE_00F577:
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CPY.b #$32
	BNE.b CODE_00F584
	LDY.w !RAM_SMW_Timer_BluePSwitch
	BNE.b CODE_00F58D
	RTL

CODE_00F584:
	CPY.b #$2F
	BNE.b Return00F594
	LDY.w !RAM_SMW_Timer_SilverPSwitch
	BEQ.b Return00F594
CODE_00F58D:
	LDY.b #$2B
	STY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
CODE_00F592:
	LDA.b #$00
Return00F594:
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_YoshiStompRoutine(Address)
namespace SMW_YoshiStompRoutine
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	BNE.b Return0286EC
	PHB
	PHK
	PLB
	JSR.w SMW_InitializeBlockPunchAttack_Main
	LDA.b #$02
	STA.w !RAM_SMW_BounceSpr_Type,y
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w !RAM_SMW_BounceSpr_HitboxXLo,y
	LDA.b !RAM_SMW_Player_XPosHi
	STA.w !RAM_SMW_BounceSpr_HitboxYHi,y
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$20
	STA.w !RAM_SMW_BounceSpr_HitboxYLo,y
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_BounceSpr_HitboxYHi,y
	JSR.w SMW_SpawnYoshiStompSmoke_Main
	PLB
Return0286EC:
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnYoshiStompSmoke(Address)
namespace SMW_SpawnYoshiStompSmoke
%InsertMacroAtXPosition(<Address>)

InitialXLo:
	db $08,$F8

InitialXHi:
	db $00,$FF

InitialXSpeed:
	db $18,$E8

Main:
	LDA.b #$05
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SpawnFirstSmoke
	INC.b !RAM_SMW_Misc_ScratchRAM00
SpawnFirstSmoke:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
Loop:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b SpawnSmoke
	DEY
	BPL.b Loop
	RTS

SpawnSmoke:
	LDA.b #!Define_SMW_SpriteID_ExtSpr0F_SmokeTrail
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$28
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w InitialXLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.w InitialXHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.w InitialXSpeed,x
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	LDA.b #$15
	STA.w !RAM_SMW_ExtSpr0F_SmokeTrail_DespawnTimer,y
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GrabThrowBlockBlock(Address)
namespace SMW_GrabThrowBlockBlock
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return028662
	TYX
	LDA.b #!Define_SMW_NorSprStatus0B_Carried
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_YPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.b #$08
	STA.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	STA.w !RAM_SMW_Player_CarryingSomethingFlag2
Return028662:
	RTL

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnScoreSpriteAtPlayerPosition(Address)
namespace SMW_SpawnScoreSpriteAtPlayerPosition
%InsertMacroAtXPosition(<Address>)

LakituEntry:
	LDA.b #$0D
Main:
	PHA
	JSL.l SMW_CheckForAvailableScoreSpriteSlot_Main
	PLA
	STA.w !RAM_SMW_ScoreSpr_SpriteID,y
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w !RAM_SMW_ScoreSpr_XPosLo,y
	LDA.b !RAM_SMW_Player_XPosHi
	STA.w !RAM_SMW_ScoreSpr_XPosHi,y
	LDA.b !RAM_SMW_Player_YPosLo
	STA.w !RAM_SMW_ScoreSpr_YPosLo,y
	LDA.b !RAM_SMW_Player_YPosHi
	STA.w !RAM_SMW_ScoreSpr_YPosHi,y
	LDA.b #$30
	STA.w !RAM_SMW_ScoreSpr_YSpeed,y
	LDA.b #$00
	STA.w !RAM_SMW_ScoreSpr_LayerIndex,y
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro INLINEROUTINE_SMW_EraseExtendedSprite()
	STZ.w !RAM_SMW_ExtSpr_SpriteID,x
	RTS
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_EraseSmokeSprite()
	STZ.w !RAM_SMW_SmokeSpr_SpriteID,x
	RTS
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_EraseMinorExtendedSprite()
	STZ.w !RAM_SMW_MExtSpr_SpriteID,x
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro INLINEDATATABLE_SMW_LavaSplashTileNumbers()
	db $D7,$C7,$D6,$C6
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_ExtendedSpriteOAMIndexes(Address)
namespace SMW_ExtendedSpriteOAMIndexes
%InsertMacroAtXPosition(<Address>)

Main:
	db $90,$94,$98,$9C,$A0,$A4,$A8,$AC
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_SmokeSpriteOAMIndexes(Address)
namespace SMW_SmokeSpriteOAMIndexes
%InsertMacroAtXPosition(<Address>)

One:
	db $20,$24,$28,$2C
Two:
	db $90,$94,$98,$9C
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_MinorExtendedSpriteOAMIndexes(Address)
namespace SMW_MinorExtendedSpriteOAMIndexes
%InsertMacroAtXPosition(<Address>)

Main:
	db $50,$54,$58,$5C,$60,$64,$68,$6C
	db $70,$74,$78,$7C
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_ClusterSpriteOAMIndexes(Address)
namespace SMW_ClusterSpriteOAMIndexes
%InsertMacroAtXPosition(<Address>)

Main:
	db $E0,$E4,$E8,$EC,$F0,$F4,$F8,$FC
	db $5C,$58,$54,$50,$4C,$48,$44,$40
	db $3C,$38,$34,$30
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_OverworldSpriteOAMIndexes(Address)
namespace SMW_OverworldSpriteOAMIndexes
%InsertMacroAtXPosition(<Address>)

Main:
	db $F4,$F4,$F4,$F4,$F4,$9C,$3C,$48
	db $C8,$CC,$A0,$A4,$D8,$DC,$E0,$E4
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForPlayerToEnemyClusterSpriteCollision(Address)
namespace SMW_CheckForPlayerToEnemyClusterSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$14
	BRA.b CODE_02FE77

Entry2:							;\ Note: Unused
	LDA.b #$0C					;/
CODE_02FE77:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$000A
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
	BCS.b Return02FEC4
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	ADC.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM03
	REP.b #$20
	LDA.w #$0014
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b SmallPlayer
	LDA.w #$0020
SmallPlayer:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$001C
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	SEP.b #$20
	BCS.b Return02FEC4
	JSR.w SMW_ClusterSpr06_SumoBroFlame_CODE_02F9F5				; Optimization: Replace with JMP.w SMW_CheckForMarioToExtendedSpriteCollision_CODE_02A46E. This also removes the dependancy on the Sumo Bro Flames code.
Return02FEC4:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GetOverworldSpriteOnScreenPosition(Address)
namespace SMW_GetOverworldSpriteOnScreenPosition
%InsertMacroAtXPosition(<Address>)

Main:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxOverworldSpriteSlot+$01
	TAX
	LDY.b #$02
	JSR.w Y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.w !RAM_SMW_OWSpr_ZPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_04FE7B
	DEC.b !RAM_SMW_Misc_ScratchRAM03
CODE_04FE7B:
	LDY.b #$00
Y:
	LDA.w !RAM_SMW_OWSpr_XPosHi,x
	XBA
	LDA.w !RAM_SMW_OWSpr_XPosLo,x
	REP.b #$20
	SEC
	SBC.w !RAM_SMW_Mirror_CurrentLayer1XPosLo,y
	STA.w !RAM_SMW_Misc_ScratchRAM00,y
	SEP.b #$20
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_AddZPositionToTempYPos(Address)
namespace SMW_AddZPositionToTempYPos
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w !RAM_SMW_OWSpr_ZPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BCC.b Return04FE5A
	INC.b !RAM_SMW_Misc_ScratchRAM03
Return04FE5A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SetOverworldSpriteFrameIndex(Address)
namespace SMW_SetOverworldSpriteFrameIndex
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	CLC
	ADC.w DATA_04F833,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_SetOverworldSpriteFrameIndex(Address)
namespace SMW_SetOverworldSpriteFrameIndex
%InsertMacroAtXPosition(<Address>)

DATA_04F833:
	db $00,$52,$31,$19,$45,$2A,$03,$8B
	db $94,$3C,$78,$0D,$36,$5E,$87,$1F
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForPlayerToOverworldSpriteCollision(Address)
namespace SMW_CheckForPlayerToOverworldSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SubOverworldHorizAndVertPos
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CMP.w #$0008
	BCS.b ADDR_04FEE6
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w #$0008
ADDR_04FEE6:
	SEP.b #$20
	TXA
	BCS.b Return04FEEE
	STA.w !RAM_SMW_Overworld_EnterLevelFlag
Return04FEEE:
	RTS

SubOverworldHorizAndVertPos:
	LDA.w !RAM_SMW_OWSpr_XPosHi,x
	XBA
	LDA.w !RAM_SMW_OWSpr_XPosLo,x
	REP.b #$20
	CLC
	ADC.w #$0008
	LDY.w !RAM_SMW_Player_CurrentCharacterX4Lo
	SEC
	SBC.w !RAM_SMW_Overworld_MarioXPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_04FF0B
	EOR.w #$FFFF
	INC
ADDR_04FF0B:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	SEP.b #$20
	LDA.w !RAM_SMW_OWSpr_YPosHi,x
	XBA
	LDA.w !RAM_SMW_OWSpr_YPosLo,x
	REP.b #$20
	CLC
	ADC.w #$0008
	LDY.w !RAM_SMW_Player_CurrentCharacterX4Lo
	SEC
	SBC.w !RAM_SMW_Overworld_MarioYPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b ADDR_04FF2B
	EOR.w #$FFFF
	INC
ADDR_04FF2B:
	STA.b !RAM_SMW_Misc_ScratchRAM08
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawOverworldSpriteShadow(Address)
namespace SMW_DrawOverworldSpriteShadow
%InsertMacroAtXPosition(<Address>)

LeftTileXDisp:
	db $00,$00,$00,$00,$01,$02,$02,$02
	db $00,$00,$01,$01,$02,$02,$03,$03

RightTileXDisp:
	db $08,$08,$08,$08,$07,$06,$05,$05
	db $00,$00,$0E,$0E,$0C,$0C,$0A,$0A

Main:
	ROR.b !RAM_SMW_Misc_ScratchRAM04
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	JSR.w SMW_AddZPositionToTempYPos_Main
	LDA.w !RAM_SMW_OWSpr_ZPosLo,x
	LSR
	LSR
	LSR
	LSR
	LDY.b #$29
	BIT.b !RAM_SMW_Misc_ScratchRAM04				;\ Note: Lakitu and the blue bird are the only sprites that call this routine and both clear the carry flag before doing so.
	BPL.b ADDR_04FE1A						;| That means that the code below will never execute because $04 will always be positive.
	LDY.b #$2E							;| Tile #$2E is part of Yoshi's face, so the shadow will glitch if this were to execute anyway.
	CLC								;| Perhaps #$2E was originally a different shadow tile?
	ADC.b #$08							;/
ADDR_04FE1A:
	STY.b !RAM_SMW_Misc_ScratchRAM05
	TAY
	STY.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w LeftTileXDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b ADDR_04FE2B
	INC.b !RAM_SMW_Misc_ScratchRAM01
ADDR_04FE2B:
	LDA.b #$32
	LDY.w SMW_OverworldSpriteOAMIndexes_Main,x
	JSR.w ADDR_04FE45
	PHY
	LDY.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w RightTileXDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b ADDR_04FE42
	INC.b !RAM_SMW_Misc_ScratchRAM01
ADDR_04FE42:
	LDA.b #$72
	PLY
ADDR_04FE45:
	XBA
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ASL
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	JMP.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Entry2
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckIfXIsAllowedOnYSubmap(Address)
namespace SMW_CheckIfXIsAllowedOnYSubmap
%InsertMacroAtXPosition(<Address>)

ANDTable:
	db $80,$40,$20,$10,$08,$04,$02

Sprites:
	LDY.w !RAM_SMW_OWSpr_SpriteID,x
	LDA.w DisableSpriteOnXSubmapFlags-$01,y
Lightning:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CPY.b #$0A
	BNE.b CODE_04F892
	LDY.w !RAM_SMW_Overworld_SubmapSwitchProcess
	CPY.b #$01
	BNE.b CODE_04F8A3
CODE_04F892:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	TAY
	LDA.w ANDTable,y
	AND.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return04F8A5
CODE_04F8A3:
	LDA.b #$01
Return04F8A5:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckIfXIsAllowedOnYSubmap(Address)
namespace SMW_CheckIfXIsAllowedOnYSubmap
%InsertMacroAtXPosition(<Address>)

; Info: abcdefgh
; a = Disable on Main map
; b = Disable on Yoshi's Island
; c = Disable on Vanilla Dome
; d = Disable on Forest of Illusion
; e = Disable on Valley of Bowser
; f = Disable on Special World
; g = Disable on Star World
; h = Unused

DisableSpriteOnXSubmapFlags:
	db %01111111		; Lakitu
	db %00100001		; Blue Bird
	db %01111111		; Cheep Cheep
	db %01111111		; Piranha Plant
	db %01111111		; Cloud
	db %01110111		; Koopa Kid
	db %00111111		; Smoke
	db %11110111		; Bowser Sign
	db %11110111		; Bowser
	db %00000000		; Ghost
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_LoadOverworldSprites(Address)
namespace SMW_LoadOverworldSprites
%InsertMacroAtXPosition(<Address>)

SpriteSlotData:
.Slot00:
	db $00
	dw $0100
	dw $00E0
.Slot01:
	db $00
	dw $0100
	dw $0060
.Slot02:
	db !Define_SMW_SpriteID_OWSpr06_KoopaKid
	dw $0170
	dw $0020
.Slot03:
	db !Define_SMW_SpriteID_OWSpr07_Smoke
	dw $0038
	dw $018A
.Slot04:
	db $00
	dw $0058
	dw $007A
.Slot05:
	db !Define_SMW_SpriteID_OWSpr08_BowserSign
	dw $0188
	dw $0018
.Slot06:
	db !Define_SMW_SpriteID_OWSpr09_Bowser
	dw $0148
	dw $FFFC
.Slot07:
	db $00
	dw $0080
	dw $0100
.Slot08:
	db $00
	dw $0050
	dw $0140
.Slot09:
	db !Define_SMW_SpriteID_OWSpr03_CheepCheep
	dw $0000
	dw $0000
.Slot0A:
	db !Define_SMW_SpriteID_OWSpr0A_Boo
	dw $0040
	dw $0098
.Slot0B:
	db !Define_SMW_SpriteID_OWSpr0A_Boo
	dw $0060
	dw $00F8
.Slot0C:
	db !Define_SMW_SpriteID_OWSpr0A_Boo
	dw $0140
	dw $0158
.End:

SubmapBooXPosOffset:
	dw $0030,$0100,$FF10

SubmapBooYPosOffset:
	dw $0020,$FF70,$0010

UNK_04F672:
	db $01,$40,$80

Main:
;$04F675
	PHB
	PHK
	PLB
	LDX.b #!Define_SMW_MaxOverworldSpriteSlot-$03
	LDY.b #(!Define_SMW_MaxOverworldSpriteSlot)*((SpriteSlotData_End-SpriteSlotData)/$0D)
CODE_04F67C:
	LDA.w SpriteSlotData-(!Define_SMW_MaxOverworldSpriteSlot),y
	STA.w !RAM_SMW_OWSpr_SpriteID+$03,x
	CMP.b #!Define_SMW_SpriteID_OWSpr01_Lakitu
	BEQ.b ADDR_04F68A
	CMP.b #!Define_SMW_SpriteID_OWSpr02_BlueBird
	BNE.b CODE_04F68F
ADDR_04F68A:
	LDA.b #$40
	STA.w !RAM_SMW_OWSpr_ZPosLo+$03,x
CODE_04F68F:
	LDA.w SpriteSlotData-(!Define_SMW_MaxOverworldSpriteSlot-$01),y
	STA.w !RAM_SMW_OWSpr_XPosLo+$03,x
	LDA.w SpriteSlotData-(!Define_SMW_MaxOverworldSpriteSlot-$02),y
	STA.w !RAM_SMW_OWSpr_XPosHi+$03,x
	LDA.w SpriteSlotData-(!Define_SMW_MaxOverworldSpriteSlot-$03),y
	STA.w !RAM_SMW_OWSpr_YPosLo+$03,x
	LDA.w SpriteSlotData-(!Define_SMW_MaxOverworldSpriteSlot-$04),y
	STA.w !RAM_SMW_OWSpr_YPosHi+$03,x
	TYA
	SEC
	SBC.b #(SpriteSlotData_End-SpriteSlotData)/$0D
	TAY
	DEX
	BPL.b CODE_04F67C
	LDX.b #!Define_SMW_MaxOverworldSpriteSlot-$02
CODE_04F6B1:
	STZ.w !RAM_SMW_OWSpr0A_Boo_UnknownTable7E0E25,x
	LDA.w SMW_OWSpr09_Bowser_DATA_04FD22				;\ Optimization: STZ.w !RAM_SMW_OWSpr_ZSpeed,x?
	DEC								;| $04FD22 contains a $01, for reference.
	STA.w !RAM_SMW_OWSpr_ZSpeed,x					;/
	LDA.w SubmapBooXPosOffset-$01,x
CODE_04F6BE:
	PHA
	STX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	JSR.w SMW_ProcessOverworldSprites_Main
	PLA
	DEC
	BNE.b CODE_04F6BE
	INX
	CPX.b #!Define_SMW_MaxOverworldSpriteSlot+$01
	BCC.b CODE_04F6B1
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CalculateOverworldPlayerPosition(Address)
namespace SMW_CalculateOverworldPlayerPosition
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$000F
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$0010
	ASL
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	ASL
	ASL
	ASL
	ASL
	AND.w #$00FF
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.w #$0010
	BEQ.b CODE_0498B5
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.w #$0200
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_0498B5:
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$00FF
	BEQ.b Return0498C5					; Note: !Define_SMW_Overworld_MainMap
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.w #$0400
	STA.b !RAM_SMW_Misc_ScratchRAM04
Return0498C5:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleCurrentOverworldProcess(Address)
namespace SMW_HandleCurrentOverworldProcess
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	JSL.l SMW_ExecutePtr_Long

PtrsLong04857D:
	dl SMW_OverworldProcess00_OverworldEntryInitialization_Main
	dl SMW_OverworldProcess01_ActivateEvents_Main
	dl SMW_OverworldProcess02_HandleLevelBeaten_Main
	dl SMW_OverworldProcess03_StandingStill_Main
	dl SMW_OverworldProcess04_PlayerIsMoving_Main
	dl SMW_OverworldProcess05_CheckForPlayerSwitch_Main
	dl SMW_OverworldProcess06_PlayerSwitchFadeOut_Main
	dl SMW_OverworldProcess07_SwitchingPlayers_Main
	dl SMW_OverworldProcess08_PlayerSwitchFadeIn_Main
	dl SMW_OverworldProcess09_FinishedSwitchingPlayers_Main
	dl SMW_OverworldProcess0A_SwitchBetweenSubmaps_Main
	dl SMW_OverworldProcess0B_StarWarpAnimation_Main
	dl SMW_OverworldProcess0C_IntroMarch_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess00_OverworldEntryInitialization(Address)
namespace SMW_OverworldProcess00_OverworldEntryInitialization
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$08
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	LDA.w !RAM_SMW_Overworld_MarioMap
	CMP.b #!Define_SMW_Overworld_YoshisIsland
	BNE.b CODE_048F13
	LDA.w !RAM_SMW_Overworld_MarioXPosLo
	CMP.b #$68
	BNE.b CODE_048F13
	LDA.w !RAM_SMW_Overworld_MarioYPosLo
	CMP.b #$8E
	BNE.b CODE_048F13
	LDA.b #$0C
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	BRL.w CODE_048F7A

CODE_048F13:
	REP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	REP.b #$10
	SEP.b #$20
	LDA.w !RAM_SMW_Flag_GotMidpoint					;\ Glitch: Dying in the bonus game results in setting the midpoint flag
	BEQ.b CODE_048F56						;| These checks need to be swapped and all instances of !RAM_SMW_Flag_ActivateOverworldEvent need to be removed
	LDA.w !RAM_SMW_Misc_ExitLevelAction				;|
	BEQ.b CODE_048F56						;|
	BPL.b CODE_048F5F						;/
	REP.b #$20
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	TAX
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,x
	ORA.w #$0040
	STA.w !RAM_SMW_Overworld_LevelTileSettings,x
CODE_048F56:
	SEP.b #$20
	LDA.b #$05
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	BRA.b CODE_048F7A

CODE_048F5F:
	REP.b #$20
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	TAX
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,x
	ORA.w #$0080
	AND.w #$FFBF
	STA.w !RAM_SMW_Overworld_LevelTileSettings,x
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
CODE_048F7A:
	REP.b #$30
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_CODE_049831
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess02_HandleLevelBeaten(Address)
namespace SMW_OverworldProcess02_HandleLevelBeaten
%InsertMacroAtXPosition(<Address>)

DATA_048F7F:
	%INLINEDATATABLE_SMW_SavePromptLevels()

Main:
	JSR.w SMW_UnlockOverworldPathBasedOnExit_Main
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	LDX.b #$07
CODE_048F8C:
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CMP.w DATA_048F7F,x
	BNE.b CODE_049000
	%INLINEROUTINE_SMW_PreparePlayerSwap()
endif
	LDA.w !RAM_SMW_Misc_ExitLevelAction
	CMP.b #$E0
	BNE.b CODE_048FFB
	DEC.w !RAM_SMW_Timer_KeepGameModeActive
	BMI.b ADDR_048FE9
	RTS

ADDR_048FE9:
	INC.w !RAM_SMW_Flag_ShowSavePrompt
	JSR.w SMW_UpdateSaveBuffer_Main
	LDA.b #$02
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	LDA.b #$04
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	BRA.b CODE_049003

CODE_048FFB:
	INC.w !RAM_SMW_Flag_ShowSavePrompt
	BRA.b CODE_049003

CODE_049000:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	DEX
	BPL.b CODE_048F8C
endif

CODE_049003:
	REP.b #$20
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	REP.b #$10
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Blocks_Map16TableLo,x
	AND.w #$00FF
	STA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	SEP.b #$30
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_PreparePlayerSwap()
	LDX.b #$2C
-:
	LDA.w !RAM_SMW_Overworld_EventFlags,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$60,x
	DEX
	BPL.b -
	REP.b #$30
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	TXA
	EOR.w #$0004
	TAY
	LDA.w !RAM_SMW_Overworld_SaveBuffer+$75,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$75,y
	LDA.w !RAM_SMW_Overworld_SaveBuffer+$77,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$77,y
	LDA.w !RAM_SMW_Overworld_SaveBuffer+$7D,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$7D,y
	LDA.w !RAM_SMW_Overworld_SaveBuffer+$7F,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$7F,y
	TXA
	LSR
	TAX
	EOR.w #$0002
	TAY
	LDA.w !RAM_SMW_Overworld_SaveBuffer+$71,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$71,y
	TXA
	SEP.b #$30
	LSR
	TAX
	EOR.b #$01
	TAY
	LDA.w !RAM_SMW_Overworld_SaveBuffer+$6F,x
	STA.w !RAM_SMW_Overworld_SaveBuffer+$6F,y
endmacro

;---------------------------------------------------------------------------

macro INLINEDATATABLE_SMW_SavePromptLevels()
	db $58,$59,$5D,$63,$77,$79,$7E,$80
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_UnlockOverworldPathBasedOnExit(Address)
namespace SMW_UnlockOverworldPathBasedOnExit
%InsertMacroAtXPosition(<Address>)

UNK_0498FB:
	dw $0008,$0004,$0002,$0001		; Note: This table is identical to SMW_BitTable_Bank04, which is used by this routine.

Main:
	LDX.w !RAM_SMW_Misc_ExitLevelAction
	BEQ.b SMW_CalculateOverworldPlayerPosition_Return0498C5
	BMI.b SMW_CalculateOverworldPlayerPosition_Return0498C5
	DEX
	LDA.w SMW_SharedOverworldPathTables_DATA_049060,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	STZ.b !RAM_SMW_Misc_ScratchRAM09
	REP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	TXA
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	REP.b #$10
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelDirectionFlags,x
	AND.w #$00FF
	LDX.b !RAM_SMW_Misc_ScratchRAM08
	BEQ.b CODE_049949
CODE_049945:
	LSR
	DEX
	BPL.b CODE_049945
CODE_049949:
	AND.w #$0003
	ASL
	TAY
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	TAX
	LDA.w SMW_BitTable_Bank04,y
	ORA.w !RAM_SMW_Overworld_LevelTileSettings,x
	STA.w !RAM_SMW_Overworld_LevelTileSettings,x
	SEP.b #$30
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess03_StandingStill(Address)
namespace SMW_OverworldProcess03_StandingStill
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Flag_SwitchPlayers
	LDY.w !RAM_SMW_Overworld_EnterLevelFlag
	BMI.b OWPU_NotOnPipe
	LDA.w !RAM_SMW_Misc_ExitLevelAction
	BMI.b CODE_049132
	BEQ.b CODE_049132
	BRL.w CODE_0491E9

CODE_049132:
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_Select>>8
#Debug_StarRoadWarp:
	BRA.b OW_Player_Update
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	BEQ.b CODE_049165
	CMP.b #$56
	BEQ.b CODE_049165
OW_Player_Update:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	LDA.b !RAM_SMW_IO_ControllerHold2
	AND.b #!Joypad_L|!Joypad_R
	CMP.b #!Joypad_L|!Joypad_R
	BNE.b OWPU_NoLR
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CMP.b #$81
	BEQ.b OWPU_EnterLevel
OWPU_NoLR:
endif
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	AND.b #!Joypad_X|(!Joypad_Y>>8)|!Joypad_A|(!Joypad_B>>8)
	BNE.b OWPU_ABXY
	BRL.w CODE_0491E9

OWPU_ABXY:
	STZ.w !RAM_SMW_Flag_ChangeSubmapMusicOnPlayerSwitch
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CMP.b #$5F
	BNE.b OWPU_NotOnStar
CODE_049165:
	JSR.w SMW_HandleOverworldStarPipeWarp_GetIndex
	BNE.b OWPU_IsOnPipeRTS
	STZ.w !RAM_SMW_Overworld_StarLaunchSpeed
	STZ.w !RAM_SMW_Timer_WaitBeforeStarLaunch
	LDA.b #!Define_SMW_Sound1DF9_GetCape
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$0B
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	JMP.w SMW_OverworldProcess0B_StarWarpAnimation_Main

OWPU_NotOnStar:
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CMP.b #$82
	BEQ.b OWPU_IsOnPipe
	CMP.b #$5B
	BNE.b OWPU_NotOnPipe
OWPU_IsOnPipe:
	JSR.w SMW_HandleOverworldStarPipeWarp_GetIndex
	BNE.b OWPU_IsOnPipeRTS
TriggerOverworldWarp:
	INC.w !RAM_SMW_Overworld_WarpingOnPipeOrStarFlag
	STZ.w !RAM_SMW_Misc_ExitLevelAction
	LDA.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	STA.w !RAM_SMW_Misc_GameMode
OWPU_IsOnPipeRTS:
	RTS

OWPU_NotOnPipe:
	CMP.b #$81
	BEQ.b CODE_0491E9
	BCS.b CODE_0491E9
OWPU_EnterLevel:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	AND.b #$02
	TAX
	LDY.b #$10
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	AND.b #$08
	BEQ.b CODE_0491B1
	LDY.b #$12
CODE_0491B1:
	TYA
	STA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Player_MariosCoins,x
	STA.w !RAM_SMW_Player_CurrentCoinCount
	LDA.w !RAM_SMW_Player_MariosLives,x
	STA.w !RAM_SMW_Player_CurrentLifeCount
	LDA.w !RAM_SMW_Player_MariosPowerUp,x
	STA.b !RAM_SMW_Player_CurrentPowerUp
	LDA.w !RAM_SMW_Player_MariosYoshi,x
	STA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	STA.w !RAM_SMW_Yoshi_CurrentYoshiColor
	STA.w !RAM_SMW_Player_RidingYoshiFlag
	LDA.w !RAM_SMW_Player_MariosItemBox,x
	STA.w !RAM_SMW_Player_CurrentItemBox
	LDA.b #$02
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	LDA.b #!Define_SMW_LevelMusic_MusicFade
	STA.w !RAM_SMW_IO_MusicCh1
	INC.w !RAM_SMW_Misc_GameMode
	RTS

CODE_0491E9:
	REP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	TXA
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	SEP.b #$20
	LDX.w !RAM_SMW_Misc_ExitLevelAction
	BEQ.b OWPU_NotAutoWalk
	DEX
	LDA.w SMW_SharedOverworldPathTables_DATA_049060,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	STZ.b !RAM_SMW_Misc_ScratchRAM09
	REP.b #$30
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	LDY.w #$000A
CODE_04922A:
	CMP.w SMW_SharedOverworldPathTables_NoAutoMoveLevels,y
	BNE.b CODE_04923B
	LDA.w #$0005
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	JSR.w SMW_UpdateSaveBuffer_Main
	BRL.w CODE_049411

CODE_04923B:
	DEY
	DEY
	BPL.b CODE_04922A
	LDA.l !RAM_SMW_Overworld_LevelDirectionFlags,x
	AND.w #$00FF
	LDX.b !RAM_SMW_Misc_ScratchRAM08
	BEQ.b CODE_04924E
CODE_04924A:
	LSR
	DEX
	BPL.b CODE_04924A
CODE_04924E:
	AND.w #$0003
	ASL
	TAX
	LDA.w SMW_SharedOverworldPathTables_DATA_049064,x
	TAY
	JMP.w CODE_0492BC

OWPU_NotAutoWalk:
	SEP.b #$30
	STZ.w !RAM_SMW_Misc_ExitLevelAction
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)|(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CODE_04926E
	LDX.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CPX.b #$82
	BEQ.b CODE_0492AD
	BRA.b CODE_04928C

CODE_04926E:
	DEC.w !RAM_SMW_Overworld_MakeStandingPlayerFaceDownTimerLo
	BPL.b CODE_049287
	STZ.w !RAM_SMW_Overworld_MakeStandingPlayerFaceDownTimerLo
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	AND.b #$02
	TAX
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	AND.b #$08
	ORA.b #$02
	STA.w !RAM_SMW_Overworld_MarioAnimationLo,x
CODE_049287:
	REP.b #$30
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_CODE_049831

CODE_04928C:
	REP.b #$30
	AND.w #$00FF
#Debug_WalkOnUnrevealedOWPaths:
	NOP #3
	PHA
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	TAX
	PLA
	AND.w !RAM_SMW_Overworld_LevelTileSettings,x
	AND.w #$000F
	BNE.b CODE_0492AD
	JMP.w CODE_049411

CODE_0492AD:
	REP.b #$30
	AND.w #$00FF
CODE_0492B2:
	LDY.w #$0006
CODE_0492B5:
	LSR
	BCS.b CODE_0492BC
	DEY
	DEY
	BPL.b CODE_0492B5
CODE_0492BC:
	TYA
	STA.w !RAM_SMW_Overworld_PlayerDirection
	LDX.w #$0000
	CPY.w #$0004
	BCS.b CODE_0492CB
	LDX.w #$0002
CODE_0492CB:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	CLC
	ADC.w SMW_SharedOverworldPathTables_DATA_049058,y
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	BMI.b CODE_049301
	CMP.w #$0800
	BCS.b CODE_049301
	LDA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$00),x
	AND.w #$00FF
	BEQ.b CODE_049301
	CMP.w #$0056
	BCC.b CODE_0492FE
	CMP.w #$0087
	BCC.b CODE_0492FE
	BRA.b CODE_049301

CODE_0492FE:
	BRL.w CODE_049384

CODE_049301:
	STZ.w !RAM_SMW_Overworld_ProcessHardcodedPathFlagLo
	STZ.w !RAM_SMW_Overworld_HardcodedPathIndexLo
	LDX.b !RAM_SMW_Misc_ScratchRAM08
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0009
CODE_049315:
	LDA.w SMW_SharedOverworldPathTables_HardCodedOWPaths_LevelNums,x
	AND.w #$00FF
	CMP.w #$00FF
	BNE.b CODE_049349
	PHX
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	CMP.w SMW_SharedOverworldPathTables_DATA_049082			; Optimization: Why not just put the $0178 here? Maybe this was originally a loop?
	BNE.b CODE_049346
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	CMP.w SMW_SharedOverworldPathTables_DATA_049084			; Optimization: Same as above, except the bytes are $0128.
	BNE.b CODE_049346
	LDA.w !RAM_SMW_Player_CurrentCharacter
	AND.w #$00FF
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$00FF
	BNE.b CODE_049346						; Note: !Define_SMW_Overworld_MainMap
	PLX
	BRA.b CODE_04934D

CODE_049346:
	PLX
	BRA.b CODE_049374

CODE_049349:
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_049374
CODE_04934D:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w SMW_SharedOverworldPathTables_HardCodedOWPaths_Layer1AndMovementTableIndex,x
	AND.w #$00FF
	TAX
	DEC
	STA.w !RAM_SMW_Overworld_HardcodedPathIndexLo
	STY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w SMW_SharedOverworldPathTables_HardCodedOWPaths_MovementDirection,x
	AND.w #$00FF
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_04937A
	LDA.w #$0001
	STA.w !RAM_SMW_Overworld_ProcessHardcodedPathFlagLo
	LDA.w SMW_SharedOverworldPathTables_HardCodedOWPaths_Layer1Tiles,x
	AND.w #$00FF
	BRA.b CODE_049384

CODE_049374:
	DEX
	BMI.b CODE_04937A
	BRL.w CODE_049315

CODE_04937A:
	SEP.b #$20
	STZ.w !RAM_SMW_Misc_ExitLevelAction
	REP.b #$20
	JMP.w CODE_049411

CODE_049384:
	STA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	LDX.w #$0017
CODE_04938E:
	LDA.w SMW_SharedOverworldPathTables_DATA_04A03C,x
	AND.w #$00FF
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0493B5
	LDA.w SMW_SharedOverworldPathTables_DATA_04A0E4,x
	CLC
	ADC.w !RAM_SMW_Player_CurrentCharacterX4Lo
	PHA
	TXA
	ASL
	ASL
	TAX
	LDA.w SMW_SharedOverworldPathTables_DATA_04A084,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w SMW_SharedOverworldPathTables_DATA_04A084+$02,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PLA
	AND.w #$00FF
	TAX
	BRA.b CODE_0493DA

CODE_0493B5:
	DEX
	BPL.b CODE_04938E
	LDX.w #$0008
	TYA
	AND.w #$0002
	BNE.b CODE_0493C7
	TXA
	EOR.w #$FFFF
	INC
	TAX
CODE_0493C7:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0000
	CPY.w #$0004
	BCS.b CODE_0493D4
	LDX.w #$0002
CODE_0493D4:
	TXA
	CLC
	ADC.w !RAM_SMW_Player_CurrentCharacterX4Lo
	TAX
CODE_0493DA:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_Overworld_MarioXPosLo,x
	STA.w !RAM_SMW_Player_OverworldXPosMarioIsGoingToLo,x
	TXA
	EOR.w #$0002
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w !RAM_SMW_Overworld_MarioXPosLo,x
	STA.w !RAM_SMW_Player_OverworldXPosMarioIsGoingToLo,x
	TXA
	LSR
	AND.w #$0002
	TAX
	TYA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	AND.w #$0008
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	LDA.w #$000F
	STA.w !RAM_SMW_Overworld_MakeStandingPlayerFaceDownTimerLo
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
	STZ.w !RAM_SMW_Overworld_PlayerIsSteppingOnLevelTileFlagLo
CODE_049411:
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_CODE_049831
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldProcess04_PlayerIsMoving(Address)
namespace SMW_OverworldProcess04_PlayerIsMoving
%InsertMacroAtXPosition(<Address>)

DATA_049426:
	db $44,$43,$45,$46,$47,$48,$25,$40
	db $42,$4D

DATA_049430:
	db $0C,$00,$0E,$00,$10,$06,$12,$00
	db $18,$04,$1A,$02,$20,$06,$42,$06
	db $4E,$04,$50,$02,$58,$06,$5A,$00
	db $70,$06,$90,$00,$A0,$06

DATA_04944E:
	db $01,$01,$00,$01,$01,$00,$00,$00
	db $01,$00,$00,$01,$00,$01,$00

Main:
	LDA.w !RAM_SMW_Flag_SwitchPlayers
	BEQ.b CODE_049468
	LDA.b #$08
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	RTS

CODE_049468:
	REP.b #$30
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	CLC
	ADC.w #$0002
	TAY
	LDX.w #$0002
CODE_049475:
	LDA.w !RAM_SMW_Player_OverworldXPosMarioIsGoingToLo,y
	SEC
	SBC.w !RAM_SMW_Overworld_MarioXPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	BPL.b CODE_049484
	EOR.w #$FFFF
	INC
CODE_049484:
	STA.b !RAM_SMW_Misc_ScratchRAM04,x
	DEY
	DEY
	DEX
	DEX
	BPL.b CODE_049475
	LDY.w #$FFFF
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_0494A4
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDY.w #$0001
CODE_0494A4:
	STY.b !RAM_SMW_Misc_ScratchRAM08
	SEP.b #$20
	LDX.w !RAM_SMW_Overworld_PlayerOnClimbingTileLo
	LDA.w OWPlayerPathSpeedOffset,x
	ASL
	ASL
	ASL
	ASL
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	BEQ.b CODE_0494DA
	STA.w !REGISTER_Multiplier
	NOP #4
	REP.b #$20
	LDA.w !REGISTER_ProductOrRemainderLo
	STA.w !REGISTER_DividendLo
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
CODE_0494DA:
	REP.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDX.w !RAM_SMW_Overworld_PlayerOnClimbingTileLo
	LDA.w OWPlayerPathSpeedOffset,x
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDX.w #$0002
CODE_0494F0:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	BMI.b CODE_0494F8
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	BRA.b CODE_0494FA

CODE_0494F8:
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0494FA:
	BIT.b !RAM_SMW_Misc_ScratchRAM00,x
	BPL.b CODE_049502
	EOR.w #$FFFF
	INC
CODE_049502:
	STA.w !RAM_SMW_Player_OverworldXSpeedLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM08
	DEX
	DEX
	BPL.b CODE_0494F0
	LDX.w #$0000
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	BMI.b CODE_04951B
	LDX.w #$0002
CODE_04951B:
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	BEQ.b CODE_049522
	JMP.w CODE_049801

CODE_049522:
	LDA.w !RAM_SMW_Overworld_PlayerIsSteppingOnLevelTileFlagLo
	BEQ.b CODE_04955C
	STZ.w !RAM_SMW_Overworld_ProcessHardcodedPathFlagLo
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
#LM000Hijack_CustomLevelNames2:
	ASL								;\ LM: NOPs out and inserts a JSL.l to $03BB20 to enable having custom level names.
	TAX								;|
	LDA.w SMW_LevelNames_Main,x					;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	JSR.w SMW_UpdateLevelName_Main					;/
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
	JSR.w SMW_UpdateSaveBuffer_Main
	JMP.w CODE_049831

CODE_04955C:
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	STA.w !RAM_SMW_CopyOfTilePlayerIsStandingdOnLo
	LDA.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDY.w !RAM_SMW_Overworld_PlayerDirection
	TYA
	AND.w #$00FF
	EOR.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	BRA.b CODE_049582

ADDR_049575:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	SEC
	SBC.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.b !RAM_SMW_Misc_ScratchRAM0A
	BEQ.b ADDR_049575
	TAY
CODE_049582:
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.w #$0000
	CPY.w #$0004
	BCS.b CODE_04959A
	LDX.w #$0002
CODE_04959A:
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	CLC
	ADC.w SMW_SharedOverworldPathTables_DATA_049058,y
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	LDA.w !RAM_SMW_Overworld_ProcessHardcodedPathFlagLo
	BEQ.b CODE_0495CE
	STY.b !RAM_SMW_Misc_ScratchRAM06
	LDX.w !RAM_SMW_Overworld_HardcodedPathIndexLo
	INX
	LDA.w SMW_SharedOverworldPathTables_HardCodedOWPaths_MovementDirection,x
	AND.w #$00FF
	CMP.b !RAM_SMW_Misc_ScratchRAM06
	BNE.b ADDR_049575
	STX.w !RAM_SMW_Overworld_HardcodedPathIndexLo
	LDA.w SMW_SharedOverworldPathTables_HardCodedOWPaths_Layer1Tiles,x
	AND.w #$00FF
	CMP.w #$0058
	BNE.b CODE_0495DE
CODE_0495CE:
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	BMI.b ADDR_049575
	CMP.w #$0800
	BCS.b ADDR_049575
	LDA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$00),x
	AND.w #$00FF
CODE_0495DE:
	STA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	BEQ.b ADDR_049575
	CMP.w #$0087
	BCS.b ADDR_049575
	PHA
	PHY
	TAX
	DEX
	LDY.w #$0000
	LDA.w SMW_SharedOverworldPathTables_DATA_049FEB,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	AND.w #$00FF
	CMP.w #$0014
	BNE.b CODE_0495FF
	LDY.w #$0001
CODE_0495FF:
	STY.w !RAM_SMW_Overworld_PlayerOnClimbingTileLo
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	PLY
	PLA
	PHA
	SEP.b #$30
	LDX.b #$09
CODE_049616:
	CMP.w DATA_049426,x
	BNE.b CODE_049645
	PHY
	JSR.w SMW_HandleOverworldPathExits_Main
	PLY
	LDA.b #$01
	STA.w !RAM_SMW_Flag_ChangeSubmapMusicOnPlayerSwitch
	JSR.w SMW_OverworldPrompt01_InitializeOverworldPrompt_CODE_04F407
	STZ.w !RAM_SMW_Overworld_HDMATransitionEffectFlag
	REP.b #$20
	STZ.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w #$7000
	STA.w !RAM_SMW_Overworld_HDMATransitionEffectXPosLo
	LDA.w #$5400
	STA.w !RAM_SMW_Overworld_HDMATransitionEffectYPosLo
	SEP.b #$20
	LDA.b #$0A
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	BRA.b CODE_049648

CODE_049645:
	DEX
	BPL.b CODE_049616
CODE_049648:
	REP.b #$30
	PLA
	PHA
	CMP.w #$0056
	BCS.b CODE_049654
	JMP.w CODE_04971D

CODE_049654:
	CMP.w #$0080
	BEQ.b CODE_049663
	CMP.w #$006A
	BCC.b CODE_049676
	CMP.w #$006E
	BCS.b CODE_049676
CODE_049663:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	AND.w #$0002
	TAX
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	ORA.w #$0008
	STA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	BRA.b CODE_049687

CODE_049676:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	AND.w #$0002
	TAX
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	AND.w #$00F7
	STA.w !RAM_SMW_Overworld_MarioAnimationLo,x
CODE_049687:
	LDA.w #$0001
	STA.w !RAM_SMW_Overworld_PlayerIsSteppingOnLevelTileFlagLo
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CMP.w #$005F
	BEQ.b CODE_0496A5
	CMP.w #$005B
	BEQ.b CODE_0496A5
	CMP.w #$0082
	BEQ.b CODE_0496A5
	LDA.w #!Define_SMW_Sound1DFC_StepOnLevelTile
	STA.w !RAM_SMW_IO_SoundCh3
CODE_0496A5:
	NOP #3										; Optimization: Junk
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	AND.w #$00FF
	CMP.w #$0082
	BEQ.b CODE_0496D2
	PHY
	TYA
	AND.w #$00FF
	EOR.w #$0002
	TAY
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
	TAX
	LDA.w SMW_BitTable_Bank04,y
	ORA.w !RAM_SMW_Overworld_LevelTileSettings,x
	STA.w !RAM_SMW_Overworld_LevelTileSettings,x
	PLY
CODE_0496D2:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	AND.w #$0002
	TAX
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	AND.w #$000C
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_CopyOfTilePlayerIsStandingdOnLo
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0017
CODE_0496F2:
	LDA.w SMW_SharedOverworldPathTables_DATA_04A03C,x
	AND.w #$00FF
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_049704
	TXA
	ASL
	TAX
	LDA.w SMW_SharedOverworldPathTables_DATA_04A054,x
	BRA.b CODE_049718

CODE_049704:
	DEX
	BPL.b CODE_0496F2
	LDA.w #$0000					;\ Optimization: What's wrong with using LDA.w #$0800?
	ORA.w #$0800					;/
	CPY.w #$0004
	BCC.b CODE_049718
	LDA.w #$0000					;\ Optimization: With the above optimization, this could then be an XBA.
	ORA.w #$0008					;/
CODE_049718:
	LDX.w #$0000
	BRA.b CODE_049728

CODE_04971D:
	DEC
	ASL
	TAX
	LDA.w SMW_SharedOverworldPathTables_DATA_049F49,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w SMW_SharedOverworldPathTables_DATA_049EA7,x
CODE_049728:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TXA
	SEP.b #$20
	LDX.w #$001C
CODE_049730:
	CMP.w DATA_049430,x
	BEQ.b CODE_04973B
	DEX
	DEX
	BPL.b CODE_049730
	BRA.b CODE_04974A

CODE_04973B:
	TYA
	CMP.w DATA_049430+$01,x
	BEQ.b CODE_04974A
	TXA
	LSR
	TAX
	LDA.w DATA_04944E,x
	TAX
	BRA.b CODE_049755

CODE_04974A:
	LDX.w #$0000
	TYA
	AND.b #$02
	BEQ.b CODE_049755
	LDX.w #$0001					; Optimization: INX?
CODE_049755:
	LDA.b !RAM_SMW_Misc_ScratchRAM04,x
	BEQ.b CODE_049767
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_049767:
	REP.b #$20
	PLA
	LDX.w #$0000
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	AND.w #$0007
	BNE.b CODE_049777
	LDX.w #$0001					; Optimization: INX?
CODE_049777:
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	AND.w #$00FF
	CMP.w #$0080
	BCS.b CODE_049790
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_049790:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	AND.w #$0002
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !RAM_SMW_Overworld_MarioAnimationLo,x
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00FF
	CMP.w #$0080
	BCC.b CODE_0497AD
	ORA.w #$FF00
CODE_0497AD:
	CLC
	ADC.w !RAM_SMW_Overworld_MarioXPosLo,x
	AND.w #$FFFC
	STA.w !RAM_SMW_Player_OverworldXPosMarioIsGoingToLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.w #$00FF
	CMP.w #$0080
	BCC.b CODE_0497C4
	ORA.w #$FF00
CODE_0497C4:
	CLC
	ADC.w !RAM_SMW_Overworld_MarioYPosLo,x
	AND.w #$FFFC
	STA.w !RAM_SMW_Player_OverworldYPosMarioIsGoingToLo,x
	SEP.b #$20
	LDA.w !RAM_SMW_Player_OverworldXPosMarioIsGoingToLo,x
	AND.b #$0F
	BNE.b CODE_0497E3
	LDY.w #$0004
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_0497E1
	LDY.w #$0006
CODE_0497E1:
	BRA.b CODE_0497F4

CODE_0497E3:
	LDA.w !RAM_SMW_Player_OverworldYPosMarioIsGoingToLo,x
	AND.b #$0F
	BNE.b CODE_0497F4
	LDY.w #$0000
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b CODE_0497F4
	LDY.w #$0002
CODE_0497F4:
	STY.w !RAM_SMW_Overworld_PlayerDirection
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.b #$0A
	BEQ.b CODE_049831
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_Main

CODE_049801:
	REP.b #$20
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	CLC
	ADC.w #$0002
	TAX
	LDY.w #$0002
CODE_04980E:
	LDA.w !RAM_SMW_Player_OverworldSubXPosLo,y
	AND.w #$00FF
	CLC
	ADC.w !RAM_SMW_Player_OverworldXSpeedLo,y
	STA.w !RAM_SMW_Player_OverworldSubXPosLo,y
	AND.w #$FF00
	BPL.b CODE_049823
	ORA.w #$00FF
CODE_049823:
	XBA
	CLC
	ADC.w !RAM_SMW_Overworld_MarioXPosLo,x
	STA.w !RAM_SMW_Overworld_MarioXPosLo,x
	DEX
	DEX
	DEY
	DEY
	BPL.b CODE_04980E
CODE_049831:
	SEP.b #$20
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.b #$0A
	BEQ.b CODE_049882
	LDA.w !RAM_SMW_Overworld_ActiveEarthquakeEvent
	BNE.b CODE_049882
CODE_04983F:
	REP.b #$30
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$00FF
	BNE.b CODE_049882						; Note: !Define_SMW_Overworld_MainMap
	LDX.w #$0002
	TXY
CODE_04985E:
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	SEC
	SBC.w #$0080
	BPL.b CODE_049870
	CMP.w MaxOverworlCameraPosition_LeftAndTop,y
	BCS.b CODE_049878
	LDA.w MaxOverworlCameraPosition_LeftAndTop,y
	BRA.b CODE_049878

CODE_049870:
	CMP.w MaxOverworlCameraPosition_RightAndBottom,y
	BCC.b CODE_049878
	LDA.w MaxOverworlCameraPosition_RightAndBottom,y
CODE_049878:
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo,x
	DEY
	DEY
	DEX
	DEX
	BPL.b CODE_04985E
CODE_049882:
	SEP.b #$30
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_OverworldProcess04_PlayerIsMoving(Address)
namespace SMW_OverworldProcess04_PlayerIsMoving
%InsertMacroAtXPosition(<Address>)

OWPlayerPathSpeedOffset:
	db $0D,$08

MaxOverworlCameraPosition:
.LeftAndTop:
	dw $FFEF,$FFD7

.RightAndBottom:
	dw $0111,$0131
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess05_CheckForPlayerSwitch(Address)
namespace SMW_OverworldProcess05_CheckForPlayerSwitch
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_TwoPlayerGame
	BEQ.b CODE_049DAF
	LDA.w !RAM_SMW_Player_CurrentCharacter
	EOR.b #$01
	TAX
	LDA.w !RAM_SMW_Player_MariosLives,x
	BMI.b CODE_049DAF
	LDA.w !RAM_SMW_Misc_ExitLevelAction
	BNE.b CODE_049DBC
CODE_049DAF:
	LDA.b #$03
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	STZ.w !RAM_SMW_Misc_ExitLevelAction
	REP.b #$30
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_CODE_049831

CODE_049DBC:
	DEC.w !RAM_SMW_Timer_KeepGameModeActive
	BPL.b CODE_049DCC
	LDA.b #$02
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	STZ.w !RAM_SMW_Misc_ExitLevelAction
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
CODE_049DCC:
	REP.b #$30
	JMP.w SMW_OverworldProcess04_PlayerIsMoving_CODE_049831
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess06_PlayerSwitchFadeOut(Address)
namespace SMW_OverworldProcess06_PlayerSwitchFadeOut
%InsertMacroAtXPosition(<Address>)

Main:
	DEC.w !RAM_SMW_Timer_KeepGameModeActive
	BPL.b Return049E4B
	LDA.b #$02
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	LDX.w !RAM_SMW_Misc_MosaicDirection
	LDA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	CLC
	ADC.l SMW_GameModeXX_FadeInOrOut_DATA_009F2F,x
	STA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	CMP.l SMW_GameModeXX_FadeInOrOut_DATA_009F33,x
	BNE.b Return049E4B
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
	LDA.w !RAM_SMW_Misc_MosaicDirection
	EOR.b #$01
	STA.w !RAM_SMW_Misc_MosaicDirection
Return049E4B:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_OverworldProcess06_PlayerSwitchFadeOut_Main, SMW_OverworldProcess08_PlayerSwitchFadeIn_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess07_SwitchingPlayers(Address)
namespace SMW_OverworldProcess07_SwitchingPlayers
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Player_CurrentCharacter
	EOR.b #$01
	STA.w !RAM_SMW_Player_CurrentCharacter
	TAX
	LDA.w !RAM_SMW_Player_MariosCoins,x
	STA.w !RAM_SMW_Player_CurrentCoinCount
	LDA.w !RAM_SMW_Player_MariosLives,x
	STA.w !RAM_SMW_Player_CurrentLifeCount
	LDA.w !RAM_SMW_Player_MariosPowerUp,x
	STA.b !RAM_SMW_Player_CurrentPowerUp
	LDA.w !RAM_SMW_Player_MariosYoshi,x
	STA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	STA.w !RAM_SMW_Yoshi_CurrentYoshiColor
	STA.w !RAM_SMW_Player_RidingYoshiFlag
	LDA.w !RAM_SMW_Player_MariosItemBox,x
	STA.w !RAM_SMW_Player_CurrentItemBox
	JSL.l SMW_LoadOverworldLifeCounter_Main
	REP.b #$20
	JSR.w SMW_GameMode0C_LoadOverworld_CODE_048E55
	SEP.b #$20
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	STA.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapLo
	STZ.w !RAM_SMW_Overworld_CurrentlyLoadedSubmapHi
	LDA.b #$02
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	LDA.b #$0A
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	INC.w !RAM_SMW_Flag_SwitchPlayers
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess09_FinishedSwitchingPlayers(Address)
namespace SMW_OverworldProcess09_FinishedSwitchingPlayers
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$03
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess0B_StarWarpAnimation(Address)
namespace SMW_OverworldProcess0B_StarWarpAnimation
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Overworld_StarLaunchSpeed
	BNE.b CODE_049E63
	INC.w !RAM_SMW_Timer_WaitBeforeStarLaunch
	LDA.w !RAM_SMW_Timer_WaitBeforeStarLaunch
	CMP.b #$31
	BNE.b CODE_049E93
	BRA.b CODE_049E69

CODE_049E63:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_049E78
CODE_049E69:
	INC.w !RAM_SMW_Overworld_StarLaunchSpeed
	LDA.w !RAM_SMW_Overworld_StarLaunchSpeed
	CMP.b #$05
	BNE.b CODE_049E78
	LDA.b #$04
	STA.w !RAM_SMW_Overworld_StarLaunchSpeed
CODE_049E78:
	REP.b #$20
	LDA.w !RAM_SMW_Overworld_StarLaunchSpeed
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Overworld_MarioYPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	BMI.b CODE_049E96						;\ Optimization: Save two bytes by removing one of the SEP.b #$20s and putting the remaining one before this line.
CODE_049E93:								;|
	SEP.b #$20							;|
	RTS								;|
									;|
CODE_049E96:								;|
	SEP.b #$20							;/
	JMP.w SMW_OverworldProcess03_StandingStill_TriggerOverworldWarp
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldProcess0C_IntroMarch(Address)				; LM: This routine is unused in hacked ROMs if Mario is moved on the overworld.
namespace SMW_OverworldProcess0C_IntroMarch
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Overworld_MarioAnimationLo
	LDA.b #$80
	CLC
	ADC.w !RAM_SMW_Player_OverworldSubYPosLo
	STA.w !RAM_SMW_Player_OverworldSubYPosLo
	PHP
	LDA.b #$0F
	CMP.b #$08
	LDY.b #$00
	BCC.b CODE_0498DE
	ORA.b #$F0
	DEY
CODE_0498DE:
	PLP
	ADC.w !RAM_SMW_Overworld_MarioYPosLo
	STA.w !RAM_SMW_Overworld_MarioYPosLo
	TYA
	ADC.w !RAM_SMW_Overworld_MarioYPosHi
	STA.w !RAM_SMW_Overworld_MarioYPosHi
	LDA.w !RAM_SMW_Overworld_MarioYPosLo
	CMP.b #$78
	BNE.b Return0498FA
	STZ.w !RAM_SMW_Pointer_CurrentOverworldProcess
	JSL.l SMW_SaveGame_Main
Return0498FA:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OverworldProcess01_ActivateEvents(Address)
namespace SMW_OverworldProcess01_ActivateEvents
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Pointer_OverworldEventProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs04E577:
	dw SMW_OverworldEventProcess00_CheckIfEventShouldRun_Main
	dw SMW_OverworldEventProcess01_DestroyTileAnimation_Main
	dw SMW_OverworldEventProcess02_SetEventTileIndexes_Main
	dw SMW_OverworldEventProcess03_GetLayer2Tile_Main
	dw SMW_OverworldEventProcess04_FadeInLayer2Tile_Main
	dw SMW_OverworldEventProcess05_GetLayer1Tile_Main
	dw SMW_OverworldEventProcess06_FadeInLayer1Tile_Main
	dw SMW_OverworldEventProcess07_SilentEventsAndEndOfEvent_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldEventProcess00_CheckIfEventShouldRun(Address)
namespace SMW_OverworldEventProcess00_CheckIfEventShouldRun
%InsertMacroAtXPosition(<Address>)

DATA_04E5E6:
	%INLINEDATATABLE_SMW_SavePromptLevels()

Main:
	LDA.w !RAM_SMW_Misc_ExitLevelAction
	CMP.b #$02
	BNE.b CODE_04E5F8
	INC.w !RAM_SMW_Overworld_CurrentEventNumber
CODE_04E5F8:
	LDA.w !RAM_SMW_Overworld_CheckIfEventPassedFlag			;\ Optimization: Junk. There is no reason to prevent the check for whether X event has been triggered, as if it's already been triggered, it won't trigger again.
	BEQ.b CODE_04E61A						;/
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	CMP.b #$FF
	BEQ.b CODE_04E61A
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	AND.b #$07
	TAX
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_EventFlags,y
	AND.l SMW_BitTable_DATA_04E44B,x
	BEQ.b CODE_04E640
CODE_04E61A:
	LDX.b #$07
CODE_04E61C:
	LDA.w DATA_04E5E6,x
	CMP.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	BNE.b CODE_04E632
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
	LDA.b #$E0
	STA.w !RAM_SMW_Misc_ExitLevelAction
	LDA.b #$0F
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	RTS

CODE_04E632:
	DEX
	BPL.b CODE_04E61C
	LDA.b #$05
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	LDA.b #$80
	STA.w !RAM_SMW_Misc_ExitLevelAction
	RTS

CODE_04E640:
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	JSR.w SMW_CheckIfDestroyTileEventIsActive_Main
	TYA
	ASL
	ASL
	ASL
	ASL
	STA.w !RAM_SMW_Overworld_OnScreenXPosOfCurrentEventTile
	TYA
	AND.b #$F0
	STA.w !RAM_SMW_Overworld_OnScreenYPosOfCurrentEventTile
	LDA.b #$28
	STA.w !RAM_SMW_Timer_FadeInLevelTile
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	CMP.b #!Define_SMW_LevelID_EarthquakeEvent
	BNE.b CODE_04E668
	LDA.b #$FF
	STA.w !RAM_SMW_Overworld_ActiveEarthquakeEvent
CODE_04E668:
	LDA.w !RAM_SMW_Pointer_OverworldEventProcess
	CMP.b #$02
	BEQ.b CODE_04E674
	LDA.b #!Define_SMW_Sound1DFC_CastleCollapse
	STA.w !RAM_SMW_IO_SoundCh3
CODE_04E674:
	SEP.b #$30
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldEventProcess01_DestroyTileAnimation(Address)
namespace SMW_OverworldEventProcess01_DestroyTileAnimation
%InsertMacroAtXPosition(<Address>)

DATA_04EB56:
	db $F5,$11,$F2,$15,$F5,$11,$F3,$14
	db $F5,$11,$F3,$14,$F6,$10,$F4,$13
	db $F7,$0F,$F5,$12,$F8,$0E,$F7,$11
	db $FA,$0D,$F9,$10,$FC,$0C,$FB,$0D
	db $FF,$0A,$FE,$0B,$01,$07,$01,$07
	db $00,$08,$00,$08

DATA_04EB82:
	db $F8,$F8,$11,$12,$F8,$F8,$10,$11
	db $F8,$F8,$10,$11,$F9,$F9,$0F,$10
	db $FA,$FA,$0E,$0F,$FB,$FB,$0C,$0D
	db $FC,$FC,$0B,$0B,$FE,$FE,$0A,$0A
	db $00,$00,$08,$08,$01,$01,$07,$07
	db $00,$00,$08,$08

DATA_04EBAE:
	db $F6,$B6,$76,$36,$F6,$B6,$76,$36
	db $36,$76,$B6,$F6,$36,$76,$B6,$F6
	db $36,$36,$36,$36,$36,$36,$36,$36
	db $36,$36,$36,$36,$36,$36,$36,$36
	db $36,$36,$36,$36,$36,$36,$36,$36
	db $30,$70,$B0,$F0

DATA_04EBDA:
	db $22,$23,$32,$33,$32,$23,$22

DATA_04EBE1:
	db $73,$73,$72,$72,$5F,$5F,$28,$28
	db $28,$28

Main:
	DEC.w !RAM_SMW_Timer_FadeInLevelTile
	BPL.b CODE_04EBF4
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	RTS

CODE_04EBF4:
	LDA.w !RAM_SMW_Timer_FadeInLevelTile
	LDY.w !RAM_SMW_Pointer_OverworldEventProcess
	CPY.b #$01
	BEQ.b CODE_04EC17
	CMP.b #$10
	BNE.b CODE_04EC07
	PHA
	JSR.w CODE_04ED83
	PLA
CODE_04EC07:
	LSR
	LSR
	TAX
	LDA.w DATA_04EBDA,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_GetXAndYDispOfCurrentEventTileSprite_Main
	LDX.b #$28
	JMP.w CODE_04EC2E

CODE_04EC17:
	CMP.b #$18
	BNE.b CODE_04EC20
	PHA
	JSR.w CODE_04EEAA
	PLA
CODE_04EC20:
	AND.b #$FC
	TAX
	LSR
	LSR
	TAY
	LDA.w DATA_04EBE1,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_GetXAndYDispOfCurrentEventTileSprite_Main
CODE_04EC2E:
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b #$00
CODE_04EC34:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_04EB56,x
	STA.w SMW_OAMBuffer[$20].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DATA_04EB82,x
	STA.w SMW_OAMBuffer[$20].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$20].Tile,y
	LDA.w DATA_04EBAE,x
	STA.w SMW_OAMBuffer[$20].Prop,y
	INY
	INY
	INY
	INY
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_04EC34
	STZ.w SMW_OAMTileSizeBuffer[$20].Slot
	STZ.w SMW_OAMTileSizeBuffer[$21].Slot
	STZ.w SMW_OAMTileSizeBuffer[$22].Slot
	STZ.w SMW_OAMTileSizeBuffer[$23].Slot
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_OverworldEventProcess01_DestroyTileAnimation_Main, SMW_OverworldEventProcess06_FadeInLayer1Tile_Main)
endmacro

macro ROUTINE_RT01_SMW_OverworldEventProcess01_DestroyTileAnimation(Address)
namespace SMW_OverworldEventProcess01_DestroyTileAnimation
%InsertMacroAtXPosition(<Address>)

DATA_04D93D:
	db $00,$00,$00,$00,$00,$00,$21,$92
	db $21,$16,$20,$92,$20,$12,$23,$46
	db $23,$8A,$22,$8A,$23,$42,$22,$0A
	db $22,$92,$23,$16,$22,$DA,$22,$5A
	db $22,$8A,$28,$0E,$00,$00,$28,$8E
	db $24,$04,$28,$10,$23,$86,$23,$10
	db $28,$94,$23,$98,$28,$18,$28,$58
	db $29,$14,$00,$00,$23,$80,$20,$DC
	db $24,$C0,$24,$C8,$24,$CC,$24,$D4
	db $00,$00,$25,$4E,$26,$08,$24,$D4
	db $00,$00,$00,$00,$2A,$94,$29,$CC
	db $2B,$10,$2A,$98,$29,$CC,$00,$00
	db $00,$00,$2A,$88,$2A,$94,$2B,$08
	db $00,$00,$2C,$08,$00,$00,$00,$00
	db $25,$D2,$25,$CE,$25,$52,$25,$C8
	db $00,$00,$25,$48,$00,$00,$24,$C8
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$2E,$C6,$00,$00
	db $00,$00,$00,$00,$2B,$5E,$2B,$58
	db $00,$00,$29,$DC,$00,$00,$00,$00
	db $00,$00,$23,$80,$23,$80,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$24,$C8,$24,$C8
	db $00,$00,$00,$00,$2E,$0E,$00,$00
	db $27,$C0,$2D,$90,$2D,$8A,$2E,$CA
	db $00,$00,$2C,$CC,$2C,$D2,$2C,$D8
	db $2C,$58,$2C,$52,$2C,$4C,$2C,$46
	db $2C,$42,$00,$00,$00,$00,$00,$00
namespace off
endmacro

macro ROUTINE_RT02_SMW_OverworldEventProcess01_DestroyTileAnimation(Address)
namespace SMW_OverworldEventProcess01_DestroyTileAnimation
%InsertMacroAtXPosition(<Address>)

DATA_04E587:
	dw $5220,$DA22,$5828,$C024
	dw $9424,$4223,$9428,$982A
	dw $0E25,$5225,$C425,$DE2A
	dw $982A,$4428,$502C,$0C2C
namespace off
endmacro

macro ROUTINE_RT03_SMW_OverworldEventProcess01_DestroyTileAnimation(Address)
namespace SMW_OverworldEventProcess01_DestroyTileAnimation
%InsertMacroAtXPosition(<Address>)

DATA_04ECD3:						; Note: These entires correspond to the values in SMW_ChangingLayer1OverworldTiles_TilesToBecome
	dw $9986,$1986,$D986,$5986			; Small yellow level tile
	dw $9996,$1996,$D996,$5996			; Big yellow level tile
	dw $9D86,$1D86,$DD86,$5D86			; Small red level tile
	dw $9D96,$1D96,$DD96,$5D96			; Big red level tile
	dw $9986,$1986,$D986,$5986			; Small yellow level tile
	dw $9996,$1996,$D996,$5996			; Big yellow level tile
	dw $9D86,$1D86,$DD86,$5D86			; Small red level tile
	dw $9D96,$1D96,$DD96,$5D96			; Big red level tile
	dw $1588,$1598,$1589,$1599			; Fortress
	dw $11A4,$11B4,$11A5,$11B5			; 4 sign
	dw $1122,$1190,$1122,$1191			; Half a 1 sign
	dw $11C2,$11D2,$11C3,$11D3			; Open door
	dw $11A6,$11B6,$11A7,$11B7			; Bridge
	dw $1982,$1992,$1983,$1993			; Yellow cave tile
	dw $19C8,$19F8,$19C9,$19F9			; Star Road
	dw $1C80,$1C90,$1C81,$5C90			; Switch Palace 1
	dw $1480,$1490,$1481,$5490			; Switch Palace 2
	dw $11A2,$11B2,$11A3,$11B3			; Ghost House
	dw $1D82,$1D92,$1D83,$1D93			; Red cave tile
	dw $9986,$1986,$D986,$5986			; Small yellow level tile
	dw $9986,$1986,$D986,$5986			; Small yellow level tile
	dw $11A8,$11B8,$11A9,$11B9			; 5 sign

CODE_04ED83:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	REP.b #$30
	LDA.w #!RAM_SMW_Blocks_Map16TableLo
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_ChangingLayer1OverworldTiles_Layer1TileLocation,x
	TAY
	LDX.w #$0015
	SEP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
CODE_04EDA2:
	CMP.l SMW_ChangingLayer1OverworldTiles_TilesThatChange,x
	BEQ.b CODE_04EDAB
	DEX
	BNE.b CODE_04EDA2
CODE_04EDAB:
	REP.b #$30
	STX.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	AND.w #$00FF
	ASL
	TAX
	LDA.l DATA_04D93D,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l SMW_ChangingLayer1OverworldTiles_Layer1TileLocation,x
	TAX
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM0E
	SEP.b #$20
	LDA.l SMW_ChangingLayer1OverworldTiles_TilesToBecome,x
	PLX
	STA.l !RAM_SMW_Blocks_Map16TableLo,x
	LDA.b #DATA_04ECD3>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$20
	LDA.w #DATA_04ECD3
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ASL
	ASL
	ASL
	TAY
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_04EDE6:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	CLC
	ADC.w #$2000
	STA.l SMW_StripeImageUploadTable[$04].LowByte,x
	LDA.w #$0300
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$05].LowByte,x
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$06].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$07].LowByte,x
	LDA.w #$00FF
	STA.l SMW_StripeImageUploadTable[$08].LowByte,x
	TXA
	CLC
	ADC.w #$0010
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$30
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_OverworldEventProcess01_DestroyTileAnimation(Address)
namespace SMW_OverworldEventProcess01_DestroyTileAnimation
%InsertMacroAtXPosition(<Address>)

DATA_04EE7A:
	dw $0122,$1C82,$0122,$1C83
	dw $0122,$1482,$0122,$1483
	dw $01EA,$01EA,$C1EA,$C1EA
	dw $01EA,$01EA,$C1EA,$C1EA
	dw $0122,$0122,$0122,$0122
	dw $158A,$159A,$158B,$159B

CODE_04EEAA:
	SEP.b #$30
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b #DATA_04EE7A>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.w #!RAM_SMW_Blocks_Map16TableLo
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.w #DATA_04EE7A
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Overworld_DestroyTileEventVRAMIndex
	AND.w #$00FF
	ASL
	TAX
	LDA.l DATA_04E587,x				; LM: Makes this pointer point to the expanded area so one can safely modify all 24 entries of it (2.21+)
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDA.w !RAM_SMW_Overworld_DestroyTileEventTileIndex
	AND.w #$00FF
	CMP.w #$0003
	BMI.b CODE_04EF27
	ASL
	ASL
	ASL
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	CLC
	ADC.w #$2000
	STA.l SMW_StripeImageUploadTable[$04].LowByte,x
	XBA
	CLC
	ADC.w #$0020
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0300
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$05].LowByte,x
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$06].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.l SMW_StripeImageUploadTable[$07].LowByte,x
	TXA
	CLC
	ADC.w #$0010
	TAX
CODE_04EF27:
	LDA.w !RAM_SMW_Overworld_DestroyTileEventTileIndex
	AND.w #$00FF
	CMP.w #$0002
	BPL.b CODE_04EF38
	ASL
	ASL
	ASL
	TAY
	BRA.b CODE_04EF3B

CODE_04EF38:
	LDY.w #$0028
CODE_04EF3B:
	JMP.w CODE_04EDE6
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldEventProcess02_SetEventTileIndexes(Address)
namespace SMW_OverworldEventProcess02_SetEventTileIndexes
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	ASL
	TAX
	REP.b #$20
	LDA.l SMW_Layer2EventData_Ptrs,x
	STA.w !RAM_SMW_Overworld_StartingEventTileLo
	LDA.l SMW_Layer2EventData_Ptrs+$02,x
	STA.w !RAM_SMW_Overworld_FinalEventTileLo
	CMP.w !RAM_SMW_Overworld_StartingEventTileLo
	SEP.b #$20
	BNE.b Return04E6F8
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
Return04E6F8:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldEventProcess03_GetLayer2Tile(Address)
namespace SMW_OverworldEventProcess03_GetLayer2Tile
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w CODE_04EA62
	LDA.b #!RAM_SMW_Overworld_Layer2Tiles>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	REP.b #$30
	LDA.w !RAM_SMW_Overworld_StartingEventTileLo
	ASL
	ASL
	TAX
	LDA.l SMW_Layer2EventData_TileEntries,x
	STA.w !RAM_SMW_Overworld_EventTileSizeAddressLo
	LDA.l SMW_Layer2EventData_TileEntries+$02,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$1FFF
	LSR
	CLC
	ADC.w #$3000
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LSR
	LSR
	LSR
	SEP.b #$20
	AND.b #$F8
	STA.w !RAM_SMW_Overworld_OnScreenYPosOfCurrentEventTile
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$3E
	ASL
	ASL
	STA.w !RAM_SMW_Overworld_OnScreenXPosOfCurrentEventTile
	REP.b #$20
	LDA.w #!RAM_SMW_Overworld_Layer2Tiles
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w #$EFFF
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Overworld_EventTileSizeAddressLo
	CMP.w #SMW_OverworldLayer2EventTilemap_Tiles_TwoByTwo-SMW_OverworldLayer2EventTilemap_Tiles
	BCC.b CODE_04E74F
	JSR.w SMW_BufferEventTileToStripeImageTable_Buffer2x2Tile
	JMP.w CODE_04E752

CODE_04E74F:
	JSR.w SMW_BufferEventTileToStripeImageTable_Buffer6x6Tile
CODE_04E752:
	LDA.w #$00FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	TXA
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	JSR.w SMW_BufferEventTileToLayer2Tilemap_Main
	SEP.b #$30
	LDA.b #!Define_SMW_Sound1DFC_OverworldTileReveal
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_OverworldEventProcess03_GetLayer2Tile(Address)
namespace SMW_OverworldEventProcess03_GetLayer2Tile
%InsertMacroAtXPosition(<Address>)

CODE_04EA62:
	STZ.w !RAM_SMW_Timer_LevelEndFade
	STZ.w !RAM_SMW_Palettes_LevelEndColorFadeDirection
	LDX.b #$6F
CODE_04EA6A:
	LDA.w SMW_PaletteMirror[$00].LowByte,x
	STA.w SMW_CopyOfPaletteMirror[$01].LowByte,x
	STZ.w SMW_CopyOfPaletteMirror[$3A].LowByte,x
	DEX
	BPL.b CODE_04EA6A
	LDX.b #$6F
CODE_04EA78:
	LDY.b #$10
CODE_04EA7A:
	LDA.w SMW_PaletteMirror[$40].LowByte,x
	STA.w SMW_CopyOfPaletteMirror[$01].LowByte,x
	DEX
	DEY
	BNE.b CODE_04EA7A
	TXA
	SEC
	SBC.b #$10
	TAX
	BPL.b CODE_04EA78
CODE_04EA8B:
	REP.b #$20
	LDA.w #$0070
	STA.w SMW_CopyOfPaletteMirror[$00].LowByte
	LDA.w #$C070
	STA.w SMW_CopyOfPaletteMirror[$39].LowByte
	SEP.b #$20
	STZ.w SMW_CopyOfPaletteMirror[$72].LowByte
	LDA.b #$03
	STA.w !RAM_SMW_Palettes_PaletteUploadTableIndex
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_OverworldEventProcess04_FadeInLayer2Tile(Address)
namespace SMW_OverworldEventProcess04_FadeInLayer2Tile
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Timer_LevelEndFade
	CMP.b #$40
	BCC.b CODE_04EAC9
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	JSR.w CODE_04EE30
	JSR.w SMW_BufferEventTileToLayer2Tilemap_Main
	REP.b #$20
	INC.w !RAM_SMW_Overworld_StartingEventTileLo
	LDA.w !RAM_SMW_Overworld_StartingEventTileLo
	CMP.w !RAM_SMW_Overworld_FinalEventTileLo
	SEP.b #$20
	BCS.b Return04EAC8
	LDA.b #$03
	STA.w !RAM_SMW_Pointer_OverworldEventProcess
Return04EAC8:
	RTS

CODE_04EAC9:
	JSR.w SMW_GetXAndYDispOfCurrentEventTileSprite_Main
	REP.b #$30
	LDY.w #$008C
	LDX.w #$0006
	LDA.w !RAM_SMW_Overworld_EventTileSizeAddressLo
	CMP.w #SMW_OverworldLayer2EventTilemap_Tiles_TwoByTwo-SMW_OverworldLayer2EventTilemap_Tiles
	BCC.b CODE_04EAE2
	LDY.w #$000C
	LDX.w #$0002
CODE_04EAE2:
	STX.b !RAM_SMW_Misc_ScratchRAM05
	TAX
	SEP.b #$20
CODE_04EAE7:
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM00
CODE_04EAED:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$54].YDisp,y
	LDA.l SMW_OverworldLayer2EventTilemap_Tiles,x
	STA.w SMW_OAMBuffer[$54].Tile,y
	LDA.l !RAM_SMW_Overworld_Layer2EventTiles,x
	AND.b #$C0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_Layer2EventTiles,x
	AND.b #$1C
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	ORA.b #$11
	STA.w SMW_OAMBuffer[$54].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$54].XDisp,y
	CLC
	ADC.b #$08
	INX
	DEY
	DEY
	DEY
	DEY
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b CODE_04EAED
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
	CPY.w #$FFFC
	BNE.b CODE_04EAE7
	SEP.b #$10
	LDX.b #$23
CODE_04EB32:
	STZ.w SMW_OAMTileSizeBuffer[$54].Slot,x
	DEX
	BPL.b CODE_04EB32
	LDY.b #$08
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	CMP.b #!Define_SMW_Overworld_ForestOfIlluision
	BNE.b CODE_04EB46
	LDY.b #$01
CODE_04EB46:
	STY.b !RAM_SMW_Misc_ScratchRAM8A
CODE_04EB48:
	LDA.w !RAM_SMW_Timer_LevelEndFade
	JSL.l CODE_00B006
	DEC.b !RAM_SMW_Misc_ScratchRAM8A
	BNE.b CODE_04EB48
	JMP.w SMW_OverworldEventProcess03_GetLayer2Tile_CODE_04EA8B
namespace off
endmacro

macro ROUTINE_RT01_SMW_OverworldEventProcess04_FadeInLayer2Tile(Address)
namespace SMW_OverworldEventProcess04_FadeInLayer2Tile
%InsertMacroAtXPosition(<Address>)

CODE_04EE30:
	SEP.b #$20
	LDA.b #!RAM_SMW_Overworld_Layer2Tiles>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	REP.b #$30
	LDA.w !RAM_SMW_Overworld_StartingEventTileLo
	ASL
	ASL
	TAX
	LDA.l SMW_Layer2EventData_TileEntries+$02,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$1FFF
	LSR
	CLC
	ADC.w #$3000
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w #!RAM_SMW_Overworld_Layer2Tiles
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w #$FFFF
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l SMW_Layer2EventData_TileEntries,x
	CMP.w #SMW_OverworldLayer2EventTilemap_Tiles_TwoByTwo-SMW_OverworldLayer2EventTilemap_Tiles
	BCC.b CODE_04EE68
	JSR.w SMW_BufferEventTileToStripeImageTable_Buffer2x2Tile
	JMP.w CODE_04EE6B

CODE_04EE68:
	JSR.w SMW_BufferEventTileToStripeImageTable_Buffer6x6Tile
CODE_04EE6B:
	LDA.w #$00FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	TXA
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$30
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_OverworldEventProcess04_FadeInLayer2Tile(Address)
namespace SMW_OverworldEventProcess04_FadeInLayer2Tile
%InsertMacroAtXPosition(<Address>)

CODE_00B006:
	PHB
	PHK
	PLB
	JSR.w SMW_HandlePaletteFades_CODE_00AFA3
	LDX.w #$006E
CODE_00B00F:
	LDY.w #$0008
CODE_00B012:
	LDA.w SMW_CopyOfPaletteMirror[$01].LowByte,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w SMW_PaletteMirror[$40].LowByte,x
	PHY
	JSR.w SMW_HandlePaletteFades_CODE_00AFC0
	PLY
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_CopyOfPaletteMirror[$01].LowByte,x
	LDA.w SMW_PaletteMirror[$40].LowByte,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_CopyOfPaletteMirror[$3A].LowByte,x
	DEX
	DEX
	DEY
	BNE.b CODE_00B012
	TXA
	SEC
	SBC.w #$0010
	TAX
	BPL.b CODE_00B00F
	SEP.b #$30
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldEventProcess05_GetLayer1Tile(Address)
namespace SMW_OverworldEventProcess05_GetLayer1Tile
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	REP.b #$30
	LDA.w #!RAM_SMW_Blocks_Map16TableLo
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_ChangingLayer1OverworldTiles_Layer1TileLocation,x
	TAY
	LDX.w #$0015
	SEP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
CODE_04EC97:
	CMP.l SMW_ChangingLayer1OverworldTiles_TilesThatChange,x
	BEQ.b CODE_04ECA8
	DEX
	BPL.b CODE_04EC97
	SEP.b #$10
	LDA.b #$07
	STA.w !RAM_SMW_Pointer_OverworldEventProcess
	RTS

CODE_04ECA8:
	SEP.b #$30
	LDA.b #!Define_SMW_Sound1DFC_Coin
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Pointer_OverworldEventProcess
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	AND.b #$FF									; Optimization: Unnecessary AND.b #$FF
	ASL
	TAX
	LDA.l SMW_ChangingLayer1OverworldTiles_Layer1TileLocation,x
	ASL
	ASL
	ASL
	ASL
	STA.w !RAM_SMW_Overworld_OnScreenXPosOfCurrentEventTile
	LDA.l SMW_ChangingLayer1OverworldTiles_Layer1TileLocation,x
	AND.b #$F0
	STA.w !RAM_SMW_Overworld_OnScreenYPosOfCurrentEventTile
	LDA.b #$1C
	STA.w !RAM_SMW_Timer_FadeInLevelTile
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldEventProcess07_SilentEventsAndEndOfEvent(Address)
namespace SMW_OverworldEventProcess07_SilentEventsAndEndOfEvent
%InsertMacroAtXPosition(<Address>)

SilentEventTiles:								;\ LM: This data becomes freespace in ROMs with edited overworlds (1.60+)
.EventNum:									;|
	db $06,$06,$06,$06,$06,$06,$06,$06					;|
	db $14,$14,$14,$14,$14,$1D,$1D,$1D					;|
	db $1D,$12,$12,$12,$1C,$2F,$2F,$2F					;|
	db $2F,$2F,$34,$34,$34,$47,$4E,$4E					;|
	db $01,$0F,$24,$24,$6C,$0F,$0F,$54					;|
	db $55,$57,$58,$5D							;|
										;|
.TileLayer:									;|
	db $00,$00,$00,$00,$00,$00,$01,$01					;|
	db $00,$01,$01,$01,$01,$01,$01,$01					;|
	db $00,$01,$01,$00,$00,$01,$01,$01					;|
	db $01,$01,$01,$01,$01,$00,$01,$00					;|
	db $00,$01,$01,$01,$01,$01,$00,$00					;|
	db $00,$00,$00,$00							;|
										;|
.TilemapLocation:								;|
	dw $0215,$0235,$0245,$0255,$0265,$0275,$1114,$1094			;|
	dw $00A9,$05A4,$0524,$0728,$06A4,$01A8,$01AC,$01B0			;|
	dw $003C,$2900,$2880,$0510,$0154,$1830,$18B0,$192E			;|
	dw $192A,$1926,$1824,$1820,$181C,$0597,$2AEC,$057B			;|
	dw $0212,$3194,$32A0,$3320,$1D16,$3114,$0625,$01F0			;|
	dw $01F0,$0304,$0304,$0227						;|
										;|
.TileNum:									;|
	dw $0068,$0024,$0024,$0025,$0000,$0081,$0938,$0928			;|
	dw $0066,$099C,$0928,$09F8,$09FC,$0998,$0998,$0928			;|
	dw $0066,$0938,$0928,$0066,$0068,$0A80,$0A84,$0A88			;|
	dw $0998,$0998,$0994,$0998,$0A8C,$0066,$0384,$0066			;|
	dw $0079,$0AA8,$0938,$0938,$09A0,$0A30,$0069,$005F			;|
	dw $005F,$005F,$005F,$005F						;/

Main:
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	STA.b !RAM_SMW_Misc_ScratchRAM0F
Entry2:
	LDX.b #$2B								;\ LM: These lines of code become useless if the below hijack is applied. You can safely NOP them out.
CODE_04E9F3:									;| All that matters is that A contains the current event number.
	CMP.l SilentEventTiles_EventNum,x					;/
#LM160Hijack_MoreSilentEventTiles:
	BEQ.b CODE_04EA25							;\ LM: NOPs out and inserts a JSL.l to the expanded area to allow SMW to have more silent events (1.60+)
CODE_04E9F9:									;|
	DEX									;|
	BPL.b CODE_04E9F3							;/
	LDA.w !RAM_SMW_Pointer_OverworldEventProcess
	BEQ.b Return04EA24
	STZ.w !RAM_SMW_Pointer_OverworldEventProcess
	INC.w !RAM_SMW_Pointer_CurrentOverworldProcess
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	AND.b #$07
	TAX
	LDA.w !RAM_SMW_Overworld_CurrentEventNumber
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_EventFlags,y
	ORA.l SMW_BitTable_DATA_04E44B,x
	STA.w !RAM_SMW_Overworld_EventFlags,y
	INC.w !RAM_SMW_Counter_EventsTriggered
	STZ.w !RAM_SMW_Overworld_CheckIfEventPassedFlag				; Optimization: Junk
Return04EA24:
	RTS

CODE_04EA25:									;\ LM: This routine becomes inaccessible in ROM with edited overworlds (1.60+) 
	PHX									;|
	LDA.l SilentEventTiles_TileLayer,x					;|
	STA.b !RAM_SMW_Misc_ScratchRAM02					;|
	TXA									;|
	ASL									;|
	TAX									;|
	REP.b #$20								;|
	LDA.l SilentEventTiles_TileNum,x					;|
	STA.b !RAM_SMW_Misc_ScratchRAM00					;|
	LDA.l SilentEventTiles_TilemapLocation,x				;|
	STA.b !RAM_SMW_Misc_ScratchRAM04					;|
	LDA.b !RAM_SMW_Misc_ScratchRAM02					;|
	AND.w #$0001								;|
	BEQ.b CODE_04EA4E							;|
	REP.b #$10								;|
	LDY.b !RAM_SMW_Misc_ScratchRAM00					;|
	JSR.w SMW_BufferEventTileToLayer2Tilemap_Entry2				;|
	JMP.w CODE_04EA5A							;|
										;|
CODE_04EA4E:									;|
	SEP.b #$20								;|
	REP.b #$10								;|
	LDX.b !RAM_SMW_Misc_ScratchRAM04					;|
	LDA.b !RAM_SMW_Misc_ScratchRAM00					;|
	STA.l !RAM_SMW_Blocks_Map16TableLo,x					;|
CODE_04EA5A:									;|
	SEP.b #$30								;|
	PLX									;|
	LDA.b !RAM_SMW_Misc_ScratchRAM0F					;|
	JMP.w CODE_04E9F9							;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OverworldProcess0A_SwitchBetweenSubmaps(Address)
namespace SMW_OverworldProcess0A_SwitchBetweenSubmaps
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30
	LDA.w !RAM_SMW_Overworld_SubmapSwitchProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs04DAF8:
	dw SMW_SubmapSwitchProcess00_InitializeWindowHDMA_Main
	dw SMW_SubmapSwitchProcess01_UpdateLayer1_Main
	dw SMW_SubmapSwitchProcess02_UpdateLayer1_Main
	dw SMW_SubmapSwitchProcess03_UpdateLayer1_Main
	dw SMW_SubmapSwitchProcess04_UpdateLayer1_Main
	dw SMW_SubmapSwitchProcess05_UpdatePalette_Main
	dw SMW_SubmapSwitchProcess06_EndWindowHDMA_Main
	dw SMW_SubmapSwitchProcess07_EndSubmapSwitch_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SubmapSwitchProcess00_InitializeWindowHDMA(Address)
namespace SMW_SubmapSwitchProcess00_InitializeWindowHDMA
%InsertMacroAtXPosition(<Address>)

DATA_04DB08:
	dw $F900,$0700

DATA_04DB0C:
	dw $0000,$7000

DATA_04DB10:
	dw $FAC0,$0540

DATA_04DB14:
	dw $0000,$5400

Main:
	REP.b #$20
	LDX.w !RAM_SMW_Overworld_HDMATransitionEffectFlag
	LDA.w !RAM_SMW_Overworld_HDMATransitionEffectXPosLo
	CLC
	ADC.w DATA_04DB08,x
	STA.w !RAM_SMW_Overworld_HDMATransitionEffectXPosLo
	SEC
	SBC.w DATA_04DB0C,x
	EOR.w DATA_04DB08,x
	BPL.b CODE_04DB43
	LDA.w !RAM_SMW_Overworld_HDMATransitionEffectYPosLo
	CLC
	ADC.w DATA_04DB10,x
	STA.w !RAM_SMW_Overworld_HDMATransitionEffectYPosLo
	SEC
	SBC.w DATA_04DB14,x
	EOR.w DATA_04DB10,x
	BMI.b CODE_04DB5F
CODE_04DB43:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_04DB0C,x
else
	LDA.w DATA_04DB0C,x
endif
	STA.w !RAM_SMW_Overworld_HDMATransitionEffectXPosLo
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_04DB14,x
else
	LDA.w DATA_04DB14,x
endif
	STA.w !RAM_SMW_Overworld_HDMATransitionEffectYPosLo
	INC.w !RAM_SMW_Overworld_SubmapSwitchProcess
	TXA
	EOR.w #$0002
	TAX
	STX.w !RAM_SMW_Overworld_HDMATransitionEffectFlag
	BEQ.b CODE_04DB5F
	JSR.w SMW_HandleOverworldPathExits_SetLayerPositions
CODE_04DB5F:
	SEP.b #$20
	LDA.w !RAM_SMW_Overworld_HDMATransitionEffectYPosHi
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_HDMATransitionEffectXPosHi
	CLC
	ADC.b #$80
	XBA
	LDA.b #$80
	SEC
	SBC.w !RAM_SMW_Overworld_HDMATransitionEffectXPosHi
	REP.b #$20
	LDX.b #$00
	LDY.b #$A8
CODE_04DB7A:
	CPX.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_04DB81
	LDA.w #$00FF
CODE_04DB81:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$4E,y
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$F8,x
	INX
	INX
	DEY
	DEY
	BNE.b CODE_04DB7A
	SEP.b #$20
	LDA.b #$33
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDA.b #$33
CODE_04DB95:
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$80
	STA.w !RAM_SMW_Mirror_HDMAEnable
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_SubmapSwitchProcess00_InitializeWindowHDMA_Main, SMW_SubmapSwitchProcess06_EndWindowHDMA_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SubmapSwitchProcess01_UpdateLayer1(Address)
namespace SMW_SubmapSwitchProcess01_UpdateLayer1
%InsertMacroAtXPosition(<Address>)

UNK_04DCAE:
	db $80,$40,$20,$10,$08,$04,$02,$01

Main:
	PHP
	REP.b #$10
	SEP.b #$20
	LDX.w #SMW_Map16Data_OverworldLayer1
	STX.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.b #SMW_Map16Data_OverworldLayer1>>16
	STA.b !RAM_SMW_Pointer_Layer1DataBank
	LDX.w #$0000
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_SubmapSwitchProcess
	DEC
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	AND.w #$00FF
	TAX
	SEP.b #$20
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	BEQ.b CODE_04DCE8						; Note: !Define_SMW_Overworld_MainMap
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_04DCE8:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l !RAM_SMW_Blocks_Map16TableLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	REP.b #$20
	LDA.l !RAM_SMW_Blocks_Map16TableHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM02
#LM000Hijack_Unknown04DCFA:
	ASL
	ASL
	ASL
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00FF
	ASL
	ASL
	PHA
	AND.w #$003F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PLA
	ASL
	AND.w #$0F80
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0E),x
	INY
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)+$40,x
	INY
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)+$02,x
	INY
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)+$42,x
	SEP.b #$20
	INC.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$FF
	BNE.b CODE_04DCE8
	INC.w !RAM_SMW_Overworld_SubmapSwitchProcess
	PLP
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_SubmapSwitchProcess01_UpdateLayer1_Main, SMW_SubmapSwitchProcess02_UpdateLayer1_Main)
	%SetDuplicateOrNullPointer(SMW_SubmapSwitchProcess01_UpdateLayer1_Main, SMW_SubmapSwitchProcess03_UpdateLayer1_Main)
	%SetDuplicateOrNullPointer(SMW_SubmapSwitchProcess01_UpdateLayer1_Main, SMW_SubmapSwitchProcess04_UpdateLayer1_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SubmapSwitchProcess05_UpdatePalette(Address)
namespace SMW_SubmapSwitchProcess05_UpdatePalette
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	TAX
	LDA.l SMW_LoadOverworldLayer1AndEvents_DATA_04DC02,x
	STA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	JSL.l SMW_BufferPalettesRoutines_Overworld_Main
	LDA.b #$FE
	STA.w SMW_PaletteMirror[$00].LowByte
	LDA.b #$01
	STA.w SMW_PaletteMirror[$00].HighByte
	STZ.w SMW_PaletteMirror[$80].LowByte
	LDA.b #$06
	STA.w !RAM_SMW_Palettes_PaletteUploadTableIndex
	INC.w !RAM_SMW_Overworld_SubmapSwitchProcess
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SubmapSwitchProcess07_EndSubmapSwitch(Address)
namespace SMW_SubmapSwitchProcess07_EndSubmapSwitch
%InsertMacroAtXPosition(<Address>)

DATA_04DBC8:
	db !Define_SMW_OverworldMusic_Overworld
	db !Define_SMW_OverworldMusic_YoshisIsland
	db !Define_SMW_OverworldMusic_VanillaDome
	db !Define_SMW_OverworldMusic_ForestOfIllusion
	db !Define_SMW_OverworldMusic_BowsersValley
	db !Define_SMW_OverworldMusic_SpecialWorld
	db !Define_SMW_OverworldMusic_StarRoad

Main:
	STZ.w !RAM_SMW_Overworld_SubmapSwitchProcess
	LDA.b #$04
	STA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Flag_TwoPlayerGame
	BEQ.b CODE_04DBF3
	LDA.w !RAM_SMW_Flag_ChangeSubmapMusicOnPlayerSwitch
	BNE.b CODE_04DBF3
	TYA
	EOR.b #$01
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	CMP.w !RAM_SMW_Overworld_MarioMap,x
	BEQ.b Return04DC01
CODE_04DBF3:
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	TAX
	LDA.l DATA_04DBC8,x
	STA.w !RAM_SMW_IO_MusicCh1
	STZ.w !RAM_SMW_Flag_ChangeSubmapMusicOnPlayerSwitch
Return04DC01:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DespawnNonBossSprites(Address)
namespace SMW_DespawnNonBossSprites
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_03A6CA:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_03A6EC
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	BEQ.b CODE_03A6EC
	CMP.b #!Define_SMW_SpriteID_NorSpr029_KoopaKids
	BEQ.b CODE_03A6EC
	CMP.b #!Define_SMW_SpriteID_NorSpr0A0_ActivateBowserBattle
	BEQ.b CODE_03A6EC
	CMP.b #!Define_SMW_SpriteID_NorSpr0C5_BigBooBoss
	BEQ.b CODE_03A6EC
	LDA.b #!Define_SMW_NorSprStatus04_SpinJumpKill
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr_SpinJumpKillTimer,y
CODE_03A6EC:
	DEY
	BPL.b CODE_03A6CA
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckPlayerPositionRelativeToSprite(Address)
namespace SMW_CheckPlayerPositionRelativeToSprite
%InsertMacroAtXPosition(<Address>)

Bank01:
.X:
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_CurrentXPos, RAM_SMW_NorSpr_XPos, !RAM_SMW_Misc_ScratchRAM0F)

.Y:
;$01AD42
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_CurrentYPos, RAM_SMW_NorSpr_YPos, !RAM_SMW_Misc_ScratchRAM0E)
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckPlayerPositionRelativeToSprite(Address)
namespace SMW_CheckPlayerPositionRelativeToSprite
%InsertMacroAtXPosition(<Address>)

CopyOfBank02:
.X:
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_XPos, RAM_SMW_NorSpr_XPos, !RAM_SMW_Misc_ScratchRAM0F)
namespace off
endmacro

macro ROUTINE_RT02_SMW_CheckPlayerPositionRelativeToSprite(Address)
namespace SMW_CheckPlayerPositionRelativeToSprite
%InsertMacroAtXPosition(<Address>)

UNK_02D4F2:
	db $80,$40,$20,$10,$08,$04,$02,$01

Bank02:
.X:
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_XPos, RAM_SMW_NorSpr_XPos, !RAM_SMW_Misc_ScratchRAM0F)

.Y:
;$02D50C
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_YPos, RAM_SMW_NorSpr_YPos, !RAM_SMW_Misc_ScratchRAM0E)
namespace off
endmacro

macro ROUTINE_RT03_SMW_CheckPlayerPositionRelativeToSprite(Address)
namespace SMW_CheckPlayerPositionRelativeToSprite
%InsertMacroAtXPosition(<Address>)

Bank03:
.X:
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_XPos, RAM_SMW_NorSpr_XPos, !RAM_SMW_Misc_ScratchRAM0F)

.Y:
;$03B829
%CheckPlayerPositionRelativeToSpriteSub(RAM_SMW_Player_YPos, RAM_SMW_NorSpr_YPos, !RAM_SMW_Misc_ScratchRAM0F)
namespace off
endmacro

;---------------------------------------------------------------------------

macro CheckPlayerPositionRelativeToSpriteSub(PlayerPos, SpritePos, ScratchRAM)
	LDY.b #$00
	LDA.b !<PlayerPos>Lo
	SEC
	SBC.b !<SpritePos>Lo,x
	STA.b <ScratchRAM>
	LDA.b !<PlayerPos>Hi
	SBC.w !<SpritePos>Hi,x
	BPL.b +
	INY
+:
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClearLayer3Tilemap(Address)
namespace SMW_ClearLayer3Tilemap
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_TurnOffIO_Main
	LDA.b #$FC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00860E:
	LDA.w PARAMS_008649,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00860E
	LDY.b #$02
	STY.w !REGISTER_DMAEnable
	LDA.b #$38
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_00862F:
	LDA.w PARAMS_008649,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_00862F
	LDA.b #!REGISTER_WriteToVRAMPortHi
	STA.w DMA[$01].Destination
	STY.w !REGISTER_DMAEnable
	STZ.b !RAM_SMW_Mirror_OAMAddressLo
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	JMP.w SMW_UploadOAMBuffer_Main

PARAMS_008649:
	db $08,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Misc_ScratchRAM00
	dw $1000
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeFirst8KBOfRAM(Address)
namespace SMW_InitializeFirst8KBOfRAM
%InsertMacroAtXPosition(<Address>)

Main:
#LM160Hijack_ClearExAnimationDMASize:
	REP.b #$30				;\ LM: Hijacks here to jump to a routine in the expanded area that clears out the ExAnimation DMA size RAM addresses.
	LDX.w #$1FFE				;/ Most likely used to prevent VRAM corruption
CODE_008A53:
#SA1Pack_VectorJMLsAndClearSA1RAM:
	STZ.b !RAM_SMW_Misc_ScratchRAM00,x
CODE_008A55:
	DEX
	DEX
	CPX.w #!RAM_SMW_Misc_StartOfStack
	BPL.b CODE_008A61
	CPX.w #!RAM_SMW_Misc_EndOfStack
	BPL.b CODE_008A55
CODE_008A61:
	CPX.w #$FFFE
	BNE.b CODE_008A53
	LDA.w #$0000
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	STZ.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	SEP.b #$30
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ClearOverworldAndCutsceneRAM(Address)
namespace SMW_ClearOverworldAndCutsceneRAM
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$10
	SEP.b #$20
	LDX.w #$00BD
CODE_00A1AD:
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	DEX
	BPL.b CODE_00A1AD
	LDX.w #$07CE
CODE_00A1B5:
	STZ.w !RAM_SMW_Timer_PreventPause,x
	DEX
	BPL.b CODE_00A1B5
	SEP.b #$10
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus0C_GoalPowerUp(Address)
namespace SMW_NorSprStatus0C_GoalPowerUp
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_NorSprStatus08_Normal_Main
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b Return
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
Return:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprStatus06_GoalCoins(Address)
namespace SMW_NorSprStatus06_GoalCoins
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Sub
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSprStatus06_GoalCoins(Address)
namespace SMW_NorSprStatus06_GoalCoins
%InsertMacroAtXPosition(<Address>)

SmokeTiles:
	db $66,$64,$62,$60

UnusedCoinTiles:						;\ Note: A leftover from when the coin sprites used 16x16 tiles for all their frames.
	db $E8,$EA,$EC,$EA					;/

Sub:
	PHB
	PHK
	PLB
	JSR.w +
	PLB
	RTL

+:
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	BPL.b CODE_00FBBC
	DEY
CODE_00FBBC:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_NorSprStatus06_GoalCoins_WaitBeforeTurningIntoCoin,x
	BEQ.b CODE_00FBF0
	CMP.b #$01
	BNE.b CODE_00FBD5
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_00FBD5:
	PHX
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.w !RAM_SMW_NorSprStatus06_GoalCoins_WaitBeforeTurningIntoCoin,x
	LSR
	LSR
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	TAX
	LDA.w SmokeTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	RTS

CODE_00FBF0:
	INC.w !RAM_SMW_NorSprStatus06_GoalCoins_UnknownRAM,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$20
	BMI.b CODE_00FC1E
	JSL.l SMW_GiveCoins_OneCoin
	LDA.w !RAM_SMW_Counter_GoalCoinPointsIndex
	CMP.b #$0D						;\ Glitch: #$0D should be changed to #$0B to prevent the glitched score sprites from spawning
	BCC.b CODE_00FC0E					;| GivePoints_Main adds #$05 to !RAM_SMW_Counter_GoalCoinPointsIndex's value, resulting in the glitched score sprite 11 (give 5 coins) spawning if at least 7 sprites are turning into coins at a goal
	LDA.b #$0D						;/
CODE_00FC0E:
	JSL.l SMW_GivePoints_Main
	LDA.w !RAM_SMW_Counter_GoalCoinPointsIndex
	CLC
	ADC.b #$02
	STA.w !RAM_SMW_Counter_GoalCoinPointsIndex
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_00FC1E:
	JSL.l SMW_PowerUpAndItemGFXRt_DrawCoinSprite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenerateTile(Address)
namespace SMW_GenerateTile
%InsertMacroAtXPosition(<Address>)

Main:
	PHP
	REP.b #$30
	PHX
	LDA.b !RAM_SMW_Blocks_Map16ToGenerate
	AND.w #$00FF
	BNE.b CODE_00BEBE
ADDR_00BEBB:
	JMP.w CODE_00BFB9

CODE_00BEBE:
	LDA.b !RAM_SMW_Blocks_XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b !RAM_SMW_Blocks_YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w #$0000
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_00BED6
	LSR.b !RAM_SMW_Misc_ScratchRAM09
CODE_00BED6:
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	AND.b #$01
	BEQ.b CODE_00BEEC
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_YPosHi
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM00
#LM300Hijack_CustomLevelDimensions10:
	STA.b !RAM_SMW_Blocks_YPosHi
	LDY.b !RAM_SMW_Misc_ScratchRAM0C
CODE_00BEEC:
	CPY.w #$0200
	BCS.b ADDR_00BEBB
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	ASL
	TAX
	LDA.l SMW_LevelDataLayoutTables_LoTablePtrs,x
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.l SMW_LevelDataLayoutTables_LoTablePtrs+$01,x
	STA.b !RAM_SMW_Pointer_Layer1DataHi
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.b #SMW_LevelDataLayoutTables_LoTablePtrs>>16		; Note: Bank 30
	STA.b !RAM_SMW_Pointer_Layer1DataBank
else
	STZ.b !RAM_SMW_Pointer_Layer1DataBank 			; #!BANK_00
endif
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	ASL
	TAY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	INY
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM05
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.b #SMW_LevelDataLayoutTables_LoTablePtrs>>16			; Note: !BANK_30
	STA.b !RAM_SMW_Misc_ScratchRAM06
else
	STZ.b !RAM_SMW_Misc_ScratchRAM06 				; Note: !BANK_00
endif
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.b !RAM_SMW_Misc_ScratchRAM07
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM07
	TAY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	INC
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	AND.b #$01
	BEQ.b CODE_00BF41							; LM: Modifies this branch to account for the below hijack
	LDA.b !RAM_SMW_Blocks_YPosHi
	LSR
	LDA.b !RAM_SMW_Blocks_XPosHi
	AND.b #$01								;\ LM: Modifies this area to account for the custom level dimensions
	JMP.w CODE_00BF46							;|
										;|
CODE_00BF41:									;|
	LDA.b !RAM_SMW_Blocks_XPosHi						;|
	LSR									;|
	LDA.b !RAM_SMW_Blocks_YPosHi						;|
CODE_00BF46:									;|
	ROL									;|
	ASL									;|
	ASL									;/
	ORA.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM04
	CPX.w #$0000
	BEQ.b CODE_00BF57
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_00BF57:
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	CLC
	ASL
	ROL
	STA.b !RAM_SMW_Misc_ScratchRAM05
	ROL
	AND.b #$03
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.b #$F0
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$C0
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM07
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	AND.w #$0001
	BNE.b CODE_00BF9B
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo					;\ LM: Modifies this area to account for the custom level dimensions
	SEC										;|
	SBC.w #$0080									;|
	TAX										;|
	LDY.b !RAM_SMW_Mirror_CurrentLayer1YPosLo					;|
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo				;|
	BEQ.b CODE_00BFB2								;|
	LDX.b !RAM_SMW_Mirror_CurrentLayer2XPosLo					;|
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo					;|
	SEC										;|
	SBC.w #$0080									;|
	TAY										;|
	JMP.w CODE_00BFB2								;/

CODE_00BF9B:
	LDX.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.w #$0080
	TAY
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_00BFB2
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	SEC
	SBC.w #$0080
	TAX
	LDY.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
CODE_00BFB2:
	STX.b !RAM_SMW_Misc_ScratchRAM08
	STY.b !RAM_SMW_Misc_ScratchRAM0A
	JSR.w CODE_00BFBC
CODE_00BFB9:
	PLX
	PLP
	RTL

CODE_00BFBC:
	SEP.b #$30
	LDA.b !RAM_SMW_Blocks_Map16ToGenerate
	DEC
	PHK
	PER.w TileGenerationPtr-$01
	JML.l SMW_ExecutePtr_Absolute

TileGenerationPtr:
	dw SMW_GenericPage00Tile_SetItemMemory		; Empty Tile (Sets Item Memory)
	dw SMW_GenericPage00Tile_Main			; Empty Tile
	dw SMW_GenericPage00Tile_Main			; Vine
	dw SMW_GenericPage00Tile_Main			; Empty Bush Tile
	dw SMW_GenericPage00Tile_Main			; Spinning Turn Block
	dw SMW_GenericPage00Tile_Main			; Coin
	dw SMW_GenericPage00Tile_Main			; Mushroom Stalk
	dw SMW_GenericPage00Tile_Main			; Mole Hole
	dw SMW_GenericPage01Tile_Main			; Invisible Solid Block
	dw SMW_GenericPage01Tile_Main			; Multi Coin Turn Block
	dw SMW_GenericPage01Tile_Main			; Multi Coin Block
	dw SMW_GenericPage01Tile_Main			; Empty Turn Block
	dw SMW_GenericPage01Tile_Main			; Used Block
	dw SMW_GenericPage01Tile_Main			; Note Block
	dw SMW_GenericPage01Tile_Main			; Unused Note Block
	dw SMW_GenericPage01Tile_Main			; 4-way Note Block
	dw SMW_GenericPage01Tile_Main			; Side Bounce Turn Block
	dw SMW_GenericPage01Tile_Main			; Translucent Block
	dw SMW_GenericPage01Tile_Main			; On/Off Block
	dw SMW_GenericPage01Tile_Main			; Left vertical pipe side
	dw SMW_GenericPage01Tile_Main			; Right vertical pipe side
	dw SMW_GenericPage01Tile_SetItemMemory		; Used Block (Sets Item Memory)
	dw SMW_GenericPage01Tile_SetItemMemory		; O Block from 1up game (Sets Item Memory)
	dw SMW_EraseYoshiCoin_Main			; Erase Yoshi coin
	dw SMW_ChangeNetDoorTiles_Main			; Empty net frame
	dw SMW_ChangeNetDoorTiles_Main			; Net door
	dw SMW_EraseLargeSwitch_Main			; Erase Switch Palace Switch
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetItemMemoryBit(Address)
namespace SMW_SetItemMemoryBit
%InsertMacroAtXPosition(<Address>)

DATA_00BFFF:
	dw !RAM_SMW_Misc_ItemMemory0Bits-!RAM_SMW_Misc_ItemMemoryBits
	dw !RAM_SMW_Misc_ItemMemory1Bits-!RAM_SMW_Misc_ItemMemoryBits
	dw !RAM_SMW_Misc_ItemMemory2Bits-!RAM_SMW_Misc_ItemMemoryBits

DATA_00C005:
	db $80,$40,$20,$10,$08,$04,$02,$01

Main:
;$00C00D
	REP.b #$30
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.w #$FF00
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.w #$0080
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.w #$0100
	BEQ.b CODE_00C03A
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ORA.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_00C03A:
	LDA.w !RAM_SMW_Misc_ItemMemorySetting
	AND.w #$000F
	ASL
	TAX
	LDA.l DATA_00BFFF,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	TAY
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.w #$0070
	LSR
	LSR
	LSR
	LSR
	TAX
	SEP.b #$20
#LM171Hijack_ItemMemory3Revamp1:
	LDA.w !RAM_SMW_Misc_ItemMemoryBits,y			;\ LM: Hijacks here to make item memory index 3 not track items collected (1.71+)
	ORA.l DATA_00C005,x					;/
	STA.w !RAM_SMW_Misc_ItemMemoryBits,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenericPage00Tile(Address)
namespace SMW_GenericPage00Tile
%InsertMacroAtXPosition(<Address>)

UNK_00C063:
	db $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE

Map16Page00TileLo:
	db $25		; Blank tile (Unused?)
	db $25		; Blank tile
	db $25		; Blank tile
	db $06		; Vine
	db $49		; Empty bush tile
	db $48		; Spinning turn block
	db $2B		; Coin
	db $A2		; Mushroom stalk
	db $C6		; Mole hole

SetItemMemory:
	JSR.w SMW_SetItemMemoryBit_Main
Main:
	REP.b #$30
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.w #$01F0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	AND.w #$000F
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	TAY
	LDA.b !RAM_SMW_Blocks_Map16ToGenerate
	AND.w #$00FF
	TAX
	SEP.b #$20
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
#LM000Hijack_MoreLevelMap16_1:
	AND.b #$FE						; LM: Changes this to AND.b #$00 to prevent issues with map16 IDs above 01FF.
	STA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	LDA.l Map16Page00TileLo,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	REP.b #$20
	AND.w #$00FF
	ASL
	TAY
	JMP.w SMW_GenericPage01Tile_CODE_00C0FB
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenericPage01Tile(Address)
namespace SMW_GenericPage01Tile
%InsertMacroAtXPosition(<Address>)

UNK_00C0AA:
	db $80,$40,$20,$10,$08,$04,$02,$01

Map16Page01TileLo:
	db $52		; Solid invisible tile
	db $1B		; Turn block with multiple coins
	db $23		; Question block with multiple coins
	db $1E		; Turn block (spins when hit)
	db $32		; Used block
	db $13		; Note block
	db $15		; Unused note block
	db $16		; 4 sided note block
	db $2B		; Turn block (side bounce)
	db $2C		; Glass block
	db $12		; On/Off block
	db $68		; Left vertical pipe side (tileset specific, always green)
	db $69		; Right vertical pipe side (tileset specific, always green)
	db $32		; Used block
	db $5E		; O block (Switch palace tileset)

SetItemMemory:
	JSR.w SMW_SetItemMemoryBit_Main
Main:
	REP.b #$30
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.w #$01F0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	AND.w #$000F
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	TAY
	LDA.b !RAM_SMW_Blocks_Map16ToGenerate
	SEC
	SBC.w #$0009
	AND.w #$00FF
	TAX
	SEP.b #$20
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
#LM000Hijack_MoreLevelMap16_2:
	ORA.b #$01						; LM: Changes this to LDA.b #$01 to prevent issues with map16 IDs above 01FF.
	STA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	LDA.l Map16Page01TileLo,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	REP.b #$20
	AND.w #$00FF
	ORA.w #$0100
	ASL
	TAY
CODE_00C0FB:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_00C106
	LSR.b !RAM_SMW_Misc_ScratchRAM00
CODE_00C106:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$0001
	BNE.b CODE_00C127
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	AND.w #$FFF0
	BMI.b CODE_00C11A
	CMP.b !RAM_SMW_Misc_ScratchRAM0C
	BEQ.b CODE_00C13E
	BCS.b CODE_00C124
CODE_00C11A:
	CLC
	ADC.w #$0200
	CMP.b !RAM_SMW_Misc_ScratchRAM0C
	BEQ.b CODE_00C124
	BCS.b CODE_00C13E
CODE_00C124:
	JMP.w Return00C1AB

CODE_00C127:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.w #$FFF0
	BMI.b CODE_00C134
	CMP.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b CODE_00C13E
	BCS.b Return00C1AB
CODE_00C134:
	CLC
	ADC.w #$0200
	CMP.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b Return00C1AB
	BCC.b Return00C1AB
CODE_00C13E:
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	STA.l SMW_StripeImageUploadTable[$04].LowByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x
	CLC
	ADC.b #$20
	STA.l SMW_StripeImageUploadTable[$04].HighByte,x
	LDA.b #$00
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$05].LowByte,x
	LDA.b #$03
	STA.l SMW_StripeImageUploadTable[$01].HighByte,x
	STA.l SMW_StripeImageUploadTable[$05].HighByte,x
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$08].LowByte,x
	LDA.b #SMW_Map16Data_Main>>16
	STA.b !RAM_SMW_Misc_ScratchRAM06
#LM000Hijack_Unknown00C17A:
	REP.b #$20
	LDA.w !RAM_SMW_Pointer_Map16Tiles,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w #$0000
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$06].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$07].LowByte,x
	TXA
	CLC
	ADC.w #$0010
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
Return00C1AB:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_EraseYoshiCoin(Address)
namespace SMW_EraseYoshiCoin
%InsertMacroAtXPosition(<Address>)

Main:							;\ Glitch: This routine only affects the low byte of the map16 number instead of both the low and high byte.
							;/ This is why duplicating a block over a Yoshi coin causes that tile to turn into 125.
	JSR.w SMW_SetItemMemoryBit_Main
	REP.b #$30
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.w #$01F0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	AND.w #$000F
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	TAY
	SEP.b #$20
	LDA.b #$25
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	REP.b #$20
	TYA						;\ Glitch: This code doesn't account for crossing a screen boundry!
	CLC						;| This is why only half of the coin despawns.
	ADC.w #$0010					;|
	TAY						;/
	SEP.b #$20
	LDA.b #$25
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	REP.b #$20
	AND.w #$00FF
	ASL
	TAY
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_00C1EA
	LSR.b !RAM_SMW_Misc_ScratchRAM00
CODE_00C1EA:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$0001
	BNE.b CODE_00C20B
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	AND.w #$FFF0
	BMI.b CODE_00C1FE
	CMP.b !RAM_SMW_Misc_ScratchRAM0C
	BEQ.b CODE_00C222
	BCS.b SMW_GenericPage01Tile_Return00C1AB
CODE_00C1FE:
	CLC
	ADC.w #$0200
	CMP.b !RAM_SMW_Misc_ScratchRAM0C
	BCC.b SMW_GenericPage01Tile_Return00C1AB
	BEQ.b SMW_GenericPage01Tile_Return00C1AB
	JMP.w CODE_00C222

CODE_00C20B:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.w #$FFF0
	BMI.b CODE_00C218
	CMP.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b CODE_00C222
	BCS.b SMW_GenericPage01Tile_Return00C1AB
CODE_00C218:
	CLC
	ADC.w #$0200
	CMP.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b SMW_GenericPage01Tile_Return00C1AB
	BCC.b SMW_GenericPage01Tile_Return00C1AB
CODE_00C222:
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	STA.l SMW_StripeImageUploadTable[$06].LowByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$06].HighByte,x
	LDA.b #$80
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$07].LowByte,x
	LDA.b #$07
	STA.l SMW_StripeImageUploadTable[$01].HighByte,x
	STA.l SMW_StripeImageUploadTable[$07].HighByte,x
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$0C].LowByte,x
	LDA.b #SMW_Map16Data_Main>>16
	STA.b !RAM_SMW_Misc_ScratchRAM06
#LM000Hijack_Unknown00C25C:
	REP.b #$20
	LDA.w !RAM_SMW_Pointer_Map16Tiles,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w #$0000
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	STA.l SMW_StripeImageUploadTable[$04].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$08].LowByte,x
	STA.l SMW_StripeImageUploadTable[$0A].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	STA.l SMW_StripeImageUploadTable[$05].LowByte,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
	STA.l SMW_StripeImageUploadTable[$09].LowByte,x
	STA.l SMW_StripeImageUploadTable[$0B].LowByte,x
	TXA
	CLC
	ADC.w #$0018
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ChangeNetDoorTiles(Address)
namespace SMW_ChangeNetDoorTiles
%InsertMacroAtXPosition(<Address>)

Open:
	dw $9C99,$1C8B,$1C8B,$1C8B,$1C8B,$DC99		; Info: /----\
	dw $1C9B,$1CF8,$1CF8,$1CF8,$1CF8,$5C9B		;	|    |
	dw $1C9B,$1CF8,$1CF8,$1CF8,$1CF8,$5C9B		;	|    |
	dw $1C9B,$1CF8,$1CF8,$1CF8,$1CF8,$5C9B		;	|    |
	dw $1C9B,$1CF8,$1CF8,$1CF8,$1CF8,$5C9B		;	|    |
	dw $1C99,$9C8B,$9C8B,$9C8B,$9C8B,$5C99		;	\----/

Closed:
	dw $9CBA,$1CAB,$1CAB,$1CAB,$1CAB,$DCBA		; Info: /----\
	dw $1CAA,$1C82,$1C82,$1C82,$1C82,$5CAA		;	|XXXX|
	dw $1CAA,$1C82,$1C82,$1C82,$1C82,$5CAA		;	|XXXX|
	dw $1CAA,$1C82,$1C82,$1C82,$1C82,$5CAA		;	|XXXX|
	dw $1CAA,$1C82,$1C82,$1C82,$1C82,$5CAA		;	|XXXX|
	dw $1CBA,$9CAB,$9CAB,$9CAB,$9CAB,$5CBA		;	\----/

DATA_00C32E:
	dl Open
	dl Closed

Main:
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CLC
	ADC.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Blocks_Map16ToGenerate
	SEC
	SBC.b #$19
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.l DATA_00C32E+$02,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	REP.b #$30
	LDA.l DATA_00C32E,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDY.w #$0005
CODE_00C365:
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x
	LDA.b #$00
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	LDA.b #$0B
	STA.l SMW_StripeImageUploadTable[$01].HighByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CLC
	ADC.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM06
	REP.b #$20
	TXA
	CLC
	ADC.w #$0010
	TAX
	DEY
	BPL.b CODE_00C365
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDY.w #$0000
CODE_00C39F:
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_00C3A4:
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INY
	INY
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_00C3A4
	TXA
	CLC
	ADC.w #$0004
	TAX
	CPY.w #$0048
	BNE.b CODE_00C39F
	LDA.w #$00FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	CLC
	ADC.w #$0060
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_EraseLargeSwitch(Address)
namespace SMW_EraseLargeSwitch
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$30
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.w #$01F0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	AND.w #$000F
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	TAY
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	SEP.b #$20
	LDA.b #$25
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	INY
	LDA.b #$25
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	REP.b #$20
	TYA
	CLC
	ADC.w #$0010
	TAY
	SEP.b #$20
	LDA.b #$25
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	DEY
	LDA.b #$25
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	LDY.w #$0003
CODE_00C40C:
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x
	LDA.b #$40
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	LDA.b #$06
	STA.l SMW_StripeImageUploadTable[$01].HighByte,x
	REP.b #$20
	LDA.w #$18F8
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	TXA
	CLC
	ADC.w #$0006
	TAX
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CLC
	ADC.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM06
	DEY
	BPL.b CODE_00C40C
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	REP.b #$20
	TXA
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckIfNormalSpriteOffScreen(Address)
namespace SMW_CheckIfNormalSpriteOffScreen
%InsertMacroAtXPosition(<Address>)

Bank01:
	%INLINEROUTINE_SMW_CheckIfNormalSpriteOffScreen()
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckIfNormalSpriteOffScreen(Address)
namespace SMW_CheckIfNormalSpriteOffScreen
%InsertMacroAtXPosition(<Address>)

CopyOfBank02:
	%INLINEROUTINE_SMW_CheckIfNormalSpriteOffScreen()
namespace off
endmacro

macro ROUTINE_RT02_SMW_CheckIfNormalSpriteOffScreen(Address)
namespace SMW_CheckIfNormalSpriteOffScreen
%InsertMacroAtXPosition(<Address>)

Bank02:
	%INLINEROUTINE_SMW_CheckIfNormalSpriteOffScreen()
namespace off
endmacro

macro ROUTINE_RT03_SMW_CheckIfNormalSpriteOffScreen(Address)
namespace SMW_CheckIfNormalSpriteOffScreen
%InsertMacroAtXPosition(<Address>)

Bank03:
	%INLINEROUTINE_SMW_CheckIfNormalSpriteOffScreen()
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_CheckIfNormalSpriteOffScreen()
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckNormalSpriteLevelCollision(Address)
namespace SMW_CheckNormalSpriteLevelCollision
%InsertMacroAtXPosition(<Address>)

Wall:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	RTS

Floor:
;$01800E
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	RTS

Ceiling:
;$018014
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$08
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SubOffscreen(Address)
namespace SMW_SubOffscreen
%InsertMacroAtXPosition(<Address>)

Bank01:
.SpriteOffScreen1:
	db $40,$B0

.SpriteOffScreen2:
	db $01,$FF

.SpriteOffScreen3:
	db $30,$C0,$A0,$C0,$A0,$F0,$60,$90

.SpriteOffScreen4:
	db $01,$FF,$01,$FF,$01,$FF,$01,$FF

.Entry4:
	LDA.b #$06
	STA.b !RAM_SMW_Misc_ScratchRAM03
	BRA.b .CODE_01AC2D

.Entry3:
	LDA.b #$04
	BRA.b .CODE_01AC2D

.Entry2:
	LDA.b #$02
.CODE_01AC2D:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	BRA.b .CODE_01AC33

.Entry1:
	STZ.b !RAM_SMW_Misc_ScratchRAM03
.CODE_01AC33:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BEQ.b .Return01ACA4
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b .VerticalLevel
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$50
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	CMP.b #$02
	BPL.b .EraseSprite
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_TrackWhenOffScreen
	BNE.b .Return01ACA4
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w .SpriteOffScreen3,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_NorSpr_XPosLo,x
	PHP
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w .SpriteOffScreen4,y
	PLP
	SBC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b .CODE_01AC7C
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
.CODE_01AC7C:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b .Return01ACA4
.EraseSprite:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr01F_MagiKoopa
	BNE.b .CODE_01AC8E
	STA.w !RAM_SMW_Sprites_SpriteToRespawn
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_RespawnSprite
.CODE_01AC8E:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b .OffScrKillSprite
	LDY.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	CPY.b #$FF
	BEQ.b .OffScrKillSprite
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_LoadStatus,y
.OffScrKillSprite:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
.Return01ACA4:
	RTS

.VerticalLevel:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_TrackWhenOffScreen
	BNE.b .Return01ACA4
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b .Return01ACA4
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b #$00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	CMP.b #$02
	BCS.b .EraseSprite
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	BEQ.b .CODE_01ACD2
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr022_GreenVerticalNetKoopa
	BEQ.b .Return01ACA4
	CMP.b #!Define_SMW_SpriteID_NorSpr024_GreenHorizontalNetKoopa
	BEQ.b .Return01ACA4
.CODE_01ACD2:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w .SpriteOffScreen1,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_NorSpr_YPosLo,x
	PHP
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w .SpriteOffScreen2,y
	PLP
	SBC.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b .CODE_01ACF3
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
.CODE_01ACF3:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b .Return01ACA4
	BMI.b .EraseSprite
namespace off
endmacro

macro ROUTINE_RT01_SMW_SubOffscreen(Address)
namespace SMW_SubOffscreen
%InsertMacroAtXPosition(<Address>)

Bank02:
.DATA_02D003:
	db $40,$B0

.DATA_02D005:
	db $01,$FF

.DATA_02D007:
	db $30,$C0,$A0,$C0,$A0,$70,$60,$B0

.DATA_02D00F:
	db $01,$FF,$01,$FF,$01,$FF,$01,$FF

.Entry4:
	LDA.b #$06
	BRA.b .CODE_02D021

.Entry3:
	LDA.b #$04
	BRA.b .CODE_02D021

.Entry2:
	LDA.b #$02
.CODE_02D021:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	BRA.b .CODE_02D027

.Entry1:
	STZ.b !RAM_SMW_Misc_ScratchRAM03
.CODE_02D027:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank02
	BEQ.b .Return02D090
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b .VerticalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$04
	BEQ.b .CODE_02D04D
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$50
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	CMP.b #$02
	BPL.b .EraseSprite
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_TrackWhenOffScreen
	BNE.b .Return02D090
.CODE_02D04D:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w .DATA_02D007,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_NorSpr_XPosLo,x
	PHP
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w .DATA_02D00F,y
	PLP
	SBC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b .CODE_02D076
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
.CODE_02D076:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b .Return02D090
.EraseSprite:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b .OffScrKillSpr
	LDY.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	CPY.b #$FF
	BEQ.b .OffScrKillSpr
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_LoadStatus,y
.OffScrKillSpr:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
.Return02D090:
	RTS

.VerticalLevel:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_TrackWhenOffScreen
	BNE.b .Return02D090
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b .Return02D090
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w .DATA_02D003,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_NorSpr_YPosLo,x
	PHP
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w .DATA_02D005,y
	PLP
	SBC.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b .CODE_02D0C3
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
.CODE_02D0C3:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b .Return02D090
	BMI.b .EraseSprite
namespace off
endmacro

macro ROUTINE_RT02_SMW_SubOffscreen(Address)
namespace SMW_SubOffscreen
%InsertMacroAtXPosition(<Address>)

;Note: This routine is an unused varient that would have been used by cluster sprites

DATA_02FEC5:
	db $40,$B0

DATA_02FEC7:
	db $01,$FF

DATA_02FEC9:
	db $30,$C0

DATA_02FECB:
	db $01,$FF

ClusterSprites:
.Main:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b ADDR_02FF1E
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	CLC
	ADC.b #$50
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	ADC.b #$00
	CMP.b #$02
	BPL.b ADDR_02FF0E
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w DATA_02FEC9,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w !RAM_SMW_ClusterSpr_XPosLo,x
	PHP
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w DATA_02FECB,y
	PLP
	SBC.w !RAM_SMW_ClusterSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b ADDR_02FF0A
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
ADDR_02FF0A:

	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b Return02FF1D
ADDR_02FF0E:

	LDY.w !RAM_SMW_ClusterSpr_Table7E0F86,x
	CPY.b #$FF
	BEQ.b ADDR_02FF1A
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_LoadStatus,y
ADDR_02FF1A:

	STZ.w !RAM_SMW_ClusterSpr_SpriteID,x
Return02FF1D:

	RTS

ADDR_02FF1E:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b Return02FF1D
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w DATA_02FEC5,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w !RAM_SMW_ClusterSpr_YPosLo,x
	PHP
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w DATA_02FEC7,y
	PLP
	SBC.w !RAM_SMW_ClusterSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b ADDR_02FF4A
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
ADDR_02FF4A:

	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b Return02FF1D
	BMI.b ADDR_02FF0E
namespace off
endmacro

macro ROUTINE_RT03_SMW_SubOffscreen(Address)
namespace SMW_SubOffscreen
%InsertMacroAtXPosition(<Address>)

Bank03:
.DATA_03B83B:
	db $40,$B0

.DATA_03B83D:
	db $01,$FF

.DATA_03B83F:
	db $30,$C0,$A0,$80,$A0,$40,$60,$B0

.DATA_03B847:
	db $01,$FF,$01,$FF,$01,$00,$01,$FF

.Entry4:
	LDA.b #$06
	BRA.b .CODE_03B859

.Entry3:					;\ Note: Unused
	LDA.b #$04				;|
	BRA.b .CODE_03B859			;/

.Entry2:					;\ Note: Unused
	LDA.b #$02				;/
.CODE_03B859:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	BRA.b .CODE_03B85F

.Entry1:
	STZ.b !RAM_SMW_Misc_ScratchRAM03
.CODE_03B85F:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank03
	BEQ.b .Return03B8C2
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b .VerticalLevel
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$50
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	CMP.b #$02
	BPL.b .EraseSprite
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_TrackWhenOffScreen
	BNE.b .Return03B8C2
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w .DATA_03B83F,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_NorSpr_XPosLo,x
	PHP
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w .DATA_03B847,y
	PLP
	SBC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b .CODE_03B8A8
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
.CODE_03B8A8:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b .Return03B8C2
.EraseSprite:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b .OffScrKillSpr
	LDY.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	CPY.b #$FF
	BEQ.b .OffScrKillSpr
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_LoadStatus,y
.OffScrKillSpr:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
.Return03B8C2:
	RTS

.VerticalLevel:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_TrackWhenOffScreen
	BNE.b .Return03B8C2
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b .Return03B8C2
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w .DATA_03B83B,y
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_NorSpr_YPosLo,x
	PHP
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w .DATA_03B83D,y
	PLP
	SBC.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b .CODE_03B8F5
	EOR.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
.CODE_03B8F5:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b .Return03B8C2
	BMI.b .EraseSprite
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnMusicNoteOrZ(Address)
namespace SMW_SpawnMusicNoteOrZ
%InsertMacroAtXPosition(<Address>)

MusicNote: 								;\ Note: Unused
	LDA.b #!Define_SMW_SpriteID_MExtSpr08_UnusedMusicNote		;|
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x				;|
	BEQ.b ADDR_02C0D7						;|
	INC								;|
ADDR_02C0D7:								;|
	BRA.b CODE_02C0DB						;/

Z:
	LDA.b #!Define_SMW_SpriteID_MExtSpr06_RipVanFishZ
CODE_02C0DB:
	TAY
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return02C125
	TYA
	DEC.w !RAM_SMW_NorSpr03D_RipVanFish_ZSpawnTimer,x
	BPL.b Return02C125
	PHA
	LDA.b #$28
	STA.w !RAM_SMW_NorSpr03D_RipVanFish_ZSpawnTimer,x
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_02C0F2:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_02C107
	DEY
	BPL.b CODE_02C0F2
	DEC.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_02C104
	LDA.b #!Define_SMW_MaxMinorExtendedSpriteSlot
	STA.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_02C104:
	LDY.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_02C107:
	PLA
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$06
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.b #$7F
	STA.w !RAM_SMW_MExtSpr_Timer,y
	LDA.b #$FA
	STA.w !RAM_SMW_MExtSpr_XSpeed,y
Return02C125:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForAvailableExtendedSpriteSlot(Address)
namespace SMW_CheckForAvailableExtendedSpriteSlot
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_018EF1:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_018F07
	DEY
	BPL.b CODE_018EF1
	DEC.w !RAM_SMW_ExtSpr_SlotToOverwriteWhenSlotsFull
	BPL.b ADDR_018F03
	LDA.b #!Define_SMW_MaxExtendedSpriteSlot-$02
	STA.w !RAM_SMW_ExtSpr_SlotToOverwriteWhenSlotsFull
ADDR_018F03:
	LDY.w !RAM_SMW_ExtSpr_SlotToOverwriteWhenSlotsFull
Return018F06:
	RTS

CODE_018F07:
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x			;\ Optimization: Return or return??
	BNE.b Return018F06 					;|
	RTS							;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForAvailableScoreSpriteSlot(Address)
namespace SMW_CheckForAvailableScoreSpriteSlot
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxScoreSpriteSlot
CODE_02AD36:
	LDA.w !RAM_SMW_ScoreSpr_SpriteID,y
	BEQ.b Return02AD4B
	DEY
	BPL.b CODE_02AD36
	DEC.w !RAM_SMW_ScoreSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_02AD48
	LDA.b #!Define_SMW_MaxScoreSpriteSlot
	STA.w !RAM_SMW_ScoreSpr_SlotToOverwriteWhenSlotsFull
CODE_02AD48:
	LDY.w !RAM_SMW_ScoreSpr_SlotToOverwriteWhenSlotsFull
Return02AD4B:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GivePoints(Address)
namespace SMW_GivePoints
%InsertMacroAtXPosition(<Address>)

Entry2:
	PHX
	TYX
	BRA.b CODE_02ACE6

Main:
	PHX
CODE_02ACE6:
	CLC
	ADC.b #$05
	JSL.l CODE_02ACEF
	PLX
	RTL

CODE_02ACEF:
	PHY
	PHA
	JSL.l SMW_CheckForAvailableScoreSpriteSlot_Main
	PLA
	STA.w !RAM_SMW_ScoreSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$08
	STA.w !RAM_SMW_ScoreSpr_YPosLo,y
	PHA
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ScoreSpr_YPosHi,y
	PLA
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCC.b CODE_02AD22
	LDA.w !RAM_SMW_ScoreSpr_YPosLo,y
	ADC.b #$10
	STA.w !RAM_SMW_ScoreSpr_YPosLo,y
	LDA.w !RAM_SMW_ScoreSpr_YPosHi,y
	ADC.b #$00
	STA.w !RAM_SMW_ScoreSpr_YPosHi,y
CODE_02AD22:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_ScoreSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_ScoreSpr_XPosHi,y
	LDA.b #$30
	STA.w !RAM_SMW_ScoreSpr_YSpeed,y
	PLY
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnLavaSplash(Address)
namespace SMW_SpawnLavaSplash
%InsertMacroAtXPosition(<Address>)

InitialXSpeed:
	db $04,$FC,$06,$FA,$08,$F8,$0A,$F6

InitialYSpeed:
	db $E0,$E1,$E2,$E3,$E4,$E6,$E8,$EA

InitialAnimationFrameCounter:
	db $1F,$13,$10,$1C,$17,$1A,$0F,$1E

Main:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_CopyOfBank02		;\ Optimization: Really? Either remove the latter line or replace the JSR.w SMW_with "LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x" and the following LDA with ORA
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x				;/
	BNE.b SMW_SpawnWaterSplash_Return0284E7
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_028536:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02853F
	DEY
	BPL.b CODE_028536
	RTL

CODE_02853F:
	LDA.b #!Define_SMW_SpriteID_ExtSpr07_LavaSplash
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	JSL.l SMW_GetRand_Main
	PHX
	AND.b #$07
	TAX
	LDA.l InitialXSpeed,x
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$07
	TAX
	LDA.l InitialYSpeed,x
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	JSL.l SMW_GetRand_Main
	AND.b #$07
	TAX
	LDA.l InitialAnimationFrameCounter,x
	STA.w !RAM_SMW_ExtSpr07_LavaSplash_AnimationFrameCounter,y
	PLX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_028536
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeMode7TilemapsAndPalettes(Address)
namespace SMW_InitializeMode7TilemapsAndPalettes
%InsertMacroAtXPosition(<Address>)

TilemapData:
.Morton:
..Pose00:
..Pose01:
..Pose02:
..Pose03:
..Pose04:
..Pose05:
..Pose06:
..Pose07:
..Pose08:
	incbin "tilemaps/mode7/morton.bin"
.Roy:
..Pose00:
..Pose01:
..Pose02:
..Pose03:
..Pose04:
..Pose05:
..Pose06:
..Pose07:
..Pose08:
	incbin "tilemaps/mode7/roy.bin"
.Ludwig:
..Pose00:
..Pose01:
..Pose02:
..Pose03:
..Pose04:
..Pose05:
..Pose06:
..Pose07:
..Pose08:
	incbin "tilemaps/mode7/ludwig.bin"
.Bowser:
..Pose00_Neutral:
..Pose01_Blink:
..Pose02_BlinkAndCloseMouth:
..Pose03_Emerging1:
..Pose04_Emerging2:
..Pose05_Emerging3:
..Pose06_Hurt1:
..Pose07_InsideCar:
..Pose08_Hurt2:
..Pose09_Hurt3:
	incbin "tilemaps/mode7/bowser.bin"

PalPtrLo:
	db SMW_GlobalPalettes_InitBossFightMorton	; Morton
	db SMW_GlobalPalettes_InitBossFighRoy		; Roy
	db SMW_GlobalPalettes_InitBossFightLudwig	; Ludwig
	db SMW_GlobalPalettes_InitBossFightBowser	; Bowser
	db SMW_GlobalPalettes_InitBossFightReznor	; Reznor

PalPtrHi:
	db SMW_GlobalPalettes_InitBossFightMorton>>8	; Morton
	db SMW_GlobalPalettes_InitBossFighRoy>>8	; Roy
	db SMW_GlobalPalettes_InitBossFightLudwig>>8	; Ludwig
	db SMW_GlobalPalettes_InitBossFightBowser>>8	; Bowser
	db SMW_GlobalPalettes_InitBossFightReznor>>8	; Reznor

GFXFile:
	db $0B		; Morton
	db $0B		; Roy
	db $0B		; Ludwig
	db $21		; Bowser
	db $00		; Reznor

Main:
	PHX
	PHB
	PHK
	PLB
	LDY.b !RAM_SMW_NorSprXXX_CurrentlyActiveBoss,x
	STY.w !RAM_SMW_Misc_CurrentlyActiveBoss
	CPY.b #$04
	BNE.b CODE_03DD97
	JSR.w BufferReznorWallTilemap
	LDA.b #$48
	STA.b !RAM_SMW_Mirror_M7CenterYPosLo
	LDA.b #$14
	STA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_M7AngleHi
CODE_03DD97:
	LDA.b #$FF
	STA.b !RAM_SMW_Misc_ScreensInLvl
	INC
	STA.b !RAM_SMW_Camera_LastScreenHoriz
	LDY.w !RAM_SMW_Misc_CurrentlyActiveBoss
	LDX.w GFXFile,y
	LDA.w PalPtrLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w PalPtrHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.b #SMW_GlobalPalettes_Main>>16				; Note: #!BANK_30
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STZ.b !RAM_SMW_Misc_ScratchRAM02 				; Note: #!BANK_00
endif
	LDY.b #$0B
CODE_03DDB2:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.w SMW_PaletteMirror[$02].LowByte,y
	DEY
	BPL.b CODE_03DDB2
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	STZ.w !REGISTER_VRAMAddressHi
	TXY
	BEQ.b CODE_03DDD7
#LM000Hijack_DecompressAndConverGFXTo3BPP2:
	JSL.l SMW_GraphicsDecompressionRoutines_Main			; LM: Changes this JSL.l to point to $0EFC00
	LDA.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_03DDD0:
	JSR.w BufferTilemap
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b CODE_03DDD0
CODE_03DDD7:
	LDX.b #$5F
CODE_03DDD9:
	LDA.b #$FF
	STA.l !RAM_SMW_Misc_Mode7BossTilemap,x
	DEX
	BPL.b CODE_03DDD9
	PLB
	PLX
	RTL

BufferTilemap:
	LDX.b #$00
	TXY
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM05
CODE_03DDEC:
	JSR.w CODE_03DE39
	PHY
	TYA
	LSR
	CLC
	ADC.b #$0F
	TAY
	JSR.w CODE_03DE3C
	LDY.b #$08
CODE_03DDFB:
	LDA.w !RAM_SMW_Graphics_Mode7TileBuffer,x
	ASL
	ROL
	ROL
	ROL
	AND.b #$07
	STA.w !RAM_SMW_Graphics_Mode7TileBuffer,x
	STA.w !REGISTER_WriteToVRAMPortHi
	INX
	DEY
	BNE.b CODE_03DDFB
	PLY
	DEC.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b CODE_03DDEC
	LDA.b #$07
CODE_03DE15:
	TAX
	LDY.b #$08
	STY.b !RAM_SMW_Misc_ScratchRAM05
CODE_03DE1A:
	LDY.w !RAM_SMW_Graphics_Mode7TileBuffer,x
	STY.w !REGISTER_WriteToVRAMPortHi
	DEX
	DEC.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b CODE_03DE1A
	CLC
	ADC.b #$08
	CMP.b #$40
	BCC.b CODE_03DE15
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC							;\ Todo: I wonder if changing this to #$0020 would allow the mode 7 bosses to be 4BPP?
	ADC.w #$0018						;/ More changes may be needed to make that work though.
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	RTS

CODE_03DE39:
	JSR.w CODE_03DE3C
CODE_03DE3C:
	PHX
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	PHY
	LDY.b #$08
CODE_03DE42:
	ASL
	ROR.w !RAM_SMW_Graphics_Mode7TileBuffer,x
	INX
	DEY
	BNE.b CODE_03DE42
	PLY
	INY
	PLX
	RTS

DATA_03DE4E:
	incbin "tilemaps/mode7/ReznorWall.bin"

BufferReznorWallTilemap:
	STZ.w !REGISTER_VRAMAddressIncrementValue
	REP.b #$20
	LDA.w #!VRAM_SMW_Layer1GFXVRAMLocation+$0A1C
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$00
CODE_03DE9A:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0080
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_VRAMAddressLo
	SEP.b #$20
	LDY.b #$08
CODE_03DEAB:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w DATA_03DE4E,x
else
	LDA.l DATA_03DE4E,x
endif
	STA.w !REGISTER_WriteToVRAMPortLo
	INX
	DEY
	BNE.b CODE_03DEAB
	CPX.b #$40
	BCC.b CODE_03DE9A
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UploadGraphicsFiles(Address)
namespace SMW_UploadGraphicsFiles
%InsertMacroAtXPosition(<Address>)

SpriteGFXList:
	db $00,$01,$13,$02		; Tileset 0 (Forest)
	db $00,$01,$12,$03		; Tileset 1 (Castle)
	db $00,$01,$13,$05		; Tileset 2 (Mushroom)
	db $00,$01,$13,$04		; Tileset 3 (Underground)
	db $00,$01,$13,$06		; Tileset 4 (Water)
	db $00,$01,$13,$09		; Tileset 5 (Pokey)
	db $00,$01,$13,$04		; Tileset 6 (Underground 2)
	db $00,$01,$06,$11		; Tileset 7 (Ghost House)
	db $00,$01,$13,$20		; Tileset 8 (Banzai Bill)
	db $00,$01,$13,$0F		; Tileset 9 (Yoshi's House)
	db $00,$01,$13,$23		; Tileset A (Dino-Rhino)
	db $00,$01,$0D,$14		; Tileset B (Switch Palace)
	db $00,$01,$24,$0E		; Tileset C (Mecha-Koopa)
	db $00,$01,$0A,$22		; Tileset D (Wendy/Lemmy)
	db $00,$01,$13,$0E		; Tileset E (Ninji)
	db $00,$01,$13,$14		; Tileset F (Not Used)
	db $00,$00,$00,$08		; Unknown
	db $10,$0F,$1C,$1D		; Overworld
	db $00,$01,$24,$22		; Morton/Roy/Ludwig
	db $00,$01,$25,$22		; Reznor/Iggy/Larry Room
	db $00,$22,$13,$2D		; Castle Destruction Scene
	db $00,$01,$0F,$22		; Credits
	db $00,$26,$2E,$22		; Yoshi's House during Credits
	db $21,$0B,$25,$0A		; Bowser And Koopa Kid Credits Screen
	db $00,$0D,$24,$22		; Bowser Battle
	db $2C,$30,$2D,$0E		; The End screen

FGAndBGGFXList:
	db $14,$17,$19,$15		; Tileset 0 (Normal 1)
	db $14,$17,$1B,$18		; Tileset 1 (Castle 1)
	db $14,$17,$1B,$16		; Tileset 2 (Rope 1)
	db $14,$17,$0C,$1A		; Tileset 3 (Underground 1)
	db $14,$17,$1B,$08		; Tileset 4 (Switch Palace 1)
	db $14,$17,$0C,$07		; Tileset 5 (Ghost House 1)
	db $14,$17,$0C,$16		; Tileset 6 (Rope 2)
	db $14,$17,$1B,$15		; Tileset 7 (Normal 2)
	db $14,$17,$19,$16		; Tileset 8 (Rope 3)
	db $14,$17,$0D,$1A		; Tileset 9 (Underground 2)
	db $14,$17,$1B,$08		; Tileset A (Switch Palace 2)
	db $14,$17,$1B,$18		; Tileset B (Castle 2)
	db $14,$17,$19,$1F		; Tileset C (Cloud/Forest)
	db $14,$17,$0D,$07		; Tileset D (Ghost House 2)
	db $14,$17,$19,$1A		; Tileset E (Underground 3)
	db $14,$17,$14,$14		; Tileset F (Unused)
	db $0E,$0F,$17,$17		; Unknown
	db $1C,$1D,$08,$1E		; Overworld (Main Map)
	db $1C,$1D,$08,$1E		; Overworld (Yoshi's Island)
	db $1C,$1D,$08,$1E		; Overworld (Vanilla Dome)
	db $1C,$1D,$08,$1E		; Overworld (Forest of Illusion)
	db $1C,$1D,$08,$1E		; Overworld (Valley of Bowser)
	db $1C,$1D,$08,$1E		; Overworld (Special World)
	db $1C,$1D,$08,$1E		; Overworld (Star Road)
	db $14,$17,$19,$2C		; Castle Destruction cutscene
	db $19,$17,$1B,$18		; Credits (?)

Layer3:
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer3GFXVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b #$28
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_00A9A3:
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	TAY
	JSL.l SMW_GraphicsDecompressionRoutines_Main
	REP.b #$30
	LDX.w #$03FF
	LDY.w #$0000
CODE_00A9B2:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.w !REGISTER_WriteToVRAMPortLo
	INY
	INY
	DEX
	BPL.b CODE_00A9B2
	SEP.b #$30
	INC.b !RAM_SMW_Misc_ScratchRAM0E
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b CODE_00A9A3
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_SpriteGFXLocationLo>>8
	STA.w !REGISTER_VRAMAddressHi
	LDY.b #$00
	JSR.w UploadGFXFile
	RTS

DATA_00A9D2:
	db (!VRAM_SMW_SpriteGFXLocationHi+$0800)>>8
	db (!VRAM_SMW_SpriteGFXLocationHi)>>8
	db (!VRAM_SMW_SpriteGFXLocationLo+$0800)>>8
	db !VRAM_SMW_SpriteGFXLocationLo>>8

DATA_00A9D6:
	db $18,$10,$08,$00

Main:
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	LDX.b #$03
	LDA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	ASL
	ASL
	TAY
CODE_00A9E7:
	LDA.w SpriteGFXList,y
	STA.b !RAM_SMW_Misc_ScratchRAM04,x
	INY
	DEX
	BPL.b CODE_00A9E7
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM0F
GFXTransferLoop:
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
	STZ.w !REGISTER_VRAMAddressLo
	LDA.w DATA_00A9D2,x
	STA.w !REGISTER_VRAMAddressHi
	LDY.b !RAM_SMW_Misc_ScratchRAM04,x
	LDA.w !RAM_SMW_Misc_CurrentlyLoadedSpriteGraphicsFiles,x
	CMP.b !RAM_SMW_Misc_ScratchRAM04,x
#LM000Hijack_AlwaysUploadSpriteGFX:
	BEQ.b DontUploadSpr						; LM: NOPs this branch out so that the Sprite graphics files are always reloaded to prevent issues with the ExAnimation feature
#LMRead_JSRToUploadGFXFileLoc1:
	JSR.w UploadGFXFile
DontUploadSpr:
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b GFXTransferLoop
	LDX.b #$03
UpdtCrrntSpritGFX:
	LDA.b !RAM_SMW_Misc_ScratchRAM04,x
	STA.w !RAM_SMW_Misc_CurrentlyLoadedSpriteGraphicsFiles,x
	DEX
	BPL.b UpdtCrrntSpritGFX
	LDA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	CMP.b #$FE
	BCS.b HandleMode7BossGFX
	LDX.b #$03
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	ASL
	ASL
	TAY
PrepLoadFGBG:
	LDA.w FGAndBGGFXList,y
	STA.b !RAM_SMW_Misc_ScratchRAM04,x
	INY
	DEX
	BPL.b PrepLoadFGBG
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_00AA35:
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
	STZ.w !REGISTER_VRAMAddressLo
	LDA.w DATA_00A9D6,x
	STA.w !REGISTER_VRAMAddressHi
	LDY.b !RAM_SMW_Misc_ScratchRAM04,x
	LDA.w !RAM_SMW_Misc_CurrentlyLoadedLayerGraphicsFiles,x
	CMP.b !RAM_SMW_Misc_ScratchRAM04,x
#LM000Hijack_AlwaysUploadFGAndBGGFX:
	BEQ.b NoUploadFGBG						; LM: NOPs this branch out so that the FG and BG graphics files are always reloaded to prevent issues with the ExAnimation feature
#LMRead_JSRToUploadGFXFileLoc2:
	JSR.w UploadGFXFile
NoUploadFGBG:
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b CODE_00AA35
#LM000Hijack_Unknown00AA50:
	LDX.b #$03							;\ LM: Puts a JSL.l to $0FF780 and skips the rest of the code in indicated by this comment. Purpose currently unknown.
UpdateCurrentFGBG:							;|
	LDA.b !RAM_SMW_Misc_ScratchRAM04,x				;|
	STA.w !RAM_SMW_Misc_CurrentlyLoadedLayerGraphicsFiles,x		;|
	DEX								;|
	BPL.b UpdateCurrentFGBG						;/
	RTS

HandleMode7BossGFX:
	BEQ.b NotIggyLarryOrReznor
	JSR.w ConvertGFX27IntoNormallFormat
NotIggyLarryOrReznor:
	LDX.b #$03
	LDA.b #$80
Store80:
	STA.w !RAM_SMW_Misc_CurrentlyLoadedLayerGraphicsFiles,x
	DEX
	BPL.b Store80
	RTS

UploadGFXFile:
	JSL.l SMW_GraphicsDecompressionRoutines_Main			; LM: Changes this JSL.l to point to $0FF160 here. Purpose currently unknown.
	CPY.b #$01
	BNE.b SkipSpecial
	LDA.w !RAM_SMW_Overworld_LevelTileSettings+!Define_SMW_LevelID_ChangeSP2GFX
	BPL.b SkipSpecial
	LDY.b #$31
	JSL.l SMW_GraphicsDecompressionRoutines_Main
	LDY.b #$01
SkipSpecial:
	REP.b #$20
	LDA.w #$0000
	LDX.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	CPX.b #$11
	BCC.b CODE_00AA90
#LM000Hijack_Unknown00AA8C:
	CPY.b #$08
	BEQ.b JumpTo_____
CODE_00AA90:
#LM000Hijack_Unknown00AA90:
	CPY.b #$1E
	BEQ.b JumpTo_____
	BNE.b CODE_00AA99
JumpTo_____:
	JMP.w FilterSomeRAM

CODE_00AA99:
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w #$FFFF
	CPY.b #$01
	BEQ.b CODE_00AAA9
	CPY.b #$17
	BEQ.b CODE_00AAA9
	LDA.w #$0000
CODE_00AAA9:
	STA.w !RAM_SMW_Flag_Alter3BPPTo4BPPConversion
	LDY.b #$7F
CODE_00AAAE:
	LDA.w !RAM_SMW_Flag_Alter3BPPTo4BPPConversion
	BEQ.b CODE_00AACD
	CPY.b #$7E
	BCC.b CODE_00AABE
CODE_00AAB7:
	LDA.w #$FF00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	BNE.b CODE_00AACD
CODE_00AABE:
	CPY.b #$6E
	BCC.b CODE_00AAC8
	CPY.b #$70
	BCS.b CODE_00AAC8
	BCC.b CODE_00AAB7
CODE_00AAC8:
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM0A
CODE_00AACD:
#LM000Hijack_Unknown00AACD:
	LDX.b #$07
CODE_00AACF:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !REGISTER_WriteToVRAMPortLo
	XBA
	ORA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !RAM_SMW_Graphics_3BPPTo4BPPBuffer,x
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEX
	BPL.b CODE_00AACF
	LDX.b #$07
CODE_00AAE3:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	XBA
	ORA.w !RAM_SMW_Graphics_3BPPTo4BPPBuffer,x
	AND.b !RAM_SMW_Misc_ScratchRAM0A
	ORA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.w !REGISTER_WriteToVRAMPortLo
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEX
	BPL.b CODE_00AAE3
	DEY
	BPL.b CODE_00AAAE
	SEP.b #$20
	RTS

FilterSomeRAM:
	LDA.w #$FF00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.b #$7F
UploadToVRAM:
	CPY.b #$08					;\ Optimization: Useless
#LM000Hijack_4BPPGraphics:				;|
	BCS.b CODE_00AB0D 				;/ LM: Removes this BCS line so it can add a second INC.b !RAM_SMW_Misc_ScratchRAM00 down in the below loop.
CODE_00AB0D:
	LDX.b #$07
AddressWrite1:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !REGISTER_WriteToVRAMPortLo
	XBA
	ORA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !RAM_SMW_Graphics_3BPPTo4BPPBuffer,x
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEX
	BPL.b AddressWrite1
	LDX.b #$07
AddressWrite2:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	XBA
	ORA.w !RAM_SMW_Graphics_3BPPTo4BPPBuffer,x
	AND.b !RAM_SMW_Misc_ScratchRAM0A
	ORA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.w !REGISTER_WriteToVRAMPortLo
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEX
	BPL.b AddressWrite2
	DEY
	BPL.b UploadToVRAM
	SEP.b #$20
	RTS

ConvertGFX27IntoNormallFormat:
	LDY.b #$27
#CustomPatch_ConvertGFX27:
	JSL.l SMW_GraphicsDecompressionRoutines_Main
	REP.b #$10
	LDY.w #$0000
	LDX.w #$03FF
CODE_00AB50:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	JSR.w CODE_00ABC4
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	JSR.w CODE_00ABC4
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	JSR.w CODE_00ABC4
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	JSR.w CODE_00ABC4
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	JSR.w CODE_00ABC4
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	JSR.w CODE_00ABC4
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_WriteToVRAMPortHi
	INY
	DEX
	BPL.b CODE_00AB50
	LDX.w #$2000
CODE_00ABBB:
	STZ.w !REGISTER_WriteToVRAMPortHi
	DEX
	BNE.b CODE_00ABBB
	SEP.b #$10
	RTS

CODE_00ABC4:
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	ROL.b !RAM_SMW_Misc_ScratchRAM0F
	ROL.b !RAM_SMW_Misc_ScratchRAM04
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetMap16HighByteForCurrentObject(Address)
namespace SMW_SetMap16HighByteForCurrentObject
%InsertMacroAtXPosition(<Address>)

Page01:
	LDA.b #$01
	STA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	RTS

Page00:
	LDA.b #$00
	STA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleVerticalSubScreenCrossingForCurrentObject(Address)
namespace SMW_HandleVerticalSubScreenCrossingForCurrentObject
%InsertMacroAtXPosition(<Address>)

HorizontalLevel:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Blocks_SubScrPos
	TAY
	BCC.b .Return
.Entry2:
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	STA.b !RAM_SMW_Misc_ScratchRAM05
.Return:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleVerticalSubScreenCrossingForCurrentObject(Address)
namespace SMW_HandleVerticalSubScreenCrossingForCurrentObject
%InsertMacroAtXPosition(<Address>)

VerticalLevel:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Blocks_SubScrPos
	TAY
	BCC.b .Return
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
.Return:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleHorizontalSubScreenCrossingForCurrentObject(Address)
namespace SMW_HandleHorizontalSubScreenCrossingForCurrentObject
%InsertMacroAtXPosition(<Address>)

Main:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
Entry2:
	INY
	TYA
	AND.b #$0F
	BNE.b Return0DA97C
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataLo				;\ LM: This routine is modified to account for custom level dimensions (3.00+)
	CLC									;|
	ADC.b #$B0								;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo				;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo				;|
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi				;|
	ADC.b #$01								;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi				;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi				;/
	INC.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	LDA.b !RAM_SMW_Blocks_SubScrPos
	AND.b #$F0
	TAY
Return0DA97C:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PreserveLevelDataPointerInObjects(Address)
namespace SMW_PreserveLevelDataPointerInObjects
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Misc_ScratchRAM05
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RestoreLevelDataPointerInObjects(Address)
namespace SMW_RestoreLevelDataPointerInObjects
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	STA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessExtendedObjects(Address)
namespace SMW_ProcessExtendedObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30					; Optimization: Unecessary SEP.b #$30
	JSR.w Sub
	RTL

Sub:
	SEP.b #$30					; Optimization: Another unecessary SEP.b #$30
	LDA.b !RAM_SMW_Blocks_SizeOrType
	TAX
	JSL.l SMW_ExecutePtr_Long

ExtendedObjectPtrs:
	dl SMW_ExtendedObj00_ScreenExit_Main
	dl SMW_ExtendedObj01_ScreenJump_Main
	dl SMW_ExtendedObj02_Unused_Main			;\ Crash: These all crash the game if loaded.
	dl SMW_ExtendedObj03_Unused_Main			;| LM: Hijacks the pointer for object 02 to point to $0DE1B0 (?.??+)
	dl SMW_ExtendedObj04_Unused_Main			;| Also hijacks the pointer for object 01 and 03 (3.00+)
	dl SMW_ExtendedObj05_Unused_Main			;|
	dl SMW_ExtendedObj06_Unused_Main			;|
	dl SMW_ExtendedObj07_Unused_Main			;|
	dl SMW_ExtendedObj08_Unused_Main			;|
	dl SMW_ExtendedObj09_Unused_Main			;|
	dl SMW_ExtendedObj0A_Unused_Main			;|
	dl SMW_ExtendedObj0B_Unused_Main			;|
	dl SMW_ExtendedObj0C_Unused_Main			;|
	dl SMW_ExtendedObj0D_Unused_Main			;|
	dl SMW_ExtendedObj0E_Unused_Main			;|
	dl SMW_ExtendedObj0F_Unused_Main			;/
	dl SMW_ExtendedObj10_SmallDoor_Main
	dl SMW_ExtendedObj11_Invisible1upBlock_Main
	dl SMW_ExtendedObj12_InvisibleNoteBlock_Main
	dl SMW_ExtendedObj13_TopLeftCornerEdge1_Main
	dl SMW_ExtendedObj14_TopRightCornerEdge1_Main
	dl SMW_ExtendedObj15_SmallPSwitchDoor_Main
	dl SMW_ExtendedObj16_InvisiblePSwitchBlock_Main
	dl SMW_ExtendedObj17_GreenStarBlock_Main
	dl SMW_ExtendedObj18_3upMoon_Main
	dl SMW_ExtendedObj19_1upCheckpoint1_Main
	dl SMW_ExtendedObj1A_1upCheckpoint2_Main
	dl SMW_ExtendedObj1B_1upCheckpoint3_Main
	dl SMW_ExtendedObj1C_1upCheckpoint4_Main
	dl SMW_ExtendedObj1D_RedBerry_Main
	dl SMW_ExtendedObj1E_PinkBerry_Main
	dl SMW_ExtendedObj1F_GreenBerry_Main
	dl SMW_ExtendedObj20_SpinningTurnBlock_Main
	dl SMW_ExtendedObj21_BottomRightMidwayGateTile_Main
	dl SMW_ExtendedObj22_BottomRightMidwayGateTile_Main
	dl SMW_ExtendedObj23_NoteBlockWithPowerUp_Main
	dl SMW_ExtendedObj24_ONOFFBlock_Main
	dl SMW_ExtendedObj25_DirectionalCoinBlock_Main
	dl SMW_ExtendedObj26_NoteBlock_Main
	dl SMW_ExtendedObj27_4WayNoteBlock_Main
	dl SMW_ExtendedObj28_TurnBlockWithFlower_Main
	dl SMW_ExtendedObj29_TurnBlockWithFeather_Main
	dl SMW_ExtendedObj2A_TurnBlockWithStar_Main
	dl SMW_ExtendedObj2B_TurnBlockWithCoinStar21upVine_Main
	dl SMW_ExtendedObj2C_TurnBlockWithMultipleCoins_Main
	dl SMW_ExtendedObj2D_TurnBlockWithCoin_Main
	dl SMW_ExtendedObj2E_TurnBlockWithNothing_Main
	dl SMW_ExtendedObj2F_TurnBlockWithPSwitch_Main
	dl SMW_ExtendedObj30_QuestionBlockWithFlower_Main
	dl SMW_ExtendedObj31_QuestionBlockWithFeather_Main
	dl SMW_ExtendedObj32_QuestionBlockWithStar_Main
	dl SMW_ExtendedObj33_QuestionBlockWithCoinStar2_Main
	dl SMW_ExtendedObj34_QuestionBlockWithMultipleCoins_Main
	dl SMW_ExtendedObj35_QuestionBlockWithKeyWingsBalloonShell_Main
	dl SMW_ExtendedObj36_QuestionBlockWithYoshi_Main
	dl SMW_ExtendedObj37_QuestionBlockWithShell_Main
	dl SMW_ExtendedObj38_QuestionBlockWithShell_Main
	dl SMW_ExtendedObj39_SolidTurnBlockWithSideFeather_Main
	dl SMW_ExtendedObj3A_TopLeftCornerEdge2_Main
	dl SMW_ExtendedObj3B_TopRightCornerEdge2_Main
	dl SMW_ExtendedObj3C_TopLeftCornerEdge3_Main
	dl SMW_ExtendedObj3D_TopRightCornerEdge3_Main
	dl SMW_ExtendedObj3E_TopLeftCornerEdge4_Main
	dl SMW_ExtendedObj3F_TopRightCornerEdge4_Main
	dl SMW_ExtendedObj40_GlassBlock_Main
	dl SMW_ExtendedObj41_YoshiCoin_Main
	dl SMW_ExtendedObj42_TopLeftSlope_Main
	dl SMW_ExtendedObj43_TopRightSlope_Main
	dl SMW_ExtendedObj44_LeftFacingTriangle_Main
	dl SMW_ExtendedObj45_RightFacingTriangle_Main
	dl SMW_ExtendedObj46_MidwayBar_Main
	dl SMW_ExtendedObj47_Door_Main
	dl SMW_ExtendedObj48_PSwitchDoor_Main
	dl SMW_ExtendedObj49_GhostHouseExit_Main
	dl SMW_ExtendedObj4A_ClimbingNetDoor_Main
	dl SMW_ExtendedObj4B_ConveyorEndTile1_Main
	dl SMW_ExtendedObj4C_ConveyorEndTile2_Main
	dl SMW_ExtendedObj4D_LineGuideTopLeftQuarterLargeCircle_Main
	dl SMW_ExtendedObj4E_LineGuideTopRightQuarterLargeCircle_Main
	dl SMW_ExtendedObj4F_LineGuideBottomLeftQuarterLargeCircle_Main
	dl SMW_ExtendedObj50_LineGuideBottomRightQuarterLargeCircle_Main
	dl SMW_ExtendedObj51_LineGuideTopLeftQuarterSmallCircle_Main
	dl SMW_ExtendedObj52_LineGuideTopRightQuarterSmallCircle_Main
	dl SMW_ExtendedObj53_LineGuideBottomLeftQuarterSmallCircle_Main
	dl SMW_ExtendedObj54_LineGuideBottomRightQuarterSmallCircle_Main
	dl SMW_ExtendedObj55_HorizontalLineGuideEnd_Main
	dl SMW_ExtendedObj56_VerticalLineGuideEnd_Main
	dl SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main
	dl SMW_ExtendedObj58_SwitchPalaceBottomLeftInnerCorner_Main
	dl SMW_ExtendedObj59_SwitchPalaceTopRightInnerCorner_Main
	dl SMW_ExtendedObj5A_SwitchPalaceTopLeftInnerCorner_Main
	dl SMW_ExtendedObj5B_BitOfBrickBackground1_Main
	dl SMW_ExtendedObj5C_BitOfBrickBackground2_Main
	dl SMW_ExtendedObj5D_BitOfBrickBackground3_Main
	dl SMW_ExtendedObj5E_BitOfBrickBackground4_Main
	dl SMW_ExtendedObj5F_LargeBackgroundArea_Main
	dl SMW_ExtendedObj60_CaveLavaInnerCorner_Main
	dl SMW_ExtendedObj61_GhostHouseClock_Main
	dl SMW_ExtendedObj62_GhostHouseTopLeftToBottomRightBeam1_Main
	dl SMW_ExtendedObj63_GhostHouseTopRightToBottomLeftBeam1_Main
	dl SMW_ExtendedObj64_TopRightCobweb_Main
	dl SMW_ExtendedObj65_TopLeftCobweb_Main
	dl SMW_ExtendedObj66_GhostHouseTopRightToBottomLeftBeam2_Main
	dl SMW_ExtendedObj67_GhostHouseTopLeftToBottomRightBeam2_Main
	dl SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main
	dl SMW_ExtendedObj69_CloudFringeBottomAndLeftEdge_Main
	dl SMW_ExtendedObj6A_CloudFringeBottomRight_Main
	dl SMW_ExtendedObj6B_CloudFringeBottomLeft_Main
	dl SMW_ExtendedObj6C_CloudFringeOnWhiteBottomAndRightEdge_Main
	dl SMW_ExtendedObj6D_CloudFringeOnWhiteBottomAndLeftEdge_Main
	dl SMW_ExtendedObj6E_CloudFringeOnWhiteBottomRight_Main
	dl SMW_ExtendedObj6F_CloudFringeOnWhiteBottomLeft_Main
	dl SMW_ExtendedObj70_BitOfCanvas1_Main
	dl SMW_ExtendedObj71_Canvas1_Main
	dl SMW_ExtendedObj72_Canvas2_Main
	dl SMW_ExtendedObj73_Canvas3_Main
	dl SMW_ExtendedObj74_Canvas4_Main
	dl SMW_ExtendedObj75_CanvasTile1_Main
	dl SMW_ExtendedObj76_CanvasTile2_Main
	dl SMW_ExtendedObj77_CanvasTile3_Main
	dl SMW_ExtendedObj78_CanvasTile4_Main
	dl SMW_ExtendedObj79_CanvasTile5_Main
	dl SMW_ExtendedObj7A_CanvasTile6_Main
	dl SMW_ExtendedObj7B_CanvasTile7_Main
	dl SMW_ExtendedObj7C_BitOfCanvas1_Main
	dl SMW_ExtendedObj7D_BitOfCanvas2_Main
	dl SMW_ExtendedObj7E_BitOfCanvas3_Main
	dl SMW_ExtendedObj7F_TorpedoLauncher_Main
	dl SMW_ExtendedObj80_GhostHouseEntrance_Main
	dl SMW_ExtendedObj81_Seaweed_Main
	dl SMW_ExtendedObj82_BigBush1_Main
	dl SMW_ExtendedObj83_BigBush2_Main
	dl SMW_ExtendedObj84_CastleEntrance_Main
	dl SMW_ExtendedObj85_YoshisHouse_Main
	dl SMW_ExtendedObj86_GoalSign_Main
	dl SMW_ExtendedObj87_GreenSwitchBlock_Main
	dl SMW_ExtendedObj88_RightTreeBranch_Main
	dl SMW_ExtendedObj89_LeftTreeBranch_Main
	dl SMW_ExtendedObj8A_GreenSwitchPalaceSwitch_Main
	dl SMW_ExtendedObj8B_YellowSwitchPalaceSwitch_Main
	dl SMW_ExtendedObj8C_BlueSwitchPalaceSwitch_Main
	dl SMW_ExtendedObj8D_RedSwitchPalaceSwitch_Main
	dl SMW_ExtendedObj8E_YellowSwitchBlock_Main
	dl SMW_ExtendedObj8F_GhostHouseWindow_Main
	dl SMW_ExtendedObj90_LargeBossDoor_Main
	dl SMW_ExtendedObj91_VerticalLevelSteepLeftSlope_Main
	dl SMW_ExtendedObj92_VerticalLevelSteepRightSlope_Main
	dl SMW_ExtendedObj93_VerticalLevelNormalLeftSlope_Main
	dl SMW_ExtendedObj94_VerticalLevelNormalRightSlope_Main
	dl SMW_ExtendedObj95_VerticalLevelVerySteepLeftSlope_Main
	dl SMW_ExtendedObj96_VerticalLevelVerySteepRightSlope_Main
	dl SMW_ExtendedObj97_SwitchPalaceRightAndBottomEdgeTile_Main
	dl SMW_ExtendedObj98_Unused_Main
	dl SMW_ExtendedObj99_Unused_Main
	dl SMW_ExtendedObj9A_Unused_Main
	dl SMW_ExtendedObj9B_Unused_Main
	dl SMW_ExtendedObj9C_Unused_Main
	dl SMW_ExtendedObj9D_Unused_Main
	dl SMW_ExtendedObj9E_Unused_Main
	dl SMW_ExtendedObj9F_Unused_Main
	dl SMW_ExtendedObjA0_Unused_Main
	dl SMW_ExtendedObjA1_Unused_Main
	dl SMW_ExtendedObjA2_Unused_Main
	dl SMW_ExtendedObjA3_Unused_Main
	dl SMW_ExtendedObjA4_Unused_Main
	dl SMW_ExtendedObjA5_Unused_Main
	dl SMW_ExtendedObjA6_Unused_Main
	dl SMW_ExtendedObjA7_Unused_Main
	dl SMW_ExtendedObjA8_Unused_Main
	dl SMW_ExtendedObjA9_Unused_Main
	dl SMW_ExtendedObjAA_Unused_Main
	dl SMW_ExtendedObjAB_Unused_Main
	dl SMW_ExtendedObjAC_Unused_Main
	dl SMW_ExtendedObjAD_Unused_Main
	dl SMW_ExtendedObjAE_Unused_Main
	dl SMW_ExtendedObjAF_Unused_Main
	dl SMW_ExtendedObjB0_Unused_Main
	dl SMW_ExtendedObjB1_Unused_Main
	dl SMW_ExtendedObjB2_Unused_Main
	dl SMW_ExtendedObjB3_Unused_Main
	dl SMW_ExtendedObjB4_Unused_Main
	dl SMW_ExtendedObjB5_Unused_Main
	dl SMW_ExtendedObjB6_Unused_Main
	dl SMW_ExtendedObjB7_Unused_Main
	dl SMW_ExtendedObjB8_Unused_Main
	dl SMW_ExtendedObjB9_Unused_Main
	dl SMW_ExtendedObjBA_Unused_Main
	dl SMW_ExtendedObjBB_Unused_Main
	dl SMW_ExtendedObjBC_Unused_Main
	dl SMW_ExtendedObjBD_Unused_Main
	dl SMW_ExtendedObjBE_Unused_Main
	dl SMW_ExtendedObjBF_Unused_Main
	dl SMW_ExtendedObjC0_Unused_Main
	dl SMW_ExtendedObjC1_Unused_Main
	dl SMW_ExtendedObjC2_Unused_Main
	dl SMW_ExtendedObjC3_Unused_Main
	dl SMW_ExtendedObjC4_Unused_Main
	dl SMW_ExtendedObjC5_Unused_Main
	dl SMW_ExtendedObjC6_Unused_Main
	dl SMW_ExtendedObjC7_Unused_Main
	dl SMW_ExtendedObjC8_Unused_Main
	dl SMW_ExtendedObjC9_Unused_Main
	dl SMW_ExtendedObjCA_Unused_Main
	dl SMW_ExtendedObjCB_Unused_Main
	dl SMW_ExtendedObjCC_Unused_Main
	dl SMW_ExtendedObjCD_Unused_Main
	dl SMW_ExtendedObjCE_Unused_Main
	dl SMW_ExtendedObjCF_Unused_Main
	dl SMW_ExtendedObjD0_Unused_Main
	dl SMW_ExtendedObjD1_Unused_Main
	dl SMW_ExtendedObjD2_Unused_Main
	dl SMW_ExtendedObjD3_Unused_Main
	dl SMW_ExtendedObjD4_Unused_Main
	dl SMW_ExtendedObjD5_Unused_Main
	dl SMW_ExtendedObjD6_Unused_Main
	dl SMW_ExtendedObjD7_Unused_Main
	dl SMW_ExtendedObjD8_Unused_Main
	dl SMW_ExtendedObjD9_Unused_Main
	dl SMW_ExtendedObjDA_Unused_Main
	dl SMW_ExtendedObjDB_Unused_Main
	dl SMW_ExtendedObjDC_Unused_Main
	dl SMW_ExtendedObjDD_Unused_Main
	dl SMW_ExtendedObjDE_Unused_Main
	dl SMW_ExtendedObjDF_Unused_Main
	dl SMW_ExtendedObjE0_Unused_Main
	dl SMW_ExtendedObjE1_Unused_Main
	dl SMW_ExtendedObjE2_Unused_Main
	dl SMW_ExtendedObjE3_Unused_Main
	dl SMW_ExtendedObjE4_Unused_Main
	dl SMW_ExtendedObjE5_Unused_Main
	dl SMW_ExtendedObjE6_Unused_Main
	dl SMW_ExtendedObjE7_Unused_Main
	dl SMW_ExtendedObjE8_Unused_Main
	dl SMW_ExtendedObjE9_Unused_Main
	dl SMW_ExtendedObjEA_Unused_Main
	dl SMW_ExtendedObjEB_Unused_Main
	dl SMW_ExtendedObjEC_Unused_Main
	dl SMW_ExtendedObjED_Unused_Main
	dl SMW_ExtendedObjEE_Unused_Main
	dl SMW_ExtendedObjEF_Unused_Main
	dl SMW_ExtendedObjF0_Unused_Main
	dl SMW_ExtendedObjF1_Unused_Main
	dl SMW_ExtendedObjF2_Unused_Main
	dl SMW_ExtendedObjF3_Unused_Main
	dl SMW_ExtendedObjF4_Unused_Main
	dl SMW_ExtendedObjF5_Unused_Main
	dl SMW_ExtendedObjF6_Unused_Main
	dl SMW_ExtendedObjF7_Unused_Main
	dl SMW_ExtendedObjF8_Unused_Main
	dl SMW_ExtendedObjF9_Unused_Main
	dl SMW_ExtendedObjFA_Unused_Main
	dl SMW_ExtendedObjFB_Unused_Main
	dl SMW_ExtendedObjFC_Unused_Main
	dl SMW_ExtendedObjFD_Unused_Main
	dl SMW_ExtendedObjFE_Unused_Main
	dl SMW_ExtendedObjFF_Unused_Main

namespace off
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj02_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj03_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj04_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj05_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj06_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj07_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj08_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj09_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj0A_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj0B_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj0C_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj0D_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj0E_Unused_Main)
	%SetDuplicateOrNullPointer($000000, SMW_ExtendedObj0F_Unused_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessStandardAndTilesetSpecificObjects(Address)
namespace SMW_ProcessStandardAndTilesetSpecificObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30				; Optimization: Unecessary SEP.b #$30
	JSR.w Sub
	RTL

Sub:
	SEP.b #$30				; Optimization: Another unecessary SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	JSL.l SMW_ExecutePtr_Long

TilesetPtrs:
	dl SMW_ProcessGrasslandObjects_Main	; Tileset 0 (Normal 1)
	dl SMW_ProcessCastleObjects_Main	; Tileset 1 (Castle 1)
	dl SMW_ProcessRopeObjects_Main		; Tileset 2 (Rope 1)
	dl SMW_ProcessUndergroundObjects_Main	; Tileset 3 (Underground 1)
	dl SMW_ProcessGhostHouseObjects_Main	; Tileset 4 (Switch Palace 1)
	dl SMW_ProcessGhostHouseObjects_Main	; Tileset 5 (Ghost House 1)
	dl SMW_ProcessRopeObjects_Main		; Tileset 6 (Rope 2)
	dl SMW_ProcessGrasslandObjects_Main	; Tileset 7 (Normal 2)
	dl SMW_ProcessRopeObjects_Main		; Tileset 8 (Rope 3)
	dl SMW_ProcessUndergroundObjects_Main	; Tileset 9 (Underground 2)
	dl SMW_ProcessUndergroundObjects_Main	; Tileset A (Switch Palace 2)
	dl SMW_ProcessUndergroundObjects_Main	; Tileset B (Castle 2)
	dl SMW_ProcessGrasslandObjects_Main	; Tileset C (Cloud/Forest)
	dl SMW_ProcessGhostHouseObjects_Main	; Tileset D (Ghost House 2)
	dl SMW_ProcessUndergroundObjects_Main	; Tileset E (Underground 3)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessGrasslandObjects(Address)
namespace SMW_ProcessGrasslandObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30				; Optimization: Unecessary SEP.b #$30
	LDX.b !RAM_SMW_Blocks_ObjectNumber
	DEX
	TXA
	JSL.l SMW_ExecutePtr_Long

GrasslandPtrs:
	dl SMW_StandardObj01_DarkBlueWater_Main
	dl SMW_StandardObj02_InvisibleCoinBlocks_Main
	dl SMW_StandardObj03_InvisibleNoteBlocks_Main
	dl SMW_StandardObj04_InvisiblePSwitchCoins_Main
	dl SMW_StandardObj05_Coins_Main
	dl SMW_StandardObj06_WalkThroughDirt_Main
	dl SMW_StandardObj07_VariableColorWater_Main
	dl SMW_StandardObj08_NoteBlocks_Main
	dl SMW_StandardObj09_TurnBlocks_Main
	dl SMW_StandardObj0A_CoinBlocks_Main
	dl SMW_StandardObj0B_ThrowBlocks_Main
	dl SMW_StandardObj0C_Munchers_Main
	dl SMW_StandardObj0D_CementBlocks_Main
	dl SMW_StandardObj0E_UsedBlocks_Main
	dl SMW_StandardObj0F_VerticalPipes_Main
	dl SMW_StandardObj10_HorizontalPipes_Main
	dl SMW_StandardObj11_BulletShooter_Main
	dl SMW_StandardObj12_Slopes_Main
	dl SMW_StandardObj13_GroundEdgesAndVine_Main
	dl SMW_StandardObj14_Ledge_Main
	dl SMW_StandardObj15_MidwayAndGoalPoint_Main
	dl SMW_StandardObj16_PurpleCoins_Main
	dl SMW_StandardObj17_RopeAndCloudLine_Main
	dl SMW_StandardObj18_WaterWithAnimatedSurface_Main
	dl SMW_StandardObj19_WaterWithNormalSurface_Main
	dl SMW_StandardObj1A_CastleLavaWithAnimatedSurface_Main
	dl SMW_StandardObj1B_ClimbingNetWithTopEdge_Main
	dl SMW_StandardObj1C_DonutBridge_Main
	dl SMW_StandardObj1D_ClimbingNetWithBottomEdge_Main
	dl SMW_StandardObj1E_ClimbingNetWithSideEdge_Main
	dl SMW_StandardObj1F_SkinnyVerticalPipeBoneLog_Main
	dl SMW_StandardObj20_SkinnyHorizontalPipeBoneLog_Main
	dl SMW_StandardObj21_WideScaleGroundLedge_Main
	dl SMW_StandardObj22_Unused_Main					;\ LM: Sets this to $0DF08A
	dl SMW_StandardObj23_Unused_Main					;| Sets this to $0DF08A
	dl SMW_StandardObj24_Unused_Main					;| Sets this to $0DF08E
	dl SMW_StandardObj25_Unused_Main					;| Sets this to $0DF0E0
	dl SMW_StandardObj26_Unused_Main					;| Sets this to $0DF0F0
	dl SMW_StandardObj27_Unused_Main					;| Sets this to $0DF130
	dl SMW_StandardObj28_Unused_Main					;| Sets this to $0DF150
	dl SMW_StandardObj29_Unused_Main					;| Sets this to $0DF160
	dl SMW_StandardObj2A_Unused_Main					;/ Sets this to $0DFF50
	dl SMW_StandardObj2B_Unused_Main
	dl SMW_StandardObj2C_Unused_Main
	dl SMW_StandardObj2D_Unused_Main
	dl SMW_GrasslandObj2E_Unused_Main
	dl SMW_GrasslandObj2F_Unused_Main
	dl SMW_GrasslandObj30_IcyVerticalPipe_Main
	dl SMW_GrasslandObj31_IcyTurnBlocks_Main
	dl SMW_GrasslandObj32_BlueSwitchBlocks_Main
	dl SMW_GrasslandObj33_ForestTreeTop_Main
	dl SMW_GrasslandObj34_ForestGroundEdges_Main
	dl SMW_GrasslandObj35_ForestGround_Main
	dl SMW_GrasslandObj36_LargeTreeTrunk_Main
	dl SMW_GrasslandObj37_SmallTreeTrunk_Main
	dl SMW_GrasslandObj38_RedSwitchBlocks_Main
	dl SMW_GrasslandObj39_RightFacingDiagonalPipe_Main
	dl SMW_GrasslandObj3A_LeftFacingDiagonalLedge_Main
	dl SMW_GrasslandObj3B_RightFacingDiagonalLedge_Main
	dl SMW_GrasslandObj3C_ArchLedge_Main
	dl SMW_GrasslandObj3D_TopCloudFridge_Main
	dl SMW_GrasslandObj3E_SideCloudFridges_Main
	dl SMW_GrasslandObj3F_SmallBushes_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessCastleObjects(Address)
namespace SMW_ProcessCastleObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30				; Optimization: Unecessary SEP.b #$30
	LDX.b !RAM_SMW_Blocks_ObjectNumber
	DEX
	TXA
	JSL.l SMW_ExecutePtr_Long

CastlePtrs:
	dl SMW_StandardObj01_DarkBlueWater_Main
	dl SMW_StandardObj02_InvisibleCoinBlocks_Main
	dl SMW_StandardObj03_InvisibleNoteBlocks_Main
	dl SMW_StandardObj04_InvisiblePSwitchCoins_Main
	dl SMW_StandardObj05_Coins_Main
	dl SMW_StandardObj06_WalkThroughDirt_Main
	dl SMW_StandardObj07_VariableColorWater_Main
	dl SMW_StandardObj08_NoteBlocks_Main
	dl SMW_StandardObj09_TurnBlocks_Main
	dl SMW_StandardObj0A_CoinBlocks_Main
	dl SMW_StandardObj0B_ThrowBlocks_Main
	dl SMW_StandardObj0C_Munchers_Main
	dl SMW_StandardObj0D_CementBlocks_Main
	dl SMW_StandardObj0E_UsedBlocks_Main
	dl SMW_StandardObj0F_VerticalPipes_Main
	dl SMW_StandardObj10_HorizontalPipes_Main
	dl SMW_StandardObj11_BulletShooter_Main
	dl SMW_StandardObj12_Slopes_Main
	dl SMW_StandardObj13_GroundEdgesAndVine_Main
	dl SMW_StandardObj14_Ledge_Main
	dl SMW_StandardObj15_MidwayAndGoalPoint_Main
	dl SMW_StandardObj16_PurpleCoins_Main
	dl SMW_StandardObj17_RopeAndCloudLine_Main
	dl SMW_StandardObj18_WaterWithAnimatedSurface_Main
	dl SMW_StandardObj19_WaterWithNormalSurface_Main
	dl SMW_StandardObj1A_CastleLavaWithAnimatedSurface_Main
	dl SMW_StandardObj1B_ClimbingNetWithTopEdge_Main
	dl SMW_StandardObj1C_DonutBridge_Main
	dl SMW_StandardObj1D_ClimbingNetWithBottomEdge_Main
	dl SMW_StandardObj1E_ClimbingNetWithSideEdge_Main
	dl SMW_StandardObj1F_SkinnyVerticalPipeBoneLog_Main
	dl SMW_StandardObj20_SkinnyHorizontalPipeBoneLog_Main
	dl SMW_StandardObj21_WideScaleGroundLedge_Main
	dl SMW_StandardObj22_Unused_Main					;\ LM: Sets this to $0DF08A
	dl SMW_StandardObj23_Unused_Main					;| Sets this to $0DF08A
	dl SMW_StandardObj24_Unused_Main					;| Sets this to $0DF08E
	dl SMW_StandardObj25_Unused_Main					;| Sets this to $0DF0E0
	dl SMW_StandardObj26_Unused_Main					;| Sets this to $0DF0F0
	dl SMW_StandardObj27_Unused_Main					;| Sets this to $0DF130
	dl SMW_StandardObj28_Unused_Main					;| Sets this to $0DF150
	dl SMW_StandardObj29_Unused_Main					;| Sets this to $0DF160
	dl SMW_StandardObj2A_Unused_Main					;/ Sets this to $0DFF50
	dl SMW_StandardObj2B_Unused_Main
	dl SMW_StandardObj2C_Unused_Main
	dl SMW_StandardObj2D_Unused_Main
	dl SMW_CastleObj2E_Unused_Main
	dl SMW_CastleObj2F_Unused_Main
	dl SMW_CastleObj30_Unused_Main
	dl SMW_CastleObj31_Unused_Main
	dl SMW_CastleObj32_Unused_Main
	dl SMW_CastleObj33_Unused_Main
	dl SMW_CastleObj34_VerticalDoubleEndedPipe_Main
	dl SMW_CastleObj35_RockWallBackground_Main
	dl SMW_CastleObj36_LargeSpikedPillar_Main
	dl SMW_CastleObj37_HorizontalLineGuide_Main
	dl SMW_CastleObj38_VerticalLineGuide_Main
	dl SMW_CastleObj39_BlueSwitchBlocks_Main
	dl SMW_CastleObj3A_RedSwitchBlocks_Main
	dl SMW_CastleObj3B_GrassLedge_Main
	dl SMW_CastleObj3C_StoneBlock_Main
	dl SMW_CastleObj3D_Escalator_Main
	dl SMW_CastleObj3E_HorizontalLineOfSpikes_Main
	dl SMW_CastleObj3F_VerticalLineOfSpikes_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessRopeObjects(Address)
namespace SMW_ProcessRopeObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30				; Optimization: Unecessary SEP.b #$30
	LDX.b !RAM_SMW_Blocks_ObjectNumber
	DEX
	TXA
	JSL.l SMW_ExecutePtr_Long

RopePtrs:
	dl SMW_StandardObj01_DarkBlueWater_Main
	dl SMW_StandardObj02_InvisibleCoinBlocks_Main
	dl SMW_StandardObj03_InvisibleNoteBlocks_Main
	dl SMW_StandardObj04_InvisiblePSwitchCoins_Main
	dl SMW_StandardObj05_Coins_Main
	dl SMW_StandardObj06_WalkThroughDirt_Main
	dl SMW_StandardObj07_VariableColorWater_Main
	dl SMW_StandardObj08_NoteBlocks_Main
	dl SMW_StandardObj09_TurnBlocks_Main
	dl SMW_StandardObj0A_CoinBlocks_Main
	dl SMW_StandardObj0B_ThrowBlocks_Main
	dl SMW_StandardObj0C_Munchers_Main
	dl SMW_StandardObj0D_CementBlocks_Main
	dl SMW_StandardObj0E_UsedBlocks_Main
	dl SMW_StandardObj0F_VerticalPipes_Main
	dl SMW_StandardObj10_HorizontalPipes_Main
	dl SMW_StandardObj11_BulletShooter_Main
	dl SMW_StandardObj12_Slopes_Main
	dl SMW_StandardObj13_GroundEdgesAndVine_Main
	dl SMW_StandardObj14_Ledge_Main
	dl SMW_StandardObj15_MidwayAndGoalPoint_Main
	dl SMW_StandardObj16_PurpleCoins_Main
	dl SMW_StandardObj17_RopeAndCloudLine_Main
	dl SMW_StandardObj18_WaterWithAnimatedSurface_Main
	dl SMW_StandardObj19_WaterWithNormalSurface_Main
	dl SMW_StandardObj1A_CastleLavaWithAnimatedSurface_Main
	dl SMW_StandardObj1B_ClimbingNetWithTopEdge_Main
	dl SMW_StandardObj1C_DonutBridge_Main
	dl SMW_StandardObj1D_ClimbingNetWithBottomEdge_Main
	dl SMW_StandardObj1E_ClimbingNetWithSideEdge_Main
	dl SMW_StandardObj1F_SkinnyVerticalPipeBoneLog_Main
	dl SMW_StandardObj20_SkinnyHorizontalPipeBoneLog_Main
	dl SMW_StandardObj21_WideScaleGroundLedge_Main
	dl SMW_StandardObj22_Unused_Main					;\ LM: Sets this to $0DF08A
	dl SMW_StandardObj23_Unused_Main					;| Sets this to $0DF08A
	dl SMW_StandardObj24_Unused_Main					;| Sets this to $0DF08E
	dl SMW_StandardObj25_Unused_Main					;| Sets this to $0DF0E0
	dl SMW_StandardObj26_Unused_Main					;| Sets this to $0DF0F0
	dl SMW_StandardObj27_Unused_Main					;| Sets this to $0DF130
	dl SMW_StandardObj28_Unused_Main					;| Sets this to $0DF150
	dl SMW_StandardObj29_Unused_Main					;| Sets this to $0DF160
	dl SMW_StandardObj2A_Unused_Main					;/ Sets this to $0DFF50
	dl SMW_StandardObj2B_Unused_Main
	dl SMW_StandardObj2C_Unused_Main
	dl SMW_StandardObj2D_Unused_Main
	dl SMW_RopeObj2E_Unused_Main
	dl SMW_RopeObj2F_Unused_Main
	dl SMW_RopeObj30_Unused_Main
	dl SMW_RopeObj31_Unused_Main
	dl SMW_RopeObj32_LogBridge_Main
	dl SMW_RopeObj33_BlueSwitchBlocks_Main
	dl SMW_RopeObj34_RedSwitchBlocks_Main
	dl SMW_RopeObj35_ColumnWithPlantOnTop_Main
	dl SMW_RopeObj36_HorizontalConveyorRope_Main
	dl SMW_RopeObj37_SlopedConveyorRope_Main
	dl SMW_RopeObj38_HorizontalLineGuide_Main
	dl SMW_RopeObj39_VerticalLineGuideAndMushroomStalk_Main
	dl SMW_RopeObj3A_SlopedLineGuide_Main
	dl SMW_RopeObj3B_VerySteepSlopedLineGuide_Main
	dl SMW_RopeObj3C_MushroomTop_Main
	dl SMW_RopeObj3D_MushroomColumn_Main
	dl SMW_RopeObj3E_HorizontalLog_Main
	dl SMW_RopeObj3F_VerticalLog_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessUndergroundObjects(Address)
namespace SMW_ProcessUndergroundObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30				; Optimization: Unecessary SEP.b #$30
	LDX.b !RAM_SMW_Blocks_ObjectNumber
	DEX
	TXA
	JSL.l SMW_ExecutePtr_Long

UndergroundPtrs:
	dl SMW_StandardObj01_DarkBlueWater_Main
	dl SMW_StandardObj02_InvisibleCoinBlocks_Main
	dl SMW_StandardObj03_InvisibleNoteBlocks_Main
	dl SMW_StandardObj04_InvisiblePSwitchCoins_Main
	dl SMW_StandardObj05_Coins_Main
	dl SMW_StandardObj06_WalkThroughDirt_Main
	dl SMW_StandardObj07_VariableColorWater_Main
	dl SMW_StandardObj08_NoteBlocks_Main
	dl SMW_StandardObj09_TurnBlocks_Main
	dl SMW_StandardObj0A_CoinBlocks_Main
	dl SMW_StandardObj0B_ThrowBlocks_Main
	dl SMW_StandardObj0C_Munchers_Main
	dl SMW_StandardObj0D_CementBlocks_Main
	dl SMW_StandardObj0E_UsedBlocks_Main
	dl SMW_StandardObj0F_VerticalPipes_Main
	dl SMW_StandardObj10_HorizontalPipes_Main
	dl SMW_StandardObj11_BulletShooter_Main
	dl SMW_StandardObj12_Slopes_Main
	dl SMW_StandardObj13_GroundEdgesAndVine_Main
	dl SMW_StandardObj14_Ledge_Main
	dl SMW_StandardObj15_MidwayAndGoalPoint_Main
	dl SMW_StandardObj16_PurpleCoins_Main
	dl SMW_StandardObj17_RopeAndCloudLine_Main
	dl SMW_StandardObj18_WaterWithAnimatedSurface_Main
	dl SMW_StandardObj19_WaterWithNormalSurface_Main
	dl SMW_StandardObj1A_CastleLavaWithAnimatedSurface_Main
	dl SMW_StandardObj1B_ClimbingNetWithTopEdge_Main
	dl SMW_StandardObj1C_DonutBridge_Main
	dl SMW_StandardObj1D_ClimbingNetWithBottomEdge_Main
	dl SMW_StandardObj1E_ClimbingNetWithSideEdge_Main
	dl SMW_StandardObj1F_SkinnyVerticalPipeBoneLog_Main
	dl SMW_StandardObj20_SkinnyHorizontalPipeBoneLog_Main
	dl SMW_StandardObj21_WideScaleGroundLedge_Main
	dl SMW_StandardObj22_Unused_Main					;\ LM: Sets this to $0DF08A
	dl SMW_StandardObj23_Unused_Main					;| Sets this to $0DF08A
	dl SMW_StandardObj24_Unused_Main					;| Sets this to $0DF08E
	dl SMW_StandardObj25_Unused_Main					;| Sets this to $0DF0E0
	dl SMW_StandardObj26_Unused_Main					;| Sets this to $0DF0F0
	dl SMW_StandardObj27_Unused_Main					;| Sets this to $0DF130
	dl SMW_StandardObj28_Unused_Main					;| Sets this to $0DF150
	dl SMW_StandardObj29_Unused_Main					;| Sets this to $0DF160
	dl SMW_StandardObj2A_Unused_Main					;/ Sets this to $0DFF50
	dl SMW_StandardObj2B_Unused_Main
	dl SMW_StandardObj2C_Unused_Main
	dl SMW_StandardObj2D_Unused_Main
	dl SMW_UndergroundObj2E_Unused_Main
	dl SMW_UndergroundObj2F_Unused_Main
	dl SMW_UndergroundObj30_Unused_Main
	dl SMW_UndergroundObj31_Unused_Main
	dl SMW_UndergroundObj32_Unused_Main
	dl SMW_UndergroundObj33_Unused_Main
	dl SMW_UndergroundObj34_BlueSwitchBlocks_Main
	dl SMW_UndergroundObj35_RedSwitchBlocks_Main
	dl SMW_UndergroundObj36_4SidedGround_Main
	dl SMW_UndergroundObj37_LargeCanvas_Main
	dl SMW_UndergroundObj38_RightLavaEdge_Main
	dl SMW_UndergroundObj39_SlopedCaveLava_Main
	dl SMW_UndergroundObj3A_CaveLavaWithTop_Main
	dl SMW_UndergroundObj3B_CaveLava_Main
	dl SMW_UndergroundObj3C_VerySteepSlope_Main
	dl SMW_UndergroundObj3D_CeilingLedge_Main
	dl SMW_UndergroundObj3E_CeilingEdges_Main
	dl SMW_UndergroundObj3F_SolidDirt_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessGhostHouseObjects(Address)
namespace SMW_ProcessGhostHouseObjects
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30				; Optimization: Unecessary SEP.b #$30
	LDX.b !RAM_SMW_Blocks_ObjectNumber
	DEX
	TXA
	JSL.l SMW_ExecutePtr_Long

GhostHousePtrs:
	dl SMW_StandardObj01_DarkBlueWater_Main
	dl SMW_StandardObj02_InvisibleCoinBlocks_Main
	dl SMW_StandardObj03_InvisibleNoteBlocks_Main
	dl SMW_StandardObj04_InvisiblePSwitchCoins_Main
	dl SMW_StandardObj05_Coins_Main
	dl SMW_StandardObj06_WalkThroughDirt_Main
	dl SMW_StandardObj07_VariableColorWater_Main
	dl SMW_StandardObj08_NoteBlocks_Main
	dl SMW_StandardObj09_TurnBlocks_Main
	dl SMW_StandardObj0A_CoinBlocks_Main
	dl SMW_StandardObj0B_ThrowBlocks_Main
	dl SMW_StandardObj0C_Munchers_Main
	dl SMW_StandardObj0D_CementBlocks_Main
	dl SMW_StandardObj0E_UsedBlocks_Main
	dl SMW_StandardObj0F_VerticalPipes_Main
	dl SMW_StandardObj10_HorizontalPipes_Main
	dl SMW_StandardObj11_BulletShooter_Main
	dl SMW_StandardObj12_Slopes_Main
	dl SMW_StandardObj13_GroundEdgesAndVine_Main
	dl SMW_StandardObj14_Ledge_Main
	dl SMW_StandardObj15_MidwayAndGoalPoint_Main
	dl SMW_StandardObj16_PurpleCoins_Main
	dl SMW_StandardObj17_RopeAndCloudLine_Main
	dl SMW_StandardObj18_WaterWithAnimatedSurface_Main
	dl SMW_StandardObj19_WaterWithNormalSurface_Main
	dl SMW_StandardObj1A_CastleLavaWithAnimatedSurface_Main
	dl SMW_StandardObj1B_ClimbingNetWithTopEdge_Main
	dl SMW_StandardObj1C_DonutBridge_Main
	dl SMW_StandardObj1D_ClimbingNetWithBottomEdge_Main
	dl SMW_StandardObj1E_ClimbingNetWithSideEdge_Main
	dl SMW_StandardObj1F_SkinnyVerticalPipeBoneLog_Main
	dl SMW_StandardObj20_SkinnyHorizontalPipeBoneLog_Main
	dl SMW_StandardObj21_WideScaleGroundLedge_Main
	dl SMW_StandardObj22_Unused_Main					;\ LM: Sets this to $0DF08A
	dl SMW_StandardObj23_Unused_Main					;| Sets this to $0DF08A
	dl SMW_StandardObj24_Unused_Main					;| Sets this to $0DF08E
	dl SMW_StandardObj25_Unused_Main					;| Sets this to $0DF0E0
	dl SMW_StandardObj26_Unused_Main					;| Sets this to $0DF0F0
	dl SMW_StandardObj27_Unused_Main					;| Sets this to $0DF130
	dl SMW_StandardObj28_Unused_Main					;| Sets this to $0DF150
	dl SMW_StandardObj29_Unused_Main					;| Sets this to $0DF160
	dl SMW_StandardObj2A_Unused_Main					;/ Sets this to $0DFF50
	dl SMW_StandardObj2B_Unused_Main
	dl SMW_StandardObj2C_Unused_Main
	dl SMW_StandardObj2D_Unused_Main
	dl SMW_GhostHouseObj2E_HorizontalLineOfSpikes_Main
	dl SMW_GhostHouseObj2F_LogBackground_Main
	dl SMW_GhostHouseObj30_GrassLedge1_Main
	dl SMW_GhostHouseObj31_WoodCrate_Main
	dl SMW_GhostHouseObj32_GrassLedge2_Main
	dl SMW_GhostHouseObj33_Cloud_Main
	dl SMW_GhostHouseObj34_WoodLedgeOnColumn_Main
	dl SMW_GhostHouseObj35_BrickBackground_Main
	dl SMW_GhostHouseObj36_WoodenBlocks_Main
	dl SMW_GhostHouseObj37_HorizontalBackgroundLogAndRailing_Main
	dl SMW_GhostHouseObj38_WoodenLedge_Main
	dl SMW_GhostHouseObj39_VerticalBackgroundLog_Main
	dl SMW_GhostHouseObj3A_SolidBrickWallAndVerticalLineOfSpikes_Main
	dl SMW_GhostHouseObj3B_BonusGameLedge_Main
	dl SMW_GhostHouseObj3C_SwitchPalaceCeiling_Main
	dl SMW_GhostHouseObj3D_SwitchPalaceLedge_Main
	dl SMW_GhostHouseObj3E_SwitchPalaceRightFacingWall_Main
	dl SMW_GhostHouseObj3F_SwitchPalaceLeftFacingWall_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_Map16Data(Address)
namespace SMW_Map16Data
%InsertMacroAtXPosition(<Address>)

Main:
Global:							;\ Note: These are the map16 tiles that are always the same regardless of tileset, with the exception of 1C4-1C7 and 1EC-1EF
	incbin "GFX/SMWMap16.map16":980B0-98448		;| Tiles 000-072
	incbin "GFX/SMWMap16.map16":988B0-988E8		;| Tiles 100-106
	incbin "GFX/SMWMap16.map16":98938-98A48		;| Tiles 111-132
							;|
GreenPipes:						;|
	incbin "GFX/SMWMap16.map16":98A48-98A88		;| Tiles 133-13A
;Global2:						;|
	incbin "GFX/SMWMap16.map16":98A88-98B48		;| Tiles 13B-152
	incbin "GFX/SMWMap16.map16":98C20-990B0		;/ Tiles 16E-1FF

SlopedPipeTiles:
;$0D8A70
	incbin "GFX/SMWMap16.map16":9F1B0-9F1F0

VariableColorPipes:
;$0D8AB0
	incbin "GFX/SMWMap16.map16":9F0B0-9F0F0

YellowPipes:
;$0D8AF0
	incbin "GFX/SMWMap16.map16":9F130-9F170

PurplePipes:
;$0D8B30
	incbin "GFX/SMWMap16.map16":9F170-9F1B0

Grassland:
	incbin "GFX/SMWMap16.map16":90448-908B0		; Tiles 073-0FF
	incbin "GFX/SMWMap16.map16":908E8-90938		; Tiles 107-110
	incbin "GFX/SMWMap16.map16":90B48-90C20		; Tiles 153-16D

Backgrounds:
;$0D9100
	incbin "GFX/SMWMap16.map16":400B0-410B0
namespace off
endmacro

macro DATATABLE_RT01_SMW_Map16Data(Address)
namespace SMW_Map16Data
%InsertMacroAtXPosition(<Address>)

Castle:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	incbin "GFX/SMWMap16.map16":10B0-1518		; Tiles 073-0FF
else
	incbin "GFX/SMWMap16.map16":91448-918B0		; Tiles 073-0FF
endif
	incbin "GFX/SMWMap16.map16":918E8-91938		; Tiles 107-110
	incbin "GFX/SMWMap16.map16":91B48-91C20		; Tiles 153-16D
namespace off
endmacro

macro DATATABLE_RT02_SMW_Map16Data(Address)
namespace SMW_Map16Data
%InsertMacroAtXPosition(<Address>)

Rope:
	incbin "GFX/SMWMap16.map16":92448-928B0		; Tiles 073-0FF
	incbin "GFX/SMWMap16.map16":928E8-92938		; Tiles 107-110
	incbin "GFX/SMWMap16.map16":92B48-92C20		; Tiles 153-16D
namespace off
endmacro

macro DATATABLE_RT03_SMW_Map16Data(Address)
namespace SMW_Map16Data
%InsertMacroAtXPosition(<Address>)

Underground:
	incbin "GFX/SMWMap16.map16":93448-938B0		; Tiles 073-0FF
	incbin "GFX/SMWMap16.map16":938E8-93938		; Tiles 107-110
	incbin "GFX/SMWMap16.map16":93B48-93C20		; Tiles 153-16D
namespace off
endmacro

macro DATATABLE_RT04_SMW_Map16Data(Address)
namespace SMW_Map16Data
%InsertMacroAtXPosition(<Address>)

GhostHouse:
	incbin "GFX/SMWMap16.map16":94448-948B0		; Tiles 073-0FF
	incbin "GFX/SMWMap16.map16":948E8-94938		; Tiles 107-110
	incbin "GFX/SMWMap16.map16":94B48-94C20		; Tiles 153-16D
namespace off
endmacro

macro DATATABLE_RT05_SMW_Map16Data(Address)
namespace SMW_Map16Data
%InsertMacroAtXPosition(<Address>)

OverworldLayer1:
	incbin "overworld/layer1/tiles.bin"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects(Address)
namespace SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataLo		;\ LM: This routine is rewritten to account for custom level dimensions (3.00+)
	SEC							;|
	SBC.b #$B0						;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo		;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo		;|
	STA.b !RAM_SMW_Misc_ScratchRAM04			;|
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi		;|
	SBC.b #$01						;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi		;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi		;|
	STA.b !RAM_SMW_Misc_ScratchRAM05			;|
	DEC.w !RAM_SMW_Blocks_ScreenToPlaceNextObject		;|
	RTS							;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects(Address)
namespace SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataLo		;\ LM: This routine is rewritten to account for custom level dimensions (3.00+)
	CLC							;|
	ADC.b #$B0						;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo		;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo		;|
	STA.b !RAM_SMW_Misc_ScratchRAM04			;|
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi		;|
	ADC.b #$01						;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi		;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi		;|
	STA.b !RAM_SMW_Misc_ScratchRAM05			;|
	INC.w !RAM_SMW_Blocks_ScreenToPlaceNextObject		;|
	RTS							;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GoDownLeftAndUpdateLevelDataPointerInObjects(Address)
namespace SMW_GoDownLeftAndUpdateLevelDataPointerInObjects
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0F
	TAY
	BCC.b CODE_0DA99D
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DA99D:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BNE.b CODE_0DA9B1
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DA9AE
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DA9AE:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DA9B1:
	STY.b !RAM_SMW_Blocks_SubScrPos
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GoDownRightAndUpdateLevelDataPointerInObjects(Address)
namespace SMW_GoDownRightAndUpdateLevelDataPointerInObjects
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$11
	TAY
	BCC.b CODE_0DA9BF
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DA9BF:
	TYA
	AND.b #$0F
	CMP.b #$01
	BPL.b CODE_0DA9D3
	TYA
	SEC
	SBC.b #$10
	TAY
	BCS.b CODE_0DA9D0
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DA9D0:
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DA9D3:
	STY.b !RAM_SMW_Blocks_SubScrPos
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_BitTable(Address)
namespace SMW_BitTable
%InsertMacroAtXPosition(<Address>)

Bank0D:
	db $80,$40,$20,$10,$08,$04,$02,$01
namespace off
endmacro

macro DATATABLE_RT01_SMW_BitTable(Address)
namespace SMW_BitTable
%InsertMacroAtXPosition(<Address>)

Bank04:
	dw $0008,$0004,$0002,$0001
namespace off
endmacro

macro DATATABLE_RT02_SMW_BitTable(Address)
namespace SMW_BitTable
%InsertMacroAtXPosition(<Address>)

DATA_04E44B:
	db $80,$40,$20,$10,$08,$04,$02,$01
namespace off
endmacro

macro DATATABLE_RT03_SMW_BitTable(Address)
namespace SMW_BitTable
%InsertMacroAtXPosition(<Address>)

Bank05:
	db $80,$40,$20,$10,$08,$04,$02,$01
namespace off
endmacro

macro DATATABLE_RT04_SMW_BitTable(Address)
namespace SMW_BitTable
%InsertMacroAtXPosition(<Address>)

Unused_Bank05:
	dw $0080,$0040,$0020,$0010
	dw $0008,$0004,$0002,$0001
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_Bank0DItemMemoryIndexes(Address)
namespace SMW_Bank0DItemMemoryIndexes
%InsertMacroAtXPosition(<Address>)

Lo:
	db !RAM_SMW_Misc_ItemMemory0Bits-!RAM_SMW_Misc_ItemMemoryBits
	db !RAM_SMW_Misc_ItemMemory1Bits-!RAM_SMW_Misc_ItemMemoryBits
	db !RAM_SMW_Misc_ItemMemory2Bits-!RAM_SMW_Misc_ItemMemoryBits

Hi:
	db (!RAM_SMW_Misc_ItemMemory0Bits-!RAM_SMW_Misc_ItemMemoryBits)>>8
	db (!RAM_SMW_Misc_ItemMemory1Bits-!RAM_SMW_Misc_ItemMemoryBits)>>8
	db (!RAM_SMW_Misc_ItemMemory2Bits-!RAM_SMW_Misc_ItemMemoryBits)>>8
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawEndingThankYou(Address)
namespace SMW_DrawEndingThankYou
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $26,$28,$2A,$2C,$46,$48,$4A,$4C
	db $60,$62,$64,$66,$6A,$6C,$6E,$0A

Main:
	REP.b #$20
	LDA.w #$003F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	LDY.b #$00
	LDX.b #$50
Entry2:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0080
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
	JSR.w CODE_0CA183
	REP.b #$20
	LDA.w #$0080
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	SEC
	SBC.w #$0040
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w #$003F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	SEP.b #$20
CODE_0CA183:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0CA1AB
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$40].Tile,x
	LDA.b #$35
	STA.w SMW_OAMBuffer[$40].Prop,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w SMW_OAMBuffer[$40].YDisp,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	PLX
	INX
	INX
	INX
	INX
CODE_0CA1AB:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	TYA
	AND.b #$07
	CMP.b #$03
	BNE.b CODE_0CA1CD
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM08
CODE_0CA1CD:
	INY
	TYA
	AND.b #$07
	BNE.b CODE_0CA183
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleExtendedSpriteLevelCollision(Address)
namespace SMW_HandleExtendedSpriteLevelCollision
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	STZ.b !RAM_SMW_Misc_ScratchRAM0E
	STZ.b !RAM_SMW_Misc_ScratchRAM0B
	STZ.w !RAM_SMW_Sprites_DistanceToSnapDownToNearestTile
	LDA.w !RAM_SMW_Flag_ReznorRoomOAMIndexTimer
	BNE.b CODE_02A5BC
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b CODE_02A5BC
	AND.b #$40
	BEQ.b CODE_02A592
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b CODE_02A5BC
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CMP.b #$A8
	RTS

CODE_02A592:
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetHi
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetHi
	JSL.l SMW_CheckForTiltingPlatformCollision_Main
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

CODE_02A5BC:
	JSR.w CODE_02A611
	ROL.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	BPL.b CODE_02A60C
	INC.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	PHA
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.w !RAM_SMW_ExtSpr_XPosLo,x
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	PHA
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosHi
	STA.w !RAM_SMW_ExtSpr_XPosHi,x
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	PHA
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	PHA
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosHi
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
	JSR.w CODE_02A611
	ROL.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	PLA
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
	PLA
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_ExtSpr_XPosHi,x
	PLA
	STA.w !RAM_SMW_ExtSpr_XPosLo,x
CODE_02A60C:
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CMP.b #$01
	RTS

CODE_02A611:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	INC
	AND.b !RAM_SMW_Misc_LevelLayoutFlags
	BEQ.b CODE_02A679
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	ADC.b #$00
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b CODE_02A677
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	ADC.b #$00
	CMP.b #$02
	BCS.b CODE_02A677
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02A660
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x
CODE_02A660:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02A671
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x
CODE_02A671:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
	BRA.b CODE_02A6DB

CODE_02A677:
	CLC
	RTS

CODE_02A679:
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b CODE_02A677
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	ADC.b #$00
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b CODE_02A677
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02A6C6
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
CODE_02A6C6:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02A6D7
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
CODE_02A6D7:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02A6DB:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
#LM000Hijack_ProcessCustomMarioFireballBlockCode:
	JSL.l SMW_ModifyMap16IDForSpecialBlocks_Main
	CMP.b #$00
	BEQ.b CODE_02A729
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$11
	BCC.b CODE_02A72B
	CMP.b #$6E
	BCC.b CODE_02A727
	CMP.b #$D8
	BCS.b CODE_02A735
	LDY.b !RAM_SMW_Blocks_XPosLo
	STY.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.b !RAM_SMW_Blocks_YPosLo
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	JSL.l SMW_CheckWhatSlopeSpriteIsOn_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$0C
	BCS.b CODE_02A718
	CMP.b [!RAM_SMW_Misc_ScratchRAM05],y
	BCC.b CODE_02A729
CODE_02A718:
	LDA.b [!RAM_SMW_Misc_ScratchRAM05],y
	STA.w !RAM_SMW_Sprites_DistanceToSnapDownToNearestTile
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM08
	LDA.l SMW_SlopeDataTables_SlopeType,x
	PLX
	STA.b !RAM_SMW_Misc_ScratchRAM0B
CODE_02A727:
	SEC
	RTS

CODE_02A729:
	CLC
	RTS

CODE_02A72B:
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$0F
	CMP.b #$06
	BCS.b CODE_02A729
	SEC
	RTS

CODE_02A735:
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$0F
	CMP.b #$06
	BCS.b CODE_02A729
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b #$02
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
	JMP.w CODE_02A611
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GenericExtendedSpriteGFXRt(Address)
namespace SMW_GenericExtendedSpriteGFXRt
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
FireballEntry:
	LDA.w !RAM_SMW_ExtSpr_XSpeed,x
	AND.b #$80
	EOR.b #$80
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b EraseSprite
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BNE.b EraseSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_Table7E1779,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l FireballTiles,x
else
	LDA.w FireballTiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_02A15F,x
else
	LDA.w DATA_02A15F,x
endif
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_02A204
	AND.b #$CF
	ORA.b #$10
	STA.w SMW_OAMBuffer[$00].Prop,y
CODE_02A204:
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

EraseSprite:
	LDA.b #$00
	STA.w !RAM_SMW_ExtSpr_SpriteID,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_GenericExtendedSpriteGFXRt(Address)
namespace SMW_GenericExtendedSpriteGFXRt
%InsertMacroAtXPosition(<Address>)

FireballTiles:
	db $2C,$2D,$2C,$2D

DATA_02A15F:
	db $04,$04,$C4,$C4
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForMarioToExtendedSpriteCollision(Address)
namespace SMW_CheckForMarioToExtendedSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Player_CurrentLayerPriority
	EOR.w !RAM_SMW_ExtSpr_Table7E1779,x
	BNE.b Return02A468
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSR.w SMW_GetExtendedSpriteClipping_Main
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return02A468
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr0A_CloudCoin
	BNE.b CODE_02A469
	JSL.l SMW_GiveCoins_OneCoin
	INC.w !RAM_SMW_Counter_PinkBerryCloudCoins
	STZ.w !RAM_SMW_ExtSpr_SpriteID,x
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
ADDR_02A41E:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b ADDR_02A427
	DEY
	BPL.b ADDR_02A41E
	INY
ADDR_02A427:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr05_Glitter
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$0A
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	JSL.l SMW_CheckForAvailableScoreSpriteSlot_Main
	LDA.b #$05
	STA.w !RAM_SMW_ScoreSpr_SpriteID,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	STA.w !RAM_SMW_ScoreSpr_YPosLo,y
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	STA.w !RAM_SMW_ScoreSpr_YPosHi,y
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	STA.w !RAM_SMW_ScoreSpr_XPosLo,y
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	STA.w !RAM_SMW_ScoreSpr_XPosHi,y
	LDA.b #$30
	STA.w !RAM_SMW_ScoreSpr_YSpeed,y
	LDA.b #$00
	STA.w !RAM_SMW_ScoreSpr_LayerIndex,y
Return02A468:
	RTS

CODE_02A469:
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b CODE_02A4B5
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_02A4AE
LoseYoshi:
	PHX
	LDX.w !RAM_SMW_Sprites_YoshiSlotIndex
	LDA.b #$10							; Glitch: Setting !RAM_SMW_Player_InAirFlag to #$24 here would fix the zip bug while in the Iggy/Larry boss fight
	STA.w !RAM_SMW_NorSpr035_Yoshi_DisableSpriteInteraction-$01,x
	LDA.b #!Define_SMW_Sound1DFA_TurnOffYoshiDrum
	STA.w !RAM_SMW_IO_SoundCh2
	LDA.b #!Define_SMW_Sound1DFC_LoseYoshi
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$02
	STA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState-$01,x
	STZ.w !RAM_SMW_Player_RidingYoshiFlag
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	LDA.b #$C0
	STA.b !RAM_SMW_Player_YSpeed
	STZ.b !RAM_SMW_Player_XSpeed
	LDY.w !RAM_SMW_NorSpr_FacingDirection-$01,x
	LDA.w YoshiXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed-$01,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState-$01,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength-$01,x
	STZ.w !RAM_SMW_Timer_YoshiTongueInit
	LDA.b #$30
	STA.w !RAM_SMW_Timer_PlayerHurt
	PLX
	RTS

CODE_02A4AE:
	JSL.l SMW_DamagePlayer_Hurt
	RTS

YoshiXSpeed:
	db $10,$F0

CODE_02A4B5:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr04_Hammer
	BEQ.b CODE_02A4DE
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,x
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,x
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b #$04
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
CODE_02A4DE:
	LDA.b #$07
CODE_02A4E0:
	STA.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,x
	LDA.b #!Define_SMW_SpriteID_ExtSpr01_SmokePuff
	STA.w !RAM_SMW_ExtSpr_SpriteID,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GetExtendedSpriteClipping(Address)
namespace SMW_GetExtendedSpriteClipping
%InsertMacroAtXPosition(<Address>)

DATA_02A4E9:
	db $03,$03,$04,$03,$04,$00
	db $00,$00,$04,$03,$03,$03

DATA_02A4F3:
	db $03,$03,$04,$03,$04,$00
	db $00,$00,$02,$03,$03,$03

DATA_02A4FF:
	db $01,$01,$08,$01,$08,$00
	db $00,$0F,$08,$01,$01,$01

DATA_02A50B:
	db $01,$01,$08,$01,$08,$00
	db $00,$0F,$0C,$01,$01,$01

Main:
	LDY.w !RAM_SMW_ExtSpr_SpriteID,x
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	CLC
	ADC.w DATA_02A4E9-$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w DATA_02A4FF-$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CLC
	ADC.w DATA_02A4F3-$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.w DATA_02A50B-$02,y
	STA.b !RAM_SMW_Misc_ScratchRAM07
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode29_DoNothingOnTheEndScreen(Address)
namespace SMW_GameMode29_DoNothingOnTheEndScreen
%InsertMacroAtXPosition(<Address>)

Main:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode21_DelayEnemyRollcall(Address)
namespace SMW_GameMode21_DelayEnemyRollcall
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank03
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode21_DelayEnemyRollcall(Address)
namespace SMW_GameMode21_DelayEnemyRollcall
%InsertMacroAtXPosition(<Address>)

Bank03:
	PHB
	PHK
	PLB
	DEC.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
	BNE.b CODE_0C93BF
	LDA.b #!Define_SMW_GameMode23_LoadEnemyRollcallScreen
	STA.w !RAM_SMW_Misc_GameMode
	LDA.b #$FF
	STA.w !RAM_SMW_Counter_EnemyRollcallScreen
CODE_0C93BF:
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode19_Cutscene(Address)
namespace SMW_GameMode19_Cutscene
%InsertMacroAtXPosition(<Address>)

SkyColorSetting:
	db $02,$00,$04,$01,$00,$06,$04,$03

BGPaletteSetting:
	db $06,$05,$06,$03,$03,$06,$06,$03

BGToUse:
	db !Define_SMW_StripeImage_OverworldCutsceneBG		; Iggy (Overworld)
	db !Define_SMW_StripeImage_OverworldCutsceneBG		; Morton (Overworld)
	db !Define_SMW_StripeImage_CaveCutsceneBG		; Lemmy (Underground)
	db !Define_SMW_StripeImage_CookieMountainCutsceneBG	; Ludwig (Cookie Mountain)
	db !Define_SMW_StripeImage_OverworldCutsceneBG		; Roy (Overworld)
	db !Define_SMW_StripeImage_ChocolatIslandCutsceneBG	; Wendy (Chocolate Island)
	db !Define_SMW_StripeImage_CaveCutsceneBG		; Larry (Underground)

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_ClearOverworldAndCutsceneRAM_Main
	JSR.w SMW_SetStandardPPUSettings_Main
#LM000Hijack_Unknown009471:
	LDX.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$18
	STA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	LDA.b #$14
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	LDA.w SkyColorSetting-$01,x
	STA.w !RAM_SMW_Misc_BackgroundColorSetting
	LDA.w BGPaletteSetting-$01,x
	STA.w !RAM_SMW_Misc_BGPaletteSetting
	STZ.w !RAM_SMW_Misc_SpritePaletteSetting
	LDA.b #$01
	STA.w !RAM_SMW_Misc_FGPaletteSetting
	CPX.b #$08
	BNE.b NotCredits
	JSR.w SMW_UploadBigLayer3LettersToVRAM_Main
	LDA.b #!Define_SMW_StripeImage_CutsceneBorder
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
	JSR.w SMW_LoadStripeImage_Sub
	JSR.w SMW_HandleSPCUploads_UploadCreditsMusicBank
	JSL.l SMW_BufferCreditsBackgrounds_Main
	JSR.w SMW_SetupHDMAWindowingEffects_EndHDMA
	INC.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	INC.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	BRA.b CODE_0094D7

NotCredits:
	LDA.b #!Define_SMW_LevelMusic_RescueEgg
	STA.w !RAM_SMW_IO_MusicCh1
	LDA.w BGToUse-$01,x
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
	JSR.w SMW_LoadStripeImage_Sub
	LDA.b #!Define_SMW_StripeImage_CutsceneCastle
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
	JSR.w SMW_LoadStripeImage_Sub
	REP.b #$20
	LDA.w #$0090
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w #$0058
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	INC.w !RAM_SMW_Player_CarryingSomethingFlag2
CODE_0094D7:
	JSR.w SMW_UploadGraphicsFiles_Main
	JSR.w SMW_BufferPalettesRoutines_Levels
	JSR.w SMW_UpdateEntirePalette_Main
	LDX.b #$0B
CODE_0094E2:
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	DEX
	BPL.b CODE_0094E2
	LDA.b #$20
	STA.b !RAM_SMW_Sprites_TilePriority
	JSR.w SMW_InitializeLevelRAM_Main
	STZ.b !RAM_SMW_Player_FacingDirection
	STZ.b !RAM_SMW_Player_InAirFlag
	JSL.l SMW_SetPlayerPose_Main
	LDX.b #$17
	LDY.b #$00
	JSR.w SMW_GameMode23_LoadEnemyRollcallScreen_CODE_009622
GameMode1BEntry:
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	CMP.b #$08
	BEQ.b CODE_009557
	LDA.b !RAM_SMW_IO_ControllerHold2
#Debug_BossSceneSelect:
	AND.b #!Joypad_None
	CMP.b #!Joypad_L|!Joypad_R
	BNE.b CODE_009529
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadU>>8
	BEQ.b ADDR_009523
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	INC
	CMP.b #$09
	BCC.b ADDR_009520
	LDA.b #$01
ADDR_009520:
	STA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
ADDR_009523:
	LDA.b #!Define_SMW_GameMode18_FadeOutToCutscene
	STA.w !RAM_SMW_Misc_GameMode
	RTS

CODE_009529:
	JSL.l CODE_0CC97E
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PHA
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PHA
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEP.b #$20
	JSL.l SMW_PlayerGFXRt_Main
	REP.b #$20
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEP.b #$20
	LDA.b #!Define_SMW_PlayerState0C_CastleDestructionMoves
	STA.b !RAM_SMW_Player_CurrentState
	JSR.w SMW_GameMode14_InLevel_CODE_00C47E
	JMP.w SMW_CompressOAMTileSizeBuffer_Main

CODE_009557:
	JSL.l SMW_GameMode1B_EndingCinema_Bank0C
	JMP.w SMW_CompressOAMTileSizeBuffer_Main

namespace off
	%SetDuplicateOrNullPointer(SMW_GameMode19_Cutscene_GameMode1BEntry, SMW_GameMode1B_EndingCinema_Main)
endmacro

macro ROUTINE_RT01_SMW_GameMode19_Cutscene(Address)
namespace SMW_GameMode19_Cutscene
%InsertMacroAtXPosition(<Address>)

CastleDestructionBorder:
	incbin "images/other/black.bin"
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode19_Cutscene(Address)
namespace SMW_GameMode19_Cutscene
%InsertMacroAtXPosition(<Address>)

CODE_0CC97E:
	PHB
	PHK
	PLB
	JSR.w SMW_DisplayCastleDestructionText_Main
	JSR.w SMW_DrawThankYouSpeechBubble_Main
	JSR.w ProcessCutscene_Main
	PLB
	RTL

ProcessCutscene_Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_0CC99A
	LDA.w !RAM_SMW_Timer_WaitBeforeAllowingEndOfCastleDestructionCutscene
	BEQ.b CODE_0CC99A
	DEC.w !RAM_SMW_Timer_WaitBeforeAllowingEndOfCastleDestructionCutscene
CODE_0CC99A:
	JSR.w SMW_CarryEggAwayFromCastle_Main
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	DEC
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CC9A5:
	dw IggyCutscene
	dw MortonCutscene
	dw LemmyCutscene
	dw LudwigCutscene
	dw RoyCutscene
	dw WendyCutscene
	dw LarryCutscene

IggyCutscene:
	JSR.w SMW_DrawTNTFuseBox_Main
	JSR.w SMW_RaiseFlagUpFromRubble_Main
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CC9C0:
	dw SMW_HandleTNTFuse_Main
	dw SMW_InitializeTNTExplosion_Main
	dw SMW_HandleTNTExplosion_Main
	dw SMW_InitializeCastleCrumblingDown_Main
	dw SMW_HandleCastleCrumblingDown_Main
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

MortonCutscene:
	JSR.w SMW_RaiseFlagUpFromRubble_Main
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CC9D6:
	dw SMW_PlayerDropkicksAndStompsCastle_Main
	dw SMW_InitializeCastleCrumblingDown_Main
	dw SMW_HandleCastleCrumblingDown_Main
	dw SMW_DrawPlayerCough_MortonCutscene
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

RoyCutscene:
	JSR.w SMW_DrawTNTFuseBox_Main
	JSR.w SMW_RaiseFlagUpFromRubble_Main
	JSR.w SMW_DrawPlayerCough_RoyCutscene
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CC9F0:
	dw SMW_HandleTNTFuse_Main
	dw SMW_InitializeDudTNTExplosion_Main
	dw SMW_HandleDudTNTExplosion_Main
	dw SMW_DelayTNTExplosionUntilPlayerComesBy_Main
	dw SMW_InitializeTNTExplosion_Main
	dw SMW_HandleTNTExplosion_Main
	dw SMW_InitializeCastleCrumblingDown_Main
	dw SMW_HandleCastleCrumblingDown_Main
	dw SMW_WaitForCastleDestructionTextToFinishInRoyCutscene_Main
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

LudwigCutscene:
	JSR.w SMW_DrawTNTFuseBox_Main
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BNE.b CODE_0CCA11
	LDY.b #$04
	STY.w !RAM_SMW_Sprites_QuestionMarkAnimationIndex
CODE_0CCA11:
	CMP.b #$07
	BNE.b CODE_0CCA18
	JSR.w SMW_HandleFarawayCastleRocket_DrawSprite
CODE_0CCA18:
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CCA1F:
	dw SMW_HandleTNTFuse_Main
	dw SMW_InitializeTNTExplosion_Main
	dw SMW_HandleTNTExplosion_Main
	dw SMW_InitializeCastleLiftoff_Main
	dw SMW_HandleCastleLiftoff_Main
	dw SMW_InitializeFarawayCastleRocket_Main
	dw SMW_HandleFarawayCastleRocket_Main
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

LemmyCutscene:
	JSR.w SMW_DrawWoodHammer_Main
	JSR.w SMW_RaiseFlagUpFromRubble_Main
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	CMP.b #$03
	BEQ.b CODE_0CCA3F
	JSR.w SMW_SpawnHammerDebris_Main
CODE_0CCA3F:
	JSR.w SMW_ProcessHammerDebris_Main
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CCA49:
	dw SMW_WaitBeforeMakingHammeredCastleCrumble_Main
	dw SMW_InitializeCastleCrumblingDown_Main
	dw SMW_HandleCastleCrumblingDown_Main
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

WendyCutscene:
	JSR.w SMW_ProcessMop_Main
	LDA.w !RAM_SMW_Flag_ShowWhiteFlag
	BEQ.b CODE_0CCA67
	LDX.b #$30
	LDA.b #$B0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$68
	STA.w !RAM_SMW_Sprites_WhiteFlagYPosLo
	JSR.w SMW_DrawWhiteFlag_Main
CODE_0CCA67:
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CCA6E:
	dw SMW_WaitForWendysCastleToBeFullyMopped_Main
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

LarryCutscene:
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSL.l SMW_ExecutePtr_Absolute

Ptrs0CCA79:
	dw SMW_UprootCastleFromGround_Main
	dw SMW_KickCastleAway_Main
	dw SMW_KickedCastleCreatesQuake_Main
	dw SMW_WaitForPlayerVictoryPoseAfterCastleQuake_Main
	dw SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CarryEggAwayFromCastle(Address)
namespace SMW_CarryEggAwayFromCastle
%InsertMacroAtXPosition(<Address>)

DATA_0CD7EB:
	db $F7,$F6

DATA_0CD7ED:
	db $63,$5F,$62,$5F,$62,$5E

YDisp:
	db $67,$66,$65,$65,$64,$64,$64,$64
	db $64,$64,$64,$64,$65,$65,$66,$67

Main:
	LDX.w !RAM_SMW_Flag_DisplayThankYouBubble
	BNE.b CODE_0CD83D
	LDA.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	BEQ.b CODE_0CD812
	LSR
	BEQ.b CODE_0CD849
	BRA.b CODE_0CD84F

CODE_0CD812:
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_0CD818
	LDY.b #$01
CODE_0CD818:
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_0CD7EB,y
	STA.w !RAM_SMW_Sprites_CarriedEggXPosLo
	TYA
	LSR
	LDA.w !RAM_SMW_Player_WalkingFrame
	ROL
	TAY
	LDA.w DATA_0CD7ED,y
	LDY.b !RAM_SMW_Player_XPosLo
	CPY.b #$40
	BCS.b CODE_0CD858
	LDY.b !RAM_SMW_Player_XSpeed
	BNE.b CODE_0CD858
	LDA.b #$10
	STA.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	STZ.w !RAM_SMW_Player_CarryingSomethingFlag2
CODE_0CD83D:
	LDA.b #$05
	CMP.b !RAM_SMW_Player_XPosLo
	BCC.b CODE_0CD84C
	STA.b !RAM_SMW_Player_XPosLo
	LDA.b !RAM_SMW_Player_XSpeed
	BMI.b CODE_0CD84C
CODE_0CD849:
	INC.w !RAM_SMW_Flag_DisplayThankYouBubble
CODE_0CD84C:
	INC.w !RAM_SMW_Sprites_CarriedEggBounceFrameCounter
CODE_0CD84F:
	LDA.w !RAM_SMW_Sprites_CarriedEggBounceFrameCounter
	AND.b #$0F
	TAY
	LDA.w YDisp,y
CODE_0CD858:
	STA.w SMW_OAMBuffer[$60].YDisp
	LDA.w !RAM_SMW_Sprites_CarriedEggXPosLo
	STA.w SMW_OAMBuffer[$60].XDisp
	STZ.w SMW_OAMBuffer[$60].Tile
	LDA.b #$21
	STA.w SMW_OAMBuffer[$60].Prop
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$60].Slot
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DisplayCastleDestructionText(Address)
namespace SMW_DisplayCastleDestructionText
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Timer_DisplayCastleDestructionText
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	BNE.b TextNotFinished
	LDA.w !RAM_SMW_Overworld_EnterLevelFlag
	BNE.b BranchToReturn
	LDA.b #$80
	STA.w !RAM_SMW_Overworld_EnterLevelFlag

BranchToReturn:
	BRA.b Return0CC97D

TextNotFinished:
	LDA.b !RAM_SMW_IO_ControllerHold1	
	ORA.b !RAM_SMW_IO_ControllerHold2
	BEQ.b CODE_0CC953
	LDA.w !RAM_SMW_Timer_DisplayCastleDestructionText
	AND.b #$E0
	BNE.b PauseText
	LDA.b #$01
	STA.w !RAM_SMW_Timer_DisplayCastleDestructionText
	BRA.b CODE_0CC953

PauseText:
	INC
	STA.w !RAM_SMW_Timer_DisplayCastleDestructionText
else
	BEQ.b Return0CC97D
endif
CODE_0CC953:
	DEC.w !RAM_SMW_Timer_DisplayCastleDestructionText
	LDA.w !RAM_SMW_Timer_DisplayCastleDestructionText
	AND.b #$1F
	BNE.b Return0CC97D
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	DEC
	ASL
	ASL
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	ASL
endif
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Timer_DisplayCastleDestructionText
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	AND.b #$60
else
	AND.b #$E0
endif
	LSR
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #!Define_SMW_StripeImage_CastleDestructionText
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
Return0CC97D:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DrawThankYouSpeechBubble(Address)
namespace SMW_DrawThankYouSpeechBubble
%InsertMacroAtXPosition(<Address>)

TileData:
	db $20,$48,$A6,$18
	db $30,$48,$A8,$18
	db $28,$58,$8D,$08

Main:
	LDA.w !RAM_SMW_Flag_DisplayThankYouBubble
	BEQ.b Return0CCACD
	LDY.b #$00
	TYX
CODE_0CCA97:
	LDA.w TileData,y
	STA.w SMW_OAMBuffer[$78].XDisp,x
	LDA.w TileData+$01,y
	STA.w SMW_OAMBuffer[$78].YDisp,x
	LDA.w TileData+$02,y
	STA.w SMW_OAMBuffer[$78].Tile,x
	LDA.w TileData+$03,y
	AND.b #$CF
	ORA.b #$20
	STA.w SMW_OAMBuffer[$78].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.w TileData+$03,y
	AND.b #$10
	LSR
	LSR
	LSR
	STA.w SMW_OAMTileSizeBuffer[$78].Slot,x
	PLX
	INX
	INX
	INX
	INX
	TXY
	CPY.b #$0C
	BNE.b CODE_0CCA97
Return0CCACD:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawTNTFuseBox(Address)
namespace SMW_DrawTNTFuseBox
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$E0
	LDA.w !RAM_SMW_Flag_TNTPlungerWasPressed
	BEQ.b CODE_0CCB64
	LDY.b #$E2
CODE_0CCB64:
	STY.w SMW_OAMBuffer[$00].Tile
	LDA.b #$39
	STA.w SMW_OAMBuffer[$00].Prop
	LDA.b #$50
	STA.w SMW_OAMBuffer[$00].XDisp
	LDA.b #$67
	STA.w SMW_OAMBuffer[$00].YDisp
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DrawWhiteFlag(Address)
namespace SMW_DrawWhiteFlag
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$60].XDisp,x
	LDA.w !RAM_SMW_Sprites_WhiteFlagYPosLo
	STA.w SMW_OAMBuffer[$60].YDisp,x
	LDA.b #$E6
	STA.w SMW_OAMBuffer[$60].Tile,x
	LDA.b #$21
	STA.w SMW_OAMBuffer[$60].Prop,x
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$60].Slot,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_RaiseFlagUpFromRubble(Address)
namespace SMW_RaiseFlagUpFromRubble
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BNE.b CODE_0CCADD
	STZ.w !RAM_SMW_Flag_ShowWhiteFlag
	LDA.b #$98
	STA.w !RAM_SMW_Sprites_WhiteFlagYPosLo
	BRA.b Return0CCAFC

CODE_0CCADD:
	LDA.w !RAM_SMW_Flag_ShowWhiteFlag
	BEQ.b Return0CCAFC
	LDA.w !RAM_SMW_Sprites_WhiteFlagYPosLo
	CMP.b #$5C
	BCC.b CODE_0CCAF3
	LDX.b #$01
	LDA.b #$F0
	STA.w !RAM_SMW_Sprites_WhiteFlagYSpeed-$01,x			;\ Note: Yeah, the programmer used the X version of this routine to change the Y position of the white flag. Don't ask why.
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X			;/
CODE_0CCAF3:
	LDX.b #$30
	LDA.b #$AB
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BRL.w SMW_DrawWhiteFlag_Main

Return0CCAFC:
	RTS

namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DrawPlayerCough(Address)
namespace SMW_DrawPlayerCough
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $89,$99,$A9,$B9

RoyCutscene:
	LDA.w !RAM_SMW_Misc_ShowPlayerCough
	BNE.b CODE_0CD502
	STZ.w !RAM_SMW_Sprites_RoyCutscenePlayerCoughYPosLo
	BRA.b Return0CD556

CODE_0CD502:
	LDX.b #$02
	LDA.b #$FD
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	EOR.b #$FF
	INC
	CMP.b #$0D
	BCC.b CODE_0CD51B
	STZ.w !RAM_SMW_Misc_ShowPlayerCough
	BRA.b Return0CD556

CODE_0CD51B:
	LDX.b #$00
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_0CD523
	LDX.b #$08
CODE_0CD523:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b #$34
	LDA.b #$04
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w !RAM_SMW_Sprites_RoyCutscenePlayerCoughYPosLo
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.w !RAM_SMW_Sprites_RoyCutscenePlayerCoughYPosLo
	EOR.b #$FF
	INC
	LSR
	LSR
	TAY
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.b #$33
	STA.w SMW_OAMBuffer[$00].Prop,x
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
Return0CD556:
	RTS

MortonCutscene:
	LDA.w !RAM_SMW_Misc_ShowPlayerCough
	BNE.b CODE_0CD564
	STZ.w !RAM_SMW_Sprites_MortonCutscenePlayerCoughYPosLo
	STZ.w !RAM_SMW_Sprites_MortonCutscenePlayerCoughXPosLo
	BRA.b Return0CD5C5

CODE_0CD564:
	LDX.b #$03
	LDA.b #$06
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	LDA.b #$01
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,x
	CMP.b #$0D
	BCC.b CODE_0CD585
	STZ.w !RAM_SMW_Misc_ShowPlayerCough
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRA.b Return0CD5C5

CODE_0CD585:
	LDX.b #$0F
	LDY.b #$0C
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_0CD58F
	LDX.b #$13
CODE_0CD58F:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	STY.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$34
	LDA.w !RAM_SMW_Sprites_MortonCutscenePlayerCoughXPosLo
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w !RAM_SMW_Sprites_MortonCutscenePlayerCoughYPosLo
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.w !RAM_SMW_Sprites_MortonCutscenePlayerCoughXPosLo
	LSR
	LSR
	TAY
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.b #$33
	STA.w SMW_OAMBuffer[$00].Prop,x
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
Return0CD5C5:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DrawWoodHammer(Address)
namespace SMW_DrawWoodHammer
%InsertMacroAtXPosition(<Address>)

HammerSwingPlayerPoses:
	db $35,$36,$36,$36,$37,$37,$37,$37
	db $37,$37,$37,$36,$36,$35,$35,$35

Tiles:
	db $8B,$8B,$8B,$AA,$8A,$CE,$CE,$8A
	db $8A,$AA,$AA,$8A,$AA,$8A,$CE,$8A
	db $AA,$8A,$8A

Prop:
	db $61,$61,$61,$61,$61,$61,$61,$21
	db $21,$21,$21,$A1,$21,$21,$61,$61
	db $61,$E1,$E1

XDisp:
	db $FA,$FA,$F9,$FB,$F9,$FA,$F0,$F0
	db $F4,$F4,$FD,$FF,$FD,$FF,$0A,$0D
	db $0A,$0D,$0E,$10,$0E,$10,$0D,$0E
	db $0E,$10,$0A,$0D,$FD,$FF,$F4,$F4
	db $F0,$F0,$F3,$F0,$F3,$F0

YDisp:
	db $06,$03,$07,$00,$07,$01,$0D,$08
	db $02,$FB,$FF,$F6,$FF,$F6,$03,$FD
	db $03,$FD,$0A,$06,$0A,$06,$12,$0F
	db $0A,$06,$03,$FD,$FF,$F6,$02,$FB
	db $0D,$08,$15,$10,$15,$10

Main:
	LDA.w !RAM_SMW_Flag_DisplayThankYouBubble
	LSR
	BEQ.b Return0CD6C3
	LDA.w !RAM_SMW_Sprites_SwingHammerTimer
	BNE.b CODE_0CD66B
	LDX.w !RAM_SMW_Player_WalkingFrame
	BRA.b CODE_0CD680

CODE_0CD66B:
	DEC.w !RAM_SMW_Sprites_SwingHammerTimer
	CMP.b #$F0
	BCC.b CODE_0CD674
	LDA.b #$0F
CODE_0CD674:
	AND.b #$0F
	CLC
	ADC.b #$03
	TAX
	LDA.w HammerSwingPlayerPoses-$03,x
	STA.w !RAM_SMW_Player_CurrentPose
CODE_0CD680:
	LDY.b #$00
	LDA.w Tiles,x
	LSR
	BCC.b CODE_0CD68A
	LDY.b #$30
CODE_0CD68A:
	ASL
	STA.w SMW_OAMBuffer[$3F].Tile,y
	LDA.b !RAM_SMW_Player_FacingDirection
	LSR
	ROR
	LSR
	EOR.w Prop,x
	STA.w SMW_OAMBuffer[$3F].Prop,y
	TXA
	ASL
	TAX
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_0CD6A1
	INX
CODE_0CD6A1:
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$3F].YDisp,y
	LDA.w XDisp,x
	LDX.b !RAM_SMW_Player_FacingDirection
	BNE.b CODE_0CD6B4
	EOR.b #$FF
	INC
CODE_0CD6B4:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.w SMW_OAMBuffer[$3F].XDisp,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$3F].Slot,y
Return0CD6C3:
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnHammerDebris(Address)
namespace SMW_SpawnHammerDebris
%InsertMacroAtXPosition(<Address>)

YSpeed:
	db $C8,$C0,$C4,$C8,$C0,$B4,$C8,$B8
	db $C6,$B7,$C4,$B0,$C8,$C0,$C8,$C4

XSpeed:
	db $18,$F8,$0A,$20,$E8,$1A,$EA,$08
	db $F0,$18,$E0,$2A,$F8,$20,$FA,$18

Main:
	LDA.w !RAM_SMW_Sprites_SwingHammerTimer
	DEC
	CMP.b #$E7
	BCS.b Return0CD3F3
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b Return0CD3F3
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot
CODE_0CD3B6:
	LDA.w !RAM_SMW_CutsceneSpr_HammerDebris_CurrentStatus,x
	BNE.b CODE_0CD3EE
	LDA.b #$01
	STA.w !RAM_SMW_CutsceneSpr_HammerDebris_CurrentStatus,x
	LDA.b #$04
	STA.w !RAM_SMW_CutsceneSpr_HammerDebris_YAcceleration,x
	LDA.w YSpeed,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	LDA.w XSpeed,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b #$18
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,x
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$20
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$02
	BNE.b Return0CD3F3
	LDA.b #!Define_SMW_Sound1DFC_BreakBlock
	STA.w !RAM_SMW_IO_SoundCh3
	BRA.b Return0CD3F3

CODE_0CD3EE:
	DEX
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$0B
	BNE.b CODE_0CD3B6
Return0CD3F3:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerState0C_CastleDestructionMoves(Address)
namespace SMW_PlayerState0C_CastleDestructionMoves
%InsertMacroAtXPosition(<Address>)

DATA_00C5E1:
	db $10
	db $30,$31
	db $32,$33,$34
	db $0E

CastleDestructionMovementData:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
.Iggy:
	db $26,$11,$02,$3E,$00,$60,$01,$09
	db $80,$08,$00,$20,$04,$60,$00,$01
	db $FF
.Morton:
	db $01,$02,$3E,$00,$60,$41,$25,$C1
	db $04,$27,$04,$2F,$08,$25,$01,$2F
	db $04,$27,$04,$00,$08,$41,$16,$C1
	db $04,$27,$04,$2F,$08,$25,$01,$2F
	db $04,$27,$04,$00,$04,$01,$04,$20
	db $01,$01,$04,$00,$08,$41,$14,$81
	db $1A,$00,$40,$82,$10,$02,$20,$00
	db $30,$01,$01,$00,$50,$22,$01,$FF
.Roy:
	db $01,$02,$3E,$00,$60,$01,$09,$80
	db $08,$00,$20,$04,$60,$00,$20,$10
	db $20,$01,$44,$00,$2C,$31,$01,$3A
	db $10,$31,$01,$3A,$10,$31,$01,$3A
	db $20,$28,$A0,$28,$40,$29,$04,$28
	db $04,$29,$04,$28,$04,$29,$04,$28
	db $40,$22,$01,$FF
.Ludwig:
	db $01,$02,$3E,$00,$60,$01,$09,$80
	db $08,$00,$20,$04,$60,$10,$20,$31
	db $01,$18,$60,$31,$01,$3B,$80,$31
	db $01,$3C,$40,$FF
.Lemmy:
	db $01,$02,$3E,$00,$60,$02,$30,$01
	db $6E,$00,$20,$23,$01,$01,$16,$02
	db $20,$20,$01,$01,$20,$02,$20,$01
	db $02,$00,$80,$FF
.Wendy:
	db $01,$02,$3E,$00,$60,$02,$27,$01
	db $69,$00,$28,$24,$01,$02,$01,$00
	db $FF
.Unused:
	db $00,$40,$20,$01,$00,$30,$02,$40
	db $00,$30,$FF
.Larry:
	db $01,$02,$3E,$00,$4C,$01,$43,$00
	db $40,$26,$01,$00,$1E,$20,$01,$00
	db $20,$08,$10,$20,$01,$2D,$18,$00
	db $A0,$20,$01,$2E,$01,$FF
else
.Iggy:
	db $26,$11,$02,$48,$00,$60,$01,$09
	db $80,$08,$00,$20,$04,$60,$00,$01
	db $FF
.Morton:
	db $01,$02,$48,$00,$60,$41,$2C,$C1
	db $04,$27,$04,$2F,$08,$25,$01,$2F
	db $04,$27,$04,$00,$08,$41,$1B,$C1
	db $04,$27,$04,$2F,$08,$25,$01,$2F
	db $04,$27,$04,$00,$04,$01,$08,$20
	db $01,$01,$10,$00,$08,$41,$12,$81
	db $0A,$00,$40,$82,$10,$02,$20,$00
	db $30,$01,$01,$00,$50,$22,$01,$FF
.Roy:
	db $01,$02,$48,$00,$60,$01,$09,$80
	db $08,$00,$20,$04,$60,$00,$20,$10
	db $20,$01,$58,$00,$2C,$31,$01,$3A
	db $10,$31,$01,$3A,$10,$31,$01,$3A
	db $20,$28,$A0,$28,$40,$29,$04,$28
	db $04,$29,$04,$28,$04,$29,$04,$28
	db $40,$22,$01,$FF
.Ludwig:
	db $01,$02,$48,$00,$60,$01,$09,$80
	db $08,$00,$20,$04,$60,$10,$20,$31
	db $01,$18,$60,$31,$01,$3B,$80,$31
	db $01,$3C,$40,$FF
.Lemmy:
	db $01,$02,$48,$00,$60,$02,$30,$01
	db $84,$00,$20,$23,$01,$01,$16,$02
	db $20,$20,$01,$01,$20,$02,$20,$01
	db $02,$00,$80,$FF
.Wendy:
	db $01,$02,$48,$00,$60,$02,$28,$01
	db $83,$00,$28,$24,$01,$02,$01,$00
	db $FF
.Unused:
	db $00,$40,$20,$01,$00,$40,$02,$60
	db $00,$30,$FF
.Larry:
	db $01,$02,$48,$00,$60,$01,$4E,$00
	db $40,$26,$01,$00,$1E,$20,$01,$00
	db $20,$08,$10,$20,$01,$2D,$18,$00
	db $A0,$20,$01,$2E,$01,$FF
endif

UNK_00C6DF:
	db $01									; Todo: I wonder if that $01 is ever actually used?

DATA_00C6E0:
	db CastleDestructionMovementData_Iggy-CastleDestructionMovementData
	db CastleDestructionMovementData_Morton-CastleDestructionMovementData-$01
	db CastleDestructionMovementData_Lemmy-CastleDestructionMovementData-$01
	db CastleDestructionMovementData_Ludwig-CastleDestructionMovementData-$01
	db CastleDestructionMovementData_Roy-CastleDestructionMovementData-$01
	db CastleDestructionMovementData_Wendy-CastleDestructionMovementData-$01
	db CastleDestructionMovementData_Larry-CastleDestructionMovementData-$01

Main:
	JSR.w SMW_DamagePlayer_DisableButtons
	STZ.w !RAM_SMW_Player_OverrideWalkingFrames
	JSR.w SMW_UpdatePlayerSpritePosition_Main
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00C73F
	LDA.b !RAM_SMW_Player_YPosLo
	CMP.b #$58
	BCS.b CODE_00C739
	LDY.b !RAM_SMW_Player_XPosLo
	CPY.b #$40
	BCC.b CODE_00C73F
	CPY.b #$60
	BCC.b CODE_00C71C
	LDY.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	BEQ.b CODE_00C73F
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$1C
	BMI.b CODE_00C73F
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDX.b #$D0
	LDY.b !RAM_SMW_Player_FacingDirection
	BEQ.b CODE_00C730
	LDY.b #$00
	BRA.b CODE_00C72E

CODE_00C71C:
	CMP.b #$4C
	BCC.b CODE_00C73F
	LDA.b #!Define_SMW_Sound1DFC_TNTFuse
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Flag_TNTPlungerWasPressed
	LDA.b #$4C
	LDY.b #$F4
	LDX.b #$C0
CODE_00C72E:
	STY.b !RAM_SMW_Player_XSpeed
CODE_00C730:
	STX.b !RAM_SMW_Player_YSpeed
	LDX.b #!Define_SMW_Sound1DF9_HitHead
	STX.w !RAM_SMW_IO_SoundCh1
	BRA.b CODE_00C73D

CODE_00C739:
	STZ.b !RAM_SMW_Player_InAirFlag
	LDA.b #$58
CODE_00C73D:
	STA.b !RAM_SMW_Player_YPosLo
CODE_00C73F:
	LDX.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b !RAM_SMW_Misc_ScratchRAM8F
	CLC
	ADC.w DATA_00C6E0-$01,x
	TAX
	LDA.b !RAM_SMW_Player_CutsceneInputTimer1
	BNE.b CODE_00C764
	INC.b !RAM_SMW_Misc_ScratchRAM8F
	INC.b !RAM_SMW_Misc_ScratchRAM8F
	INX
	INX
	LDA.w CastleDestructionMovementData+$01,x
	STA.b !RAM_SMW_Player_CutsceneInputTimer1
	LDA.w CastleDestructionMovementData,x
	CMP.b #$2D
	BNE.b CODE_00C764
	LDA.b #!Define_SMW_Sound1DF9_PBalloon
	STA.w !RAM_SMW_IO_SoundCh1
CODE_00C764:
	LDA.w CastleDestructionMovementData,x
	CMP.b #$FF
	BNE.b CODE_00C76E
	JMP.w Return00C7F8

CODE_00C76E:
	PHA
	AND.b #$10
	BEQ.b CODE_00C777
	JSL.l SMW_DrawQuestionMark_Main
CODE_00C777:
	PLA
	TAY
	AND.b #$20
	BNE.b CODE_00C789
	STY.b !RAM_SMW_IO_ControllerHold1
	TYA
	AND.b #(!Joypad_DPadR>>8)|(!Joypad_DPadL>>8)|(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)|(!Joypad_Start>>8)|(!Joypad_Select>>8)|(!Joypad_B>>8)
	STA.b !RAM_SMW_IO_ControllerPress1
	JSR.w SMW_PlayerState00_Normal_CODE_00CD39
	BRA.b CODE_00C7F6

CODE_00C789:
	TYA
	AND.b #$0F
	CMP.b #$07
	BCS.b CODE_00C7E9
	DEC
	BPL.b CODE_00C7A2
	LDA.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	BEQ.b CODE_00C79D
	LDA.b #!Define_SMW_Sound1DF9_FlyWithCape
	STA.w !RAM_SMW_IO_SoundCh1
CODE_00C79D:
	INC.w !RAM_SMW_Flag_CastleMovementInCutscene
	BRA.b CODE_00C7F6

CODE_00C7A2:
	BNE.b CODE_00C7A9
	INC.w !RAM_SMW_Sprites_QuestionMarkAnimationIndex
	BRA.b CODE_00C7F6

CODE_00C7A9:
	DEC
	BNE.b CODE_00C7B6
	LDA.b #!Define_SMW_Sound1DF9_Swim
	STA.w !RAM_SMW_IO_SoundCh1
	INC.w !RAM_SMW_Misc_ShowPlayerCough
	BRA.b CODE_00C7F6

CODE_00C7B6:
	DEC
	BNE.b CODE_00C7C0
	LDY.b #$88
	STY.w !RAM_SMW_Sprites_SwingHammerTimer
	BRA.b CODE_00C7F6

CODE_00C7C0:
	DEC
	BNE.b CODE_00C7CE
	LDA.b #$38
	STA.w !RAM_SMW_Sprites_MopYPosLo
	LDA.b #$07
	TRB.b !RAM_SMW_Player_XPosLo
	BRA.b CODE_00C7F6

CODE_00C7CE:
	DEC
	BNE.b CODE_00C7DF
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$D2
else
	LDA.b #$D8
endif
	STA.b !RAM_SMW_Player_XSpeed
	INC.w !RAM_SMW_Flag_DropkickCounter
	BRA.b CODE_00C79D

CODE_00C7DF:
	LDA.b #$20
	STA.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	INC.w !RAM_SMW_Player_CarryingSomethingFlag2
	BRA.b CODE_00C7F6

CODE_00C7E9:
	TAY
	LDA.w DATA_00C5E1-$07,y
	STA.w !RAM_SMW_Player_CurrentPose
	STZ.w !RAM_SMW_Player_CarryingSomethingFlag2
	JSR.w SMW_HandlePlayerPhysics_InAir
CODE_00C7F6:
	DEC.b !RAM_SMW_Player_CutsceneInputTimer1
Return00C7F8:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DrawQuestionMark(Address)
namespace SMW_DrawQuestionMark
%InsertMacroAtXPosition(<Address>)

YDisp:
	db $F8,$80,$80,$80
	db $FA,$80,$80,$80
	db $FA,$FC,$80,$80
	db $FA,$FC,$04,$80
	db $F8,$80,$80,$80
	db $F9,$80,$80,$80
	db $FA,$80,$80,$80
	db $FA,$80,$80,$80

XDisp:
	db $08,$80,$80,$80
	db $09,$80,$80,$80
	db $09,$FF,$80,$80
	db $09,$FF,$F6,$80
	db $04,$80,$80,$80
	db $00,$80,$80,$80
	db $FF,$80,$80,$80
	db $00,$80,$80,$80

Main:
	PHB
	PHK
	PLB
	LDX.b #$00
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_0CD4AF
	LDX.b #$08
CODE_0CD4AF:
	STX.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$40
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_QuestionMarkAnimationIndex
	ASL
	ASL
	TAY
CODE_0CD4BD:
	LDA.w XDisp,y
	CMP.b #$80
	BEQ.b CODE_0CD4ED
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w YDisp,y
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.b #$B6
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.b #$31
	STA.w SMW_OAMBuffer[$00].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	INX
	INX
	INX
	INX
CODE_0CD4ED:
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0CD4BD
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UploadBigLayer3LettersToVRAM(Address)
namespace SMW_UploadBigLayer3LettersToVRAM
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$2F
	JSL.l SMW_GraphicsDecompressionRoutines_Main
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	REP.b #$30
	LDA.w #!VRAM_SMW_Layer3GFXVRAMLocation+$0600
	STA.w !REGISTER_VRAMAddressLo
	LDX.w #$0200
CODE_009574:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !REGISTER_WriteToVRAMPortLo
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEX
	BNE.b CODE_009574
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_GameMode1B_EndingCinema(Address)
namespace SMW_GameMode1B_EndingCinema
%InsertMacroAtXPosition(<Address>)

Bank0C:
	PHB
	PHK
	PLB
	SEP.b #$30
	JSR.w Sub
	JSR.w SMW_CreditsFadeOut_Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode1B_EndingCinema(Address)
namespace SMW_GameMode1B_EndingCinema
%InsertMacroAtXPosition(<Address>)

Tilemaps:											;\ LM: This becomes freespace in ROMs with custom credits images.
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00						;|
	%InsertVersionExclusiveFile(incbin, ../SMW/images/ending/Credits_, SMW_J.bin, )		;|
else												;|
	%InsertVersionExclusiveFile(incbin, ../SMW/images/ending/Credits_, SMW_U.bin, )		;/
endif

RowPointers:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	dw $00C1,$0026,$00DF,$00FD,$0026,$0026,$0026,$011B			;\ LM: Changes all of these to dw $40*X, with X being the row number, when saving a custom credits image
	dw $0026,$0137,$0153,$0026,$0026,$0026,$016F,$0026			;| Note that Lunar Magic makes no attempt to optimize the size of your credits.
	dw $018F,$01AD,$0026,$0026,$0026,$01CB,$0026,$01ED			;| Your custom credits will always take up 12.6 KB (SMW's take up about 1.82 KB) as a result.
	dw $020F,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0231,$0026,$0269,$0287,$0026,$0026,$0026			;|
	dw $02A5,$0026,$02C7,$02E5,$0026,$0026,$0026,$0303			;|
	dw $0026,$032F,$0357,$0026,$037F,$03A5,$0026,$03CB			;|
	dw $0026,$03E7,$0409,$0026,$0026,$0026,$042B,$0026			;|
	dw $0447,$0469,$0026,$048B,$049F,$0026,$04B3,$04D3			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $04F3,$0026,$050D,$052B,$0026,$0026,$0026,$0549			;|
	dw $0026,$0567,$057D,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0593,$0026,$05B7,$05D3,$0026			;|
	dw $05EF,$060D,$0026,$062B,$0647,$0026,$0663,$0681			;|
	dw $0026,$069F,$06B5,$0026,$06CB,$06E7,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$006B,$0026			;|
	dw $007D,$009F,$0026,$0026,$0026,$0000,$0026,$0027			;|
	dw $0049,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026								;|
else										;|
	dw $00C1,$0026,$00DD,$00FB,$0026,$0026,$0026,$0119			;|
	dw $0026,$0133,$014F,$0026,$0026,$0026,$016B,$0026			;|
	dw $0187,$01A5,$0026,$0026,$0026,$01C3,$0026,$01E5			;|
	dw $0207,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0229,$0026,$0261,$027F,$0026,$0026,$0026,$029D			;|
	dw $0026,$02C1,$02DF,$0026,$0026,$0026,$02FD,$0026			;|
	dw $0329,$0351,$0026,$0379,$039F,$0026,$0026,$03C5			;|
	dw $0026,$03E3,$0405,$0026,$0026,$0026,$0427,$0026			;|
	dw $0447,$0469,$0026,$048B,$049F,$0026,$04B3,$04D3			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$04F3			;|
	dw $0026,$0529,$0547,$0026,$0026,$0026,$0565,$0026			;|
	dw $0583,$0599,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$05AF,$0026,$05D5,$05F1,$0026,$060D,$062B			;|
	dw $0026,$0649,$0665,$0026,$0681,$069F,$0026,$06BD			;|
	dw $06D3,$0026,$06E9,$0705,$0026,$0721,$0739,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$006B,$0026			;|
	dw $007D,$009F,$0026,$0026,$0026,$0000,$0026,$0027			;|
	dw $0049,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026,$0026,$0026,$0026,$0026,$0026,$0026			;|
	dw $0026,$0026								;/
endif

DATA_0C9EAC:
	db $40,$3E,$FC,$00,$FF

BufferNextRowOfCredits:
	REP.b #$30
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDY.w #$0000
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_CreditsStripeImageHeaderHi
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x
	INX
	INX
CODE_0C9ECB:
	LDA.w DATA_0C9EAC,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INY
	CPY.w #$0005
	BNE.b CODE_0C9ECB
	REP.b #$20
	DEX
	TXA
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	LDA.b !RAM_SMW_Misc_CreditsStripeImageIndex
	AND.w #$00FF
	ASL
	TAY
	LDA.w RowPointers,y
	TAY							;\ LM: Optimizes and modifies this routine to support having a custom credits image.
	SEP.b #$20						;| The custom credits data can be found by using read3($0C9F17)
	INC.b !RAM_SMW_Misc_CreditsStripeImageIndex		;|
	LDA.w Tilemaps,y					;|
	CMP.b #$FF						;|
	BEQ.b CODE_0C9F43					;|
	LDA.w Tilemaps,y					;|
	STA.b !RAM_SMW_Misc_ScratchRAM02			;|
	LDA.w Tilemaps+$01,y					;|
	STA.b !RAM_SMW_Misc_ScratchRAM00			;|
	STZ.b !RAM_SMW_Misc_ScratchRAM01			;|
	INY							;|
	INY							;|
	LDA.b !RAM_SMW_Misc_CreditsStripeImageHeaderHi		;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x		;|
	LDA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo		;|
	CLC							;|
	ADC.b !RAM_SMW_Misc_ScratchRAM02			;|
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x		;|
	INX							;|
	INX							;|
	LDA.b !RAM_SMW_Misc_ScratchRAM01			;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x		;|
	LDA.b !RAM_SMW_Misc_ScratchRAM00			;|
	STA.l SMW_StripeImageUploadTable[$00].HighByte,x		;|
	INX							;|
	INX							;|
	REP.b #$20						;|
CODE_0C9F26:							;|
	LDA.w Tilemaps,y					;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x		;|
	INX							;|
	INX							;|
	INY							;|
	INY							;|
	DEC.b !RAM_SMW_Misc_ScratchRAM00			;|
	DEC.b !RAM_SMW_Misc_ScratchRAM00			;|
	BPL.b CODE_0C9F26					;|
	LDA.w #$00FF						;|
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x		;|
	TXA							;|
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo		;|
CODE_0C9F43:							;|
	REP.b #$20						;|
	SEP.b #$10						;|
	LDA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo		;|
	CLC							;|
	ADC.w #$0020						;|
	STA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo		;|
	AND.w #$03FF						;|
	BNE.b Return0C9F5B					;|
	LDA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo		;|
	EOR.w #$0C00						;|
	STA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo		;|
Return0C9F5B:							;|
	RTS							;/

BackgroundChangeHeight:
	dw $00C0,$0180,$0240,$0300
	dw $03C0,$0480,$0559

Sub:
	REP.b #$20
	LDX.b #$00
	LDA.w #$FF80
	STA.w !RAM_SMW_Misc_CreditsTempLayer2XSpeedLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	JSR.w CODE_0C9FCB
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo,x
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
	CMP.w #$0559
	BCS.b CODE_0C9FAC
	LDX.b #$02
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.w #$004E
else
	LDA.w #$0040
endif
	STA.w !RAM_SMW_Misc_CreditsTempLayer3YSpeedLo-$02,x
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	JSR.w CODE_0C9FCB
	LDA.b !RAM_SMW_Misc_ScratchRAM00,x
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BEQ.b CODE_0C9FAC
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
	AND.w #$0007
	CMP.w #$0001
	BNE.b CODE_0C9FAC
	JSR.w BufferNextRowOfCredits
CODE_0C9FAC:
	LDX.b #$0C
CODE_0C9FAE:
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	CMP.l BackgroundChangeHeight,x
else
	CMP.w BackgroundChangeHeight,x
endif
	BEQ.b CODE_0C9FBB
	DEX
	DEX
	BPL.b CODE_0C9FAE
	BRA.b CODE_0C9FC6

CODE_0C9FBB:
	LDA.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	AND.w #$00FF
	BNE.b CODE_0C9FC6
	INC.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
CODE_0C9FC6:
	SEP.b #$20
	BRL.w CODE_0C9FEA

CODE_0C9FCB:
	LDA.w !RAM_SMW_Misc_CreditsTempLayer2XPosLo,x
	AND.w #$00FF
	CLC
	ADC.w !RAM_SMW_Misc_CreditsTempLayer2XSpeedLo,x
	STA.w !RAM_SMW_Misc_CreditsTempLayer2XPosLo,x
	AND.w #$FF00
	BPL.b CODE_0C9FE0
	ORA.w #$00FF
CODE_0C9FE0:
	XBA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00,x
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	RTS

PeachOnYoshiOffset:
	db $00,$FF,$00

CODE_0C9FEA:
	REP.b #$20
	LDA.w #$0038
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w #$008F
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	LDA.b #$01
	STA.b !RAM_SMW_Player_CurrentPowerUp
	LDA.b #$08
	STA.w !RAM_SMW_Player_XSpeed
	JSR.w SMW_HandlePlayerPoseAndAnimationTimersDuringEnding_Main
	LDA.b #$52
	STA.b !RAM_SMW_NorSpr035_Yoshi_EndingXPosLo
	STZ.w !RAM_SMW_NorSpr035_Yoshi_EndingXPosHi
	LDA.b #$8F
	STA.b !RAM_SMW_NorSpr035_Yoshi_EndingYPosLo
	STZ.w !RAM_SMW_NorSpr035_Yoshi_EndingYPosHi
	LDA.b #$A0
	STA.w !RAM_SMW_NorSpr035_Yoshi_EndingOAMIndex
	JSR.w SMW_SpawnEndingYoshiSpriteAndDrawPlayer_Main
	LDX.w !RAM_SMW_NorSpr_AnimationFrame
	LDA.b #$51
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w PeachOnYoshiOffset,x
	CLC
	ADC.b #$85
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	ASL
	ASL
	TAY
	LDX.b #$00
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_Peach
	LDA.b #$A0
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_MakeCreditsEggsBounce_Main
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_DrawEndingBabyYoshis_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateCurrentPlayerPositionRAM(Address)
namespace SMW_UpdateCurrentPlayerPositionRAM
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_CurrentXPosLo
	LDA.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Player_CurrentYPosLo
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetKeepGameModeActiveTimer(Address)
namespace SMW_SetKeepGameModeActiveTimer
%InsertMacroAtXPosition(<Address>)

OneFrame:
	LDA.b #$01
VariableFrames:
	STA.w !RAM_SMW_Timer_KeepGameModeActive
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandlePlayerPoseAndAnimationTimersDuringEnding(Address)
namespace SMW_HandlePlayerPoseAndAnimationTimersDuringEnding
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #SMW_SetPlayerPose_Main>>16
	PHA
	PLB
	JSL.l SMW_SetPlayerPose_Main
	PLB
CODE_0CA764:
	STZ.w !RAM_SMW_Player_CurrentLayerPriority
	LDA.w !RAM_SMW_Player_AnimationTimer
	BEQ.b CODE_0CA76F
	DEC.w !RAM_SMW_Player_AnimationTimer
CODE_0CA76F:
	LDA.w !RAM_SMW_Timer_CapeFlapAnimation
	BEQ.b Return0CA777
	DEC.w !RAM_SMW_Timer_CapeFlapAnimation
Return0CA777:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BufferCreditsBackgrounds(Address)
namespace SMW_BufferCreditsBackgrounds
%InsertMacroAtXPosition(<Address>)

Layer2Pointers:
	dw SMW_Backgrounds_Layer2_Castle,SMW_Backgrounds_Layer2_Rocks,SMW_Backgrounds_Layer2_Forest,SMW_Backgrounds_Layer2_Clouds
	dw SMW_Backgrounds_Layer2_Mountains,SMW_Backgrounds_Layer2_Rocks2,SMW_Backgrounds_Layer2_SmallHills

TilePageModifier:
	dw $FFFF,$FEFF,$FEFF,$FEFF
	dw $FFFF,$FEFF,$FEFF

Main:
	REP.b #$30
	STZ.w !RAM_SMW_Pointer_CreditsBackgroundIndex
CODE_0C93E2:
	LDA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	AND.w #$00FF
	ASL
	TAX
	LDA.l Layer2Pointers,x
	STA.b !RAM_SMW_Pointer_Layer2DataLo
	LDA.l TilePageModifier,x
	STA.b !RAM_SMW_Misc_ScratchRAM7E0065
	SEP.b #$20
	LDY.w #$0000
	LDX.b !RAM_SMW_Pointer_Layer2DataLo
	CPX.w #SMW_Backgrounds_Layer2_Cave
	BCC.b CODE_0C9405
	LDY.w #$0001
CODE_0C9405:
	LDX.w #$0000
	TYA
CODE_0C9409:
	STA.l !RAM_SMW_Blocks_Layer2TilesHi,x
	STA.l !RAM_SMW_Blocks_Layer2TilesHi+$0200,x
	INX
	CPX.w #$0200
	BNE.b CODE_0C9409
	LDA.b #SMW_Backgrounds_Layer2>>16
	STA.b !RAM_SMW_Pointer_Layer2DataBank
	LDX.w #!RAM_SMW_Blocks_Layer2TilesLo
	STX.b !RAM_SMW_Misc_ScratchRAM0D
	REP.b #$20
	JSR.w CODE_0C944C
	JSR.w CODE_0C94C0
	INC.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	LDA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	CMP.w #$0007
	BNE.b CODE_0C93E2
	LDA.w #$5840
	STA.b !RAM_SMW_Misc_CreditsStripeImageHeaderLo
	SEP.b #$30
	STZ.b !RAM_SMW_Misc_CreditsStripeImageIndex
	STZ.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	JSL.l SMW_UpdateCreditsBackground_Main
	JSR.w SMW_InitializeCreditsEggPositions_Main
	LDA.b #!Define_SMW_CreditsMusic_StaffRoll
	STA.w !RAM_SMW_IO_MusicCh1
	RTL

CODE_0C944C:
	REP.b #$30
	LDY.w #$0000
	STY.b !RAM_SMW_Misc_ScratchRAM03
	STY.b !RAM_SMW_Misc_ScratchRAM05
	SEP.b #$20
	LDA.b #!RAM_SMW_Blocks_Layer2TilesLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0C945B:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM07
	INY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	AND.b #$80
	BEQ.b CODE_0C9480
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	AND.b #$7F
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	INY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b !RAM_SMW_Misc_ScratchRAM05
CODE_0C9475:
	STA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_0C9475
	STY.b !RAM_SMW_Misc_ScratchRAM05
	BRA.b CODE_0C9492

CODE_0C9480:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	INY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	STA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	INY
	STY.b !RAM_SMW_Misc_ScratchRAM05
	DEC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_0C9480
CODE_0C9492:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	CMP.b #$FF
	BNE.b CODE_0C945B
	INY
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	CMP.b #$FF
	BNE.b CODE_0C945B
	REP.b #$20
	LDA.w #SMW_Map16Data_Backgrounds
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0000
CODE_0C94AB:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Pointer_Map16Tiles,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	CPX.w #$0400
	BNE.b CODE_0C94AB
	RTS

CODE_0C94C0:
	SEP.b #$20
	REP.b #$10
	LDX.w #!RAM_SMW_Blocks_Layer2TilesLo
	STX.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b #!RAM_SMW_Blocks_Layer2TilesLo>>16
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	LDX.w #!RAM_SMW_Blocks_Layer2TilesHi
	STX.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	LDA.b #SMW_Map16Data_Backgrounds>>16
	STA.b !RAM_SMW_Pointer_Layer2DataBank
	LDY.w #$00F0
	STY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	XBA
	AND.b #$00
	TAX
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$007F
	STX.b !RAM_SMW_Misc_ScratchRAM08
CODE_0C94EB:
	SEP.b #$20
	LDY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	ASL
	TAX
	LDA.w !RAM_SMW_Pointer_Map16Tiles,x
	STA.b !RAM_SMW_Pointer_Layer2DataLo
	LDY.w #$0000
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	PHA
	AND.w #$003F
	STA.b !RAM_SMW_Misc_ScratchRAM06
	PLA
	AND.w #$FFC0
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM06
	TAX
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	AND.b !RAM_SMW_Misc_ScratchRAM7E0065
	STA.l !RAM_SMW_Misc_CreditsBackgroundBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	AND.b !RAM_SMW_Misc_ScratchRAM7E0065
	STA.l !RAM_SMW_Misc_CreditsBackgroundBuffer+$40,x
	INY
	INY
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	AND.b !RAM_SMW_Misc_ScratchRAM7E0065
	STA.l !RAM_SMW_Misc_CreditsBackgroundBuffer+$02,x
	INY
	INY
	LDA.b [!RAM_SMW_Pointer_Layer2DataLo],y
	AND.b !RAM_SMW_Misc_ScratchRAM7E0065
	STA.l !RAM_SMW_Misc_CreditsBackgroundBuffer+$42,x
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM04
	DEC.b !RAM_SMW_Misc_ScratchRAM08
	BPL.b CODE_0C94EB
	LDA.w #$007F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.w #$0170
	BNE.b Return0C9558
	LDA.w #$02A0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	BRA.b CODE_0C94EB

Return0C9558:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_InitializeCreditsEggPositions(Address)
namespace SMW_InitializeCreditsEggPositions
%InsertMacroAtXPosition(<Address>)

InitialXPos:
	db $63,$73,$83,$93,$A3,$B3,$C3

InitialYPos:
	db $A0,$9C,$A0,$9C,$A0,$9C,$A0

Main:
	PHB
	PHK
	PLB
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot
CODE_0CA056:
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos,x
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubXPos,x
	DEX
	BPL.b CODE_0CA056
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot-$01
	LDY.b #$06
CODE_0CA063:
	LDA.w InitialYPos,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,x
	LDA.w InitialXPos,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,x
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi,x
	LDA.w SMW_GameMode1D_LoadYoshisHouse_EggYSpeed,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	LDA.b #$01
	STA.w !RAM_SMW_CutsceneSprites_CreditsEgg_YAcceleration,x
	DEY
	DEX
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$08
	BNE.b CODE_0CA063
	STZ.b !RAM_SMW_Player_FacingDirection
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$FE
else
	LDA.b #$E2
endif
	STA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	PLB
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_Backgrounds(Address)
namespace SMW_Backgrounds
%InsertMacroAtXPosition(<Address>)

Layer3:
.Cage:
	incbin "images/levels/layer3/cage.bin"
.Smasher:
	incbin "images/levels/layer3/smasher.bin"
.Tide:
	incbin "images/levels/layer3/water.bin"
.Fog:
	incbin "images/levels/layer3/fog.bin"
.Fish:
	incbin "images/levels/layer3/fish.bin"
.Windows:
	incbin "images/levels/layer3/windows.bin"
.Cave:
	incbin "images/levels/layer3/cave.bin"
namespace off
endmacro

macro DATATABLE_RT01_SMW_Backgrounds(Address)
namespace SMW_Backgrounds
%InsertMacroAtXPosition(<Address>)

CastleDestruction:
.CookieMountain:
	incbin "images/cutscenes/cookiemountain.bin"
.Castle:
	incbin "images/cutscenes/castle.bin"
.Cave:
	incbin "images/cutscenes/cave.bin"
.ChocolateIsland:
	incbin "images/cutscenes/chocolateisland.bin"
.Overworld:
	incbin "images/cutscenes/overworld.bin"
namespace off
endmacro

macro DATATABLE_RT02_SMW_Backgrounds(Address)
namespace SMW_Backgrounds
%InsertMacroAtXPosition(<Address>)

Layer2:
.Mountains:
	incbin "levels/backgrounds/mountains.bin"
.Water:
	incbin "levels/backgrounds/water.bin"
.CloudyHills:
	incbin "levels/backgrounds/cloudyhills.bin"
.Clouds:
	incbin "levels/backgrounds/clouds.bin"
.SmallHills:
	incbin "levels/backgrounds/smallhills.bin"
.Rocks2:
	incbin "levels/backgrounds/rocks2.bin"
.Castle2:
	incbin "levels/backgrounds/castle2.bin"
.LargeHills:
	incbin "levels/backgrounds/largehills.bin"
.Bonus:
	incbin "levels/backgrounds/bonus.bin"
.Stars:
	incbin "levels/backgrounds/stars.bin"
.Rocks:
	incbin "levels/backgrounds/rocks.bin"
.Black:
	incbin "levels/backgrounds/black.bin"
.Cave:
	incbin "levels/backgrounds/cave.bin"
.Forest:
	incbin "levels/backgrounds/forest.bin"
.GhostHouse:
	incbin "levels/backgrounds/ghosthouse.bin"
.SunkenGhostShip:
	incbin "levels/backgrounds/sunkenghostship.bin"
.Castle:
	incbin "levels/backgrounds/castle.bin"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_InitializeLevelLayer3(Address)
namespace SMW_InitializeLevelLayer3
%InsertMacroAtXPosition(<Address>)

DATA_009F88:
	db $01,$02,$C0			; Tileset 0 (Normal 1)
	db $01,$80,$81			; Tileset 1 (Castle 1)
	db $01,$02,$C0			; Tileset 2 (Rope 1)
	db $01,$02,$81			; Tileset 3 (Underground 1)
	db $01,$02,$80			; Tileset 4 (Switch Palace 1)
	db $01,$02,$81			; Tileset 5 (Ghost House 1)
	db $01,$02,$81			; Tileset 6 (Rope 2)
	db $01,$02,$C0			; Tileset 7 (Normal 2)
	db $01,$02,$C0			; Tileset 8 (Rope 3)
	db $01,$02,$81			; Tileset 9 (Underground 2)
	db $01,$02,$80			; Tileset A (Switch Palace 2)
	db $01,$02,$80			; Tileset B (Castle 2)
	db $01,$02,$80			; Tileset C (Cloud/Forest)
	db $01,$02,$81			; Tileset D (Ghost House 2)
	db $01,$02,$81			; Tileset E (Underground 3)
	db $01,$02,$80			; Tileset F (Unused)

Main:
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	ASL
	CLC
	ADC.w !RAM_SMW_Misc_LevelTilesetSetting
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_LevelLayer3Settings
	BEQ.b CODE_00A012
	DEC
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.w DATA_009F88,x
	BMI.b CODE_009FEA
	STA.w !RAM_SMW_Flag_Layer3TideLevel
	LSR
	PHP
	JSR.w GenerateInteractiveTideWater
	LDA.b #$70
	PLP
	BEQ.b CODE_009FE0
	LDA.b #$40
CODE_009FE0:
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
	STZ.b !RAM_SMW_Mirror_Layer3YPosHi
	JSL.l SMW_ScrollSecondInteractiveLayer_Main
	BRA.b CODE_00A01B

CODE_009FEA:
	ASL
	BMI.b CODE_00A012
	BEQ.b CODE_00A007
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$01
	BEQ.b CODE_009FFA
	CMP.b #$03
	BNE.b CODE_00A01F
CODE_009FFA:
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LSR
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	SEP.b #$20
	LDA.b #$C0
	BRA.b CODE_00A017

CODE_00A007:
	LDX.b #$07
CODE_00A009:
	LDA.w SMW_GlobalPalettes_Layer3Smasher,x
	STA.w SMW_PaletteMirror[$0C].LowByte,x
	DEX
	BPL.b CODE_00A009
CODE_00A012:
	INC.w !RAM_SMW_Flag_DisableLayer3Scroll
	LDA.b #$D0
CODE_00A017:
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
	STZ.b !RAM_SMW_Mirror_Layer3YPosHi
CODE_00A01B:
	LDA.b #$04
	TRB.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
CODE_00A01F:
#LM230Hijack_CustomLayer3:
	LDA.w !RAM_SMW_Misc_LevelLayer3Settings
	BEQ.b Return00A044
	DEC
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	TAX
	LDA.l Layer3ImagePtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l Layer3ImagePtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.l Layer3ImagePtrs+$02,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_LoadStripeImage_UploadToVRAM
Return00A044:
	RTS

GenerateInteractiveTideWater:
	REP.b #$30
	LDX.w #$0100
CODE_00A04A:
	LDY.w #$0058
	LDA.w #$0000
CODE_00A050:
	STA.l !RAM_SMW_Blocks_Map16TableLo+($01B0*$10),x
	INX
	INX
	DEY
	BNE.b CODE_00A050
	TXA
	CLC
	ADC.w #$0100
	TAX
	CPX.w #$1B00
	BCC.b CODE_00A04A
	SEP.b #$30
	LDA.b #$80
	TSB.b !RAM_SMW_Misc_LevelLayoutFlags
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_InitializeLevelLayer3(Address)
namespace SMW_InitializeLevelLayer3
%InsertMacroAtXPosition(<Address>)

Layer3ImagePtrs:
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 0 (Normal 1)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 1 (Castle 1)
	dl SMW_Backgrounds_Layer3_Smasher	;|
	dl SMW_Backgrounds_Layer3_Windows	;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 2 (Rope 1)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 3 (Underground 1)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cave		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 4 (Switch Palace 1)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 5 (Ghost House 1)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Fog		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 6 (Rope 2)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 7 (Normal 2)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 8 (Rope 3)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset 9 (Underground 2)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Fish		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset A (Switch Palace 2)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset B (Castle 2)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset C (Cloud/Forest)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cage		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset D (Ghost House 2)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Fog		;/
	dl SMW_Backgrounds_Layer3_Tide		;\ Tileset E (Underground 3)
	dl SMW_Backgrounds_Layer3_Tide		;|
	dl SMW_Backgrounds_Layer3_Cave		;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MakeCreditsEggsBounce(Address)
namespace SMW_MakeCreditsEggsBounce
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot-$01
CODE_0CA8A5:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	CLC
	ADC.w !RAM_SMW_CutsceneSprites_CreditsEgg_YAcceleration,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	JSR.w SMW_UpdateCutsceneSpritePosition_Y
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	CMP.b !RAM_SMW_Misc_ScratchRAM0E
	BCC.b CODE_0CA8CB
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos,x
	LDA.b #$F6
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	LDA.b #$01
	STA.w !RAM_SMW_CutsceneSprites_CreditsEgg_YAcceleration,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
CODE_0CA8CB:
	DEX
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$08
	BNE.b CODE_0CA8A5
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawEndingBabyYoshis(Address)
namespace SMW_DrawEndingBabyYoshis
%InsertMacroAtXPosition(<Address>)

UNK_0CA8D1:
	db $00,$10,$20,$30,$40,$50,$60 			; Note: Unused, probably did something similar to what EndingYoshiHouseState02_DATA_0CA52B is used for.

BabyYoshiProp:
	db $68,$26,$24,$6A,$28,$64,$26

Main:
	LDA.w !RAM_SMW_Sprites_WhichEndingEggsHatched
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDY.b #!Define_SMW_MaxCutsceneSpriteSlot-$01
CODE_0CA8E6:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi,y
	BNE.b CODE_0CA934
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LSR.b !RAM_SMW_Misc_ScratchRAM0E
	BCS.b CODE_0CA911
	LDA.b #$86
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.b #$21
	STA.w SMW_OAMBuffer[$00].Prop,x
	BRA.b CODE_0CA923

CODE_0CA911:
	PHY
	TYA
	SEC
	SBC.b #$07
	TAY
	LDA.b #$EA
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w BabyYoshiProp,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	PLY
CODE_0CA923:
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
CODE_0CA934:
	DEY
	CPY.b #!Define_SMW_MaxCutsceneSpriteSlot-$08
	BNE.b CODE_0CA8E6
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnEndingYoshiSpriteAndDrawPlayer(Address)
namespace SMW_SpawnEndingYoshiSpriteAndDrawPlayer
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$00
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	STA.b !RAM_SMW_NorSpr_SpriteID
	LDA.w !RAM_SMW_NorSpr_AnimationFrame
	PHA
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	STA.w !RAM_SMW_NorSpr_AnimationFrame
	LDA.b #$02
	STA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	CLC
	ADC.b #$38
	STA.w !RAM_SMW_ScrollSpr_LayerIndex
	BCC.b CODE_0CA7AF
	LDA.w !RAM_SMW_NorSpr_AnimationFrame
	INC
	STA.w !RAM_SMW_NorSpr_AnimationFrame
	CMP.b #$03
	BCC.b CODE_0CA7AF
	STZ.w !RAM_SMW_NorSpr_AnimationFrame
CODE_0CA7AF:
	LDA.b #$01
	STA.w !RAM_SMW_Yoshi_StrayYoshiFlag
CODE_0CA7B4:
	JSL.l SMW_PlayerGFXRt_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CreditsFadeOut(Address)
namespace SMW_CreditsFadeOut
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

DATA_0CAB1B:
	db $FE,$02

DATA_0CAB1D:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $00,$FE
else
	db $00,$E0
endif

Sub:
	LDX.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	LDA.b #$33
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDY.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	BNE.b CODE_0CAB2F
	CPX.b #$00
	BEQ.b CODE_0CAB3B
CODE_0CAB2F:
	CPY.b #$06
	BCC.b CODE_0CAB39
	BNE.b CODE_0CAB3B
	CPX.b #$00
	BNE.b CODE_0CAB3B
CODE_0CAB39:
	LDA.b #$30
CODE_0CAB3B:
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	CMP.w DATA_0CAB1D,x
	BNE.b CODE_0CAB64
	CPX.b #$00
	BEQ.b CODE_0CAB6B
	LDX.b #$00
	STX.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	CPY.b #$06
	BCC.b CODE_0CAB57
	INC.w !RAM_SMW_Misc_GameMode
	BRA.b CODE_0CAB6B

CODE_0CAB57:
	PHA
	PHX
	INC.w !RAM_SMW_Flag_UpdateCreditsBackground
	INC.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	JSR.w CODE_0CABB2
	PLX
	PLA
CODE_0CAB64:
	CLC
	ADC.w DATA_0CAB1B,x
	STA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
CODE_0CAB6B:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	REP.b #$30
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	AND.w #$00FF
	STA.w !RAM_SMW_Misc_ScratchRAM0110
	LDX.w #$0000
	LDY.w #$00FE
	LDA.w #$00FF

-:
	CPX.w !RAM_SMW_Misc_ScratchRAM0110
	BCC.b +
	BEQ.b +
	LDA.w #$FF00

+:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$DE,y
	CPX.w #$001E
	BMI.b +
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable-$1E,x

+:
	INX
	INX
	DEY
	DEY
	BNE.b -
	SEP.b #$30
else
	REP.b #$20
	LDX.b #$00
	LDY.b #$E0
	LDA.w #$00FF
CODE_0CAB74:
	CPX.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	BCC.b CODE_0CAB7C
	LDA.w #$FF00
CODE_0CAB7C:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$DE,y
	INX
	INX
	DEY
	DEY
	BNE.b CODE_0CAB74
	SEP.b #$20
endif
	LDA.b #$13
	STA.w !REGISTER_MainScreenWindowMask
	STA.w !REGISTER_SubScreenWindowMask
	LDA.b #$22
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	LDA.b #$80
	STA.w !RAM_SMW_Mirror_HDMAEnable
	RTS

BGPaletteIndex:
	db SMW_GlobalPalettes_Background_Setting00-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting01-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting02-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting03-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting04-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting05-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting06-SMW_GlobalPalettes_Background
	db SMW_GlobalPalettes_Background_Setting07-SMW_GlobalPalettes_Background

SkyColorSetting:
	db $06,$00,$00,$02,$05,$06,$00

BGPaletteSetting:
	db $03,$03,$07,$00,$01,$02,$00

CODE_0CABB2:
	SEP.b #$30
	LDA.b #$0C
	STA.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors+$0C
	LDA.b #$02
	STA.w !RAM_SMW_Palettes_DynamicPaletteCGRAMAddress
	LDA.b #$12
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors+$0D
	REP.b #$30
	LDA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	AND.w #$00FF
	TAY
	LDA.w SkyColorSetting,y
	AND.w #$000F
	ASL
	TAX
	LDA.l SMW_GlobalPalettes_Sky,x
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w #SMW_GlobalPalettes_Background
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w BGPaletteSetting,y
	AND.w #$000F
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BGPaletteIndex,x
else
	LDA.w BGPaletteIndex,x
endif
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.w #SMW_GlobalPalettes_Main>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
else
	STZ.b !RAM_SMW_Misc_ScratchRAM02 		; Note: #!BANK_00
endif
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
CODE_0CAC01:
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w #$0005
CODE_0CAC06:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,x
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	DEY
	BPL.b CODE_0CAC06
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.w #$000E
	STA.b !RAM_SMW_Misc_ScratchRAM04
	DEC.b !RAM_SMW_Misc_ScratchRAM08
	BPL.b CODE_0CAC01
	LDA.w #$0000
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,x
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode27_LoadTheEnd(Address)
namespace SMW_GameMode27_LoadTheEnd
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_ClearOverworldAndCutsceneRAM_Main
	JSR.w SMW_SetStandardPPUSettings_Main
	JSR.w SMW_UploadBigLayer3LettersToVRAM_Main
	LDA.b #$19
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	LDA.b #$03
	STA.w !RAM_SMW_Misc_BackgroundColorSetting
	LDA.b #$03
	STA.w !RAM_SMW_Misc_BGPaletteSetting
	JSR.w SMW_UploadGraphicsFiles_Main
	JSR.w SMW_BufferPalettesRoutines_Levels
	LDX.b #$0B
CODE_009660:
	LDA.w SMW_GlobalPalettes_EndingLuigi,x
	STA.w SMW_PaletteMirror[$D2].LowByte,x
	LDA.w SMW_GlobalPalettes_EndingMario,x
	STA.w SMW_PaletteMirror[$E2].LowByte,x
	LDA.w SMW_GlobalPalettes_EndingToadstool,x
	STA.w SMW_PaletteMirror[$F2].LowByte,x
	DEX
	BPL.b CODE_009660
	JSR.w SMW_UpdateEntirePalette_Main
	LDA.b #!Define_SMW_StripeImage_TheEndText
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
	JSR.w SMW_LoadStripeImage_Sub
	JSL.l SMW_DrawingTheEndMarioLuigiAndPeach_Main
	JSR.w SMW_CompressOAMTileSizeBuffer_Main
	LDX.b #$14
	LDY.b #$00
	JMP.w SMW_GameMode23_LoadEnemyRollcallScreen_CODE_009622
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_DrawingTheEndMarioLuigiAndPeach(Address)
namespace SMW_DrawingTheEndMarioLuigiAndPeach
%InsertMacroAtXPosition(<Address>)

TileData:
	db $53,$6A,$80,$3C		;\ Mario
	db $63,$6A,$82,$3C		;|
	db $53,$7A,$A0,$3C		;|
	db $63,$7A,$A2,$3C		;|
	db $53,$8A,$84,$3C		;|
	db $63,$8A,$86,$3C		;|
	db $53,$9A,$A4,$3C		;|
	db $63,$9A,$A6,$3C		;|
	db $53,$AA,$88,$3C		;|
	db $63,$AA,$8A,$3C		;/
	db $8D,$5A,$A8,$3A		;\ Luigi
	db $9D,$5A,$AA,$3A		;|
	db $8D,$6A,$8C,$3A		;|
	db $9D,$6A,$8E,$3A		;|
	db $8D,$7A,$AC,$3A		;|
	db $9D,$7A,$AE,$3A		;|
	db $8D,$8A,$63,$3A		;|
	db $9D,$8A,$65,$3A		;|
	db $8D,$9A,$48,$3A		;|
	db $9D,$9A,$68,$3A		;|
	db $8D,$AA,$6B,$3A		;|
	db $9D,$AA,$6D,$3A		;/
	db $78,$58,$4D,$3E		;\ Peach
	db $70,$68,$E0,$3F		;|
	db $80,$68,$C4,$3F		;|
	db $70,$78,$4A,$3F		;|
	db $80,$78,$4C,$3F		;|
	db $70,$88,$6A,$3F		;|
	db $80,$88,$6C,$3F		;|
	db $68,$98,$AB,$3F		;|
	db $78,$98,$C8,$3F		;|
	db $88,$98,$E6,$3F		;|
	db $68,$A8,$E8,$3F		;|
	db $78,$A8,$EA,$3F		;|
	db $88,$A8,$EC,$3F		;/

Main:
	PHB
	PHK
	PLB
	LDX.b #$00
	TXY
CODE_0CAAE5:
	LDA.w TileData,y
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w TileData+$01,y
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.w TileData+$02,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w TileData+$03,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	INX
	INX
	INX
	INX
	TXY
	CPY.b #$8C
	BNE.b CODE_0CAAE5
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode1D_LoadYoshisHouse(Address)
namespace SMW_GameMode1D_LoadYoshisHouse
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$28
	LDY.b #!Define_SMW_Overworld_YoshisIsland
	JSR.w SMW_GameMode11_LoadSublevel_CODE_0096CF
	DEC.w !RAM_SMW_Misc_GameMode
	LDA.b #$16
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	JSR.w SMW_GameMode12_PrepareLevel_Main
	DEC.w !RAM_SMW_Misc_GameMode
	JSR.w SMW_TurnOffIO_Main
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_UploadGraphicsFiles_Layer3
	JSL.l InitializeYoshisHouseSceneRAM
	JSR.w SMW_GameMode23_LoadEnemyRollcallScreen_CODE_00961E
GameMode1FEntry:
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	JSL.l Bank0C
	INC.b !RAM_SMW_Counter_LocalFrames
#LM160Hijack_LevelExAnimations1:
	JSL.l SMW_LevelTileAnimations_Main
	JMP.w SMW_CompressOAMTileSizeBuffer_Main
namespace off
	%SetDuplicateOrNullPointer(SMW_GameMode1D_LoadYoshisHouse_GameMode1FEntry, SMW_GameMode1F_ShowYoshisHouse_Main)
endmacro

macro ROUTINE_RT01_SMW_GameMode1D_LoadYoshisHouse(Address)
namespace SMW_GameMode1D_LoadYoshisHouse
%InsertMacroAtXPosition(<Address>)

Bank0C:
	PHB
	PHK
	PLB
	JSR.w DrawEndingYoshisHouseDecorations
	JSR.w CODE_0CA1D4
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode1D_LoadYoshisHouse(Address)
namespace SMW_GameMode1D_LoadYoshisHouse
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $FF,$02,$04,$06,$08,$06,$08,$06,$08,$06,$08,$04,$02,$FF
	db $20,$22,$24,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$24,$22,$20
	db $40,$42,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$42,$40

Prop:
	db $FF,$37,$37,$35,$35,$37,$37,$39,$39,$3B,$3B,$77,$77,$FF
	db $37,$37,$37,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$77,$77,$77
	db $37,$37,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$77,$77

DrawEndingYoshisHouseDecorations:
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$2F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$90
	LDY.b #$00
CODE_0CA0F1:
	LDA.w Tiles,y
	CMP.b #$FF
	BEQ.b CODE_0CA11A
	STA.w SMW_OAMBuffer[$40].Tile,x
	LDA.w Prop,y
	STA.w SMW_OAMBuffer[$40].Prop,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	PLX
	INX
	INX
	INX
	INX
CODE_0CA11A:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$F0
	BNE.b CODE_0CA130
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0CA130:
	INY
	CPY.b #$2A
	BNE.b CODE_0CA0F1
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_GameMode1D_LoadYoshisHouse(Address)
namespace SMW_GameMode1D_LoadYoshisHouse
%InsertMacroAtXPosition(<Address>)

CODE_0CA1D4:
	JSR.w SMW_CreditsFadeOut_Sub
	LDA.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	JSL.l SMW_ExecutePtr_Long

PtrsLong0CA1DE:
	dl SMW_WalkingIntoYoshisHouseDuringEnding_Main
	dl SMW_YoshisWatchInExcitementDuringEnding_Main
	dl SMW_HatchYoshiEggsDuringEnding_Main
	dl SMW_SlideInThankYouDuringEnding_Main
	dl SMW_EveryoneCheeringDuringEnding_Main
namespace off
endmacro

macro ROUTINE_RT04_SMW_GameMode1D_LoadYoshisHouse(Address)
namespace SMW_GameMode1D_LoadYoshisHouse
%InsertMacroAtXPosition(<Address>)

EggInitialXPos:
	db $40,$50,$60,$70,$80,$90,$A0

EggInitialYPos:
	db $AF,$AB,$AF,$AB,$AF,$AB,$AF

EggYSpeed:
	db $F6,$00,$F6,$00,$F6,$00,$F6

InitializeYoshisHouseSceneRAM:
	PHB
	PHK
	PLB
	LDA.b #$01
	STA.w !RAM_SMW_Sprites_DrawEndingYoshis
	STZ.b !RAM_SMW_Player_FacingDirection
	STZ.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_EndingPlayerXPosLo
	LDA.b #$01
	STA.w !RAM_SMW_Sprites_EndingPlayerXPosHi
	STZ.w !RAM_SMW_Sprites_EndingPlayerSubXPos
	STZ.w !RAM_SMW_Sprites_EndingYoshisSubXPos
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubXPos+$07
	LDA.b #$06
	STA.w !RAM_SMW_Sprites_EndingPeachWalkBobbingTimer
	STZ.w !RAM_SMW_Sprites_EndingPeachWalkBobbingFlag
	STZ.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.b #$06
	STA.w !RAM_SMW_Sprites_WaitBeforeNextEndingYoshiDuckFrame
	LDA.b #$F0
	STA.w !RAM_SMW_Sprites_EndingYoshisYSpeed
	LDA.b #$9F
	STA.w !RAM_SMW_Sprites_EndingYoshisYPosLo
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$FE
else
	LDA.b #$E2
endif
	STA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	STA.w !RAM_SMW_Pointer_CreditsBackgroundIndex
	LDA.b #!Define_SMW_CreditsMusic_TheYoshisAreHome
	STA.w !RAM_SMW_IO_MusicCh1
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot-$01
	LDY.b #$06
CODE_0CA414:
	LDA.w EggInitialYPos,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,x
	LDA.w EggInitialXPos,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,x
	LDA.w EggYSpeed,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	LDA.b #$01
	STA.w !RAM_SMW_CutsceneSprites_CreditsEgg_YAcceleration,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi,x
	DEY
	DEX
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$08
	BNE.b CODE_0CA414
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_WalkingIntoYoshisHouseDuringEnding(Address)
namespace SMW_WalkingIntoYoshisHouseDuringEnding
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_ProcessCheeringYoshis_Main
	LDA.w !RAM_SMW_Timer_WaitBeforeMessageWindowSizeChange
	BEQ.b CODE_0CA1F6
	RTS

CODE_0CA1F6:
	LDA.b #$60
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b #$01
	STA.b !RAM_SMW_Player_YPosHi
	LDX.b #$00
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosLo,x
	CMP.b #$70
	BNE.b CODE_0CA24F
	STZ.w !RAM_SMW_Yoshi_StrayYoshiFlag
	LDA.b #$0F
	STA.w !RAM_SMW_Player_CurrentPose
	JSR.w SMW_HandlePlayerPoseAndAnimationTimersDuringEnding_CODE_0CA764
	JSR.w SMW_SpawnEndingYoshiSpriteAndDrawPlayer_CODE_0CA7B4
	LDA.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	BNE.b CODE_0CA22D
	LDA.b !RAM_SMW_NorSpr035_Yoshi_EndingXPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.b #$00
	LDX.b #$B4
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_DrawCameraFacingEndingYoshis_GreenYoshi
CODE_0CA22D:
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$03							;\ Optimization: LDY.b #$0C?
	ASL								;|
	ASL								;|
	TAY								;/
	LDX.b #$A4
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_Peach
	BRL.w CODE_0CA2C3

CODE_0CA24F:
	LDA.b #$F8
	STA.w !RAM_SMW_Sprites_EndingPlayerXSpeed,x
	JSR.w SMW_UpdateCutsceneSpritePosition_X
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosLo,x
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosHi,x
	STA.b !RAM_SMW_Player_XPosHi
	LDA.b #$01
	STA.b !RAM_SMW_Player_CurrentPowerUp
	LDA.b #$08
	STA.w !RAM_SMW_Player_XSpeed
	JSR.w SMW_HandlePlayerPoseAndAnimationTimersDuringEnding_Main
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosLo
	CLC
	ADC.b #$30
	STA.b !RAM_SMW_NorSpr035_Yoshi_EndingXPosLo
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr035_Yoshi_EndingXPosHi
	LDA.b #$60
	STA.b !RAM_SMW_NorSpr035_Yoshi_EndingYPosLo
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr035_Yoshi_EndingYPosHi
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr_OAMIndex
	JSR.w SMW_SpawnEndingYoshiSpriteAndDrawPlayer_Main
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.w !RAM_SMW_Sprites_EndingPeachWalkBobbingTimer
	BPL.b CODE_0CA2B5
	LDA.b #$06
	STA.w !RAM_SMW_Sprites_EndingPeachWalkBobbingTimer
	LDA.w !RAM_SMW_Sprites_EndingPeachWalkBobbingFlag
	EOR.b #$01
	STA.w !RAM_SMW_Sprites_EndingPeachWalkBobbingFlag
CODE_0CA2B5:
	LDA.w !RAM_SMW_Sprites_EndingPeachWalkBobbingFlag
	CLC
	ADC.b #$03
	ASL
	ASL
	TAY
	LDX.b #$A4
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_Peach
CODE_0CA2C3:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$07
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi+$07
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w #$0030
	BNE.b CODE_0CA2E0
	LDA.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	BNE.b CODE_0CA2FC
	INC.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	BRA.b CODE_0CA2FC

CODE_0CA2E0:
	SEP.b #$20
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot-$01
CODE_0CA2E4:
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$03
	BCC.b CODE_0CA2EF
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$0B
	CMP.b #$98
	BEQ.b CODE_0CA2F7
CODE_0CA2EF:
	LDA.b #$F8
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	JSR.w SMW_UpdateCutsceneSpritePosition_X
CODE_0CA2F7:
	DEX
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$08
	BNE.b CODE_0CA2E4
CODE_0CA2FC:
	SEP.b #$20
	LDA.b #$AF
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_MakeCreditsEggsBounce_Main
	LDA.b #$88
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_DrawEndingBabyYoshis_Main
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ProcessCheeringYoshis(Address)
namespace SMW_ProcessCheeringYoshis
%InsertMacroAtXPosition(<Address>)

DATA_0CA30D:
	db $00,$01,$02,$01

DATA_0CA311:
	db $00,$01,$01,$01

Main:
	LDX.b #$01
	LDA.w !RAM_SMW_Sprites_EndingYoshisYSpeed-$01,x
	CLC
	ADC.b #$01
	STA.w !RAM_SMW_Sprites_EndingYoshisYSpeed-$01,x
	JSR.w SMW_UpdateCutsceneSpritePosition_Y
	LDA.w !RAM_SMW_Sprites_EndingYoshisYPosLo-$01,x
	CMP.b #$9F
	BCC.b CODE_0CA334
	LDA.b #$F0
	STA.w !RAM_SMW_Sprites_EndingYoshisYSpeed-$01,x
	LDA.b #$9F
	STA.w !RAM_SMW_Sprites_EndingYoshisYPosLo-$01,x
CODE_0CA334:
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_EndingYoshisYSpeed
	BPL.b CODE_0CA349
	CMP.b #$F4
	BCC.b CODE_0CA355
	LDY.b #$01
	CMP.b #$F8
	BCC.b CODE_0CA355
	LDY.b #$02
	BRA.b CODE_0CA349 						; Optimization: BRA to the next instruction...

CODE_0CA349:
	CMP.b #$0C
	BCS.b CODE_0CA355
	LDY.b #$01
	CMP.b #$08
	BCS.b CODE_0CA355
	LDY.b #$02
CODE_0CA355:
	STY.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w !RAM_SMW_Sprites_DrawEndingYoshis
	BEQ.b Return0CA3B3
	CMP.b #$01
	BNE.b Return0CA3B3
	LDA.b #$18
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Sprites_EndingYoshisYPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w DATA_0CA30D,y
	CLC
	ADC.b #$07
	ASL
	ASL
	TAY
	LDX.b #$D0
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_RedYoshi
	LDA.b #$D4
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Sprites_EndingYoshisYPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w DATA_0CA30D,y
	CLC
	ADC.b #$0A
	ASL
	ASL
	TAY
	LDX.b #$F0
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_YellowYoshi
	LDY.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w SMW_ProcessCheeringYoshis_DATA_0CA311,y
	ASL
	TAY
	LDA.b #$50
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_EndingYoshisYPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$F0
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_DrawCameraFacingEndingYoshis_BlueYoshi
Return0CA3B3:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_YoshisWatchInExcitementDuringEnding(Address)
namespace SMW_YoshisWatchInExcitementDuringEnding
%InsertMacroAtXPosition(<Address>)

DATA_0CA439:
	db $00,$02,$02

Main:
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	CMP.b #$08
	BCS.b CODE_0CA45C
	JSR.w SMW_ProcessCheeringYoshis_Main
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	BNE.b CODE_0CA457
	LDA.w !RAM_SMW_Sprites_EndingYoshisYPosLo
	CMP.b #$9F
	BNE.b CODE_0CA457
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
CODE_0CA457:
	LDY.b #$00
	BRL.w CODE_0CA510

CODE_0CA45C:
	DEC.w !RAM_SMW_Sprites_WaitBeforeNextEndingYoshiDuckFrame
	BPL.b CODE_0CA478
	LDA.b #$06
	STA.w !RAM_SMW_Sprites_WaitBeforeNextEndingYoshiDuckFrame
	INC.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	CMP.b #$0B
	BNE.b CODE_0CA478
	LDA.b #$0A
	STA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	INC.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
CODE_0CA478:
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	BNE.b CODE_0CA4B6
	LDA.b #$18
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	CLC
	ADC.b #$07
	ASL
	ASL
	TAY
	LDX.b #$D0
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_RedYoshi
	LDA.b #$D4
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	CLC
	ADC.b #$0A
	ASL
	ASL
	TAY
	LDX.b #$F0
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_YellowYoshi
	BRL.w CODE_0CA4E9

CODE_0CA4B6:
	LDA.b #$18
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$A7
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	DEC
	ASL
	ASL
	TAY
	LDX.b #$C0
	JSR.w SMW_DrawLeaningEndingYoshis_Main
	LDA.b #$CC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$A7
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	DEC
	CLC
	ADC.b #$02
	ASL
	ASL
	TAY
	LDX.b #$D8
	JSR.w SMW_DrawLeaningEndingYoshis_Main
CODE_0CA4E9:
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	TAY
	LDA.w DATA_0CA439,y
	ASL
	TAY
	LDA.b #$50
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$F0
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_DrawCameraFacingEndingYoshis_BlueYoshi
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	AND.b #$03
	TAY
	LDA.w DATA_0CA439,y
	ASL
	TAY
CODE_0CA510:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_EndingXPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$B4
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_DrawCameraFacingEndingYoshis_GreenYoshi
	BRL.w SMW_WalkingIntoYoshisHouseDuringEnding_CODE_0CA1F6
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_HatchYoshiEggsDuringEnding(Address)
namespace SMW_HatchYoshiEggsDuringEnding
%InsertMacroAtXPosition(<Address>)

DATA_0CA524:
	db $20,$01,$10,$40,$08,$02,$04

DATA_0CA52B:
	db $10,$60,$20,$00,$30,$50,$40

Main:
	LDA.w !RAM_SMW_Flag_EndingEggIsHatching
	BEQ.b CODE_0CA53A
	BRL.w CODE_0CA5CB

CODE_0CA53A:
	LDA.b #$98
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed+$03
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed+$04
	LDA.b #$D4
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed+$05
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed+$06
	LDY.w !RAM_SMW_Counter_NumberOfEndingEggsHatched
	LDA.w DATA_0CA52B,y
	LSR
	LSR
	LSR
	LSR
	TAX
	INC
	STA.w !RAM_SMW_Flag_EndingEggIsHatching
	LDA.b #$C0
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed+$07,x
	LDA.b #$04
	STA.w !RAM_SMW_Sprites_CutsceneSpriteTable7E0AF6+$07,x
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo+$07,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo+$03
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo+$04
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo+$05
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo+$06
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi+$03
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi+$04
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi+$05
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi+$06
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$07,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$03
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$05
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$04
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$06
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi+$03
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi+$04
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi+$05
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi+$06
	LDA.w DATA_0CA524,y
	TSB.w !RAM_SMW_Sprites_WhichEndingEggsHatched
	INC.w !RAM_SMW_Counter_NumberOfEndingEggsHatched
	LDA.w !RAM_SMW_Counter_NumberOfEndingEggsHatched
	CMP.b #$08
	BEQ.b CODE_0CA5B6
	LDA.b #!Define_SMW_Sound1DFC_EggHatch
	STA.w !RAM_SMW_IO_SoundCh3
	BRA.b CODE_0CA5CB

CODE_0CA5B6:
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi+$02
	LDA.b #$80
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo+$02
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed+$02
	LDA.b #!Define_SMW_CreditsMusic_CastList
	STA.w !RAM_SMW_IO_MusicCh1
	INC.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	BRA.b CODE_0CA5CE

CODE_0CA5CB:
	JSR.w CODE_0CA5DE
CODE_0CA5CE:
	JSR.w SMW_YoshisWatchInExcitementDuringEnding_CODE_0CA4B6
	RTS

DATA_0CA5D2:
	db $C8,$C8,$D8,$D8

DATA_0CA5D6:
	db $26,$66,$26,$66

DATA_0CA5DA:
	db $E8,$18,$F4,$0C

CODE_0CA5DE:
	LDA.w !RAM_SMW_Flag_EndingEggIsHatching
	BEQ.b Return0CA65A
	LDX.b #$06
CODE_0CA5E5:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	CLC
	ADC.b #$06
	CMP.b #$70
	BEQ.b CODE_0CA5F2
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
CODE_0CA5F2:
	TXA
	SEC
	SBC.b #$03
	TAY
	LDA.w DATA_0CA5DA,y
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	JSR.w SMW_UpdateCutsceneSpritePosition_Y
	JSR.w SMW_UpdateCutsceneSpritePosition_X
	DEX
	CPX.b #$02
	BNE.b CODE_0CA5E5
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo+$03
	AND.b #$F0
	CMP.b #$F0
	BNE.b CODE_0CA614
	STZ.w !RAM_SMW_Flag_EndingEggIsHatching
CODE_0CA614:
	LDX.b #$00
	LDY.b #$06
CODE_0CA618:
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosHi,y
	BNE.b CODE_0CA655
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosHi,y
	BNE.b CODE_0CA655
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,y
	CMP.b #$F0
	BCS.b CODE_0CA655
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,y
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,y
	STA.w SMW_OAMBuffer[$00].YDisp,x
	PHY
	TYA
	SEC
	SBC.b #$03
	TAY
	LDA.w DATA_0CA5D2,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w DATA_0CA5D6,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	PLY
	PHX
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	INX
	INX
	INX
	INX
CODE_0CA655:
	DEY
	CPY.b #$02
	BNE.b CODE_0CA618
Return0CA65A:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SlideInThankYouDuringEnding(Address)
namespace SMW_SlideInThankYouDuringEnding
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$02
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	SEC
	SBC.b #$04
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	JSR.w SMW_UpdateCutsceneSpritePosition_X
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,x
	CMP.b #$F8
	BCC.b CODE_0CA67A
	INC.w !RAM_SMW_Pointer_CurrentYoshiHouseSceneProcess
	LDA.b #$F0
	STA.w !RAM_SMW_Timer_WaitBeforeFadingOutYoshisHouseScene
	LDA.b #$00
CODE_0CA67A:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	STZ.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b #$3F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.b #$00
	LDX.b #$50
	JSR.w SMW_DrawEndingThankYou_Entry2
	DEC.w !RAM_SMW_Sprites_WaitBeforeNextEndingYoshiDuckFrame
	BPL.b CODE_0CA6AC
	LDA.b #$06
	STA.w !RAM_SMW_Sprites_WaitBeforeNextEndingYoshiDuckFrame
	DEC.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	CMP.b #$07
	BNE.b CODE_0CA6AC
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
CODE_0CA6AC:
	JSR.w SMW_YoshisWatchInExcitementDuringEnding_CODE_0CA478
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_EveryoneCheeringDuringEnding(Address)
namespace SMW_EveryoneCheeringDuringEnding
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_DrawEndingThankYou_Main
	JSR.w SMW_ProcessCheeringYoshis_Main
	JSR.w SMW_WalkingIntoYoshisHouseDuringEnding_CODE_0CA2FC
	LDA.b #$60
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b #$01
	STA.b !RAM_SMW_Player_YPosHi
	STZ.w !RAM_SMW_Yoshi_StrayYoshiFlag
	LDA.b #$26
	STA.w !RAM_SMW_Player_CurrentPose
	JSR.w SMW_HandlePlayerPoseAndAnimationTimersDuringEnding_CODE_0CA764
	JSR.w SMW_SpawnEndingYoshiSpriteAndDrawPlayer_CODE_0CA7B4
	LDY.w !RAM_SMW_Sprites_CheeringYoshiAnimationFrame
	LDA.w SMW_ProcessCheeringYoshis_DATA_0CA311,y
	ASL
	TAY
	LDA.b !RAM_SMW_NorSpr035_Yoshi_EndingXPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_EndingYoshisYPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$B4
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_DrawCameraFacingEndingYoshis_GreenYoshi
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_EndingPlayerXPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$9F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$08
	LSR
	LSR
	LSR
	CLC
	ADC.b #$05
	ASL
	ASL
	TAY
	LDX.b #$A4
	JSR.w SMW_DrawCreditsPeachRedAndYellowYoshi_Peach
	DEC.w !RAM_SMW_Timer_WaitBeforeFadingOutYoshisHouseScene
	LDA.w !RAM_SMW_Timer_WaitBeforeFadingOutYoshisHouseScene
	BNE.b Return0CA720
	INC.w !RAM_SMW_Misc_GameMode
	LDA.b #$40
	STA.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
Return0CA720:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode23_LoadEnemyRollcallScreen(Address)
namespace SMW_GameMode23_LoadEnemyRollcallScreen
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_ClearOverworldAndCutsceneRAM_Main
	JSR.w SMW_SetStandardPPUSettings_Main
	JSL.l SMW_GetLayer1And2PointersForEnemyRollcall_Main
	JSL.l SMW_LoadSublevel_Main
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	CMP.b #$0A
	BNE.b NotReznorScreen
	LDA.b #$13
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	BRA.b IsReznorScreen

NotReznorScreen:
	CMP.b #$0C
	BNE.b NotBowserScreen
	LDA.b #$17
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
NotBowserScreen:
IsReznorScreen:
#LM000Hijack_Unknown0095E9:
	JSR.w SMW_UploadGraphicsFiles_Main
	JSR.w SMW_BufferPalettesRoutines_Levels
	JSL.l SMW_InitializeLevelLayer1And2Tilemaps_Main
	JSR.w SMW_InitializeLevelTileAnimations_Main
	JSL.l SMW_InitializeEnemyRollcallLayerPositions_Main
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	CMP.b #$0C
	BNE.b NoBowserScreenPalette
	LDX.b #$0B
BowserScreenPaletteBufferLoop:
	LDA.w SMW_GlobalPalettes_BowserEnd,x
	STA.w SMW_PaletteMirror[$82].LowByte,x
	LDA.w SMW_GlobalPalettes_BowserEnd+$0C,x
	STA.w SMW_PaletteMirror[$92].LowByte,x
	DEX
	BPL.b BowserScreenPaletteBufferLoop
NoBowserScreenPalette:
	JSR.w SMW_UpdateEntirePalette_Main
	JSR.w SMW_SetEnemyRollcallParallaxHDMA_Init
	JSR.w SMW_LoadStripeImage_Sub
	JSR.w SMW_GameMode25_ShowEnemyRollcallScreen_Main
CODE_00961E:
	LDX.b #$15
	LDY.b #$02
CODE_009622:
	JSR.w SMW_SetKeepGameModeActiveTimer_OneFrame
	LDA.b #!BGModeAndTileSizeSetting_Mode01Enable|!BGModeAndTileSizeSetting_Mode01Layer3Priority
	STA.b !RAM_SMW_Mirror_BGModeAndTileSizeSetting
	JMP.w SMW_GameMode00_LoadNintendoPresents_CODE_0093EA
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_InitializeEnemyRollcallLayerPositions(Address)
namespace SMW_InitializeEnemyRollcallLayerPositions
%InsertMacroAtXPosition(<Address>)

DATA_0CADB5:
	db $28,$28,$44,$28,$38,$20,$28,$20
	db $08,$28,$7C,$68,$28

InitialLayer2YPos:
	dw $0000,$0088,$00E0,$00C0
	dw $00E8,$0000,$00A0,$0050
	dw $00B0,$00E0,$0018,$00E0
	dw $0000

if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
SpecialWorldEnemyNamePtrs:
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused1
	dw SMW_CreditsEnemyNames_SpecialWorld_Pumpkin
	dw SMW_CreditsEnemyNames_SpecialWorld_Pidget
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused2
	dw SMW_CreditsEnemyNames_SpecialWorld_MaskKoopa
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused3
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused4
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused5
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused6
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused7
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused8
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused9
	dw SMW_CreditsEnemyNames_SpecialWorld_Unused10
endif

Main:
	PHB
	PHK
	PLB
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	TAY
	ASL
	TAX
	CLC
	ADC.w !RAM_SMW_Counter_EnemyRollcallScreen
	CLC
	ADC.b #!Define_SMW_StripeImage_CreditsEnemyNames
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	PHY
	PHX
	JSL.l SMW_LoadStripeImage_Main
	LDA.w !RAM_SMW_Overworld_LevelTileSettings+!Define_SMW_LevelID_ChangeSP2GFX
	BPL.b CODE_0CAE48
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	ASL
	TAY
	LDA.w SpecialWorldEnemyNamePtrs,y
	STA.w !RAM_SMW_Misc_ScratchRAM00
	LDA.w SpecialWorldEnemyNamePtrs+$01,y
	STA.w !RAM_SMW_Misc_ScratchRAM01
	LDA.b #SMW_CreditsEnemyNames_Main>>16
	STA.w !RAM_SMW_Misc_ScratchRAM02
	LDY.b #$00
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_0CAE30:
	REP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INY
	INY
	INX
	INX
	CMP.w #$FFFF
	BNE.b CODE_0CAE30
	TXA
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$20
CODE_0CAE48:
	PLX
	PLY
endif
	LDA.w DATA_0CADB5,y
	STA.w SMW_ParallaxScrollHDMA[$00].Scanline2
	STA.w SMW_ParallaxScrollHDMA[$01].Scanline2
	STA.w SMW_ParallaxScrollHDMA[$02].Scanline2
	LDA.b #$88
	SEC
	SBC.w DATA_0CADB5,y
	STA.w SMW_ParallaxScrollHDMA[$00].Scanline3
	STA.w SMW_ParallaxScrollHDMA[$01].Scanline3
	STA.w SMW_ParallaxScrollHDMA[$02].Scanline3
	REP.b #$20
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l InitialLayer2YPos,x
else
	LDA.w InitialLayer2YPos,x
endif
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	AND.w #$00FF
	CMP.w #$000C
	BNE.b CODE_0CAE88
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STZ.b !RAM_SMW_Mirror_Layer3XPosLo
	STZ.w !RAM_SMW_Misc_Layer1XPosLo
	STZ.w !RAM_SMW_Misc_Layer2XPosLo
	STZ.w !RAM_SMW_Misc_Layer3XDispLo
	BRA.b CODE_0CAEA3

CODE_0CAE88:
	LDA.w #$FF00
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	LDA.w #$0100
	STA.w !RAM_SMW_Misc_Layer1XPosLo
	STA.w !RAM_SMW_Misc_Layer3XDispLo
	LDA.w #$FF80
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDA.w #$0080
	STA.w !RAM_SMW_Misc_Layer2XPosLo
CODE_0CAEA3:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.w #$00A0
else
	LDA.w #$00FF
endif
	STA.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
	SEP.b #$20
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GetLayer1And2PointersForEnemyRollcall(Address)
namespace SMW_GetLayer1And2PointersForEnemyRollcall
%InsertMacroAtXPosition(<Address>)

Screen01:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen01_Forest, SMW_U, LAYER_1)
Screen02:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen02_Sky, SMW_U, LAYER_1)
Screen03:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen03_Plains1, SMW_U, LAYER_1)
Screen04:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen04_Mountain, SMW_U, LAYER_1)
Screen05:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen05_Plains2, SMW_U, LAYER_1)
Screen06:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen06_Cave, SMW_U, LAYER_1)
Screen07:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen07_Underwater, SMW_U, LAYER_1)
Screen08:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen08_GhostHouse, SMW_U, LAYER_1)
Screen09:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen09_Castle1, SMW_U, LAYER_1)
Screen10:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen10_Castle2, SMW_U, LAYER_1)
Screen11:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen11_Reznor, SMW_U, LAYER_1)
Screen12:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen12_MechaKoopas, SMW_U, LAYER_1)
Screen13:
	%SMW_InsertOriginalLevelData(EnemyRollcallScreen13_BowserAndKoopalings, SMW_U, LAYER_1)

Layer1Ptrs:
	dw Screen01,Screen02,Screen03,Screen04
	dw Screen05,Screen06,Screen07,Screen08
	dw Screen09,Screen10,Screen11,Screen12
	dw Screen13

Layer2Ptrs:
	dw SMW_Backgrounds_Layer2_Forest,SMW_Backgrounds_Layer2_Clouds,SMW_Backgrounds_Layer2_Rocks2,SMW_Backgrounds_Layer2_Mountains
	dw SMW_Backgrounds_Layer2_SmallHills,SMW_Backgrounds_Layer2_Cave,SMW_Backgrounds_Layer2_Water,SMW_Backgrounds_Layer2_GhostHouse
	dw SMW_Backgrounds_Layer2_Castle,SMW_Backgrounds_Layer2_Castle2,SMW_Backgrounds_Layer2_Castle,SMW_Backgrounds_Layer2_Castle2
	dw Screen13

Main:
;$0CAD8C
	PHB
	PHK
	PLB
	INC.w !RAM_SMW_Counter_EnemyRollcallScreen
	LDX.b #$FF
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	CMP.b #$0C
	BNE.b NotBowserScreen
	LDX.b #SMW_Backgrounds_Layer2>>16
NotBowserScreen:
	ASL
	TAY
	LDA.b #Layer1Ptrs>>16
	STA.b !RAM_SMW_Pointer_Layer1DataBank
	STX.b !RAM_SMW_Pointer_Layer2DataBank
	REP.b #$20
	LDA.w Layer1Ptrs,y
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.w Layer2Ptrs,y
	STA.b !RAM_SMW_Pointer_Layer2DataLo
	SEP.b #$20
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode25_ShowEnemyRollcallScreen(Address)
namespace SMW_GameMode25_ShowEnemyRollcallScreen
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Player_NumberOfTilesToUpdate
	JSR.w SMW_SetEnemyRollcallParallaxHDMA_Main
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	JSL.l Bank0C
	JMP.w SMW_CompressOAMTileSizeBuffer_Main
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode25_ShowEnemyRollcallScreen(Address)
namespace SMW_GameMode25_ShowEnemyRollcallScreen
%InsertMacroAtXPosition(<Address>)

Bank0C:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode25_ShowEnemyRollcallScreen(Address)
namespace SMW_GameMode25_ShowEnemyRollcallScreen
%InsertMacroAtXPosition(<Address>)

Sub:
	SEP.b #$20
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	CMP.b #$0C
	BNE.b CODE_0CAEBC
	DEC.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
	JMP.w CODE_0CAEF8

CODE_0CAEBC:
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.w !RAM_SMW_Misc_Layer1XPosLo
	BNE.b CODE_0CAED0
	LDA.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
	BEQ.b CODE_0CAED0
	DEC.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
	JMP.w CODE_0CAF0C

CODE_0CAED0:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0002
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	LDA.w !RAM_SMW_Misc_Layer1XPosLo
	SEC
	SBC.w #$0002
	STA.w !RAM_SMW_Misc_Layer1XPosLo
	STA.w !RAM_SMW_Misc_Layer3XDispLo
	INC.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	DEC.w !RAM_SMW_Misc_Layer2XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	AND.w !RAM_SMW_Misc_Layer1XPosLo
	AND.w #$00FF
	SEP.b #$20
	BNE.b CODE_0CAF0C
CODE_0CAEF8:
	LDA.w !RAM_SMW_Timer_WaitBeforeNextEnemyRollcallScreenLo
	BNE.b CODE_0CAF0C
	INC.w !RAM_SMW_Misc_GameMode
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	CMP.b #$0C
	BEQ.b CODE_0CAF0C
	LDA.b #!Define_SMW_GameMode22_FadeOutToEnemyRollcall
	STA.w !RAM_SMW_Misc_GameMode
CODE_0CAF0C:
	SEP.b #$20
	JMP.w DrawEnemyRollcallSprites

TileData:				;\ Note: The following sprite tile data is mostly in the same format as what gets stored to the OAM buffer.
					;/ However the YXPPCCCT byte works a bit differently. The right P controls the tile size and the left P affects which Layer 1 X Position RAM to use for the X Disp.
.EndEnemySprites5:
	db $29,$3C,$C2,$5F		;\ Top half of Dino Rhino
	db $39,$3C,$C0,$5F		;/
	db $5B,$34,$88,$59		;\ Top half of Dino Torch flame
	db $5B,$40,$8A,$55		;/
	db $29,$4C,$E2,$5F		;\ Bottom half of Dino Rhino
	db $39,$4C,$E0,$5F		;/
	db $5B,$4C,$8C,$55		;\ Bottom half of Dino Torch flame
	db $5B,$58,$8E,$55		;/
	db $5C,$60,$C6,$1F		; Dino Torch
	db $60,$A0,$82,$34		;\ Yellow Koopa
	db $60,$B0,$A2,$34		;/
	db $A0,$B0,$A4,$38		; Red Koopa body
	db $80,$A0,$82,$36		; Blue Koopa head
	db $C0,$A0,$82,$78		; Green Koopa head (Note: Uses the wrong palette, but you can't see that since the head only uses the colors shared by palettes A-D)
	db $80,$B0,$A0,$36		; Blue Koopa body
	db $C0,$B0,$A2,$7A		; Green Koopa body
	db $A0,$A0,$84,$38		; Red Koopa body
	db $FF

.EndEnemySprites6:
	db $92,$A3,$A2,$35		;\ Top half of Blargg
	db $A2,$A3,$A4,$35		;/
	db $80,$A9,$D7,$25		;\ Lava Splash
	db $86,$AC,$D6,$25		;|
	db $B5,$AF,$C7,$25		;|
	db $BD,$B2,$C6,$25		;/
	db $92,$B3,$E6,$35		;\ Bottom half of Blragg
	db $A2,$B3,$C8,$35		;|
	db $B2,$B3,$A6,$35		;/
	db $63,$B4,$E0,$33		;\ Skull raft
	db $73,$B4,$E0,$33		;|
	db $83,$B4,$E0,$33		;|
	db $93,$B4,$E0,$33		;/
	db $17,$2F,$8C,$19		; Spike Top
	db $37,$37,$8E,$19		; Diagonal Spike Top
	db $3F,$47,$AA,$19		; Sideways Spike Top
	db $1F,$5F,$EC,$99		; Upside down Spike Top
	db $38,$8F,$80,$3D		; Left Buzzy Beetle
	db $50,$8F,$82,$7D		; Right Buzzy Beetle	
	db $90,$3C,$AE,$1B		; Left ceiling Swooper Bat
	db $A6,$45,$AE,$1B		; Right ceiling Swooper Bat
	db $78,$54,$C0,$1B		; Swooping Swooper Bat
	db $FF

.EndEnemySprites9:			; Note: The undead enemies use palette E (setting 01) when they normally use palette 9.
	db $43,$1E,$82,$5D		; Dry Bones Bone
	db $30,$22,$64,$5D		; Dry Bones head
	db $72,$23,$0A,$15		; Sparky
	db $27,$30,$66,$5D		; Dry Bones body
	db $AD,$40,$AA,$1D		; Bony Beetle
	db $84,$6A,$8E,$33		;\ Thwomp
	db $8C,$6A,$8E,$73		;|
	db $84,$7A,$AE,$33		;|
	db $8C,$7A,$AE,$73		;/
	db $BC,$92,$A2,$23		;\ Thwimp
	db $C4,$92,$A2,$63		;|
	db $BC,$9A,$B2,$23		;|
	db $C4,$9A,$B2,$63		;/
	db $48,$93,$0C,$35		;\ Hothead
	db $58,$93,$0E,$35		;|
	db $50,$9A,$09,$25		;|
	db $48,$A3,$0E,$F5		;|
	db $58,$A3,$0C,$F5		;/
	db $FF

.EndEnemySprites12:
	db $6B,$67,$41,$5B		;\ Top half of middle Mechakoopa
	db $73,$67,$40,$5B		;/
	db $A6,$67,$40,$1B		;\ Top half of right Mechakoopa
	db $AE,$67,$41,$1B		;/
	db $57,$6E,$72,$0B		; Stunned Mechakoopa key
	db $66,$6E,$71,$4B		; Middle Mechakoopa key
	db $BB,$6E,$70,$0B		; Right Mechakoopa key
	db $42,$6F,$00,$1B		;\ Stunned Mechakoopa
	db $4A,$6F,$01,$1B		;/
	db $6B,$6F,$51,$5B		; Middle Mechakoopa legs
	db $AE,$6F,$0A,$1B		; Right Mechakoopa legs
	db $7B,$77,$60,$4B		; Middle Mechakoopa jaw
	db $A6,$77,$60,$0B		; Right Mechakoopa jaw
	db $FF

.EndEnemySprites2:
	db $20,$37,$6D,$57		; Hammer
	db $38,$37,$5A,$07		;\ Hammer Bro
	db $40,$37,$4A,$07		;|
	db $30,$3F,$46,$17		;|
	db $40,$3F,$48,$17		;/
	db $20,$47,$C6,$56		;\ Hammer Bro Platform
	db $50,$47,$C6,$16		;|
	db $30,$4F,$2E,$12		;| Note: Tile 2E is the brown used block, not the turn block that this sprite normally uses
	db $40,$4F,$2E,$12		;/
	db $90,$9C,$B6,$29		;\ Volcano Lotus Fire
	db $99,$9C,$B6,$29		;|
	db $86,$A0,$B6,$29		;|
	db $A3,$A0,$B6,$29		;/
	db $CB,$A4,$06,$77		;\ Chargin' Chuck head and shoulder (Note: Chargin Chucks use palette D, not B with the exception of tile 1C for some reason)
	db $C0,$A7,$1D,$67		;|
	db $C8,$A7,$1C,$67		;/
	db $88,$AF,$CE,$3B		;\ Volcano Lotus
	db $90,$AF,$E2,$29		;|
	db $98,$AF,$E3,$29		;|
	db $98,$AF,$CE,$7B		;/
	db $C0,$AF,$21,$77		;\ Chargin' Chuck body
	db $C8,$AF,$20,$77		;/
	db $38,$8F,$AE,$38		;\ Jumpin' Piranha Plant
	db $38,$9F,$C5,$2A		;|
	db $40,$9F,$C5,$6A		;/
	db $8C,$1F,$E0,$1B		;\ Top left Super Koopa
	db $94,$22,$E4,$09		;|
	db $9C,$22,$E5,$09		;|
	db $9C,$27,$F2,$0B		;/
	db $B4,$27,$E0,$1B		;\ Top right Super Koopa
	db $BC,$2A,$F4,$05		;|
	db $C4,$2A,$F5,$05		;|
	db $C4,$2F,$F2,$09		;/
	db $94,$3F,$E0,$1B		;\ Bottom left Super Koopa
	db $9C,$42,$E4,$09		;|
	db $A4,$42,$E5,$09		;|
	db $A4,$47,$F2,$0B		;/
	db $B4,$4F,$E2,$18		;\ Grounded Super Koopa (Note: The koopa uses palette C when it normally uses B)
	db $BC,$4F,$C9,$05		;|
	db $BC,$57,$D9,$05		;|
	db $C4,$57,$C0,$05		;/
	db $FF

.EndEnemySprites3:
	db $2C,$27,$EE,$15		;\ Sumo Bro
	db $28,$2F,$C5,$15		;|
	db $30,$2F,$C6,$15		;/
	db $20,$3F,$2E,$10		;\ Used blocks (Note: Unnecessary because there are turn blocks underneath)
	db $30,$3F,$2E,$10		;|
	db $40,$3F,$2E,$10		;/
	db $30,$4F,$CC,$15		;\ Sumo Bro Flames
	db $20,$5F,$CC,$15		;|
	db $30,$5F,$EC,$15		;|
	db $40,$5F,$CC,$15		;/
	db $89,$3F,$8A,$15		; Pokey head
	db $BA,$43,$86,$11		; Monty Mole popping out of ground
	db $CB,$47,$3D,$00		;\ Upper Brick Pieces
	db $AE,$48,$3D,$00		;/
	db $8A,$4F,$E8,$15		;\ Upper Pokey body
	db $8A,$4F,$E8,$15		;/
	db $D6,$4F,$84,$51		; Walking Monty Mole
	db $B7,$54,$3D,$00		;\ Lower Brick Pieces
	db $C8,$55,$3D,$00		;/
	db $89,$5F,$E8,$15		;\ Lower Pokey body (Note: What is with all the duplicate Pokey body tiles?)
	db $89,$5F,$E8,$15		;|
	db $8A,$6F,$E8,$15		;/
	db $74,$AF,$62,$30		; Smoke puff
	db $84,$AF,$A6,$72		; Bullet Bill
	db $FF

.EndEnemySprites4:
	db $80,$8F,$80,$33		;\ Banzai Bill
	db $90,$8F,$82,$33		;|
	db $A0,$8F,$84,$33		;|
	db $B0,$8F,$86,$33		;|
	db $80,$9F,$A0,$33		;|
	db $90,$9F,$88,$33		;|
	db $A0,$9F,$CE,$33		;|
	db $B0,$9F,$EE,$33		;|
	db $80,$AF,$C0,$33		;|
	db $90,$AF,$C2,$33		;|
	db $A0,$AF,$CE,$33		;|
	db $B0,$AF,$EE,$33		;|
	db $80,$BF,$8E,$33		;|
	db $90,$BF,$AE,$33		;|
	db $A0,$BF,$84,$B3		;|
	db $B0,$BF,$86,$B3		;/
	db $6C,$2F,$8A,$57		;\ Rex
	db $67,$3F,$AA,$57		;/
	db $A4,$4F,$66,$00		;\ Trailing Smoke
	db $A0,$53,$64,$00		;/
	db $8C,$57,$A8,$17		; Smushed Rex
	db $9C,$57,$62,$00		; Trailing Smoke
	db $30,$8F,$CC,$71		;\ Mega Mole
	db $40,$8F,$CA,$71		;|
	db $30,$9F,$EC,$71		;|
	db $40,$9F,$EA,$71		;/
	db $FF

.EndEnemySprites7:
	db $30,$27,$EC,$1B		; Top Blurp Fish
	db $28,$37,$EC,$1B		; Middle Blurp Fish
	db $50,$40,$C0,$5D		;\ Top half of Porcu-Puffer
	db $60,$40,$86,$5D		;/
	db $30,$47,$EC,$1B		; Bottom Blurp Fish
	db $50,$50,$C2,$5D		;\ Bottom Half of Porcu-Puffer
	db $60,$50,$A6,$5D		;/
	db $98,$2F,$C8,$17		;\ Urchin
	db $A8,$2F,$C8,$57		;|
	db $A0,$37,$CA,$17		;|
	db $98,$3F,$C8,$97		;|
	db $A8,$3F,$C8,$D7		;/
	db $44,$8F,$AC,$37		; Top right Rip Van Fish
	db $22,$94,$F1,$2B		;\ Top 3 Zs
	db $20,$9C,$F0,$2B		;|
	db $25,$A4,$E1,$2B		;/
	db $4C,$A7,$AE,$77		; Bottom right Rip Van Fish
	db $24,$AB,$E0,$2B		; Lowest Z
	db $24,$AF,$8C,$37		; Sleeping Rip Van Fish
	db $B2,$A7,$A0,$77		;\ Top Torpedo Ted (Note: Both Torpedo teds use palette B when they normally uses palette 9).
	db $C2,$A7,$80,$77		;/
	db $BA,$9E,$84,$77		; Right Launcher Arm
	db $88,$AF,$A4,$77		; Left Launcher Arm
	db $88,$BF,$66,$76		; Left Smoke Puff
	db $90,$BF,$64,$76		; Middle Smoke Puff
	db $98,$BF,$62,$76		; Right Smoke Puff
	db $A8,$BF,$82,$77		;\ Bottom Torpedo Ted
	db $B8,$BF,$80,$77		;/
	db $FF

.EndEnemySprites1:
	db $28,$26,$E6,$57		;\ Parachute Bob-omb
	db $20,$36,$C2,$51		;/
	db $48,$36,$E6,$17		;\ Parachute Goomba (Note: The goomba uses palette D when it normally uses A)
	db $51,$45,$E8,$1B		;/
	db $A8,$4A,$60,$14		;\ Lakitu
	db $B0,$4A,$60,$14		;|
	db $AC,$3E,$A8,$1B		;|
	db $AA,$4E,$60,$14		;|
	db $AE,$4E,$60,$14		;|
	db $AF,$51,$4D,$09		;/
	db $9F,$33,$84,$07		;\ Spiny Egg (Note: Uses palette B when it normally uses A)
	db $A7,$33,$84,$47		;|
	db $9F,$3B,$84,$87		;|
	db $A7,$3B,$84,$C7		;/
	db $B7,$2B,$60,$54		;\ Fishin' Lakitu
	db $BF,$2B,$60,$54		;|
	db $BB,$1F,$EC,$5B		;|
	db $C9,$21,$AA,$55		;|
	db $B9,$2F,$60,$54		;|
	db $BD,$2F,$60,$54		;|
	db $C0,$32,$4D,$49		;|
	db $D9,$21,$89,$49		;|
	db $D9,$29,$89,$49		;|
	db $D9,$31,$89,$49		;|
	db $D9,$39,$89,$49		;|
	db $D9,$41,$89,$49		;|
	db $D9,$49,$89,$49		;|
	db $D9,$51,$89,$49		;|
	db $D9,$59,$89,$49		;|
	db $D1,$61,$24,$5A		;/
	db $48,$8F,$82,$79		; Spiny
	db $7F,$AE,$CC,$35		; Bob-omb
	db $B8,$AF,$C6,$35		;\ Wiggler
	db $B0,$AF,$C4,$35		;|
	db $A8,$AE,$C8,$35		;|
	db $A0,$AF,$C6,$35		;|
	db $98,$AF,$8C,$35		;|
	db $9E,$A7,$98,$2B		;/
	db $FF

.EndEnemySprites8:
	db $41,$56,$8C,$1F		; Bottom Boo Buddy
	db $46,$46,$AE,$1F		; Middle Left Boo Buddy
	db $50,$36,$88,$1F		; Middle Right Boo Buddy
	db $5C,$29,$A8,$1F		; Top Boo Buddy
	db $AB,$50,$60,$54		;\ Fishin' Boo
	db $B5,$50,$60,$54		;|
	db $B0,$45,$64,$5D		;|
	db $BE,$48,$8A,$59		;|
	db $AD,$54,$60,$54		;|
	db $B3,$54,$60,$54		;|
	db $C6,$58,$AC,$5D		;|
	db $C6,$68,$AC,$5D		;|
	db $C6,$7C,$AC,$7D		;|
	db $C6,$8A,$CE,$77		;/
	db $B2,$90,$6A,$3D		; Right Eerie
	db $A0,$8A,$ED,$3D		; Middle Eerie
	db $8E,$8F,$6A,$3D		; Left Eerie
	db $22,$95,$86,$7D		;\ Big Boo
	db $32,$95,$84,$7D		;|
	db $42,$95,$82,$7D		;|
	db $52,$95,$80,$7D		;|
	db $22,$A5,$A6,$7D		;|
	db $32,$A5,$A4,$7D		;|
	db $42,$A5,$A2,$7D		;|
	db $59,$A5,$E8,$7D		;|
	db $52,$A5,$A0,$7D		;|
	db $22,$B5,$C6,$7D		;|
	db $32,$B5,$C4,$7D		;|
	db $42,$B5,$A2,$7D		;|
	db $52,$B5,$A0,$FD		;|
	db $22,$C5,$E6,$7D		;|
	db $32,$C5,$E4,$7D		;|
	db $42,$C5,$82,$FD		;|
	db $52,$C5,$80,$FD		;|
	db $30,$A6,$E8,$3D		;|
	db $4B,$A3,$C0,$7D		;|
	db $4B,$B3,$E0,$7D		;/
	db $FF

.EndEnemySprites10:
	db $5C,$47,$EA,$13		;\ Ball N' Chain
	db $6C,$47,$EA,$53		;|
	db $5C,$57,$EA,$93		;|
	db $6C,$57,$EA,$D3		;|
	db $54,$3F,$E8,$13		;|
	db $49,$34,$E8,$13		;|
	db $3E,$29,$E8,$13		;/
	db $7B,$2E,$6C,$13		;\ Grinder
	db $8B,$2E,$6C,$53		;|
	db $7B,$3E,$6C,$93		;|
	db $8B,$3E,$6C,$D3		;/
	db $70,$A7,$A8,$3D		;\ Top Fishbone
	db $80,$A7,$A3,$2D		;|
	db $80,$AF,$A3,$AD		;/
	db $A8,$AC,$A6,$3D		;\ Right Fishbone
	db $B8,$AC,$A3,$2D		;|
	db $B8,$B4,$A3,$AD		;/
	db $50,$AF,$A6,$3D		;\ Left Fishbone
	db $60,$AF,$A3,$2D		;|
	db $60,$B7,$A3,$AD		;/
	db $86,$AF,$A6,$3D		;\ Middle Right Fishbone
	db $96,$AF,$B3,$2D		;|
	db $96,$B7,$B3,$AD		;/
	db $78,$BF,$A6,$3D		;\ Bottom Fishbone
	db $88,$BF,$B3,$2D		;|
	db $88,$C7,$B3,$AD		;/
	db $FF

.EndEnemySprites11:			; Note: The Reznor platforms use palette 8 when they normally use palette 9
	db $70,$1E,$44,$1F		;\ Top half of top Reznor
	db $80,$1E,$46,$1F		;/
	db $60,$2E,$26,$D5		; Top Reznor Fireball
	db $70,$2E,$64,$1F		;\ Bottom half of top Reznor
	db $80,$2E,$66,$1F		;/
	db $70,$3E,$4E,$11		;\ Top Reznor platform
	db $80,$3E,$4E,$51		;/
	db $48,$3F,$40,$1F		;\ Top half of left Reznor
	db $58,$3F,$42,$1F		;/
	db $98,$3F,$42,$5F		;\ Top half of right Reznor
	db $A8,$3F,$40,$5F		;/
	db $48,$4F,$60,$1F		;\ Bottom half of left Reznor
	db $58,$4F,$62,$1F		;/
	db $98,$4F,$62,$5F		;\ Bottom half of right Reznor
	db $A8,$4F,$60,$5F		;/
	db $48,$5F,$4E,$11		;\ Left Reznor platform
	db $58,$5F,$4E,$51		;/
	db $98,$5F,$4E,$11		;\ Right Reznor platform
	db $A8,$5F,$4E,$51		;/
	db $70,$66,$46,$5F		;\ Bottom Reznor
	db $80,$66,$44,$5F		;|
	db $70,$76,$66,$5F		;|
	db $80,$76,$64,$5F		;/
	db $70,$86,$4E,$11		;\ Bottom Reznor platform
	db $80,$86,$4E,$51		;/
	db $A0,$8E,$26,$15		; Bottom Reznor Fireball
	db $FF

.EndEnemySprites13:
	db $6C,$1A,$48,$10		;\ Bowser
	db $7C,$1A,$4A,$10		;|
	db $8C,$22,$1C,$00		;|
	db $6C,$2A,$68,$10		;|
	db $7C,$2A,$6A,$10		;|
	db $8C,$2A,$2C,$10		;|
	db $64,$3A,$08,$00		;|
	db $6C,$3A,$09,$00		;|
	db $74,$3A,$0A,$00		;|
	db $7C,$3A,$0B,$00		;|
	db $84,$3A,$0C,$00		;|
	db $8C,$3A,$0D,$00		;|
	db $94,$3A,$0E,$00		;|
	db $9C,$3A,$0F,$00		;|
	db $64,$42,$40,$10		;|
	db $74,$42,$41,$40		;|
	db $7C,$42,$45,$00		;|
	db $84,$42,$41,$00		;|
	db $8C,$42,$41,$40		;|
	db $94,$42,$46,$10		;|
	db $74,$4A,$51,$40		;|
	db $7C,$4A,$62,$00		;|
	db $84,$4A,$51,$00		;|
	db $8C,$4A,$51,$40		;|
	db $64,$52,$60,$10		;|
	db $74,$52,$62,$00		;|
	db $7C,$52,$62,$00		;|
	db $84,$52,$62,$00		;|
	db $8C,$52,$65,$00		;|
	db $94,$52,$66,$10		;|
	db $74,$5A,$72,$00		;|
	db $7C,$5A,$73,$00		;|
	db $84,$5A,$74,$00		;|
	db $8C,$5A,$75,$00		;|
	db $64,$62,$20,$00		;|
	db $6C,$62,$21,$00		;|
	db $74,$62,$22,$10		;|
	db $84,$62,$24,$10		;|
	db $94,$62,$26,$00		;|
	db $9C,$62,$27,$00		;|
	db $6C,$6A,$31,$00		;|
	db $94,$6A,$36,$00		;|
	db $6C,$72,$37,$00		;|
	db $74,$72,$38,$00		;|
	db $7C,$72,$39,$00		;|
	db $84,$72,$3A,$00		;|
	db $8C,$72,$3B,$00		;|
	db $94,$72,$2B,$00		;/
	db $31,$2C,$83,$4C		;\ Morton (Note: Uses the blue colors from palette E (sprite palette setting 04) when he normally uses palette D's colors
	db $39,$2C,$DA,$4C		;|
	db $41,$2C,$D9,$4C		;|
	db $31,$34,$86,$4C		;|
	db $39,$34,$EA,$4C		;|
	db $41,$34,$E9,$4C		;|
	db $31,$3C,$8D,$4C		;|
	db $39,$3C,$8C,$4C		;|
	db $41,$3C,$87,$4C		;/
	db $B2,$2C,$B2,$0E		;\ Roy (Note: Uses the grey colors from palette F (sprite palette setting 04) when he normally uses palette B's colors)
	db $BA,$2C,$B3,$0E		;|
	db $C2,$2C,$91,$0E		;|
	db $B2,$34,$92,$0E		;|
	db $BA,$34,$93,$0E		;|
	db $C2,$34,$94,$0E		;|
	db $BA,$3C,$95,$0E		;|
	db $C2,$3C,$96,$0E		;/
	db $1A,$6C,$A8,$15		;\ Lemmy
	db $12,$7C,$EC,$1B		;|
	db $22,$7C,$EE,$1B		;|
	db $15,$5C,$92,$05		;|
	db $1D,$5C,$92,$45		;|
	db $15,$64,$84,$15		;/
	db $CD,$6C,$A0,$19		;\ Wendy
	db $DD,$6C,$A0,$59		;|
	db $CD,$7C,$EC,$1B		;|
	db $DD,$7C,$EE,$1B		;|
	db $D5,$5F,$9F,$49		;|
	db $DD,$5F,$9E,$49		;|
	db $D5,$67,$CC,$59		;/
	db $34,$AA,$24,$57		;\ Iggy
	db $3C,$9A,$1B,$47		;|
	db $3C,$A2,$08,$57		;/
	db $70,$A9,$CC,$02		;\ Ludwig (Note: Uses the purple colors from palette F (sprite palette setting 01/07) when he normally uses palette A's colors 
	db $78,$A9,$CD,$02		;|
	db $80,$A9,$CD,$42		;|
	db $88,$A9,$CC,$42		;|
	db $70,$B1,$99,$02		;|
	db $78,$B1,$9A,$02		;|
	db $80,$B1,$9A,$42		;|
	db $88,$B1,$99,$42		;|
	db $70,$B9,$9B,$02		;|
	db $78,$B9,$9C,$02		;|
	db $80,$B9,$9C,$42		;|
	db $88,$B9,$9B,$42		;|
	db $70,$C1,$9D,$02		;|
	db $78,$C1,$9E,$02		;|
	db $80,$C1,$9E,$42		;|
	db $88,$C1,$9D,$42		;/
	db $BD,$9E,$0C,$0B		;\ Larry
	db $B4,$A6,$00,$1B		;|
	db $BD,$AB,$02,$1B		;|
	db $B5,$B4,$0A,$0B		;/
	db $FF

EnemyRollcallSpriteDataPtrs:
	dw TileData_EndEnemySprites1-TileData,TileData_EndEnemySprites2-TileData,TileData_EndEnemySprites3-TileData,TileData_EndEnemySprites4-TileData
	dw TileData_EndEnemySprites5-TileData,TileData_EndEnemySprites6-TileData,TileData_EndEnemySprites7-TileData,TileData_EndEnemySprites8-TileData
	dw TileData_EndEnemySprites9-TileData,TileData_EndEnemySprites10-TileData,TileData_EndEnemySprites11-TileData,TileData_EndEnemySprites12-TileData
	dw TileData_EndEnemySprites13-TileData

DrawEnemyRollcallSprites:
	LDA.b #$00
	XBA
	LDY.b #$20
	LDA.w !RAM_SMW_Counter_EnemyRollcallScreen
	CMP.b #$05
	BNE.b CODE_0CB5CA
	LDY.b #$30
CODE_0CB5CA:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	REP.b #$10
	TAY
	LDX.w EnemyRollcallSpriteDataPtrs,y
	LDY.w #$007F
	STY.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w #$01FC
CODE_0CB5DB:
	PHY
	LDY.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w TileData+$03,x
	AND.b #$20
	BEQ.b CODE_0CB5E8
	LDY.w !RAM_SMW_Misc_Layer1XPosLo
CODE_0CB5E8:
	STY.b !RAM_SMW_Misc_ScratchRAM03
	PLY
	LDA.w TileData,x
	CMP.b #$FF
	BEQ.b CODE_0CB633
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM03
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b #$00
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w TileData+$03,x
	AND.b #$10
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	PHY
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	LDA.w TileData+$01,x
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w TileData+$02,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w TileData+$03,x
	AND.b #$CF
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].Prop,y
	DEY
	DEY
	DEY
	DEY
	INX
	INX
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BRA.b CODE_0CB5DB

CODE_0CB633:
	SEP.b #$10
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_LevelDataLayoutTables(Address)
namespace SMW_LevelDataLayoutTables
%InsertMacroAtXPosition(<Address>)

Main:
EightBitLo:
.Horizontal:
..L1:
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$00)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$01)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$02)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$03)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$04)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$05)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$06)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$07)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$08)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$09)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$0A)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$0B)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$0C)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$0D)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$0E)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$0F)

..L2:
;$00BA70
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$10)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$11)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$12)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$13)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$14)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$15)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$16)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$17)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$18)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$19)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$1A)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$1B)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$1C)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$1D)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$1E)
	db !RAM_SMW_Blocks_Map16TableLo+($01B0*$1F)

.Vertical:
..L1:
;$00BA80
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$00)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$01)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$02)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$03)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$04)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$05)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$06)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$07)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$08)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$09)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$0A)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$0B)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$0C)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$0D)

..L2:
;$00BA8E
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$0F)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$10)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$11)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$12)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$13)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$14)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$15)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$16)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$17)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$18)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$19)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$1A)
	db !RAM_SMW_Blocks_Map16TableLo+($0200*$1B)

EightBitHi:
.Horizontal:
..L1:
;$00BA9C
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$00))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$01))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$02))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$03))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$04))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$05))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$06))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$07))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$08))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$09))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$0A))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$0B))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$0C))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$0D))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$0E))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$0F))>>8

..L2:
;$00BAAC
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$10))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$11))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$12))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$13))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$14))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$15))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$16))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$17))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$18))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$19))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$1A))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$1B))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$1C))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$1D))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$1E))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($01B0*$1F))>>8

.Vertical:
..L1:
;$00BABC
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$00))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$01))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$02))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$03))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$04))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$05))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$06))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$07))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$08))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$09))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$0A))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$0B))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$0C))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$0D))>>8

..L2:
;$00BACA
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$0E))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$0F))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$10))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$11))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$12))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$13))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$14))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$15))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$16))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$17))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$18))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$19))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$1A))>>8
	db (!RAM_SMW_Blocks_Map16TableLo+($0200*$1B))>>8

TwentyFourBitLo:
.StandardHorizontal:
..L1:
;$00BAD8
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$00)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$01)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$02)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$03)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$04)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$05)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$06)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$07)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$08)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$09)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0A)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0B)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0C)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0D)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0E)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0F)

..L2:
;$00BB08
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$10)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$11)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$12)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$13)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$14)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$15)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$16)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$17)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$18)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$19)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1A)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1B)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1C)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1D)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1E)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1F)

.VertL1HorizL2:
..L1:
;$00BB38
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$00)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$01)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$02)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$03)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$04)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$05)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$06)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$07)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$08)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$09)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0A)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0B)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0C)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0D)

..L2:
;$00BB62
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$10)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$11)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$12)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$13)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$14)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$15)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$16)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$17)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$18)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$19)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1A)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1B)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1C)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1D)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1E)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$1F)

.HorizL1VertL2:
..L1:
;$00BB92
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$00)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$01)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$02)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$03)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$04)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$05)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$06)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$07)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$08)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$09)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0A)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0B)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0C)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0D)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0E)
	dl !RAM_SMW_Blocks_Map16TableLo+($01B0*$0F)

..L2:
;$00BBC2
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0F)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$10)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$11)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$12)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$13)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$14)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$15)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$16)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$17)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$18)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$19)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$1A)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$1B)

.StandardVertical:
..L1:
;$00BBEC
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$00)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$01)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$02)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$03)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$04)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$05)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$06)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$07)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$08)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$09)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0A)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0B)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0C)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0D)

..L2:
;$00BC16
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0E)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$0F)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$10)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$11)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$12)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$13)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$14)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$15)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$16)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$17)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$18)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$19)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$1A)
	dl !RAM_SMW_Blocks_Map16TableLo+($0200*$1B)

TwentyFourBitHi:
.StandardHorizontal:
..L1:
;$00BC40
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$00)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$01)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$02)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$03)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$04)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$05)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$06)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$07)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$08)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$09)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0A)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0B)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0C)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0D)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0E)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0F)

..L2:
;$00BC70
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$10)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$11)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$12)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$13)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$14)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$15)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$16)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$17)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$18)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$19)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1A)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1B)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1C)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1D)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1E)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1F)

.VertL1HorizL2:
..L1:
;$00BCA0
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$00)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$01)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$02)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$03)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$04)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$05)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$06)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$07)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$08)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$09)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0A)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0B)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0C)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0D)

..L2:
;$00BCC.bA
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$10)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$11)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$12)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$13)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$14)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$15)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$16)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$17)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$18)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$19)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1A)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1B)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1C)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1D)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1E)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$1F)

.HorizL1VertL2:
..L1:
;$00BCFA
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$00)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$01)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$02)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$03)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$04)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$05)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$06)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$07)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$08)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$09)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0A)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0B)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0C)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0D)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0E)
	dl !RAM_SMW_Blocks_Map16TableHi+($01B0*$0F)

..L2:
;$00BD2A
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0E)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0F)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$10)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$11)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$12)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$13)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$14)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$15)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$16)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$17)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$18)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$19)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$1A)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$1B)

.StandardVertical:
..L1:
;$00BD54
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$00)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$01)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$02)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$03)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$04)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$05)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$06)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$07)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$08)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$09)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0A)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0B)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0C)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0D)

..L2:
;$00BD7E
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0E)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$0F)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$10)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$11)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$12)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$13)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$14)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$15)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$16)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$17)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$18)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$19)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$1A)
	dl !RAM_SMW_Blocks_Map16TableHi+($0200*$1B)

Layer1LoPtrs:
;$00BDA8
	dw TwentyFourBitLo_StandardHorizontal_L1		; 00 Horizontal level
	dw TwentyFourBitLo_StandardHorizontal_L1		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dw TwentyFourBitLo_StandardHorizontal_L1		; 02 Horizontal layer 2 level (layer 2 interaction)
	dw TwentyFourBitLo_VertL1HorizL2_L1			; 03 Do not use this level mode!
	dw TwentyFourBitLo_VertL1HorizL2_L1			; 04 Do not use this level mode!
	dw TwentyFourBitLo_HorizL1VertL2_L1			; 05 Do not use this level mode!
	dw TwentyFourBitLo_HorizL1VertL2_L1			; 06 Do not use this level mode!
	dw TwentyFourBitLo_StandardVertical_L1			; 07 Vertical layer 2 level (no layer 2 interaction)
	dw TwentyFourBitLo_StandardVertical_L1			; 08 Vertical layer 2 level (layer 2 interaction)
	dw NullLevelLayoutData					; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dw TwentyFourBitLo_StandardVertical_L1			; 0A Vertical level
	dw NullLevelLayoutData					; 0B Horizontal boss level (Larry, Iggy)
	dw TwentyFourBitLo_StandardHorizontal_L1		; 0C Horizontal dark BG level
	dw TwentyFourBitLo_StandardVertical_L1			; 0D Vertical dark BG level
	dw TwentyFourBitLo_StandardHorizontal_L1		; 0E Horizontal level
	dw TwentyFourBitLo_StandardHorizontal_L1		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dw NullLevelLayoutData					; 10 Horizontal boss level (Bowser)
	dw TwentyFourBitLo_StandardHorizontal_L1		; 11 Horizontal dark BG level
	dw NullLevelLayoutData					; 12 Cannot use this level mode!
	dw NullLevelLayoutData					; 13 Cannot use this level mode!
	dw NullLevelLayoutData					; 14 Cannot use this level mode!
	dw NullLevelLayoutData					; 15 Cannot use this level mode!
	dw NullLevelLayoutData					; 16 Cannot use this level mode!
	dw NullLevelLayoutData					; 17 Cannot use this level mode!
	dw NullLevelLayoutData					; 18 Cannot use this level mode!
	dw NullLevelLayoutData					; 19 Cannot use this level mode!
	dw NullLevelLayoutData					; 1A Cannot use this level mode!
	dw NullLevelLayoutData					; 1B Cannot use this level mode!
	dw NullLevelLayoutData					; 1C Cannot use this level mode!
	dw NullLevelLayoutData					; 1D Cannot use this level mode!
	dw TwentyFourBitLo_StandardHorizontal_L1		; 1E Horizontal translucent level
	dw TwentyFourBitLo_StandardHorizontal_L1		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

Layer2LoPtrs:
;$00BDE8
	dw TwentyFourBitLo_StandardHorizontal_L2		; 00 Horizontal level
	dw TwentyFourBitLo_StandardHorizontal_L2		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dw TwentyFourBitLo_StandardHorizontal_L2		; 02 Horizontal layer 2 level (layer 2 interaction)
	dw TwentyFourBitLo_VertL1HorizL2_L2			; 03 Do not use this level mode!
	dw TwentyFourBitLo_VertL1HorizL2_L2			; 04 Do not use this level mode!
	dw TwentyFourBitLo_HorizL1VertL2_L2			; 05 Do not use this level mode!
	dw TwentyFourBitLo_HorizL1VertL2_L2			; 06 Do not use this level mode!
	dw TwentyFourBitLo_StandardVertical_L2			; 07 Vertical layer 2 level (no layer 2 interaction)
	dw TwentyFourBitLo_StandardVertical_L2			; 08 Vertical layer 2 level (layer 2 interaction)
	dw NullLevelLayoutData					; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dw TwentyFourBitLo_StandardVertical_L2			; 0A Vertical level
	dw NullLevelLayoutData					; 0B Horizontal boss level (Larry, Iggy)
	dw TwentyFourBitLo_StandardHorizontal_L2		; 0C Horizontal dark BG level
	dw TwentyFourBitLo_StandardVertical_L2			; 0D Vertical dark BG level
	dw TwentyFourBitLo_StandardHorizontal_L2		; 0E Horizontal level
	dw TwentyFourBitLo_StandardHorizontal_L2		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dw NullLevelLayoutData					; 10 Horizontal boss level (Bowser)
	dw TwentyFourBitLo_StandardHorizontal_L2		; 11 Horizontal dark BG level
	dw NullLevelLayoutData					; 12 Cannot use this level mode!
	dw NullLevelLayoutData					; 13 Cannot use this level mode!
	dw NullLevelLayoutData					; 14 Cannot use this level mode!
	dw NullLevelLayoutData					; 15 Cannot use this level mode!
	dw NullLevelLayoutData					; 16 Cannot use this level mode!
	dw NullLevelLayoutData					; 17 Cannot use this level mode!
	dw NullLevelLayoutData					; 18 Cannot use this level mode!
	dw NullLevelLayoutData					; 19 Cannot use this level mode!
	dw NullLevelLayoutData					; 1A Cannot use this level mode!
	dw NullLevelLayoutData					; 1B Cannot use this level mode!
	dw NullLevelLayoutData					; 1C Cannot use this level mode!
	dw NullLevelLayoutData					; 1D Cannot use this level mode!
	dw TwentyFourBitLo_StandardHorizontal_L2		; 1E Horizontal translucent level
	dw TwentyFourBitLo_StandardHorizontal_L2		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

Layer1HiPtrs:
;$00BE28
	dw TwentyFourBitHi_StandardHorizontal_L1		; 00 Horizontal level
	dw TwentyFourBitHi_StandardHorizontal_L1		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dw TwentyFourBitHi_StandardHorizontal_L1		; 02 Horizontal layer 2 level (layer 2 interaction)
	dw TwentyFourBitHi_VertL1HorizL2_L1			; 03 Do not use this level mode!
	dw TwentyFourBitHi_VertL1HorizL2_L1			; 04 Do not use this level mode!
	dw TwentyFourBitHi_HorizL1VertL2_L1			; 05 Do not use this level mode!
	dw TwentyFourBitHi_HorizL1VertL2_L1			; 06 Do not use this level mode!
	dw TwentyFourBitHi_StandardVertical_L1			; 07 Vertical layer 2 level (no layer 2 interaction)
	dw TwentyFourBitHi_StandardVertical_L1			; 08 Vertical layer 2 level (layer 2 interaction)
	dw NullLevelLayoutData					; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dw TwentyFourBitHi_StandardVertical_L1			; 0A Vertical level
	dw NullLevelLayoutData					; 0B Horizontal boss level (Larry, Iggy)
	dw TwentyFourBitHi_StandardHorizontal_L1		; 0C Horizontal dark BG level
	dw TwentyFourBitHi_StandardVertical_L1			; 0D Vertical dark BG level
	dw TwentyFourBitHi_StandardHorizontal_L1		; 0E Horizontal level
	dw TwentyFourBitHi_StandardHorizontal_L1		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dw NullLevelLayoutData					; 10 Horizontal boss level (Bowser)
	dw TwentyFourBitHi_StandardHorizontal_L1		; 11 Horizontal dark BG level
	dw NullLevelLayoutData					; 12 Cannot use this level mode!
	dw NullLevelLayoutData					; 13 Cannot use this level mode!
	dw NullLevelLayoutData					; 14 Cannot use this level mode!
	dw NullLevelLayoutData					; 15 Cannot use this level mode!
	dw NullLevelLayoutData					; 16 Cannot use this level mode!
	dw NullLevelLayoutData					; 17 Cannot use this level mode!
	dw NullLevelLayoutData					; 18 Cannot use this level mode!
	dw NullLevelLayoutData					; 19 Cannot use this level mode!
	dw NullLevelLayoutData					; 1A Cannot use this level mode!
	dw NullLevelLayoutData					; 1B Cannot use this level mode!
	dw NullLevelLayoutData					; 1C Cannot use this level mode!
	dw NullLevelLayoutData					; 1D Cannot use this level mode!
	dw TwentyFourBitHi_StandardHorizontal_L1		; 1E Horizontal translucent level
	dw TwentyFourBitHi_StandardHorizontal_L1		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

Layer2HiPtrs:
;$00BE68
	dw TwentyFourBitHi_StandardHorizontal_L2		; 00 Horizontal level
	dw TwentyFourBitHi_StandardHorizontal_L2		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dw TwentyFourBitHi_StandardHorizontal_L2		; 02 Horizontal layer 2 level (layer 2 interaction)
	dw TwentyFourBitHi_VertL1HorizL2_L2			; 03 Do not use this level mode!
	dw TwentyFourBitHi_VertL1HorizL2_L2			; 04 Do not use this level mode!
	dw TwentyFourBitHi_HorizL1VertL2_L2			; 05 Do not use this level mode!
	dw TwentyFourBitHi_HorizL1VertL2_L2			; 06 Do not use this level mode!
	dw TwentyFourBitHi_StandardVertical_L2			; 07 Vertical layer 2 level (no layer 2 interaction)
	dw TwentyFourBitHi_StandardVertical_L2			; 08 Vertical layer 2 level (layer 2 interaction)
	dw NullLevelLayoutData					; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dw TwentyFourBitHi_StandardVertical_L2			; 0A Vertical level
	dw NullLevelLayoutData					; 0B Horizontal boss level (Larry, Iggy)
	dw TwentyFourBitHi_StandardHorizontal_L2		; 0C Horizontal dark BG level
	dw TwentyFourBitHi_StandardVertical_L2			; 0D Vertical dark BG level
	dw TwentyFourBitHi_StandardHorizontal_L2		; 0E Horizontal level
	dw TwentyFourBitHi_StandardHorizontal_L2		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dw NullLevelLayoutData					; 10 Horizontal boss level (Bowser)
	dw TwentyFourBitHi_StandardHorizontal_L2		; 11 Horizontal dark BG level
	dw NullLevelLayoutData					; 12 Cannot use this level mode!
	dw NullLevelLayoutData					; 13 Cannot use this level mode!
	dw NullLevelLayoutData					; 14 Cannot use this level mode!
	dw NullLevelLayoutData					; 15 Cannot use this level mode!
	dw NullLevelLayoutData					; 16 Cannot use this level mode!
	dw NullLevelLayoutData					; 17 Cannot use this level mode!
	dw NullLevelLayoutData					; 18 Cannot use this level mode!
	dw NullLevelLayoutData					; 19 Cannot use this level mode!
	dw NullLevelLayoutData					; 1A Cannot use this level mode!
	dw NullLevelLayoutData					; 1B Cannot use this level mode!
	dw NullLevelLayoutData					; 1C Cannot use this level mode!
	dw NullLevelLayoutData					; 1D Cannot use this level mode!
	dw TwentyFourBitHi_StandardHorizontal_L2		; 1E Horizontal translucent level
	dw TwentyFourBitHi_StandardHorizontal_L2		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

LoTablePtrs:
;$00BEA8
	dw Layer1LoPtrs
	dw Layer2LoPtrs

HiTablePtrs:
;$00BEAC
	dw Layer1HiPtrs
	dw Layer2HiPtrs
namespace off
	%SetDuplicateOrNullPointer($000000, SMW_LevelDataLayoutTables_NullLevelLayoutData)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode04_PrepareTitleScreen(Address)
namespace SMW_GameMode04_PrepareTitleScreen
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckWhichControllersArePluggedIn_Main
	JSR.w SMW_GameMode12_PrepareLevel_Main
	STZ.w !RAM_SMW_Counter_TimerHundreds
	JSR.w SMW_ClearLayer3Tilemap_Main
	LDA.b #!Define_SMW_StripeImage_TitleScreenLayer3
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
	JSR.w SMW_LoadStripeImage_Sub
	JSR.w SMW_BufferPalettesRoutines_TitleScreen
	JSR.w SMW_UpdateEntirePalette_Main
	JSL.l SMW_LoadOverworldSprites_Main				;\ Glitch: This can cause glitch tiles to appear when the title screen is fading in.
									;/ Why this is here and not in the overworld loading code is anyones' guess.
	LDA.b #$01
	STA.w !RAM_SMW_Misc_NMIToUseFlag
	LDA.b #$33
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDA.b #$00
	STA.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	LDA.b #$23
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$12
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	JSR.w SMW_GameMode06_CircleEffect_CODE_009443
	LDA.b #$10
	STA.w !RAM_SMW_Timer_TitleScreenInputTimer
	JMP.w SMW_GameMode00_LoadNintendoPresents_Mode04Finish
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode04_PrepareTitleScreen(Address)
namespace SMW_GameMode04_PrepareTitleScreen
%InsertMacroAtXPosition(<Address>)

TitlescreenLayer3:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J|!ROM_SMW_E2|!ROM_SMASW_U|!ROM_SMASW_E) != $00
	%InsertVersionExclusiveFile(incbin, ../SMW/images/other/Titlescreen_, !ROMID.bin, )
else
	%InsertVersionExclusiveFile(incbin, ../SMW/images/other/Titlescreen_, SMW_U.bin, )
endif
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode0E_ShowOverworld(Address)
namespace SMW_GameMode0E_ShowOverworld
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckWhichControllersArePluggedIn_Main
	INC.b !RAM_SMW_Counter_LocalFrames
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	JSL.l Bank04
	JMP.w SMW_CompressOAMTileSizeBuffer_Main
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode0E_ShowOverworld(Address)
namespace SMW_GameMode0E_ShowOverworld
%InsertMacroAtXPosition(<Address>)

OverworldScrollArrowsImage:
	incbin "images/overworld/scrollarrows.bin"

RemoveOverworldScrollArrowsImage:
	incbin "images/overworld/noscrollarrows.bin"

DATA_048211:
	dw $0000,$0002,$FFFE,$0002
	dw $0000,$0002,$FFFE,$0002

DATA_048221:
	dw $0000,$0111,$FFEF,$0111
	dw $0000,$0132,$FFD7,$0132

DATA_048231:
	db $0F,$0F,$07,$07,$07,$03,$03,$03
	db $01,$01,$03,$03,$03,$07,$07,$07

Bank04:
	PHB
	PHK
	PLB
	LDX.b #$01
CODE_048246:
	LDA.w !RAM_SMW_IO_ControllerPress1CopyP1,x
	AND.b #!Joypad_Select>>8
#Debug_CycleYoshiColors
	BRA.b CODE_048261
	LDA.w !RAM_SMW_Player_MariosYoshi,x
	INC
	INC
	CMP.b #$04
	BCS.b ADDR_048258
	LDA.b #$04
ADDR_048258:
	CMP.b #$0B
	BCC.b ADDR_04825E
	LDA.b #$00
ADDR_04825E:
	STA.w !RAM_SMW_Player_MariosYoshi,x
CODE_048261:
	DEX
	BPL.b CODE_048246
	JSR.w SMW_DrawOverworldBorderPlayer_Entry2
	JSR.w SMW_OverworldTileAnimations_Main
	LDA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BEQ.b CODE_048275
	JSR.w SMW_DrawFlyingSwitchBlocks_Main
	JMP.w CODE_04840D

CODE_048275:
	LDA.w !RAM_SMW_Flag_ShowContinueAndEnd
	BEQ.b CODE_048281
	JSL.l SMW_DisplayingContinueEnd_Main
	JMP.w CODE_048410

CODE_048281:
	LDA.w !RAM_SMW_Pointer_DisplayOverworldPrompt
	BEQ.b CODE_048295
	CMP.b #$05
	BCS.b CODE_04828F
	LDY.w !RAM_SMW_Flag_TwoPlayerGame
	BEQ.b CODE_048295
CODE_04828F:
	JSR.w SMW_DisplayOverworldPrompt_Main
	JMP.w CODE_048413

CODE_048295:
	LDA.w !RAM_SMW_Flag_MainMapFreeScrolling
	LSR
	BNE.b CODE_04829E
	JMP.w CODE_048356

CODE_04829E:
	REP.b #$20
	LDA.w !RAM_SMW_Overworld_ScrollCameraYPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0482AE
	EOR.w #$FFFF
	INC
CODE_0482AE:
	LSR
	SEP.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM05
	REP.b #$20
	LDA.w !RAM_SMW_Overworld_ScrollCameraXPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0482C3
	EOR.w #$FFFF
	INC
CODE_0482C3:
	LSR
	SEP.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.b #$01
	CMP.b !RAM_SMW_Misc_ScratchRAM05
	BCS.b CODE_0482D1
	DEX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
CODE_0482D1:
	CMP.b #$02
	BCS.b CODE_0482ED
	REP.b #$20
	LDA.w !RAM_SMW_Overworld_ScrollCameraXPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDA.w !RAM_SMW_Overworld_ScrollCameraYPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	SEP.b #$20
	STZ.w !RAM_SMW_Flag_MainMapFreeScrolling
	JMP.w CODE_0483BD

CODE_0482ED:
	STZ.w !REGISTER_DividendLo
	LDY.b !RAM_SMW_Misc_ScratchRAM04,x
	STY.w !REGISTER_DividendHi
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
	LSR
	LSR
	SEP.b #$20
	LDY.b !RAM_SMW_Misc_ScratchRAM01,x
	BPL.b CODE_04830E
	EOR.b #$FF
	INC
CODE_04830E:
	STA.b !RAM_SMW_Misc_ScratchRAM01,x
	TXA
	EOR.b #$01
	TAX
	LDA.b #$40
	LDY.b !RAM_SMW_Misc_ScratchRAM01,x
	BPL.b CODE_04831C
	LDA.b #$C0
CODE_04831C:
	STA.b !RAM_SMW_Misc_ScratchRAM01,x
	LDY.b #$01
CODE_048320:
	TYA
	ASL
	TAX
	LDA.w !RAM_SMW_Misc_ScratchRAM01,y
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_Overworld_Layer1SubXPos,y
	STA.w !RAM_SMW_Overworld_Layer1SubXPos,y
	LDA.w !RAM_SMW_Misc_ScratchRAM01,y
	PHY
	PHP
	LSR
	LSR
	LSR
	LSR
	LDY.b #$00
	PLP
	BPL.b CODE_048342
	ORA.b #$F0
	DEY
CODE_048342:
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo,x
	TYA
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosHi,x
	PLY
	DEY
	BPL.b CODE_048320
	JMP.w CODE_04840D

CODE_048356:
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.b #$03
	BEQ.b CODE_048366
	CMP.b #$04
	BNE.b CODE_04839A
	LDA.w !RAM_SMW_Flag_SwitchPlayers
	BNE.b CODE_04839A
CODE_048366:
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	LDA.w !RAM_SMW_IO_ControllerPress2CopyP1
	ORA.w !RAM_SMW_IO_ControllerPress2CopyP2
	AND.b #!Joypad_L|!Joypad_R
	BEQ.b CODE_048375
	LDA.b #$01
	STA.w !RAM_SMW_Pointer_DisplayOverworldPrompt
endif

CODE_048375:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_Select>>8
	BEQ.b +
	LDA.b #$09
	STA.w !RAM_SMW_Pointer_DisplayOverworldPrompt
+:
endif
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	BNE.b CODE_04839A						; Note: !Define_SMW_Overworld_MainMap
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_Start>>8
	BEQ.b CODE_04839A
	INC.w !RAM_SMW_Flag_MainMapFreeScrolling
	LDA.w !RAM_SMW_Flag_MainMapFreeScrolling
	LSR
	BNE.b CODE_04839A
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_Overworld_ScrollCameraXPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_Overworld_ScrollCameraYPosLo
	SEP.b #$20
CODE_04839A:
	LDA.w !RAM_SMW_Flag_MainMapFreeScrolling
	BEQ.b CODE_0483C3
	LDX.b #$00
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	ASL
	JSR.w UpdateMainMapFreeScrollingPosition
	LDX.b #$02
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	ORA.b #$10
	LSR
	JSR.w UpdateMainMapFreeScrollingPosition
	LDY.b #!Define_SMW_StripeImage_ShowScrollArrows
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$18
	BNE.b CODE_0483BF
CODE_0483BD:
	LDY.b #!Define_SMW_StripeImage_RemoveScrollArrows
CODE_0483BF:
	STY.b !RAM_SMW_Graphics_StripeImageToUpload
	BRA.b CODE_04840D

CODE_0483C3:
	LDX.w !RAM_SMW_Overworld_ActiveEarthquakeEvent
	BEQ.b CODE_04840A
	CPX.b #$FE
	BNE.b CODE_0483D6
	LDA.b #!Define_SMW_Sound1DF9_ValleyOfBowserAppears
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_OverworldMusic_BowsersValleyRevealed
	STA.w !RAM_SMW_IO_MusicCh1
CODE_0483D6:
	TXA
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_048231,y
	BNE.b CODE_0483F3
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	EOR.b #$01
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	EOR.b #$01
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
CODE_0483F3:
	CPX.b #$80
	BCS.b CODE_0483FE
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.b #$02
	BNE.b CODE_04840A
CODE_0483FE:
	DEC.w !RAM_SMW_Overworld_ActiveEarthquakeEvent
	BNE.b CODE_04840D
	LDA.b #!Define_SMW_Sound1DF9_EndValleyOfBowserAppears
	STA.w !RAM_SMW_IO_SoundCh1
	BRA.b CODE_04840D

CODE_04840A:
	JSR.w SMW_HandleCurrentOverworldProcess_Main
CODE_04840D:
	JSR.w SMW_OverworldLightningAndRandomCloudSpawning_Main
CODE_048410:
	JSR.w SMW_DrawOverworldPlayer_Main
CODE_048413:
	PLB
Return048414:							; LM: For some routines that JML.l to a JSR.w SMW_routine in bank 04, the address of this label minus 1 is stored onto the stack.
	RTL

UpdateMainMapFreeScrollingPosition:
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	CLC
	ADC.w DATA_048211,y
	PHA
	SEC
	SBC.w DATA_048221,y
	EOR.w DATA_048211,y
	ASL
	PLA
	BCC.b CODE_04842E
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo,x
CODE_04842E:
	SEP.b #$20
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_OverworldLightningAndRandomCloudSpawning(Address)
namespace SMW_OverworldLightningAndRandomCloudSpawning
%InsertMacroAtXPosition(<Address>)

DATA_04F6D0:
	db $70,$7F,$78,$7F,$70,$7F,$78,$7F

DATA_04F6D8:
	db $F0,$FF,$20,$00,$C0,$00,$F0,$FF
	db $F0,$FF,$80,$00,$F0,$FF,$00,$00

DATA_04F6E8:
	db $70,$00,$60,$01,$58,$01,$B0,$00
	db $60,$01,$60,$01,$70,$00,$60,$01

DATA_04F6F8:
	db $20,$58,$43,$CF,$18,$34,$A2,$5E

DATA_04F700:
	db $07,$05,$06,$07,$04,$06,$07,$05

Main:
	LDA.b #$F7
	JSR.w SMW_CheckIfXIsAllowedOnYSubmap_Lightning
	BNE.b CODE_04F76E
	LDY.w !RAM_SMW_Palettes_LightningFlashColorIndex
	BNE.b CODE_04F73B
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_04F76E
	DEC.w !RAM_SMW_Timer_WaitBeforeNextLightningFlash
	BNE.b CODE_04F76E
	TAY
	LDA.w DATA_04F700+$08,y
	AND.b #$07
	TAX
	LDA.w DATA_04F6F8,x
	STA.w !RAM_SMW_Timer_WaitBeforeNextLightningFlash
	LDY.w DATA_04F700,x
	STY.w !RAM_SMW_Palettes_LightningFlashColorIndex
	LDA.b #$08
	STA.w !RAM_SMW_Timer_LightningFrameDuration
	LDA.b #!Define_SMW_Sound1DFC_Thunder
	STA.w !RAM_SMW_IO_SoundCh3
CODE_04F73B:
	DEC.w !RAM_SMW_Timer_LightningFrameDuration
	BPL.b CODE_04F748
	DEC.w !RAM_SMW_Palettes_LightningFlashColorIndex
	LDA.b #$04
	STA.w !RAM_SMW_Timer_LightningFrameDuration
CODE_04F748:
	TYA
	ASL
	TAY
	LDX.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	LDA.b #$02
	STA.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload,x
	LDA.b #$47
	STA.w !RAM_SMW_Palettes_DynamicPaletteCGRAMAddress,x
	LDA.w SMW_PaletteMirror[$28].LowByte,y
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,x
	LDA.w SMW_PaletteMirror[$28].HighByte,y
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors+$01,x
	STZ.w !RAM_SMW_Palettes_DynamicPaletteColors+$02,x
	TXA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
CODE_04F76E:
	LDX.b #!Define_SMW_MaxOverworldSpriteSlot-$0D
CODE_04F770:
	LDA.w !RAM_SMW_OWSpr_SpriteID,x
	BNE.b CODE_04F7AB
	LDA.b #!Define_SMW_SpriteID_OWSpr05_Cloud
	STA.w !RAM_SMW_OWSpr_SpriteID,x
	JSR.w SMW_SetOverworldSpriteFrameIndex_Main
	AND.b #$07
	TAY
	LDA.w DATA_04F6D0,y
	STA.w !RAM_SMW_OWSpr_ZPosLo,x
	TYA
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w DATA_04F6D8,y
	SEP.b #$20
	STA.w !RAM_SMW_OWSpr_XPosLo,x
	XBA
	STA.w !RAM_SMW_OWSpr_XPosHi,x
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w DATA_04F6E8,y
	SEP.b #$20
	STA.w !RAM_SMW_OWSpr_YPosLo,x
	XBA
	STA.w !RAM_SMW_OWSpr_YPosHi,x
CODE_04F7AB:
	DEX
	BPL.b CODE_04F770
	LDX.b #$04
CODE_04F7B0:
	TXA
	STA.w !RAM_SMW_Sprites_OverworldCloudSyncTable,x
	DEX
	BPL.b CODE_04F7B0
	LDX.b #!Define_SMW_MaxOverworldSpriteSlot-$0B
CODE_04F7B9:
	STX.b !RAM_SMW_Misc_ScratchRAM00
CODE_04F7BB:
	STX.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_Sprites_OverworldCloudSyncTable,x
	LDA.w !RAM_SMW_OWSpr_YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_OWSpr_YPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w !RAM_SMW_Sprites_OverworldCloudSyncTable-$01,x
	LDA.w !RAM_SMW_OWSpr_YPosHi,y
	XBA
	LDA.w !RAM_SMW_OWSpr_YPosLo,y
	REP.b #$20
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
	BPL.b CODE_04F7ED
	PHY
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_OverworldCloudSyncTable,y
	STA.w !RAM_SMW_Sprites_OverworldCloudSyncTable-$01,x
	PLA
	STA.w !RAM_SMW_Sprites_OverworldCloudSyncTable,y
CODE_04F7ED:
	DEX
	BNE.b CODE_04F7BB
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEX
	BNE.b CODE_04F7B9
	LDA.b #$30
	STA.w !RAM_SMW_Sprites_StartingOAMIndexForOverworldSprites
	STZ.w !RAM_SMW_Overworld_EnterLevelFlag
	LDX.b #!Define_SMW_MaxOverworldSpriteSlot
	LDY.b #$2D
CODE_04F801:
	CPX.b #!Define_SMW_MaxOverworldSpriteSlot-$02
	BCS.b CODE_04F80D
	LDA.w !RAM_SMW_OWSpr_Table7E0E25,x
	BEQ.b CODE_04F80D
	DEC.w !RAM_SMW_OWSpr_Table7E0E25,x
CODE_04F80D:
	CPX.b #!Define_SMW_MaxOverworldSpriteSlot-$0A
	BCC.b CODE_04F819
	STX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	JSR.w SMW_ProcessOverworldSprites_Main
	BRA.b CODE_04F825

CODE_04F819:
	PHX
	LDA.w !RAM_SMW_Sprites_OverworldCloudSyncTable,x
	TAX
	STX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	JSR.w SMW_ProcessOverworldSprites_Main
	PLX
CODE_04F825:
	DEX
	BPL.b CODE_04F801
Return04F828:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_OverworldLightningAndRandomCloudSpawning_Return04F828, SMW_OWSpr00_Unused_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ProcessOverworldSprites(Address)
namespace SMW_ProcessOverworldSprites
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckIfXIsAllowedOnYSubmap_Sprites
	BNE.b SMW_OverworldLightningAndRandomCloudSpawning_Return04F828
	LDA.w !RAM_SMW_OWSpr_SpriteID,x
	JSL.l SMW_ExecutePtr_Absolute

OverworldSpritePtrs:
base $000000
.OWSpr00_Unused:		dw SMW_OWSpr00_Unused_Main
.OWSpr01_Lakitu:		dw SMW_OWSpr01_Lakitu_Main
.OWSpr02_BlueBird:		dw SMW_OWSpr02_BlueBird_Main
.OWSpr03_CheepCheep:		dw SMW_OWSpr03_CheepCheep_Main
.OWSpr04_PiranhaPlant:		dw SMW_OWSpr04_PiranhaPlant_Main
.OWSpr05_Cloud:			dw SMW_OWSpr05_Cloud_Main
.OWSpr06_KoopaKid:		dw SMW_OWSpr06_KoopaKid_Main
.OWSpr07_Smoke:			dw SMW_OWSpr07_Smoke_Main
.OWSpr08_BowserSign:		dw SMW_OWSpr08_BowserSign_Main
.OWSpr09_Bowser:		dw SMW_OWSpr09_Bowser_Main
.OWSpr0A_Boo:			dw SMW_OWSpr0A_Boo_Main
base off
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawOverworldBorderPlayer(Address)
namespace SMW_DrawOverworldBorderPlayer
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_DrawOverworldPlayer_Main
Entry2:
	REP.b #$20
	LDA.w #$001E
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w #$0006
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	LDA.b #$08
	STA.w !RAM_SMW_Player_XSpeed
	PHB
	LDA.b #SMW_SetPlayerPose_Main>>16
	PHA
	PLB
	JSL.l SMW_SetPlayerPose_Main
	PLB
	LDA.b #$03
	STA.w !RAM_SMW_Player_CurrentLayerPriority
	JSL.l SMW_PlayerGFXRt_Main
	LDA.b #$06
	STA.w !RAM_SMW_Player_NumberOfTilesToUpdate
	LDA.w !RAM_SMW_Player_AnimationTimer
	BEQ.b CODE_0485E0
	DEC.w !RAM_SMW_Player_AnimationTimer
CODE_0485E0:
	LDA.w !RAM_SMW_Timer_CapeFlapAnimation
	BEQ.b CODE_0485E8
	DEC.w !RAM_SMW_Timer_CapeFlapAnimation
CODE_0485E8:
	LDA.b #$18
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b #$00
	TYX
CODE_0485F3:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.b #$7E
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.b #$36
	STA.w SMW_OAMBuffer[$00].Prop,x
	PHX
	TYX
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	INY
	TYA
	AND.b #$03
	BNE.b CODE_048625
	LDA.b #$18
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_048625:
	INX
	INX
	INX
	INX
	CPY.b #$10
	BNE.b CODE_0485F3
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawOverworldPlayer(Address)
namespace SMW_DrawOverworldPlayer
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$30
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.w #$0100
	BCS.b CODE_04864D
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.w #$0100
	BCC.b CODE_048650
CODE_04864D:
	LDA.w #$00F0
CODE_048650:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	TXA
	EOR.w #$0004
	TAX
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.w #$0100
	BCS.b CODE_048673
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.w #$0100
	BCC.b CODE_048676
CODE_048673:
	LDA.w #$00F0
CODE_048676:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	SEP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b #$09
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	SEC
	SBC.b #$09
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM8C
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM07
	STA.b !RAM_SMW_Misc_ScratchRAM8B
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,y
	CMP.b #$12
	BEQ.b CODE_0486C5
	CMP.b #$07
	BCC.b CODE_0486BC
	CMP.b #$0F
	BCC.b CODE_0486C5
CODE_0486BC:
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	SEC
	SBC.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM8B
	STA.b !RAM_SMW_Misc_ScratchRAM07
CODE_0486C5:
	REP.b #$30
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo			;\ Note: This forces Luigi's palette to be from a row next to Mario's
	XBA								;| In this case, it will be palette row 0B, since !RAM_SMW_Misc_ScratchRAM05's value is added to the tile property byte.
	LSR								;|
	STA.b !RAM_SMW_Misc_ScratchRAM04				;/
	LDX.w #$0000
	JSR.w DrawHalo
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	TAY
	LDX.w #$0000
	JSR.w DrawCurrentPlayer
	SEP.b #$30
	STZ.w SMW_OAMTileSizeBuffer[$27].Slot
	STZ.w SMW_OAMTileSizeBuffer[$28].Slot
	STZ.w SMW_OAMTileSizeBuffer[$29].Slot
	STZ.w SMW_OAMTileSizeBuffer[$2A].Slot
	STZ.w SMW_OAMTileSizeBuffer[$2B].Slot
	STZ.w SMW_OAMTileSizeBuffer[$2C].Slot
	STZ.w SMW_OAMTileSizeBuffer[$2D].Slot
	STZ.w SMW_OAMTileSizeBuffer[$2E].Slot
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM8C
	LDA.w !RAM_SMW_Overworld_MarioMap
	LDY.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CPY.b #$0A
	BNE.b CODE_048709
	EOR.b #$01
CODE_048709:
	CMP.w !RAM_SMW_Overworld_LuigiMap
	BNE.b CODE_048786
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM07
	STA.b !RAM_SMW_Misc_ScratchRAM8B
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	EOR.b #$02
	TAY
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,y
	CMP.b #$12
	BEQ.b CODE_048739
	CMP.b #$07
	BCC.b CODE_048730
	CMP.b #$0F
	BCC.b CODE_048739
CODE_048730:
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	SEC
	SBC.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM8B
	STA.b !RAM_SMW_Misc_ScratchRAM07
CODE_048739:
	REP.b #$30
	LDA.w !RAM_SMW_Flag_TwoPlayerGame
	AND.w #$00FF
	BEQ.b CODE_048786
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.w #$00F0
	BCS.b CODE_048786
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CMP.w #$00F0
	BCS.b CODE_048786
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	EOR.w #$0200
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.w #$0020
	JSR.w DrawHalo
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	EOR.w #$0002
	TAY
	LDX.w #$0020
	JSR.w DrawCurrentPlayer
	SEP.b #$30
	STZ.w SMW_OAMTileSizeBuffer[$2F].Slot
	STZ.w SMW_OAMTileSizeBuffer[$30].Slot
	STZ.w SMW_OAMTileSizeBuffer[$31].Slot
	STZ.w SMW_OAMTileSizeBuffer[$32].Slot
	STZ.w SMW_OAMTileSizeBuffer[$33].Slot
	STZ.w SMW_OAMTileSizeBuffer[$34].Slot
	STZ.w SMW_OAMTileSizeBuffer[$35].Slot
	STZ.w SMW_OAMTileSizeBuffer[$36].Slot
CODE_048786:
	SEP.b #$30
	RTS

DrawHalo:
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	PHA
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	XBA
	LSR
	TAX
	LDA.w !RAM_SMW_Player_MariosLives-$01,x
	PLX
	AND.w #$FF00
	BPL.b CODE_0487C7
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	STA.w SMW_OAMBuffer[$2D].XDisp,x
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$2E].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	CLC
	ADC.b #$F9
	STA.w SMW_OAMBuffer[$2D].YDisp,x
	STA.w SMW_OAMBuffer[$2E].YDisp,x
	LDA.b #$7C
	STA.w SMW_OAMBuffer[$2D].Tile,x
	STA.w SMW_OAMBuffer[$2E].Tile,x
	LDA.b #$20
	STA.w SMW_OAMBuffer[$2D].Prop,x
	LDA.b #$60
	STA.w SMW_OAMBuffer[$2E].Prop,x
	REP.b #$20
CODE_0487C7:
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	RTS

PlayerTilesAndProp:
;$0487CB						; Info: Frames...
	db $0E,$24,$0F,$24,$1E,$24,$1F,$24		; Walk up (Frame 1)
	db $20,$24,$21,$24,$30,$24,$31,$24		; Walk up (Frame 2)
	db $0E,$24,$0F,$24,$1E,$24,$1F,$24		; Walk up (Frame 3)
	db $20,$24,$21,$24,$31,$64,$30,$64		; Walk up (Frame 4)
	db $0A,$24,$0B,$24,$1A,$24,$1B,$24		; Walk down/stand (Frame 1)
	db $0C,$24,$0D,$24,$1C,$24,$1D,$24		; Walk down/stand (Frame 2)
	db $0A,$24,$0B,$24,$1A,$24,$1B,$24		; Walk down/stand (Frame 3)
	db $0C,$24,$0D,$24,$1D,$64,$1C,$64		; Walk down/stand (Frame 4)
	db $08,$24,$09,$24,$18,$24,$19,$24		; Walk left (Frame 1)
	db $06,$24,$07,$24,$16,$24,$17,$24		; Walk left (Frame 2)
	db $08,$24,$09,$24,$18,$24,$19,$24		; Walk left (Frame 3)
	db $06,$24,$07,$24,$16,$24,$17,$24		; Walk left (Frame 4)
	db $09,$64,$08,$64,$19,$64,$18,$64		; Walk right (Frame 1)
	db $07,$64,$06,$64,$17,$64,$16,$64		; Walk right (Frame 2)
	db $09,$64,$08,$64,$19,$64,$18,$64		; Walk right (Frame 3)
	db $07,$64,$06,$64,$17,$64,$16,$64		; Walk right (Frame 4)
	db $0E,$24,$0F,$24,$38,$24,$38,$64		; Swim up (Frame 1)
	db $20,$24,$21,$24,$39,$24,$39,$64		; Swim up (Frame 2)
	db $0E,$24,$0F,$24,$38,$24,$38,$64		; Swim up (Frame 3)
	db $20,$24,$21,$24,$39,$24,$39,$64		; Swim up (Frame 4)
	db $0A,$24,$0B,$24,$38,$24,$38,$64		; Swim down/wade (Frame 1)
	db $0C,$24,$0D,$24,$39,$24,$39,$64		; Swim down/wade (Frame 2)
	db $0A,$24,$0B,$24,$38,$24,$38,$64		; Swim down/wade (Frame 3)
	db $0C,$24,$0D,$24,$39,$24,$39,$64		; Swim down/wade (Frame 4)
	db $08,$24,$09,$24,$38,$24,$38,$64		; Swim left (Frame 1)
	db $06,$24,$07,$24,$39,$24,$39,$64		; Swim left (Frame 2)
	db $08,$24,$09,$24,$38,$24,$38,$64		; Swim left (Frame 3)
	db $06,$24,$07,$24,$39,$24,$39,$64		; Swim left (Frame 4)
	db $09,$64,$08,$64,$38,$24,$38,$64		; Swim right (Frame 1)
	db $07,$64,$06,$64,$39,$24,$39,$64		; Swim right (Frame 2)
	db $09,$64,$08,$64,$38,$24,$38,$64		; Swim right (Frame 3)
	db $07,$64,$06,$64,$39,$24,$39,$64		; Swim right (Frame 4)
	db $24,$24,$25,$24,$34,$24,$35,$24		; Enter level on land (Frame 1)
	db $24,$24,$25,$24,$34,$24,$35,$24		; Enter level on land (Frame 2)
	db $24,$24,$25,$24,$34,$24,$35,$24		; Enter level on land (Frame 3)
	db $24,$24,$25,$24,$34,$24,$35,$24		; Enter level on land (Frame 4)
	db $24,$24,$25,$24,$38,$24,$38,$64		; Enter level in water (Frame 1)
	db $24,$24,$25,$24,$38,$24,$38,$64		; Enter level in water (Frame 2)
	db $24,$24,$25,$24,$38,$24,$38,$64		; Enter level in water (Frame 3)
	db $24,$24,$25,$24,$38,$24,$38,$64		; Enter level in water (Frame 4)
	db $46,$24,$47,$24,$56,$24,$57,$24		; Climbing (Unused? Frame 1)
	db $47,$64,$46,$64,$57,$64,$56,$64		; Climbing (Unused? Frame 2)
	db $46,$24,$47,$24,$56,$24,$57,$24		; Climbing (Unused? Frame 3)
	db $47,$64,$46,$64,$57,$64,$56,$64		; Climbing (Unused? Frame 4)
	db $46,$24,$47,$24,$56,$24,$57,$24		; Climbing (Frame 1)
	db $47,$64,$46,$64,$57,$64,$56,$64		; Climbing (Frame 2)
	db $46,$24,$47,$24,$56,$24,$57,$24		; Climbing (Frame 3)
	db $47,$64,$46,$64,$57,$64,$56,$64		; Climbing (Frame 4)

StarWarpAnimationOffset:
;$04894B
	db $20,$60,$00,$40

DrawCurrentPlayer:
	SEP.b #$30
	PHY
	TYA
	LSR
	TAY
	LDA.w !RAM_SMW_Player_MariosYoshi,y
	BEQ.b DrawPlayerWithoutYoshi
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	PLY
	JMP.w DrawPlayerWithYoshi

DrawPlayerWithoutYoshi:
	PLY
	REP.b #$30
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,y
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w #$0018
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	XBA
	LSR
	TAX
	LDA.w !RAM_SMW_Player_MariosLives-$01,x
	PLX
	AND.w #$FF00
	BPL.b CODE_04898B
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	BRA.b CODE_0489A7

CODE_04898B:
	CPX.w #$0000
	BNE.b CODE_0489A7
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.w #$000B
	BNE.b CODE_0489A7
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w #$000C
	LSR
	LSR
	TAY
	LDA.w StarWarpAnimationOffset,y
	AND.w #$00FF
	TAY
CODE_0489A7:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	STA.w SMW_OAMBuffer[$27].XDisp,x
	LDA.w PlayerTilesAndProp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_OAMBuffer[$27].Tile,x
	SEP.b #$20
	INX
	INX
	INX
	INX
	INY
	INY
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	DEC.b !RAM_SMW_Misc_ScratchRAM8C
	LDA.b !RAM_SMW_Misc_ScratchRAM8C
	AND.b #$01
	BEQ.b CODE_0489D9
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM8B
CODE_0489D9:
	LDA.b !RAM_SMW_Misc_ScratchRAM8C
	BPL.b CODE_0489A7
	RTS

PlayerRidingYoshiTilesAndProp:
;$0489DE						; Info: Frames...
	db $66,$24,$67,$24,$76,$24,$77,$24		;\ Walk up (Frame 1)
	db $2F,$62,$2E,$62,$3F,$62,$3E,$62		;/
	db $66,$24,$67,$24,$76,$24,$77,$24		;\ Walk up (Frame 2)
	db $2E,$22,$2F,$22,$3E,$22,$3F,$22		;/
	db $2F,$62,$2E,$62,$3F,$62,$3E,$62		;\ Walk down/stand (Frame 1)
	db $0A,$24,$0B,$24,$1A,$24,$1B,$24		;/
	db $2E,$22,$2F,$22,$3E,$22,$3F,$22		;\ Walk down/stand (Frame 2)
	db $0A,$24,$0B,$24,$1A,$24,$1B,$24		;/
	db $64,$24,$65,$24,$74,$24,$75,$24		;\ Walk left (Frame 1)
	db $40,$22,$41,$22,$50,$22,$51,$22		;/
	db $64,$24,$65,$24,$74,$24,$75,$24		;\ Walk left (Frame 2)
	db $42,$22,$43,$24,$52,$24,$53,$24		;/
	db $65,$64,$64,$64,$75,$64,$74,$64		;\ Walk right (Frame 1)
	db $41,$62,$40,$62,$51,$62,$50,$62		;/
	db $65,$64,$64,$64,$75,$64,$74,$64		;\ Walk right (Frame 2)
	db $43,$62,$42,$62,$53,$62,$52,$62		;/
	db $38,$24,$38,$64,$66,$24,$67,$24		;\ Swim up (Frame 1)
	db $76,$24,$77,$24,$FF,$FF,$FF,$FF		;/
	db $39,$24,$39,$64,$66,$24,$67,$24		;\ Swim up (Frame 2)
	db $76,$24,$77,$24,$FF,$FF,$FF,$FF		;/
	db $38,$24,$38,$64,$2F,$62,$2E,$62		;\ Swim down/wade (Frame 1)
	db $0A,$24,$0B,$24,$1A,$24,$1B,$24		;/
	db $39,$24,$39,$24,$2E,$22,$2F,$22		;\ Swim down/wade (Frame 2)
	db $0A,$24,$0B,$24,$1A,$24,$1B,$24		;/
	db $38,$24,$38,$64,$64,$24,$65,$24		;\ Swim left (Frame 1)
	db $74,$24,$75,$24,$40,$22,$41,$22		;/
	db $39,$24,$39,$64,$64,$24,$65,$24		;\ Swim left (Frame 2)
	db $74,$24,$75,$24,$42,$22,$42,$22		;/
	db $38,$24,$38,$64,$65,$64,$64,$64		;\ Swim right (Frame 1)
	db $75,$64,$74,$64,$41,$62,$40,$62		;/
	db $39,$24,$39,$64,$65,$64,$64,$64		;\ Swim right (Frame 2)
	db $75,$64,$74,$64,$43,$62,$42,$62		;/
	db $2F,$62,$2E,$62,$3F,$62,$3E,$62		;\ Enter level on land (Frame 1)
	db $24,$24,$25,$24,$34,$24,$35,$24		;/
	db $2E,$22,$2F,$22,$3E,$22,$3F,$22		;\ Enter level on land (Frame 2)
	db $24,$24,$25,$24,$34,$24,$35,$24		;/
	db $38,$24,$38,$64,$2F,$62,$2E,$62		;\ Enter level in water (Frame 1)
	db $24,$24,$25,$24,$34,$24,$35,$24		;/
	db $39,$24,$39,$64,$2E,$22,$2F,$22		;\ Enter level in water (Frame 2)
	db $24,$24,$25,$24,$34,$24,$35,$24		;/
	db $66,$24,$67,$24,$76,$24,$77,$24		;\ Climbing (Unused? Frame 1)
	db $2F,$62,$2E,$62,$3F,$62,$3E,$62		;/
	db $66,$24,$67,$24,$76,$24,$77,$24		;\ Climbing (Unused? Frame 2)
	db $2E,$22,$2F,$22,$3E,$22,$3F,$22		;/
	db $66,$24,$67,$24,$76,$24,$77,$24		;\ Climbing (Frame 1)
	db $2F,$62,$2E,$62,$3F,$62,$3E,$62		;/
	db $66,$24,$67,$24,$76,$24,$77,$24		;\ Climbing (Frame 2)
	db $2E,$22,$2F,$22,$3E,$22,$3F,$22		;/

PlayerAndYoshiXDisp:
;$048B5E
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Walk up
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Walk down/stand
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $07,$0F,$07,$0F,$00,$08,$00,$08		;\ Walk left
	db $07,$0F,$07,$0F,$00,$08,$00,$08		;/
	db $F9,$01,$F9,$01,$00,$08,$00,$08		;\ Walk right
	db $F9,$01,$F9,$01,$00,$08,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Swim up
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Swim down/wade
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $00,$08,$07,$0F,$07,$0F,$00,$08		;\ Swim left
	db $00,$08,$07,$0F,$07,$0F,$00,$08		;/
	db $00,$08,$F9,$01,$F9,$01,$00,$08		;\ Swim right
	db $00,$08,$F9,$01,$F9,$01,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Enter level on land
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Enter level in water
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Climbing (Unused?)
	db $00,$08,$00,$08,$00,$08,$00,$08		;/
	db $00,$08,$00,$08,$00,$08,$00,$08		;\ Climbing
	db $00,$08,$00,$08,$00,$08,$00,$08		;/

PlayerAndYoshiYDisp:
;$048C1E
	db $FB,$FB,$03,$03,$00,$00,$08,$08		;\ Walk up
	db $FA,$FA,$02,$02,$00,$00,$08,$08		;/
	db $00,$00,$08,$08,$F8,$F8,$00,$00		;\ Walk down/stand
	db $00,$00,$08,$08,$F9,$F9,$01,$01		;/
	db $FC,$FC,$04,$04,$00,$00,$08,$08		;\ Walk left
	db $FB,$FB,$03,$03,$00,$00,$08,$08		;/
	db $FC,$FC,$04,$04,$00,$00,$08,$08		;\ Walk right
	db $FB,$FB,$03,$03,$00,$00,$08,$08		;/
	db $08,$08,$FB,$FB,$03,$03,$00,$00		;\ Swim up
	db $08,$08,$FA,$FA,$02,$02,$00,$00		;/
	db $08,$08,$00,$00,$F8,$F8,$00,$00		;\ Swim down/wade
	db $08,$08,$00,$00,$F9,$F9,$01,$01		;/
	db $08,$08,$FC,$FC,$04,$04,$00,$00		;\ Swim left
	db $08,$08,$FB,$FB,$03,$03,$00,$00		;/
	db $08,$08,$FC,$FC,$04,$04,$00,$00		;\ Swim right
	db $08,$08,$FB,$FB,$03,$03,$00,$00		;/
	db $00,$00,$08,$08,$F8,$F8,$00,$00		;\ Enter level on land
	db $00,$00,$08,$08,$F8,$F8,$00,$00		;/
	db $08,$08,$00,$00,$F8,$F8,$00,$00		;\ Enter level in water
	db $08,$08,$00,$00,$F8,$F8,$00,$00		;/
	db $FB,$FB,$03,$03,$00,$00,$08,$08		;\ Climbing (Unused?)
	db $FA,$FA,$02,$02,$00,$00,$08,$08		;/
	db $FB,$FB,$03,$03,$00,$00,$08,$08		;\ Climbing
	db $FA,$FA,$02,$02,$00,$00,$08,$08		;/

YoshiPalette:
;$048CDE
	db $00,$00,$00,$02,$00,$04,$00,$06

DrawPlayerWithYoshi:
;$048CE6
	LDA.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM8C
	REP.b #$30
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo,y
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w #$0008
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	CPX.w #$0000
	BNE.b CODE_048D1B
	LDA.w !RAM_SMW_Pointer_CurrentOverworldProcess
	CMP.w #$000B
	BNE.b CODE_048D1B
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w #$000C
	LSR
	LSR
	TAY
	LDA.w StarWarpAnimationOffset,y
	AND.w #$00FF
	TAY
CODE_048D1B:
	REP.b #$20
	PHY
	TYA
	LSR
	TAY
	SEP.b #$20
	LDA.w PlayerAndYoshiXDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM8A
	STA.w SMW_OAMBuffer[$27].XDisp,x
	LDA.w PlayerAndYoshiYDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM8B
	STA.w SMW_OAMBuffer[$27].YDisp,x
	PLY
	REP.b #$20
	LDA.w PlayerRidingYoshiTilesAndProp,y
	CMP.w #$FFFF
	BEQ.b CODE_048D67
	PHA
	AND.w #$0F00
	CMP.w #$0200
	BNE.b CODE_048D5E
	STY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	SEC
	SBC.w #$0004
	TAY
	PLA
	AND.w #$F0FF
	ORA.w YoshiPalette,y
	PHA
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	BRA.b CODE_048D63

CODE_048D5E:
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	PHA
CODE_048D63:
	PLA
	STA.w SMW_OAMBuffer[$27].Tile,x
CODE_048D67:
	SEP.b #$20
	INX
	INX
	INX
	INX
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM8C
	BPL.b CODE_048D1B
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetXSpeedBasedOnNormalSpriteFacingDirection(Address)
namespace SMW_SetXSpeedBasedOnNormalSpriteFacingDirection
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$F8
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_018DC4
	LDA.b #$08
CODE_018DC4:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetNormalSpriteAnimationFrame(Address)
namespace SMW_SetNormalSpriteAnimationFrame
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E1602,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SetNormalSpriteYSpeedBasedOnSlope(Address)
namespace SMW_SetNormalSpriteYSpeedBasedOnSlope
%InsertMacroAtXPosition(<Address>)

Bank01:

	%INLINEROUTINE_SMW_SetNormalSpriteYSpeedBasedOnSlope()
namespace off
endmacro

macro ROUTINE_RT01_SMW_SetNormalSpriteYSpeedBasedOnSlope(Address)
namespace SMW_SetNormalSpriteYSpeedBasedOnSlope
%InsertMacroAtXPosition(<Address>)

Bank02:

	%INLINEROUTINE_SMW_SetNormalSpriteYSpeedBasedOnSlope()
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_SetNormalSpriteYSpeedBasedOnSlope()
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BMI.b +
	LDA.b #$00
	LDY.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	BEQ.b ++
+:
	LDA.b #$18
++:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_TriggerHidden1up(Address)
namespace SMW_TriggerHidden1up
%InsertMacroAtXPosition(<Address>)

Main:
	PHX
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
CODE_03C2DC:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b Generate1Up
	DEX
	BPL.b CODE_03C2DC
	PLX
	RTL

Generate1Up:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_YPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	JSR.w SMW_NorSpr0C7_InvisibleMushroom_Status08_PopupMushroom_Main
	PLX
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_FindFreeNormalSpriteSlot(Address)
namespace SMW_FindFreeNormalSpriteSlot
%InsertMacroAtXPosition(<Address>)

LowPriority:
	LDA.b #!Define_SMW_MaxNormalSpriteSlot-$09
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	BRA.b CODE_02A9E6

HighPriority:
	STZ.b !RAM_SMW_Misc_ScratchRAM0E
CODE_02A9E6:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	TYA
	RTL

Sub:
	LDY.w !RAM_SMW_Sprites_SpriteMemorySetting
	LDA.w SMW_ParseLevelSpriteList_SpriteSlotStart,y
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w SMW_ParseLevelSpriteList_SpriteSlotMax,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0E
	TAY
CODE_02A9FE:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b Return02AA0A
	DEY
	CPY.b !RAM_SMW_Misc_ScratchRAM0F
	BNE.b CODE_02A9FE
	LDY.b #!NullSpriteSlot
Return02AA0A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PowerUpAndItemGFXRt(Address)
namespace SMW_PowerUpAndItemGFXRt
%InsertMacroAtXPosition(<Address>)

PowerUpTiles:
	db $24,$26,$48,$0E,$24,$00,$00,$00
	db $00,$E4,$E8,$24,$EC

StarPalValues:
	db $00,$04,$08,$04

Main:
	JSR.w SMW_GetDrawInfo_Bank01
	STZ.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Flag_ReznorRoomOAMIndexTimer
	BNE.b CODE_01C636
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b CODE_01C636
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_01C636
	LDA.b #$D8
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
CODE_01C636:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	BNE.b PowerUpGFXRt
	JSL.l DrawCoinSprite_Main
	RTS

DrawCoinSprite:
.Main:
	JSR.w .Sub
	RTL

.Sub:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$E8
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	TXA
	CLC
	ADC.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	BNE.b .CODE_01C670
	LDY.b #$02
	BRA.b .CODE_01C69A

.Tiles:
	db $EA,$FA,$EA

.CODE_01C670:
	PHX
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$04
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.l .Tiles-$01,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$80
	STA.w SMW_OAMBuffer[$41].Prop,y
	PLX
	LDY.b #$00
.CODE_01C69A:
	LDA.b #$01
	JSL.l SMW_FinishOAMWrite_Main
	RTS

PowerUpGFXRt:
	CMP.b #!Define_SMW_SpriteID_NorSpr076_Star
	BNE.b NoFlashingPal
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	AND.b #$03
	PHY
	TAY
	LDA.w StarPalValues,y
	PLY
	STA.b !RAM_SMW_Misc_ScratchRAM0A
NoFlashingPal:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	DEC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	LDA.b #$00
	BCS.b CODE_01C6C7
	ORA.b #$40
CODE_01C6C7:
	ORA.b !RAM_SMW_Sprites_TilePriority
	ORA.w !RAM_SMW_NorSpr_Table7E15F6,x
	EOR.b !RAM_SMW_Misc_ScratchRAM0A
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	TAX
	LDA.w PowerUpTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$00
	JSR.w SMW_NormalSpritePlatformGFXRt_CODE_01B37E
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_WasteTime(Address)
namespace SMW_WasteTime
%InsertMacroAtXPosition(<Address>)

Main:
	NOP #8
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnContactEffectFromAbove(Address)
namespace SMW_SpawnContactEffectFromAbove
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return01ABCB
	PHY
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_01ABA1:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_01ABAA
	DEY
	BPL.b CODE_01ABA1
	INY
CODE_01ABAA:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr02_ContactEffect
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	CMP.b #$01
	LDA.b #$14
	BCC.b CODE_01ABBF
	LDA.b #$1E
CODE_01ABBF:
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$08
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	PLY
Return01ABCB:
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnContactEffectFromSide(Address)
namespace SMW_SpawnContactEffectFromSide
%InsertMacroAtXPosition(<Address>)

UNK_01AB6A:
	db $0C,$FC,$EC,$DC,$CC

Main:
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_PlayKickSfx
NoKickSound:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return01AB98
	PHY
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_01AB7A:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_01AB83
	DEY
	BPL.b CODE_01AB7A
	INY
CODE_01AB83:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr02_ContactEffect
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$08
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	PLY
Return01AB98:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_BufferScrollingTiles(Address)
namespace SMW_BufferScrollingTiles
%InsertMacroAtXPosition(<Address>)

Layer1_Main:
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	JSL.l SMW_ExecutePtr_Long

.PtrsLong058823:
	dl Layer1_HorizontalLevel		; 00 Horizontal level
	dl Layer1_HorizontalLevel		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dl Layer1_HorizontalLevel		; 02 Horizontal layer 2 level (layer 2 interaction)
	dl Layer1_VerticalLevel			; 03 Do not use this level mode!
	dl Layer1_VerticalLevel			; 04 Do not use this level mode!
	dl Layer1_HorizontalLevel		; 05 Do not use this level mode!
	dl Layer1_HorizontalLevel		; 06 Do not use this level mode!
	dl Layer1_VerticalLevel			; 07 Vertical layer 2 level (no layer 2 interaction)/Overworld
	dl Layer1_VerticalLevel			; 08 Vertical layer 2 level (layer 2 interaction)
	dl Layer1_NoScroll			; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dl Layer1_VerticalLevel			; 0A Vertical level
	dl Layer1_NoScroll			; 0B Horizontal boss level (Larry, Iggy)
	dl Layer1_HorizontalLevel		; 0C Horizontal dark BG level
	dl Layer1_VerticalLevel			; 0D Vertical dark BG level
	dl Layer1_HorizontalLevel		; 0E Horizontal level
	dl Layer1_HorizontalLevel		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dl Layer1_NoScroll			; 10 Horizontal boss level (Bowser)
	dl Layer1_HorizontalLevel		; 11 Horizontal dark BG level
	dl Layer1_NoScroll			; 12 Cannot use this level mode!
	dl Layer1_NoScroll			; 13 Cannot use this level mode!
	dl Layer1_NoScroll			; 14 Cannot use this level mode!
	dl Layer1_NoScroll			; 15 Cannot use this level mode!
	dl Layer1_NoScroll			; 16 Cannot use this level mode!
	dl Layer1_NoScroll			; 17 Cannot use this level mode!
	dl Layer1_NoScroll			; 18 Cannot use this level mode!
	dl Layer1_NoScroll			; 19 Cannot use this level mode!
	dl Layer1_NoScroll			; 1A Cannot use this level mode!
	dl Layer1_NoScroll			; 1B Cannot use this level mode!
	dl Layer1_NoScroll			; 1C Cannot use this level mode!
	dl Layer1_NoScroll			; 1D Cannot use this level mode!
	dl Layer1_HorizontalLevel		; 1E Horizontal translucent level
	dl Layer1_HorizontalLevel		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

Layer2_Main:
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	JSL.l SMW_ExecutePtr_Long

.PtrsLong05888C:
	dl Layer2_NoScroll			; 00 Horizontal level
	dl Layer2_HorizontalLevel		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dl Layer2_HorizontalLevel		; 02 Horizontal layer 2 level (layer 2 interaction)
	dl Layer2_HorizontalLevel		; 03 Do not use this level mode!
	dl Layer2_HorizontalLevel		; 04 Do not use this level mode!
	dl Layer2_VerticalLevel			; 05 Do not use this level mode!
	dl Layer2_VerticalLevel			; 06 Do not use this level mode!
	dl Layer2_VerticalLevel			; 07 Vertical layer 2 level (no layer 2 interaction)/Overworld
	dl Layer2_VerticalLevel			; 08 Vertical layer 2 level (layer 2 interaction)
	dl Layer2_NoScroll			; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dl Layer2_NoScroll			; 0A Vertical level
	dl Layer2_NoScroll			; 0B Horizontal boss level (Larry, Iggy)
	dl Layer2_NoScroll			; 0C Horizontal dark BG level
	dl Layer2_NoScroll			; 0D Vertical dark BG level
	dl Layer2_NoScroll			; 0E Horizontal level
	dl Layer2_HorizontalLevel		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dl Layer2_NoScroll			; 10 Horizontal boss level (Bowser)
	dl Layer2_NoScroll			; 11 Horizontal dark BG level
	dl Layer2_NoScroll			; 12 Cannot use this level mode!
	dl Layer2_NoScroll			; 13 Cannot use this level mode!
	dl Layer2_NoScroll			; 14 Cannot use this level mode!
	dl Layer2_NoScroll			; 15 Cannot use this level mode!
	dl Layer2_NoScroll			; 16 Cannot use this level mode!
	dl Layer2_NoScroll			; 17 Cannot use this level mode!
	dl Layer2_NoScroll			; 18 Cannot use this level mode!
	dl Layer2_NoScroll			; 19 Cannot use this level mode!
	dl Layer2_NoScroll			; 1A Cannot use this level mode!
	dl Layer2_NoScroll			; 1B Cannot use this level mode!
	dl Layer2_NoScroll			; 1C Cannot use this level mode!
	dl Layer2_NoScroll			; 1D Cannot use this level mode!
	dl Layer2_NoScroll			; 1E Horizontal translucent level
	dl Layer2_HorizontalLevel		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

Layer1_Init:
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	JSL.l SMW_ExecutePtr_Long

.PtrsLong0588F5:
	dl Layer1_HorizontalLevel		; 00 Horizontal level
	dl Layer1_HorizontalLevel		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dl Layer1_HorizontalLevel		; 02 Horizontal layer 2 level (layer 2 interaction)
	dl Layer1_VerticalLevel			; 03 Do not use this level mode!
	dl Layer1_VerticalLevel			; 04 Do not use this level mode!
	dl Layer1_HorizontalLevel		; 05 Do not use this level mode!
	dl Layer1_HorizontalLevel		; 06 Do not use this level mode!
	dl Layer1_VerticalLevel			; 07 Vertical layer 2 level (no layer 2 interaction)/Overworld
	dl Layer1_VerticalLevel			; 08 Vertical layer 2 level (layer 2 interaction)
	dl Layer1_NoScroll			; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dl Layer1_VerticalLevel			; 0A Vertical level
	dl Layer1_NoScroll			; 0B Horizontal boss level (Larry, Iggy)
	dl Layer1_HorizontalLevel		; 0C Horizontal dark BG level
	dl Layer1_VerticalLevel			; 0D Vertical dark BG level
	dl Layer1_HorizontalLevel		; 0E Horizontal level
	dl Layer1_HorizontalLevel		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dl Layer1_NoScroll			; 10 Horizontal boss level (Bowser)
	dl Layer1_HorizontalLevel		; 11 Horizontal dark BG level
	dl Layer1_NoScroll			; 12 Cannot use this level mode!
	dl Layer1_NoScroll			; 13 Cannot use this level mode!
	dl Layer1_NoScroll			; 14 Cannot use this level mode!
	dl Layer1_NoScroll			; 15 Cannot use this level mode!
	dl Layer1_NoScroll			; 16 Cannot use this level mode!
	dl Layer1_NoScroll			; 17 Cannot use this level mode!
	dl Layer1_NoScroll			; 18 Cannot use this level mode!
	dl Layer1_NoScroll			; 19 Cannot use this level mode!
	dl Layer1_NoScroll			; 1A Cannot use this level mode!
	dl Layer1_NoScroll			; 1B Cannot use this level mode!
	dl Layer1_NoScroll			; 1C Cannot use this level mode!
	dl Layer1_NoScroll			; 1D Cannot use this level mode!
	dl Layer1_HorizontalLevel		; 1E Horizontal translucent level
	dl Layer1_HorizontalLevel		; 1F Horizontal layer 2 translucent level (layer 2 interaction)

Layer2_Init:
	SEP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	JSL.l SMW_ExecutePtr_Long

.PtrsLong05895E:
	dl Layer2_Background			; 00 Horizontal level
	dl Layer2_HorizontalLevel		; 01 Horizontal layer 2 level (no layer 2 interaction)
	dl Layer2_HorizontalLevel		; 02 Horizontal layer 2 level (layer 2 interaction)
	dl Layer2_HorizontalLevel		; 03 Do not use this level mode!
	dl Layer2_HorizontalLevel		; 04 Do not use this level mode!
	dl Layer2_VerticalLevel			; 05 Do not use this level mode!
	dl Layer2_VerticalLevel			; 06 Do not use this level mode!
	dl Layer2_VerticalLevel			; 07 Vertical layer 2 level (no layer 2 interaction)/Overworld
	dl Layer2_VerticalLevel			; 08 Vertical layer 2 level (layer 2 interaction)
	dl Layer2_NoScroll			; 09 Horizontal boss level (Reznor, Ludwig, Roy, Morton)
	dl Layer2_Background			; 0A Vertical level
	dl Layer2_NoScroll			; 0B Horizontal boss level (Larry, Iggy)
	dl Layer2_Background			; 0C Horizontal dark BG level
	dl Layer2_Background			; 0D Vertical dark BG level
	dl Layer2_Background			; 0E Horizontal level
	dl Layer2_HorizontalLevel		; 0F Horizontal layer 2 level (no layer 2 interaction)
	dl Layer2_NoScroll			; 10 Horizontal boss level (Bowser)
	dl Layer2_Background			; 11 Horizontal dark BG level
	dl Layer2_NoScroll			; 12 Cannot use this level mode!
	dl Layer2_NoScroll			; 13 Cannot use this level mode!
	dl Layer2_NoScroll			; 14 Cannot use this level mode!
	dl Layer2_NoScroll			; 15 Cannot use this level mode!
	dl Layer2_NoScroll			; 16 Cannot use this level mode!
	dl Layer2_NoScroll			; 17 Cannot use this level mode!
	dl Layer2_NoScroll			; 18 Cannot use this level mode!
	dl Layer2_NoScroll			; 19 Cannot use this level mode!
	dl Layer2_NoScroll			; 1A Cannot use this level mode!
	dl Layer2_NoScroll			; 1B Cannot use this level mode!
	dl Layer2_NoScroll			; 1C Cannot use this level mode!
	dl Layer2_NoScroll			; 1D Cannot use this level mode!
	dl Layer2_Background			; 1E Horizontal translucent level
	dl Layer2_HorizontalLevel		; 1F Horizontal layer 2 translucent level (layer 2 interaction)
namespace off
endmacro

macro ROUTINE_RT01_SMW_BufferScrollingTiles(Address)
namespace SMW_BufferScrollingTiles
%InsertMacroAtXPosition(<Address>)

Layer1:
.HorizontalLevel:
	PHP
	REP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	AND.w #$00FF
	ASL
	TAX
	SEP.b #$20
	LDA.l SMW_LevelDataLayoutTables_Layer1LoPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l SMW_LevelDataLayoutTables_Layer1LoPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.l SMW_LevelDataLayoutTables_Layer1HiPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.l SMW_LevelDataLayoutTables_Layer1HiPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b #SMW_LevelDataLayoutTables_Layer1LoPtrs>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	TAX
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.b #$0F
	ASL
	STA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	LDY.w #$0020
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.b #$10
	BEQ.b .CODE_058A10
	LDY.w #$0024
.CODE_058A10:
	TYA
	STA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	REP.b #$20
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.w #$01F0
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	SEP.b #$20
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	SEP.b #$10
	LDY.b #SMW_Map16Data_Main>>16
	LDA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	CMP.b #$10
	BMI.b .CODE_058A47
	LDY.b #SMW_Map16Data_OverworldLayer1>>16
.CODE_058A47:
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.w #$000F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.w #$0000
.CODE_058A55:
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	TAY
	LDA.w !RAM_SMW_Pointer_Map16Tiles,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.w #$0000
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$02,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$80,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$82,x
	INX
	INX
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w #$01B0
	BCC.b .CODE_058A55
	PLP
.NoScroll:
	RTL

.VerticalLevel:
	PHP
	REP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	AND.w #$00FF
	ASL
	TAX
	SEP.b #$20
	LDA.l SMW_LevelDataLayoutTables_Layer1LoPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l SMW_LevelDataLayoutTables_Layer1LoPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.l SMW_LevelDataLayoutTables_Layer1HiPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.l SMW_LevelDataLayoutTables_Layer1HiPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b #SMW_LevelDataLayoutTables_Layer1LoPtrs>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	TAX
	LDY.w #$0020
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.b #$10
	BEQ.b .CODE_058AD5
	LDY.w #$0028
.CODE_058AD5:
	TYA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	LSR
	LSR
	AND.b #$03
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressLo
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.b #$03
	ASL
	ASL
	ASL
	ASL
	ASL
	ASL
	STA.w !RAM_SMW_Blocks_Layer1VRAMUploadAddressHi
	REP.b #$20
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.w #$01F0
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	SEP.b #$20
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	SEP.b #$10
	LDY.b #SMW_Map16Data_Main>>16
	LDA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	CMP.b #$10
	BMI.b .CODE_058B23
	LDY.b #SMW_Map16Data_OverworldLayer1>>16
.CODE_058B23:
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	AND.w #$000F
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.w #$0000
.CODE_058B35:
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	TAY
	LDA.w !RAM_SMW_Pointer_Map16Tiles,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.w #$0000
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$80,x
	INX
	INX
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer1TilesToUploadBuffer+$80,x
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	TAY
	CLC
	ADC.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	AND.w #$000F
	BNE.b .CODE_058B84
	TYA
	AND.w #$FFF0
	CLC
	ADC.w #$0100
	STA.b !RAM_SMW_Misc_ScratchRAM08
.CODE_058B84:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	AND.w #$010F
	BNE.b .CODE_058B35
	PLP
	RTL

Layer2:
.HorizontalLevel:
	PHP
	REP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	AND.w #$00FF
	ASL
	TAX
	SEP.b #$20
	LDY.w #$0000
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$03
	BNE.b .CODE_058BA7
	LDY.w #$1000
.CODE_058BA7:
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_Layer2LoPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l SMW_LevelDataLayoutTables_Layer2LoPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.l SMW_LevelDataLayoutTables_Layer2HiPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.l SMW_LevelDataLayoutTables_Layer2HiPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b #SMW_LevelDataLayoutTables_Layer2LoPtrs>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Camera_Layer2ScrollingDirection
	TAX
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.b #$0F
	ASL
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	LDY.w #$0030
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.b #$10
	BEQ.b .CODE_058BDE
	LDY.w #$0034
.CODE_058BDE:
	TYA
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	REP.b #$30
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.w #$01F0
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	SEP.b #$20
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	SEP.b #$10
	LDY.b #SMW_Map16Data_Main>>16
	LDA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	CMP.b #$10
	BMI.b .CODE_058C15
	LDY.b #SMW_Map16Data_OverworldLayer1>>16
.CODE_058C15:
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.w #$000F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.w #$0000
.CODE_058C23:
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	TAY
	LDA.w !RAM_SMW_Pointer_Map16Tiles,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.w #$0000
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$02,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$80,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$82,x
	INX
	INX
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w #$01B0
	BCC.b .CODE_058C23
	PLP
.NoScroll:
	RTL

.VerticalLevel:
	PHP
	REP.b #$30
	LDA.w !RAM_SMW_Misc_LevelModeSetting
	AND.w #$00FF
	ASL
	TAX
	SEP.b #$20
	LDY.w #$0000
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$03
	BNE.b .CODE_058C8B
	LDY.w #$1000
.CODE_058C8B:
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_Layer2LoPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l SMW_LevelDataLayoutTables_Layer2LoPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.l SMW_LevelDataLayoutTables_Layer2HiPtrs,x
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.l SMW_LevelDataLayoutTables_Layer2HiPtrs+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b #SMW_LevelDataLayoutTables_Layer2LoPtrs>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Camera_Layer2ScrollingDirection
	TAX
	LDY.w #$0030
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.b #$10
	BEQ.b .CODE_058CBA
	LDY.w #$0038
.CODE_058CBA:
	TYA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	LSR
	LSR
	AND.b #$03
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.b #$03
	ASL
	ASL
	ASL
	ASL
	ASL
	ASL
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	REP.b #$20
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.w #$01F0
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	SEP.b #$20
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	LDA.b [!RAM_SMW_Misc_ScratchRAM0D],y
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	SEP.b #$10
	LDY.b #SMW_Map16Data_Main>>16
	LDA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	CMP.b #$10
	BMI.b .CODE_058D08
	LDY.b #SMW_Map16Data_OverworldLayer1>>16
.CODE_058D08:
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo,x
	AND.w #$000F
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.w #$0000
.CODE_058D1A:
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	TAY
	LDA.w !RAM_SMW_Pointer_Map16Tiles,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDY.w #$0000
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$80,x
	INX
	INX
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$80,x
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	TAY
	CLC
	ADC.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
	AND.w #$000F
	BNE.b .CODE_058D71
	TYA
	AND.w #$FFF0
	CLC
	ADC.w #$0100
	STA.b !RAM_SMW_Misc_ScratchRAM08
.CODE_058D71:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	AND.w #$010F
	BNE.b .CODE_058D1A
	PLP
	RTL

.Background:
	PHP
	SEP.b #$30
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	AND.b #$0F
	ASL
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressHi
	LDY.b #$30
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	AND.b #$10
	BEQ.b .CODE_058D91
	LDY.b #$34
.CODE_058D91:
	TYA
	STA.w !RAM_SMW_Blocks_Layer2VRAMUploadAddressLo
	REP.b #$20
	LDA.w #!RAM_SMW_Blocks_Layer2TilesLo
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.w #!RAM_SMW_Blocks_Layer2TilesHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	LDA.w #SMW_Map16Data_Backgrounds
#LM000Hijack_CustomBGMap16:
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	AND.w #$00F0
	BEQ.b .CODE_058DBE
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	CLC
	ADC.w #$01B0
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	LDA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	CLC
	ADC.w #$01B0
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
.CODE_058DBE:
	SEP.b #$20
	LDA.b #!RAM_SMW_Blocks_Layer2TilesLo>>16
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataBank
	LDA.b #!RAM_SMW_Blocks_Layer2TilesHi>>16
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataBank
	LDY.b #SMW_Map16Data_Backgrounds>>16
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	AND.w #$000F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.w #$0000
.CODE_058DD9:
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b [!RAM_SMW_Pointer_HiMap16BlockDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	ASL
	TAY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$02,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$80,x
	INY
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	STA.w !RAM_SMW_Blocks_Layer2TilesToUploadBuffer+$82,x
	INX
	INX
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w #$01B0
	BCC.b .CODE_058DD9
	PLP
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeLevelLayer1And2Tilemaps(Address)
namespace SMW_InitializeLevelLayer1And2Tilemaps
%InsertMacroAtXPosition(<Address>)

if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
DATA_35809E:
	%StripeImageHeader(.Layer1, $00, $00, 0, $1FFF, 1)
	db $FA,$18
.Layer1End
	%StripeImageHeader(.Layer2, $00, $00, 0, $1FFF, 2)
	db $FA,$18
.Layer2End
	db $FF
endif

Main:
	PHP
	SEP.b #$20
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.b #$0C
-:
	LDA.l DATA_35809E,x
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	BPL.b -
	STZ.b !RAM_SMW_Graphics_StripeImageToUpload
	JSL.l SMW_LoadStripeImage_Main
	LDA.b #$80
	STA.w !REGISTER_Mode7TilemapSettings
endif
	STZ.w !RAM_SMW_Unknown_7E1928
	REP.b #$30
	LDA.w #$FFFF
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateRightDownLo
	JSR.w SMW_CalculateRowOrColumnOfTilemapToUpdate_Main
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	LDA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateRightDownLo
	LDA.w #$0202
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
CODE_0580BD:
	REP.b #$30
	JSL.l SMW_BufferScrollingTiles_Layer1_Init
	JSL.l SMW_BufferScrollingTiles_Layer2_Init
	JSL.l SMW_UploadLevelLayer1And2Tilemaps_Main
	REP.b #$30
	INC.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	INC.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateRightDownLo
	SEP.b #$30
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	LSR
	LSR
	LSR
	REP.b #$30
	AND.w #$0006
	TAX
	LDA.w #$0133
	ASL
	TAY
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l SMW_CalculateRowOrColumnOfTilemapToUpdate_PipeMap16Ptrs,x
CODE_0580EC:
	STA.w !RAM_SMW_Pointer_Map16Tiles,y
	INY
	INY
	CLC
	ADC.w #$0008
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0580EC
	SEP.b #$20
	INC.w !RAM_SMW_Unknown_7E1928
	LDA.w !RAM_SMW_Unknown_7E1928
	CMP.b #$20
	BNE.b CODE_0580BD
	LDA.w !RAM_SMW_Mirror_MainScreenLayers
	STA.w !REGISTER_MainScreenLayers
	STA.w !REGISTER_MainScreenWindowMask
	LDA.w !RAM_SMW_Mirror_SubScreenLayers
	STA.w !REGISTER_SubScreenLayers
	STA.w !REGISTER_SubScreenWindowMask
	REP.b #$20
	LDA.w #$FFFF
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateRightDownLo
	STA.b !RAM_SMW_Camera_XYPositionOfLastInteractiveLayer2VRAMUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_XYPositionOfLastInteractiveLayer2VRAMUpdateRightDownLo
	PLP
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckIfLevelTilemapsNeedScrollUpdate(Address)
namespace SMW_CheckIfLevelTilemapsNeedScrollUpdate
%InsertMacroAtXPosition(<Address>)

Main:
	PHP
	REP.b #$30
	JSR.w SMW_CalculateRowOrColumnOfTilemapToUpdate_Main
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b CODE_058713
	REP.b #$20
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	AND.w #$00FF
	TAX
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	AND.w #$FFF0
	CMP.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo,x
	BEQ.b CODE_058737
	JMP.w CODE_058724

CODE_058713:
	REP.b #$20
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	AND.w #$00FF
	TAX
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	AND.w #$FFF0
	CMP.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo,x
	BEQ.b CODE_058737
CODE_058724:
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo,x
	TXA
	EOR.w #$0002
	TAX
	LDA.w #$FFFF
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo,x
	JSL.l SMW_BufferScrollingTiles_Layer1_Main
	JMP.w CODE_058774

CODE_058737:
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$02
	BNE.b CODE_058753
	REP.b #$20
	LDA.b !RAM_SMW_Camera_Layer2ScrollingDirection
	AND.w #$00FF
	TAX
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	AND.w #$FFF0
	CMP.b !RAM_SMW_Camera_XYPositionOfLastInteractiveLayer2VRAMUpdateLeftUpLo,x
	BEQ.b CODE_058774
	JMP.w CODE_058764

CODE_058753:
	REP.b #$20
	LDA.b !RAM_SMW_Camera_Layer2ScrollingDirection
	AND.w #$00FF
	TAX
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	AND.w #$FFF0
	CMP.b !RAM_SMW_Camera_XYPositionOfLastInteractiveLayer2VRAMUpdateLeftUpLo,x
	BEQ.b CODE_058774
CODE_058764:
	STA.b !RAM_SMW_Camera_XYPositionOfLastInteractiveLayer2VRAMUpdateLeftUpLo,x
	TXA
	EOR.w #$0002
	TAX
	LDA.w #$FFFF
	STA.b !RAM_SMW_Camera_XYPositionOfLastInteractiveLayer2VRAMUpdateLeftUpLo,x
	JSL.l SMW_BufferScrollingTiles_Layer2_Main
CODE_058774:
	PLP
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CalculateRowOrColumnOfTilemapToUpdate(Address)
namespace SMW_CalculateRowOrColumnOfTilemapToUpdate
%InsertMacroAtXPosition(<Address>)

PipeMap16Ptrs:
	dw SMW_Map16Data_VariableColorPipes
	dw SMW_Map16Data_GreenPipes
	dw SMW_Map16Data_YellowPipes
	dw SMW_Map16Data_PurplePipes

Main:
	PHP
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BNE.b VerticalLevel_Layer1
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LSR
	LSR
	LSR
	LSR
	TAY
	SEC
	SBC.w #$0008
	STA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo
	TYA
	CLC
	ADC.w #$0017
	STA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	SEP.b #$30							;\ LM: Skips past this chunk of code.
	LDA.b !RAM_SMW_Camera_Layer1ScrollingDirection			;| Todo: Probably has something to do with the VRAM patch, but I'm not sure.
	TAX								;|
	LDA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x		;|
	LSR								;|
	LSR								;|
	LSR								;|
	REP.b #$30							;|
	AND.w #$0006							;|
	TAX								;|
	LDA.w #$0133							;| Note: Start of the pipe map16 tiles.
	ASL								;|
	TAY								;|
	LDA.w #$0007							;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	LDA.l PipeMap16Ptrs,x						;|
CODE_0587BB:								;|
	STA.w !RAM_SMW_Pointer_Map16Tiles,y				;|
	INY								;|
	INY								;|
	CLC								;|
	ADC.w #$0008							;|
	DEC.b !RAM_SMW_Misc_ScratchRAM00				;|
	BPL.b CODE_0587BB						;/
	JMP.w CODE_0587E1

VerticalLevel_Layer1:
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LSR
	LSR
	LSR
	LSR
	TAY
	SEC
	SBC.w #$0008
	STA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo
	TYA
	CLC
	ADC.w #$0017
	STA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
CODE_0587E1:
	SEP.b #$20
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$02
	BNE.b VerticalLevel_Layer2
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LSR
	LSR
	LSR
	LSR
	TAY
	SEC
	SBC.w #$0008
	STA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo
	TYA
	CLC
	ADC.w #$0017
	STA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateRightDownLo
	JMP.w CODE_058818

VerticalLevel_Layer2:
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	LSR
	LSR
	LSR
	LSR
	TAY
	SEC
	SBC.w #$0008
	STA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateLeftUpLo
	TYA
	CLC
	ADC.w #$0017
	STA.b !RAM_SMW_Camera_InteractiveLayer2RowColumnToUpdateRightDownLo
CODE_058818:
	PLP
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_DrawLoadingLetters(Address)
namespace SMW_DrawLoadingLetters
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_BufferLoadingLetterTiles_Main
	LDX.b #TileData_TopTiles_START-TileData
	LDA.b #$B0
	LDY.w !RAM_SMW_Flag_ActiveBonusGame
	BEQ.b CODE_0091CA
	STZ.w !RAM_SMW_Counter_TimerHundreds
	STZ.w !RAM_SMW_Counter_TimerTens
	STZ.w !RAM_SMW_Counter_TimerOnes
	LDX.b #TileData_TopTiles_BONUSGAME-TileData
	LDA.b #$A4
CODE_0091CA:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b #$70
CODE_0091D0:
	JSR.w GFXRt
	INX
	CPX.b #(TileData_TopTiles_MARIO)-TileData
	BNE.b CODE_0091DF
	LDA.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_0091DF
	LDX.b #TileData_TopTiles_LUIGI-TileData
CODE_0091DF:
	TYA
	SEC
	SBC.b #$08
	TAY
	BNE.b CODE_0091D0
	JMP.w SMW_CompressOAMTileSizeBuffer_Main

GFXRt:
	LDA.w TileData_TopProp,x
	STA.w SMW_OAMBuffer[$42].Prop,y
	LDA.w TileData_BottomProp,x
	STA.w SMW_OAMBuffer[$43].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$42].XDisp,y
	STA.w SMW_OAMBuffer[$43].XDisp,y
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCS.b CODE_009206
	DEC.b !RAM_SMW_Misc_ScratchRAM01
CODE_009206:
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.b #$01
	STA.w SMW_OAMTileSizeBuffer[$42].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$43].Slot,y
	PLY
	LDA.w TileData_TopTiles,x
	BMI.b Return00922E
	STA.w SMW_OAMBuffer[$42].Tile,y
	LDA.w TileData_BottomTiles,x
	STA.w SMW_OAMBuffer[$43].Tile,y
	LDA.b #$68
	STA.w SMW_OAMBuffer[$42].YDisp,y
	LDA.b #$70
	STA.w SMW_OAMBuffer[$43].YDisp,y
Return00922E:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_DrawLoadingLetters(Address)
namespace SMW_DrawLoadingLetters
%InsertMacroAtXPosition(<Address>)

TileData:
.TopTiles:							; Note: The below 4 tables store their data in reverse order (ex. "! TRATS")
..START:
	db $00,$FF,$4D,$4C,$03,$4D,$5D,$FF
..MARIO:
	db $03,$00,$4C,$03,$04,$15
..LUIGI:
	db $00,$02,$00,$4A,$4E,$FF
..OVER:
	db $4C,$4B,$4A,$03
..GAME:
	db $5F,$05,$04,$03,$02
..UP:
	db $00,$FF,$01,$4A
..TIME:
	db $5F,$05,$04,$00,$4D
..BONUSGAME:
	db $5D,$03,$02,$01,$00,$FF,$5B,$14			;\ Note: These tile numbers correspond to different graphics than the other sets of loading letters.
	db $5F,$01,$5E,$FF,$FF,$FF				;/ Also, these last 3 $FFs seem to have been a leftover. They're still used however.

.BottomTiles:
..START:
	db $10,$FF,$00,$5C,$13,$00,$5D,$FF
..MARIO:
	db $03,$00,$5C,$13,$14,$15
..LUIGI:
	db $00,$12,$00,$03,$5E,$FF
..OVER:
	db $5C,$4B,$5A,$03
..GAME:
	db $5F,$05,$14,$13,$12
..UP:
	db $10,$FF,$11,$03
..TIME:
	db $5F,$05,$14,$00,$00
..BONUSGAME:
	db $5D,$03,$12,$11,$10,$FF,$5B,$01			;\ Note: Same deal as above.
	db $5F,$01,$5E,$FF,$FF,$FF				;/

.TopProp:
..START:
#LM182Hijack_SPaletteFix1:
	db $34,$00,$34,$34,$34,$34,$30,$00			; Glitch: Change the $30 to $34 fix the S's palette in Mario/Luigi Start! (LM: Which Lunar Magic does for you. (1.82+))
..MARIO:
	db $34,$34,$34,$34,$74,$34
..LUIGI:
	db $34,$34,$34,$34,$34,$00
..OVER:
	db $34,$34,$34,$34
..GAME:
	db $34,$34,$34,$34,$34
..UP:
	db $34,$00,$34,$34
..TIME:
	db $34,$34,$34,$34,$34
..BONUSGAME:
	db $34,$34,$34,$34,$34,$34,$34,$34
	db $34,$34,$34

.BottomProp:
..START:
#LM182Hijack_SPaletteFix2:
	db $34,$00,$B4,$34,$34,$B4,$F0,$00			; Glitch: Change the $F0 to $F4 to fix the S's palette in Mario/Luigi Start! (LM: Which Lunar Magic does for you. (1.82+))
..MARIO:
	db $B4,$B4,$34,$34,$74,$B4
..LUIGI:
	db $B4,$34,$B4,$B4,$34,$00
..OVER:
	db $34,$B4,$34,$B4
..GAME:
	db $B4,$B4,$34,$34,$34
..UP:
	db $34,$00,$34,$B4
..TIME:
	db $B4,$B4,$34,$B4,$B4
..BONUSGAME:
	db $B4,$B4,$34,$34,$34,$34,$F4,$B4
	db $F4,$B4,$B4
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BufferLoadingLetterTiles(Address)
namespace SMW_BufferLoadingLetterTiles
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$0F
#LM000Hijack_DecompressAndConverGFXTo3BPP1:
	JSL.l SMW_GraphicsDecompressionRoutines_Main				; LM: Changes this to a JSL.l to $0EFC00
	LDA.w !RAM_SMW_Flag_ActiveBonusGame
	REP.b #$30
	BEQ.b CODE_00A842
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0030
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_00A842:
	LDX.w #$0000
CODE_00A845:
	LDY.w #$0008
CODE_00A848:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	STA.l !RAM_SMW_Graphics_DecompressedLoadingLetters,x
	INX
	INX
	INC.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEY
	BNE.b CODE_00A848
	LDY.w #$0008
CODE_00A85A:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]
	AND.w #$00FF
	STA.l !RAM_SMW_Graphics_DecompressedLoadingLetters,x
	INX
	INX
	INC.b !RAM_SMW_Misc_ScratchRAM00
	DEY
	BNE.b CODE_00A85A
	CPX.w #$0300
	BCC.b CODE_00A845
	SEP.b #$30
	LDY.b #$00
#LM221Hijack_DisableSP1VRAMBackup2:
	JSL.l SMW_GraphicsDecompressionRoutines_Main				;\ LM: Skips the code indicated by this comment block. (2.21+)
	REP.b #$30								;| This part of the routine is responsible for preserving tiles 4A-4F/5A-5F so they can be restored after the loading letters are done displaying
	LDA.w #SMW_GraphicDecompressionBuffer[$4A].Tile				;| However, this is unnecessary in ROM hacks because Lunar Magic forces the graphics to reload regardless of which ones were loaded previously, meaning the loading letters will always be overwritten before the level fades in.
	STA.b !RAM_SMW_Misc_ScratchRAM00					;| In the original SMW, it's unnecesary 99% of the time because switching between the overworld/levels will cause SP1 to load GFX 0F/00 and thus cause it to reload.
	LDA.w #(SMW_GraphicDecompressionBuffer[$4A].Tile)>>8			;| The exception to this is if you go to the Bonus Game, since you're going from a level to another level. Because SP1 won't get reloaded, if you were to disable this buffering code, then a couple of Mario's flying poses would have glitch tiles in levels 000/100.
	STA.b !RAM_SMW_Misc_ScratchRAM01					;|
	LDX.w #$0000								;|
CODE_00A886:									;|
	LDY.w #$0008								;|
CODE_00A889:									;|
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]					;|
	STA.w !RAM_SMW_Graphics_DecompressedOverworldGFX+$0100,x		;|
	INX									;|
	INX									;|
	INC.b !RAM_SMW_Misc_ScratchRAM00					;|
	INC.b !RAM_SMW_Misc_ScratchRAM00					;|
	DEY									;|
	BNE.b CODE_00A889							;|
	LDY.w #$0008								;|
CODE_00A89A:									;|
	LDA.b [!RAM_SMW_Misc_ScratchRAM00]					;|
	AND.w #$00FF								;|
	STA.w !RAM_SMW_Graphics_DecompressedOverworldGFX+$0100,x		;|
	INX									;|
	INX									;|
	INC.b !RAM_SMW_Misc_ScratchRAM00					;|
	DEY									;|
	BNE.b CODE_00A89A							;|
	CPX.w #$00C0								;|
	BNE.b CODE_00A8B3							;|
	LDA.w #(SMW_GraphicDecompressionBuffer[$5A].Tile)			;|
	STA.b !RAM_SMW_Misc_ScratchRAM00					;|
CODE_00A8B3:									;|
	CPX.w #$0180								;|
	BCC.b CODE_00A886							;|
	SEP.b #$30								;/
	LDA.b #$01
	STA.w !RAM_SMW_Flag_UploadLoadScreenLettersToVRAM
	STA.w !RAM_SMW_Flag_RestoreSP1TilesAfterMarioStart			; Optimization: Junk
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode17_ShowDeathMessage(Address)
namespace SMW_GameMode17_ShowDeathMessage
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	LDA.w !RAM_SMW_Timer_DisplayDeathMessageAnimation
	BNE.b CODE_00978B
	DEC.w !RAM_SMW_Timer_TimeToDisplayDeathMessage
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDY.w !RAM_SMW_Timer_TimeToDisplayDeathMessage
	CPY.b #$30
	BCS.b CODE_00978E
else
	BNE.b CODE_00978E
endif
	LDA.w !RAM_SMW_Player_CurrentLifeCount
	BPL.b CODE_009788
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	LDA.w !RAM_SMW_Player_MariosLives
	ORA.w !RAM_SMW_Player_LuigisLives
	BPL.b CODE_009788
	LDX.b #$0C
CODE_009779:
	STZ.w !RAM_SMW_Flag_Collected5YoshiCoins,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STZ.w !RAM_SMW_Flag_Collected1upCheckpoints,x
else
	STZ.w !RAM_SMW_Misc_ScratchRAM06,x				; Glitch: Why was this changed in the USA version?
endif
	STZ.w !RAM_SMW_Flag_CollectedMoons,x
	DEX
	BPL.b CODE_009779
	INC.w !RAM_SMW_Flag_ShowContinueAndEnd
CODE_009788:
	JMP.w SMW_GameMode0A_PlayerSelect_CODE_009E62

CODE_00978B:
	SEC
	SBC.b #$04
CODE_00978E:
	STA.w !RAM_SMW_Timer_DisplayDeathMessageAnimation
	CLC
	ADC.b #$A0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ROL.b !RAM_SMW_Misc_ScratchRAM01
	LDX.w !RAM_SMW_Misc_DeathMessageToDisplay
	LDY.b #$48
CODE_00979D:
	CPY.b #$28
	BNE.b CODE_0097AE
	LDA.b #$78
	SEC
	SBC.w !RAM_SMW_Timer_DisplayDeathMessageAnimation
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ROL
	EOR.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0097AE:
	JSR.w SMW_DrawLoadingLetters_GFXRt
	INX
	TYA
	SEC
	SBC.b #$08
	TAY
	BNE.b CODE_00979D
	JMP.w SMW_CompressOAMTileSizeBuffer_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode16_LoadDeathMessage(Address)
namespace SMW_GameMode16_LoadDeathMessage
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_BufferLoadingLetterTiles_Main
	JMP.w SMW_GameMode00_LoadNintendoPresents_CODE_0093CA
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode00_LoadNintendoPresents(Address)
namespace SMW_GameMode00_LoadNintendoPresents
%InsertMacroAtXPosition(<Address>)

XDisp:
	db $60,$70,$80,$90

Tiles:
	db $02,$04,$06,$08

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_SetStandardPPUSettings_Main
	JSR.w SMW_UploadGraphicsFiles_Layer3
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) == $00
	LDY.b #$0C
	LDX.b #$03
CODE_00939E:
	LDA.w XDisp,x
	STA.w SMW_OAMBuffer[!OAM_SMW_NintendoPresents&$7F].XDisp,y
	LDA.b #$70
	STA.w SMW_OAMBuffer[!OAM_SMW_NintendoPresents&$7F].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[!OAM_SMW_NintendoPresents&$7F].Tile,y
	LDA.b #$30
	STA.w SMW_OAMBuffer[!OAM_SMW_NintendoPresents&$7F].Prop,y
	DEY
	DEY
	DEY
	DEY
	DEX
	BPL.b CODE_00939E
	LDA.b #$AA
	STA.w SMW_UpperOAMBuffer[!OAM_SMW_NintendoPresents&$7F].Slot
	LDA.b #!Define_SMW_Sound1DFC_Coin
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #!Define_SMW_Timer_DisplayNintendoPresents
	STA.w !RAM_SMW_Timer_DisplayNintendoPresents
endif
CODE_0093CA:
	LDA.b #!ScreenDisplayRegister_MaxBrightness0F
	STA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	LDA.b #$01
	STA.w !RAM_SMW_Misc_MosaicDirection
	STZ.w !RAM_SMW_Misc_SpritePaletteSetting
	JSR.w SMW_BufferPalettesRoutines_Levels
	STZ.w !RAM_SMW_Palettes_BackgroundColorLo
	STZ.w !RAM_SMW_Palettes_BackgroundColorHi
	JSR.w SMW_UpdateEntirePalette_Main
	STZ.w !RAM_SMW_Misc_BlinkingCursorPos
	LDX.b #$10
	LDY.b #$04
CODE_0093EA:
	LDA.b #$01
	STA.w !RAM_SMW_Misc_NMIToUseFlag
	LDA.b #$20
	JSR.w SMW_SetVisibleLayers_Main
CODE_0093F4:
	INC.w !RAM_SMW_Misc_GameMode
Mode04Finish:
#LM221Hijack_TurnOnScreenTimingFix:
	LDA.b #$81
	STA.w !REGISTER_IRQNMIAndJoypadEnableFlags
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode10_BufferLevelLoadMessage(Address)
namespace SMW_GameMode10_BufferLevelLoadMessage
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	LDA.w !RAM_SMW_Flag_ActiveBonusGame
	BNE.b CODE_0096A8
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	ORA.w !RAM_SMW_Flag_ShowPlayerStart
	ORA.w !RAM_SMW_Misc_IntroLevelFlag
	BNE.b CODE_0096AB
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	CMP.b #$56							; Note: If the player is standing on Yoshi's house, then don't display "Mario Start!".
	BEQ.b CODE_0096AB
CODE_0096A8:
	JSR.w SMW_DrawLoadingLetters_Main
CODE_0096AB:
	JMP.w SMW_GameMode00_LoadNintendoPresents_CODE_0093CA
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeScrollSprites(Address)
namespace SMW_InitializeScrollSprites
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	STZ.w !RAM_SMW_ScrollSpr_LayerIndex
	JSR.w CODE_05BCE9
	LDA.b #$04
	STA.w !RAM_SMW_ScrollSpr_LayerIndex
	JSR.w CODE_05BD0E
	PLB
	RTL

CODE_05BCE9:
	LDA.w !RAM_SMW_L1ScrollSpr_SpriteID
	JSL.l SMW_ExecutePtr_Absolute

Ptrs05BCF0:
	dw SMW_NorSpr0E7_SpecialAutoScroll_Main
	dw SMW_NorSpr0E8_SpecialAutoScroll_Main
	dw SMW_NorSpr0E9_Layer2Smash_Main
	dw SMW_NorSpr0EA_Layer2Scroll_Main
	dw SMW_NorSpr0EB_UnusedSprite_Main
	dw SMW_NorSpr0EC_UnusedSprite_Main
	dw SMW_NorSpr0ED_Layer2Falls_Main
	dw SMW_NorSpr0EE_UnusedSprite_Main
	dw SMW_NorSpr0EF_Layer2ScrollSOrL_Main
	dw SMW_NorSpr0F0_UnusedSprite_Main
	dw SMW_NorSpr0F1_UnusedSprite_Main
	dw SMW_NorSpr0F2_Layer2OnOffControlled_Main
	dw SMW_NorSpr0F3_RegularAutoScroll_Main
	dw SMW_NorSpr0F4_FastBGScroll_Main
	dw SMW_NorSpr0F5_Layer2ScrollWhenTouched_Main

CODE_05BD0E:
	LDA.w !RAM_SMW_L2ScrollSpr_SpriteID
	BEQ.b Return05BD35
	JSL.l SMW_ExecutePtr_Absolute

Ptrs05BD17:
	dw SMW_NorSpr0E7_SpecialAutoScroll_Layer2
	dw SMW_NorSpr0E7_SpecialAutoScroll_Layer2
	dw SMW_ProcessScrollSprites_Return
	dw SMW_NorSpr0EA_Layer2Scroll_CODE_05BF20
	dw SMW_NorSpr0EB_UnusedSprite_ADDR_05BDF0
	dw SMW_ProcessScrollSprites_Return
	dw SMW_ProcessScrollSprites_Return
	dw Return05BD35
	dw SMW_NorSpr0EF_Layer2ScrollSOrL_CODE_05BEC6
	dw SMW_NorSpr0F4_FastBGScroll_CODE_05C022
	dw SMW_NorSpr0F1_UnusedSprite_ADDR_05BE4D
	dw SMW_ProcessScrollSprites_Return
	dw SMW_ProcessScrollSprites_Return
	dw SMW_ProcessScrollSprites_Return
	dw SMW_ProcessScrollSprites_Return

Return05BD35:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_InitializeScrollSprites_Return05BD35, SMW_NorSpr0EE_UnusedSprite_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_HandleScrollSpriteAndLayer3Scrolling(Address)
namespace SMW_HandleScrollSpriteAndLayer3Scrolling
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w SMW_ProcessScrollSprites_Layer1
	JSR.w SMW_ProcessScrollSprites_Layer2
	JSR.w SMW_ScrollSecondInteractiveLayer_Sub
	LDA.w !RAM_SMW_Misc_Layer1XPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w !RAM_SMW_Misc_Layer1XDisp
	STA.w !RAM_SMW_Misc_Layer1XDisp
	LDA.w !RAM_SMW_Misc_Layer1YPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w !RAM_SMW_Misc_Layer1YDisp
	STA.w !RAM_SMW_Misc_Layer1YDisp
	LDA.w !RAM_SMW_Misc_Layer2XPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDY.w !RAM_SMW_L2ScrollSpr_SpriteID
	DEY
	BNE.b CODE_05BC33
	TYA
CODE_05BC33:
	STA.w !RAM_SMW_Misc_Layer2XDisp
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.w !RAM_SMW_Misc_Layer2YDisp
	LDA.w !RAM_SMW_Flag_DisableLayer3Scroll
	BNE.b CODE_05BC47
	JSR.w SMW_ScrollLayer3_Main
CODE_05BC47:
	PLB
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_ScrollLayer3(Address)
namespace SMW_ScrollLayer3
%InsertMacroAtXPosition(<Address>)

TideYAcceleration:
	db $FF,$01

TideMaxYSpeed:
	db $FC,$04

TideMaxYPos:
	db $30,$A0

Main:
	LDA.w !RAM_SMW_Flag_Layer3TideLevel
	BEQ.b CODE_05C414
	JMP.w Layer3Tide

CODE_05C414:
	REP.b #$20
	LDY.w !RAM_SMW_Misc_LevelTilesetSetting
	CPY.b #$01
	BEQ.b CODE_05C421
	CPY.b #$03
	BNE.b CODE_05C428
CODE_05C421:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LSR
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	BRA.b CODE_05C491

CODE_05C428:
	LDY.w !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_05C48D
	LDA.w !RAM_SMW_Flag_Layer3VerticalScrollDirection
	AND.w #$00FF
	TAY
	LDA.w DATA_05CBEB
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	CPY.b #$01
	BEQ.b CODE_05C446
	EOR.w #$FFFF
	INC
CODE_05C446:
	LDY.b #$00
	CMP.w !RAM_SMW_Misc_Layer3XSpeedLo
	BEQ.b CODE_05C45B
	BPL.b CODE_05C451
	LDY.b #$02
CODE_05C451:
	LDA.w !RAM_SMW_Misc_Layer3XSpeedLo
	CLC
	ADC.w DATA_05CBBB,y
	STA.w !RAM_SMW_Misc_Layer3XSpeedLo
CODE_05C45B:
	LDA.w !RAM_SMW_Misc_Layer3TideSubYPosLo
	AND.w #$00FF
	CLC
	ADC.w !RAM_SMW_Misc_Layer3XSpeedLo
	STA.w !RAM_SMW_Misc_Layer3TideSubYPosLo
	AND.w #$FF00
	BPL.b CODE_05C470
	ORA.w #$00FF
CODE_05C470:
	XBA
	CLC
	ADC.b !RAM_SMW_Mirror_Layer3XPosLo
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	AND.w #$00FF
	CMP.w #$0080
	BCC.b CODE_05C484
	ORA.w #$FF00
CODE_05C484:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Mirror_Layer3XPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
CODE_05C48D:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
CODE_05C491:
	SEP.b #$20
	RTS

Layer3Tide:
	DEC
	BNE.b CODE_05C4EC
	LDA.w !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_05C4EC
	LDY.w !RAM_SMW_Flag_Layer3VerticalScrollDirection
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_05C4C0
	LDA.w !RAM_SMW_Misc_Layer3YSpeedLo
	BNE.b CODE_05C4AF
	DEC.w !RAM_SMW_Timer_WaitBeforeLayer3TideMovesVertically
	BNE.b CODE_05C4EC
CODE_05C4AF:
	CMP.w TideMaxYSpeed,y
	BEQ.b CODE_05C4BB
	CLC
	ADC.w TideYAcceleration,y
	STA.w !RAM_SMW_Misc_Layer3YSpeedLo
CODE_05C4BB:
	LDA.b #$4B
	STA.w !RAM_SMW_Timer_WaitBeforeLayer3TideMovesVertically
CODE_05C4C0:
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
	CMP.w TideMaxYPos,y
	BNE.b CODE_05C4CD
	TYA
	EOR.b #$01
	STA.w !RAM_SMW_Flag_Layer3VerticalScrollDirection
CODE_05C4CD:
	LDA.w !RAM_SMW_Misc_Layer3YSpeedLo
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_Misc_Layer3TideSubYPosLo
	STA.w !RAM_SMW_Misc_Layer3TideSubYPosLo
	LDA.w !RAM_SMW_Misc_Layer3YSpeedLo
	PHP
	LSR
	LSR
	LSR
	LSR
	PLP
	BPL.b CODE_05C4E8
	ORA.b #$F0
CODE_05C4E8:
	ADC.b !RAM_SMW_Mirror_Layer3YPosLo				;\ Glitch: Because this position changing routine never touches the high byte of the layer 3 Y position, this causes tides to be vertically fixed on screen.
	STA.b !RAM_SMW_Mirror_Layer3YPosLo				;/
CODE_05C4EC:
	LDA.b !RAM_SMW_Mirror_Layer3XPosLo
	SEC
	ADC.w !RAM_SMW_Misc_Layer1XDisp
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	LDA.b #$01
	STA.b !RAM_SMW_Mirror_Layer3XPosHi
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_ScrollLayer3(Address)
namespace SMW_ScrollLayer3
%InsertMacroAtXPosition(<Address>)

DATA_05CBBB:
	dw $0004,$FFFC

UNK_05CBBF:
	dw $0004,$FFFC
namespace off
endmacro

macro ROUTINE_RT02_SMW_ScrollLayer3(Address)
namespace SMW_ScrollLayer3
%InsertMacroAtXPosition(<Address>)

DATA_05CBEB:
	db $04,$04
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ScrollSecondInteractiveLayer(Address)
namespace SMW_ScrollSecondInteractiveLayer
%InsertMacroAtXPosition(<Address>)

Sub:
	REP.b #$20
	LDY.w !RAM_SMW_Flag_Layer3TideLevel
	BNE.b CODE_05BC5F
	LDA.w !RAM_SMW_Misc_Layer2XPosLo
	SEC
	SBC.w !RAM_SMW_Misc_Layer1XPosLo
	STA.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	BRA.b CODE_05BC69

CODE_05BC5F:
	LDA.b !RAM_SMW_Mirror_Layer3XPosLo
	SEC
	SBC.w !RAM_SMW_Misc_Layer1XPosLo
	STA.b !RAM_SMW_Misc_SecondLevelLayerXPosLo					; Glitch: This line causes the layer 3 tide interaction to be messed up for sprites.
	LDA.b !RAM_SMW_Mirror_Layer3YPosLo
CODE_05BC69:
	SEC
	SBC.w !RAM_SMW_Misc_Layer1YPosLo
	STA.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	SEP.b #$20
	RTS

Main:
	JSR.w Sub
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_ProcessScrollSprites(Address)
namespace SMW_ProcessScrollSprites
%InsertMacroAtXPosition(<Address>)

Layer1:
	STZ.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w !RAM_SMW_Flag_SpritesLocked
	BNE.b Return
	LDA.w !RAM_SMW_L1ScrollSpr_SpriteID
	BEQ.b Return
	JSL.l SMW_ExecutePtr_Absolute

Ptrs05BC87:
	dw SMW_Layer1SpecialScrolling00_VariableScroll_Main
	dw SMW_Layer1SpecialScrolling01_VariableScroll_Main
	dw SMW_Layer1SpecialScrolling02_DoNothing_Main
	dw SMW_Layer1SpecialScrolling03_DoNothing_Main
	dw SMW_Layer1SpecialScrolling04_Unused_Main
	dw SMW_Layer1SpecialScrolling05_Unused_Main
	dw SMW_Layer1SpecialScrolling06_DoNothing_Main
	dw SMW_Layer1SpecialScrolling07_DoNothing_Main
	dw SMW_Layer1SpecialScrolling08_Layer2ScrollSOrL_Main
	dw SMW_Layer1SpecialScrolling09_DoNothing_Main
	dw SMW_Layer1SpecialScrolling0A_Unused_Main
	dw SMW_Layer1SpecialScrolling0B_Layer2OnOffControlled_Main
	dw SMW_Layer1SpecialScrolling0C_RegularAutoScroll_Main
	dw SMW_Layer1SpecialScrolling0D_DoNothing_Main
	dw SMW_Layer1SpecialScrolling0E_DoNothing_Main

Layer2:
	LDA.b #$04
	STA.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w !RAM_SMW_L2ScrollSpr_SpriteID
	BEQ.b Return
	LDY.w !RAM_SMW_Flag_SpritesLocked
	BNE.b Return
	JSL.l SMW_ExecutePtr_Absolute

Ptrs05BCB8:
	dw SMW_Layer2SpecialScrolling00_VariableScroll_Main
	dw SMW_Layer2SpecialScrolling01_VariableScroll_Main
	dw SMW_Layer2SpecialScrolling02_Layer2Smash_Main
	dw SMW_Layer2SpecialScrolling03_Layer2Scroll_Main
	dw SMW_Layer2SpecialScrolling04_Unused_Main
	dw SMW_Layer2SpecialScrolling05_DoNothing_Main
	dw SMW_Layer2SpecialScrolling06_Unused_Main
	dw SMW_Layer2SpecialScrolling07_DoNothing_Main
	dw SMW_Layer2SpecialScrolling08_Layer2ScrollSOrL_Main
	dw SMW_Layer2SpecialScrolling0D_FastBGScroll_NonFlagged
	dw SMW_Layer2SpecialScrolling0A_Unused_Main
	dw SMW_Layer2SpecialScrolling0B_Layer2OnOffControlled_Main
	dw SMW_Layer2SpecialScrolling0C_RegularAutoScroll_Main
	dw SMW_Layer2SpecialScrolling0D_FastBGScroll_Flagged
	dw SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched_Main
namespace off
endmacro

macro ROUTINE_RT01_SMW_ProcessScrollSprites(Address)
namespace SMW_ProcessScrollSprites
%InsertMacroAtXPosition(<Address>)

Return:
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_NorSpr0F0_UnusedSprite_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer1SpecialScrolling02_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer1SpecialScrolling03_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer1SpecialScrolling06_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer1SpecialScrolling09_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer1SpecialScrolling0D_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer1SpecialScrolling0E_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessScrollSprites_Return, SMW_Layer2SpecialScrolling05_DoNothing_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_Layer1SpecialScrolling01_VariableScroll(Address)
namespace SMW_Layer1SpecialScrolling01_VariableScroll
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_Timer,x
	BNE.b CODE_05C05F
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	RTS

CODE_05C05F:
	REP.b #$20
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAY
	LDA.w DATA_05CA6F-$01,y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w DATA_05CABF-$01,y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	TAX
	LDA.w !RAM_SMW_Misc_Layer1XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_Layer1YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$02
	LDA.w DATA_05CA6F,y
	AND.w #$00FF
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_05C098
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	STX.b !RAM_SMW_Misc_ScratchRAM08
	BRA.b CODE_05C0AD

CODE_05C098:
	ASL
	ASL
	ASL
	ASL
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_05C0A9
	LDX.b #$00
	EOR.w #$FFFF
	INC
CODE_05C0A9:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STX.b !RAM_SMW_Misc_ScratchRAM08
CODE_05C0AD:
	LDX.b #$00
	LDA.w DATA_05CABF,y
	AND.w #$00FF
	CMP.b !RAM_SMW_Misc_ScratchRAM06
	BNE.b CODE_05C0BD
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	BRA.b CODE_05C0D0

CODE_05C0BD:
	ASL
	ASL
	ASL
	ASL
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_05C0CE
	LDX.b #$02
	EOR.w #$FFFF
	INC
CODE_05C0CE:
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_05C0D0:
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCS.b CODE_05C0D7
	LDX.b !RAM_SMW_Misc_ScratchRAM08
CODE_05C0D7:
	STX.b !RAM_SMW_Camera_Layer1ScrollingDirection
	LDA.w #$FFFF
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_05C0F5
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM08
CODE_05C0F5:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.w !REGISTER_DividendLo
	SEP.b #$20
	LDA.w DATA_05CB0F,y
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
	BNE.b CODE_05C123
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	INC.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	SEP.b #$20
	DEC.w !RAM_SMW_L1ScrollSpr_Timer,x
	JMP.w Main

CODE_05C123:
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDY.b #$10
	LDA.w #$0000
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_05C134:
	ASL.b !RAM_SMW_Misc_ScratchRAM0C
	ROL
	CMP.b !RAM_SMW_Misc_ScratchRAM0A
	BCC.b CODE_05C13D
	SBC.b !RAM_SMW_Misc_ScratchRAM0A
CODE_05C13D:
	ROL.b !RAM_SMW_Misc_ScratchRAM0E
	DEY
	BNE.b CODE_05C134
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAY
	LDA.w DATA_05CB0F,y
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDX.b #$02
CODE_05C15D:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	BMI.b CODE_05C165
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	BRA.b CODE_05C167

CODE_05C165:
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_05C167:
	BIT.b !RAM_SMW_Misc_ScratchRAM00,x
	BPL.b CODE_05C16F
	EOR.w #$FFFF
	INC
CODE_05C16F:
	PHX
	PHA
	TXA
	CLC
	ADC.w !RAM_SMW_ScrollSpr_LayerIndex
	TAX
	PLA
	LDY.b #$00
	CMP.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	BEQ.b CODE_05C18D
	BPL.b CODE_05C183
	LDY.b #$02
CODE_05C183:
	LDA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	CLC
	ADC.w DATA_05CB5F,y
	STA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
CODE_05C18D:
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
	PLX
	DEX
	DEX
	BPL.b CODE_05C15D
	SEP.b #$20
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_Layer1SpecialScrolling01_VariableScroll_Main, SMW_Layer1SpecialScrolling00_VariableScroll_Main)
	%SetDuplicateOrNullPointer(SMW_Layer1SpecialScrolling01_VariableScroll_Main, SMW_Layer2SpecialScrolling00_VariableScroll_Main)
endmacro

macro ROUTINE_RT01_SMW_Layer1SpecialScrolling01_VariableScroll(Address)
namespace SMW_Layer1SpecialScrolling01_VariableScroll
%InsertMacroAtXPosition(<Address>)

DATA_05CA6F:
	db $00,$09,$14,$1C,$24,$28,$33,$3C
	db $43,$4B,$54,$60,$67,$74,$77,$7B
	db $83,$8A,$8D,$90,$99,$A0,$B0,$00
	db $09,$14,$2C,$3C,$B0,$00,$09,$11
	db $1D,$2C,$32,$41,$48,$63,$6B,$70
	db $00,$27,$37,$70,$00,$07,$12,$27
	db $32,$48,$5B,$70,$00,$20,$28,$3A
	db $40,$5F,$66,$6B,$6B,$80,$80,$89
	db $92,$96,$9A,$9E,$A0,$B0,$00,$10
	db $1A,$20,$2B,$30,$3B,$40,$4B,$50

DATA_05CABF:
	db $0C,$0C,$06,$0B,$08,$0C,$03,$02
	db $09,$03,$09,$02,$06,$06,$07,$05
	db $08,$05,$0A,$04,$08,$04,$04,$0C
	db $0C,$07,$07,$05,$05,$0C,$0C,$08
	db $0C,$0C,$07,$07,$0A,$0A,$0C,$0C
	db $00,$00,$0A,$0A,$00,$00,$09,$09
	db $03,$03,$0C,$0C,$0C,$0C,$08,$08
	db $05,$05,$02,$02,$09,$09,$01,$01
	db $01,$02,$03,$07,$08,$08,$0C,$0C
	db $02,$02,$0A,$0A,$02,$02,$0A,$0A

DATA_05CB0F:
	db $07,$07,$07,$07,$07,$07,$07,$07
	db $07,$07,$07,$07,$07,$07,$07,$07
	db $07,$07,$07,$07,$07,$07,$07,$07
	db $07,$07,$07,$07,$07,$07,$07,$07
	db $07,$07,$07,$07,$07,$07,$07,$07
	db $07,$07,$07,$07,$07,$07,$07,$07
	db $07,$07,$07,$07,$08,$08,$08,$08
	db $08,$08,$10,$08,$40,$08,$04,$08
	db $10,$08,$08,$10,$10,$08,$08,$08
	db $08,$08,$08,$08,$08,$08,$08,$08

DATA_05CB5F:
	dw $0001,$FFFF,$0001,$FFFF
	dw $0001,$FFFF,$0001,$FFFF
	dw $0001,$FFFF,$0001,$FFFF
	dw $0001,$FFFF
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer1SpecialScrolling05_Unused(Address)
namespace SMW_Layer1SpecialScrolling05_Unused
%InsertMacroAtXPosition(<Address>)

Main: ; not dis correctly in all.log
	LDA.b #$02
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	STZ.b !RAM_SMW_Camera_Layer2ScrollingDirection
	REP.b #$20
	LDX.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	BNE.b ADDR_05C6CD
	LDA.w !RAM_SMW_L1ScrollSpr_XSpeedLo
	CMP.w #$0080
	BEQ.b ADDR_05C6B4
	INC
ADDR_05C6B4:
	STA.w !RAM_SMW_L1ScrollSpr_XSpeedLo
	LDY.b !RAM_SMW_Camera_LastScreenHoriz
	DEY
	CPY.w !RAM_SMW_Misc_Layer1XPosHi
	BNE.b ADDR_05C6EC
	INC.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo
	LDA.w #$FCF0
	STA.w !RAM_SMW_UnusedRAM_UnknownScrollFunctionFlagLo
	BRA.b ADDR_05C6EC

ADDR_05C6CD:
	LDY.b #$16
	STY.w !REGISTER_MainScreenLayers
	LDA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	CMP.w #$FF80
	BEQ.b ADDR_05C6DB
	DEC
ADDR_05C6DB:
	STA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STA.w !RAM_SMW_L1ScrollSpr_YSpeedLo
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	BNE.b ADDR_05C6EC
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo
ADDR_05C6EC:
	LDX.b #$06
ADDR_05C6EE:
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
	DEX
	DEX
	BPL.b ADDR_05C6EE
	SEP.b #$20
	LDA.w !RAM_SMW_Misc_Layer1XPosHi
	SEC
	SBC.b !RAM_SMW_Camera_LastScreenHoriz
	INC
	INC
	XBA
	LDA.w !RAM_SMW_Misc_Layer1XPosLo
	REP.b #$20
	LDY.b #$82
	CMP.w #$0000
	BPL.b ADDR_05C711
	LDA.w #$0000
	LDY.b #$02
ADDR_05C711:
	STA.w !RAM_SMW_Misc_Layer2XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STY.b !RAM_SMW_Misc_LevelLayoutFlags
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B						; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer2SpecialScrolling01_VariableScroll(Address)
namespace SMW_Layer2SpecialScrolling01_VariableScroll
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_Layer1SpecialScrolling01_VariableScroll_Main
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer2XPosLo
	STA.w !RAM_SMW_Misc_Layer1XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	CLC
	ADC.w !RAM_SMW_ShakingLayer1DispYLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer2SpecialScrolling03_Layer2Scroll(Address)
namespace SMW_Layer2SpecialScrolling03_Layer2Scroll
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$30
	LDY.w !RAM_SMW_ScrollSpr_LayerIndex
	REP.b #$30
	LDA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,y
	TAX
	LDA.w !RAM_SMW_Misc_Layer1YPosLo,y
	CMP.w !RAM_SMW_L1ScrollSpr_SubXPosLo,y
	BCC.b CODE_05C5D4
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STX.b !RAM_SMW_Misc_ScratchRAM02
	BRA.b CODE_05C5D8

CODE_05C5D4:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM04
CODE_05C5D8:
	SEP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_05C621
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	BEQ.b CODE_05C5EB
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
CODE_05C5EB:
	TYA
	ASL
	TAY
	LDA.w SMW_SharedScrollSpriteTables_DATA_05CBF5+$01,y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	EOR.w #$0001
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	AND.w #$00FF
	BNE.b CODE_05C615
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_05C615:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	STA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
CODE_05C621:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAX
	LDA.w SMW_SharedScrollSpriteTables_DATA_05CBF1,x
	AND.w #$00FF
	CPX.b #$01
	BEQ.b CODE_05C63C
	EOR.w #$FFFF
	INC
CODE_05C63C:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDY.b #$00
	CMP.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	BEQ.b CODE_05C654
	BPL.b CODE_05C64A
	LDY.b #$02
CODE_05C64A:
	LDA.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	CLC
	ADC.w SMW_SharedScrollSpriteTables_DATA_05CBC3,y
	STA.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
CODE_05C654:
	INX
	INX
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C328
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_Layer2SpecialScrolling04_Unused(Address)
namespace SMW_Layer2SpecialScrolling04_Unused
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDY.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,y
	SEC
	SBC.w !RAM_SMW_Misc_Layer1YPosLo,y
	BPL.b ADDR_05C295
	EOR.w #$FFFF
	INC
ADDR_05C295:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	AND.w #$00FF
	TAY
	LSR
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !REGISTER_DividendLo
	SEP.b #$20
	LDA.w DATA_05CBE3,x
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
	BNE.b ADDR_05C2E5
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAY
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w #$0200
	CPY.b #$01
	BNE.b ADDR_05C2DE
	EOR.w #$FFFF
	INC
ADDR_05C2DE:
	CLC
	ADC.w !RAM_SMW_Misc_Layer1YPosLo,x
	STA.w !RAM_SMW_Misc_Layer1YPosLo,x
ADDR_05C2E5:
	LDX.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b ADDR_05C2F3
	LDX.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05C2F3:
	LDA.w DATA_05CBE3,x
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	CPY.b #$01
	BEQ.b ADDR_05C305
	EOR.w #$FFFF
	INC
ADDR_05C305:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDY.b #$00
	CMP.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	BEQ.b ADDR_05C31D
	BPL.b ADDR_05C313
	LDY.b #$02
ADDR_05C313:
	LDA.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	CLC
	ADC.w DATA_05CB9B,y
	STA.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
ADDR_05C31D:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	CLC
	ADC.w #$0002
	TAX
CODE_05C328:
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
CODE_05C32B:
	SEP.b #$20
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_Layer2SpecialScrolling04_Unused_Main, SMW_Layer1SpecialScrolling04_Unused_Main)
endmacro

macro ROUTINE_RT01_SMW_Layer2SpecialScrolling04_Unused(Address)
namespace SMW_Layer2SpecialScrolling04_Unused
%InsertMacroAtXPosition(<Address>)

DATA_05CB9B:
	dw $0001,$FFFF,$0001,$FFFF
namespace off
endmacro

macro ROUTINE_RT02_SMW_Layer2SpecialScrolling04_Unused(Address)
namespace SMW_Layer2SpecialScrolling04_Unused
%InsertMacroAtXPosition(<Address>)

DATA_05CBE3:
	db $18,$18
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer2SpecialScrolling06_Unused(Address)
namespace SMW_Layer2SpecialScrolling06_Unused
%InsertMacroAtXPosition(<Address>)

Main: ; not dis correctly in all.log
	LDA.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
	BEQ.b ADDR_05C674
	DEC.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
	CMP.b #$20
	BCS.b Return05C673
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$01
	BNE.b Return05C673
	LDA.w !RAM_SMW_Misc_Layer1YPosLo
	EOR.b #$01
	STA.w !RAM_SMW_Misc_Layer1YPosLo
Return05C673:
	RTS

ADDR_05C674:
	STZ.b !RAM_SMW_Camera_Layer2ScrollingDirection
	REP.b #$20
	LDA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	CMP.w #$FFC0
	BEQ.b ADDR_05C684
	DEC
	STA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
ADDR_05C684:
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	CMP.w #$0031
	BPL.b ADDR_05C68F
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
ADDR_05C68F:
	BNE.b ADDR_05C696
	LDY.b #$20
	STY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05C696:
	LDX.b #$06
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B			; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer2SpecialScrolling08_Layer2ScrollSOrL(Address)
namespace SMW_Layer2SpecialScrolling08_Layer2ScrollSOrL
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$30
	LDY.w !RAM_SMW_ScrollSpr_LayerIndex
	REP.b #$30
	LDA.w !RAM_SMW_L1ScrollSpr_SubYPosLo,y
	TAX
	LDA.w !RAM_SMW_Misc_Layer1XPosLo,y
	CMP.w !RAM_SMW_L1ScrollSpr_SubYPosLo,y
	BCC.b CODE_05C538
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STX.b !RAM_SMW_Misc_ScratchRAM02
	BRA.b CODE_05C53C

CODE_05C538:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM04
CODE_05C53C:
	SEP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_05C585
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	BEQ.b CODE_05C54F
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
CODE_05C54F:
	TYA
	ASL
	TAY
	LDA.w SMW_SharedScrollSpriteTables_DATA_05CBED+$01,y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	EOR.w #$0001
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	AND.w #$00FF
	BNE.b CODE_05C579
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_05C579:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	STA.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
CODE_05C585:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAX
	LDA.w SMW_SharedScrollSpriteTables_DATA_05CBF1,x
	AND.w #$00FF
	CPX.b #$01
	BEQ.b CODE_05C5A0
	EOR.w #$FFFF
	INC
CODE_05C5A0:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDY.b #$00
	CMP.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	BEQ.b CODE_05C5B8
	BPL.b CODE_05C5AE
	LDY.b #$02
CODE_05C5AE:
	LDA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	CLC
	ADC.w SMW_SharedScrollSpriteTables_DATA_05CBC3,y
	STA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
CODE_05C5B8:
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C328
namespace off
	%SetDuplicateOrNullPointer(SMW_Layer2SpecialScrolling08_Layer2ScrollSOrL_Main, SMW_Layer1SpecialScrolling08_Layer2ScrollSOrL_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_Layer2SpecialScrolling0A_Unused(Address)
namespace SMW_Layer2SpecialScrolling0A_Unused
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDY.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w !RAM_SMW_L1ScrollSpr_SubYPosLo,y
	SEC
	SBC.w !RAM_SMW_Misc_Layer1XPosLo,y
	BPL.b ADDR_05C340
	EOR.w #$FFFF
	INC
ADDR_05C340:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	AND.w #$00FF
	TAY
	LSR
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !REGISTER_DividendLo
	SEP.b #$20
	LDA.w DATA_05CBE5,x
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
	BNE.b ADDR_05C39F
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAY
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w #$0600
	CPY.b #$01
	BNE.b ADDR_05C389
	EOR.w #$FFFF
	INC
ADDR_05C389:
	CLC
	ADC.w !RAM_SMW_Misc_Layer1XPosLo,x
	STA.w !RAM_SMW_Misc_Layer1XPosLo,x
	LDA.w #$FFF8
	STA.w !RAM_SMW_Camera_Layer1RowColumnToUpdateLeftUpLo,x
	LDA.w #$0017
	STA.w !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo,x
	STZ.w !RAM_SMW_Player_XPosHi
ADDR_05C39F:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	AND.w #$00FF
	PHA
	SEP.b #$20
	LDX.b #$02
	LDY.b #$00
	CMP.b #$01
	BEQ.b ADDR_05C3BD
	LDX.b #$00
	LDY.b #$01
ADDR_05C3BD:
	TXA
	STA.w !RAM_SMW_Camera_Layer1ScrollingDirection,y
	REP.b #$20
	PLA
	TAY
	LDX.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b ADDR_05C3D3
	LDX.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05C3D3:
	LDA.w DATA_05CBE5,x
	AND.w #$00FF
	ASL
	ASL
	ASL
	ASL
	CPY.b #$01
	BEQ.b ADDR_05C3E5
	EOR.w #$FFFF
	INC
ADDR_05C3E5:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDY.b #$00
	CMP.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	BEQ.b ADDR_05C3FD
	BPL.b ADDR_05C3F3
	LDY.b #$02
ADDR_05C3F3:
	LDA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	CLC
	ADC.w DATA_05CBA3,y
	STA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
ADDR_05C3FD:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
	SEP.b #$20
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_Layer2SpecialScrolling0A_Unused_Main, SMW_Layer1SpecialScrolling0A_Unused_Main)
endmacro

macro ROUTINE_RT01_SMW_Layer2SpecialScrolling0A_Unused(Address)
namespace SMW_Layer2SpecialScrolling0A_Unused
%InsertMacroAtXPosition(<Address>)

DATA_05CBA3:
	dw $0004,$FFFC,$0004,$FFFC
	dw $0004,$FFFC,$0004,$FFFC
	dw $0001,$FFFF,$0001,$FFFF
namespace off
endmacro

macro ROUTINE_RT02_SMW_Layer2SpecialScrolling0A_Unused(Address)
namespace SMW_Layer2SpecialScrolling0A_Unused
%InsertMacroAtXPosition(<Address>)

DATA_05CBE5:
	db $18,$18,$08,$20,$06,$06
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer2SpecialScrolling0B_Layer2OnOffControlled(Address)
namespace SMW_Layer2SpecialScrolling0B_Layer2OnOffControlled
%InsertMacroAtXPosition(<Address>)

DATA_05C71B:
	db $20,$00,$C1,$00

DATA_05C71F:
	db $C0,$FF,$40,$00

DATA_05C723:
	db $FF,$FF,$01,$00

Main:
	LDX.w !RAM_SMW_Flag_OnOffSwitch
	BEQ.b CODE_05C72E
	LDX.b #$02
CODE_05C72E:
	CPX.w !RAM_SMW_L2ScrollSpr_CurrentState
	BEQ.b CODE_05C74A
	DEC.w !RAM_SMW_L2ScrollSpr_Timer
	BPL.b CODE_05C73B
	STX.w !RAM_SMW_L2ScrollSpr_CurrentState
CODE_05C73B:
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	EOR.b #$01
	STA.w !RAM_SMW_Misc_Layer2YPosLo
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedHi
	RTS

CODE_05C74A:
	LDA.b #$10
	STA.w !RAM_SMW_L2ScrollSpr_Timer
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	CMP.w DATA_05C71B,x
	BNE.b CODE_05C770
	CPX.b #$00
	BNE.b CODE_05C769
	LDA.w #!Define_SMW_Sound1DFC_BulletShoot		;\ Glitch: This executes every frame when layer 2 is at its lowest position. This causes layer 1 to be shifted slightly and cause some sounds to be overwritten.
	STA.w !RAM_SMW_IO_SoundCh3				;|
	LDA.w #$0020						;|
	STA.w !RAM_SMW_Timer_ShakeLayer1			;/
CODE_05C769:
	LDX.b #$00
	STX.w !RAM_SMW_Flag_OnOffSwitch
	BRA.b CODE_05C784

CODE_05C770:
	LDA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	CMP.w DATA_05C71F,x
	BEQ.b CODE_05C77F
	CLC
	ADC.w DATA_05C723,x
	STA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
CODE_05C77F:
	LDX.b #$06
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
CODE_05C784:
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B	; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.

namespace off
	%SetDuplicateOrNullPointer(SMW_Layer2SpecialScrolling0B_Layer2OnOffControlled_Main, SMW_Layer1SpecialScrolling0B_Layer2OnOffControlled_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer2SpecialScrolling0D_FastBGScroll(Address)
namespace SMW_Layer2SpecialScrolling0D_FastBGScroll
%InsertMacroAtXPosition(<Address>)

Flagged:
	LDA.w !RAM_SMW_Flag_ActiveFastBackgroundScrollGenerator
	BEQ.b CODE_05C7ED
NonFlagged:
	LDA.b #$02
	STA.b !RAM_SMW_Camera_Layer2ScrollingDirection
	REP.b #$20
	LDA.w !RAM_SMW_L2ScrollSpr_XSpeedLo
	CMP.w #$0400
	BEQ.b CODE_05C7D0
	INC
CODE_05C7D0:
	STA.w !RAM_SMW_L2ScrollSpr_XSpeedLo
	LDX.b #$04
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	AND.w #$00FF
	CMP.w #$0080
	BCC.b CODE_05C7E6
	ORA.w #$FF00
CODE_05C7E6:
	CLC
	ADC.w !RAM_SMW_Misc_Layer2XPosLo
	STA.w !RAM_SMW_Misc_Layer2XPosLo
CODE_05C7ED:
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B				; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched(Address)
namespace SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched
%InsertMacroAtXPosition(<Address>)

DATA_05C80E:
	dw $00C0

DATA_05C810:
	dw $0000,$00B0

DATA_05C814:
	dw $FF80,$00C0

DATA_05C818:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	dw $FFFE,$0002
else
	dw $FFFF,$0001
endif

Main:
	REP.b #$20
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_L2ScrollSpr_Timer
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #$00
	LDX.w !RAM_SMW_L1ScrollSpr_Timer
	CPX.b #$08
	BCC.b CODE_05C830
	LDY.b #$02
CODE_05C830:
	LDA.w !RAM_SMW_Misc_Layer2XPosLo
	CMP.w DATA_05C7F0,x
	BCC.b CODE_05C84C
	CMP.w DATA_05C7FC,x
	BCS.b CODE_05C84C
	STZ.w !RAM_SMW_L1ScrollSpr_CurrentState
	LDA.w DATA_05C80E,y
	STA.w !RAM_SMW_Misc_Layer2YPosLo
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_SubYPosLo
CODE_05C84C:
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_05C830
	SEP.b #$20
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState
	ORA.w !RAM_SMW_Sprites_Layer2IsTouchedFlag
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState
	BEQ.b CODE_05C87D
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	CMP.w DATA_05C810,y
	BEQ.b CODE_05C87D
	LDA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	CMP.w DATA_05C814,y
	BEQ.b CODE_05C875
	CLC
	ADC.w DATA_05C818,y
CODE_05C875:
	STA.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	LDX.b #$06
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
CODE_05C87D:
	SEP.b #$20
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched(Address)
namespace SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched
%InsertMacroAtXPosition(<Address>)

DATA_05C7F0:
	dw $0000,$02F0,$08B0,$0000
	dw $0000,$0370

DATA_05C7FC:
	dw $00D0,$0350,$0A30,$0008
	dw $0040,$0380
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_Layer1SpecialScrolling0C_RegularAutoScroll(Address)
namespace SMW_Layer1SpecialScrolling0C_RegularAutoScroll
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$02
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	STA.b !RAM_SMW_Camera_Layer2ScrollingDirection
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	LSR
	LSR
	TAX
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex,x
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	REP.b #$20
	LDA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	CMP.w SMW_NorSpr0F3_RegularAutoScroll_MaxXSpeed,y
	BEQ.b CODE_05C7A4
	INC
CODE_05C7A4:
	STA.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	LDA.b !RAM_SMW_Camera_LastScreenHoriz
	DEC
	XBA
	AND.w #$FF00
	CMP.w !RAM_SMW_Misc_Layer1XPosLo,x
	BNE.b CODE_05C7B6							;\ Glitch: If this autoscroll happens to be moving fast enough, it will cause the camera to go beyond the right edge of the level.
										;/ To fix, change this BNE.b to BCS.b and change STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x to STA.w !RAM_SMW_Misc_Layer1XPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
CODE_05C7B6:
	JSR.w SMW_UpdateLayerPositionWithScrollSprite_Main
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B			; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.

namespace off
	%SetDuplicateOrNullPointer(SMW_Layer1SpecialScrolling0C_RegularAutoScroll_Main, SMW_Layer2SpecialScrolling0C_RegularAutoScroll_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_Layer2SpecialScrolling02_Layer2Smash(Address)
namespace SMW_Layer2SpecialScrolling02_Layer2Smash
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
CODE_05C95B:
	REP.b #$20
CODE_05C95D:
	LDA.w !RAM_SMW_Misc_Layer2XPosLo
	CMP.w DATA_05C880,x
	BCC.b CODE_05C97B
	CMP.w DATA_05C8A4,x
	BCS.b CODE_05C97B
	TXA
	LSR
	AND.w #$00FE
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState
	LDA.w #$00C1
	STA.w !RAM_SMW_Misc_Layer2YPosLo
	STZ.w !RAM_SMW_L1ScrollSpr_Timer
CODE_05C97B:
	INX
	INX
	DEY
	BNE.b CODE_05C95D
	SEP.b #$20
	LDA.w !RAM_SMW_L1ScrollSpr_Timer
	BEQ.b CODE_05C98B
	DEC.w !RAM_SMW_L1ScrollSpr_Timer
	RTS

CODE_05C98B:
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState
	CLC
	ADC.w !RAM_SMW_L2ScrollSpr_CurrentState
	TAY
	LSR
	TAX
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	SEC
	SBC.w DATA_05C8C8,y
	EOR.w DATA_05C8FE,y
	BPL.b CODE_05C9A9
	LDA.w DATA_05C8FE,y
	JMP.w SMW_Layer2SpecialScrolling0E_Layer2ScrollWhenTouched_CODE_05C875

CODE_05C9A9:
	LDA.w DATA_05C8C8,y
	STA.w !RAM_SMW_Misc_Layer2YPosLo
	SEP.b #$20
	LDA.w DATA_05C934,x
	STA.w !RAM_SMW_L1ScrollSpr_Timer
	LDA.w !RAM_SMW_L2ScrollSpr_CurrentState
	CLC
	ADC.b #$12
	CMP.b #$36
	BCC.b CODE_05C9CD
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$20
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b #$00
CODE_05C9CD:
	STA.w !RAM_SMW_L2ScrollSpr_CurrentState
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_Layer2SpecialScrolling02_Layer2Smash(Address)
namespace SMW_Layer2SpecialScrolling02_Layer2Smash
%InsertMacroAtXPosition(<Address>)

DATA_05C880:
	dw $0000,$01C0,$0300,$0800,$0838,$0A00
	dw $0000,$0380,$0450,$0890,$0960,$0E80
	dw $4000,$4000,$4000,$4000,$4000,$0000

DATA_05C8A4:
	dw $0008,$0300,$0410,$0838,$0870,$0B00
	dw $0008,$0450,$04A0,$0960,$0A40,$0FFF
	dw $5000,$5000,$5000,$5000,$5000,$0080

DATA_05C8C8:
	dw $00C0,$00B0,$0070,$00C0,$00C0,$00C0
	dw $0000,$0000,$00C0,$00B0,$00A0,$0070
	dw $00B0,$00B0,$00B0,$0000,$0000,$00B0
	dw $0020,$0020,$0020,$0010,$0010,$0010
	dw $0000,$0000,$0010

DATA_05C8FE:
	dw $0100,$0100,$0800,$0100
	dw $0100,$0800,$0000,$0000
	dw $0180,$FF00,$FF00,$0000
	dw $FF00,$FF00,$FF00,$FF00
	dw $FF00,$FF00,$F800,$F800
	dw $F800,$F800,$F800,$F800
	dw $0000,$0000,$FE40

DATA_05C934:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $66,$33,$01,$66,$00,$00,$66,$00
	db $33,$00,$00,$19,$33,$00,$19,$00
	db $00,$19,$66,$66,$19,$66,$66,$19
	db $00,$00,$80
else
	db $80,$40,$01,$80,$00,$00,$80,$00
	db $40,$00,$00,$20,$40,$00,$20,$00
	db $00,$20,$80,$80,$20,$80,$80,$20
	db $00,$00,$A0
endif
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BufferOverworldLayer2Tilemap(Address)
namespace SMW_BufferOverworldLayer2Tilemap
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$20
	REP.b #$10
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	AND.b #$80					;\ Optimization: Use BMI instead of BNE to make this AND.b #$80 unnecessary.
	BNE.b CODE_04DAD6				;/
CODE_04DAC6:
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.l !RAM_SMW_Overworld_Layer2Tiles,x
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_04DAC6
	JMP.w CODE_04DAE9

CODE_04DAD6:
	LDA.b !RAM_SMW_Misc_ScratchRAM03		; Optimization: Remove this after doing the above optimization.
	AND.b #$7F
	STA.b !RAM_SMW_Misc_ScratchRAM03
	INY
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
CODE_04DADF:
	STA.l !RAM_SMW_Overworld_Layer2Tiles,x
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_04DADF
CODE_04DAE9:
	INY
	CPX.b !RAM_SMW_Misc_ScratchRAM0E
	BCC.b Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckIfDestroyTileEventIsActive(Address)
namespace SMW_CheckIfDestroyTileEventIsActive
%InsertMacroAtXPosition(<Address>)

Main:
	SEP.b #$30
	LDX.b #$17					; Glitch: There are not that many entries in .EventNums!
CODE_04E67B:
	CMP.l EventNums,x				; LM: Makes this pointer point to the expanded area so one can safely modify all 24 entries of it (2.21+)
	BEQ.b CODE_04E68A
	DEX
	BPL.b CODE_04E67B
CODE_04E684:
	LDA.b #$02
	STA.w !RAM_SMW_Pointer_OverworldEventProcess
	RTS

CODE_04E68A:
	STX.w !RAM_SMW_Overworld_DestroyTileEventVRAMIndex
	TXA
	ASL
	TAX
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	REP.b #$30
	LDA.w #!RAM_SMW_Blocks_Map16TableLo
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.l DATA_04E5B6,x				; LM: Makes this pointer point to the expanded area so one can safely modify all 24 entries of it (2.21+)
	TAY
	SEP.b #$20
	LDX.w #$0004
	LDA.b [!RAM_SMW_Misc_ScratchRAM0A],y
CODE_04E6A7:
	CMP.l DATA_04E5A7,x
	BEQ.b CODE_04E6B3
	DEX
	BPL.b CODE_04E6A7
	JMP.w CODE_04E684

CODE_04E6B3:
	TXA
	STA.w !RAM_SMW_Overworld_DestroyTileEventTileIndex
	CPX.w #$0003
	BMI.b CODE_04E6CA
	LDA.l DATA_04E5AC,x
	STA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	REP.b #$20
	TYA
	CLC
	ADC.w #$0010
	TAY
CODE_04E6CA:
	SEP.b #$20
	LDA.l DATA_04E5B1,x
	STA.b [!RAM_SMW_Misc_ScratchRAM0A],y
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckIfDestroyTileEventIsActive(Address)
namespace SMW_CheckIfDestroyTileEventIsActive
%InsertMacroAtXPosition(<Address>)

DATA_04E5A7:
	db $77,$79,$58,$4C,$A6

DATA_04E5AC:
	db $85,$86,$00,$10,$00

DATA_04E5B1:
	db $85,$86,$81,$81,$81

DATA_04E5B6:
	dw $0419,$00BD,$061C,$0130
	dw $012A,$00D1,$062A,$06AC
	dw $0547,$0559,$0572,$02BF
	dw $02AC,$0212,$0318,$0306

EventNums:
	db $06,$0F,$1C,$21,$24,$28,$29,$37
	db $40,$41,$43,$4A,$4D,$02,$61,$35
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawFlyingSwitchBlocks(Address)
namespace SMW_DrawFlyingSwitchBlocks
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $00,$D8,$28,$D0,$30,$D8,$28,$00

YSpeed:
	db $D0,$D8,$D8,$00,$00,$28,$28,$30

Main:
	LDY.w !RAM_SMW_Overworld_SwitchBlockEventEjectionCounter
	CPY.b #$0C
	BCC.b CODE_04F29B
	STZ.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	RTS

CODE_04F29B:
	LDA.w !RAM_SMW_Overworld_SwitchBlockEventWaitBeforeNextEjection
	BNE.b CODE_04F314
	CPY.b #$08
	BCS.b CODE_04F30C
	LDA.b #!Define_SMW_Sound1DFC_OverworldSwitchBlockEjection
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w !RAM_SMW_Overworld_SwitchBlockEventBlocksThrownCounter
CODE_04F2B0:
	LDY.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,y
	STA.l !RAM_SMW_Overworld_SwitchBlockXPosLo,x
	LDA.w !RAM_SMW_Overworld_MarioXPosHi,y
	STA.l !RAM_SMW_Overworld_SwitchBlockXPosHi,x
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,y
	STA.l !RAM_SMW_Overworld_SwitchBlockYPosLo,x
	LDA.w !RAM_SMW_Overworld_MarioYPosHi,y
	STA.l !RAM_SMW_Overworld_SwitchBlockYPosHi,x
	LDA.b #$00
	STA.l !RAM_SMW_Overworld_SwitchBlockZPosLo,x
	STA.l !RAM_SMW_Overworld_SwitchBlockZPosHi,x
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w XSpeed,y
	STA.l !RAM_SMW_Overworld_SwitchBlockXSpeed,x
	LDA.w YSpeed,y
	STA.l !RAM_SMW_Overworld_SwitchBlockYSpeed,x
	LDA.b #$D0
	STA.l !RAM_SMW_Overworld_SwitchBlockZSpeed,x
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_04F2B0
	CPX.b #!Define_SMW_MaxSwitchBlockSlot+$01
	BCC.b CODE_04F309
	LDA.w !RAM_SMW_Overworld_SwitchBlockEventOAMOffset
	CLC
	ADC.b #$20
	CMP.b #$A0
	BCC.b CODE_04F304
	LDA.b #$00
CODE_04F304:
	STA.w !RAM_SMW_Overworld_SwitchBlockEventOAMOffset
	LDX.b #$00
CODE_04F309:
	STX.w !RAM_SMW_Overworld_SwitchBlockEventBlocksThrownCounter
CODE_04F30C:
	LDA.b #$10
	STA.w !RAM_SMW_Overworld_SwitchBlockEventWaitBeforeNextEjection
	INC.w !RAM_SMW_Overworld_SwitchBlockEventEjectionCounter
CODE_04F314:
	DEC.w !RAM_SMW_Overworld_SwitchBlockEventWaitBeforeNextEjection
	LDA.w !RAM_SMW_Overworld_SwitchBlockEventOAMOffset
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDX.b #$00
CODE_04F31E:
	PHX
	LDY.b #$00
	JSR.w CODE_04F39C
	JSR.w CODE_04F397
	JSR.w CODE_04F397
	PLX
	LDA.l !RAM_SMW_Overworld_SwitchBlockZSpeed,x
	CLC
	ADC.b #$01
	BMI.b CODE_04F33A
	CMP.b #$40
	BCC.b CODE_04F33A
	LDA.b #$40
CODE_04F33A:
	STA.l !RAM_SMW_Overworld_SwitchBlockZSpeed,x
	LDA.l !RAM_SMW_Overworld_SwitchBlockZPosHi,x
	XBA
	LDA.l !RAM_SMW_Overworld_SwitchBlockZPosLo,x
	REP.b #$20
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
	XBA
	ORA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_04F378
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	XBA
	STA.w SMW_OAMBuffer[$50].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$50].XDisp,y
	LDA.b #$E6
	STA.w SMW_OAMBuffer[$50].Tile,y
	LDA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	DEC
	ASL
	ORA.b #$30
	STA.w SMW_OAMBuffer[$50].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$50].Slot,y
CODE_04F378:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$04
	CMP.b #$A0
	BCC.b CODE_04F383
	LDA.b #$00
CODE_04F383:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	INX
	CPX.w !RAM_SMW_Overworld_SwitchBlockEventBlocksThrownCounter
	BCC.b CODE_04F31E
	LDA.w !RAM_SMW_Overworld_SwitchBlockEventEjectionCounter
	CMP.b #$05
	BCC.b Return04F396
	CPX.b #!Define_SMW_MaxSwitchBlockSlot+$01
	BCC.b CODE_04F31E
Return04F396:
	RTS

CODE_04F397:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxSwitchBlockSlot+$01
	TAX
CODE_04F39C:
	PHY
	LDA.l !RAM_SMW_Overworld_SwitchBlockXSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.l !RAM_SMW_Overworld_SwitchBlockSubXPos,x
	STA.l !RAM_SMW_Overworld_SwitchBlockSubXPos,x
	LDA.l !RAM_SMW_Overworld_SwitchBlockXSpeed,x
	PHP
	LSR
	LSR
	LSR
	LSR
	LDY.b #$00
	PLP
	BPL.b CODE_04F3BF
	ORA.b #$F0
	DEY
CODE_04F3BF:
	ADC.l !RAM_SMW_Overworld_SwitchBlockXPosLo,x
	STA.l !RAM_SMW_Overworld_SwitchBlockXPosLo,x
	XBA
	TYA
	ADC.l !RAM_SMW_Overworld_SwitchBlockXPosHi,x
	STA.l !RAM_SMW_Overworld_SwitchBlockXPosHi,x
	XBA
	PLY
	REP.b #$20
	SEC
	SBC.w !RAM_SMW_Mirror_CurrentLayer1XPosLo,y
	SEC
	SBC.w #$0008
	STA.w !RAM_SMW_Misc_ScratchRAM00,y
	SEP.b #$20
	INY
	INY
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_TurnOffIO(Address)
namespace SMW_TurnOffIO
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !REGISTER_IRQNMIAndJoypadEnableFlags
	STZ.w !REGISTER_HDMAEnable
	LDA.b #!ScreenDisplayRegister_SetForceBlank|!ScreenDisplayRegister_MinBrightness00
	STA.w !REGISTER_ScreenDisplayRegister
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode0C_LoadOverworld(Address)
namespace SMW_GameMode0C_LoadOverworld
%InsertMacroAtXPosition(<Address>)

DATA_00A06B:
	dw $0000		; Main Map
	dw $FFEF		; Yoshi's Island
	dw $FFEF		; Vanilla Dome
	dw $FFEF		; Forest of Illusion
	dw $00F0		; Valley of Bowser
	dw $00F0		; Special World
	dw $00F0		; Star World

DATA_00A079:
	dw $0000		; Main Map
	dw $FFD8		; Yoshi's Island
	dw $0080		; Vanilla Dome
	dw $0128		; Forest of Illusion
	dw $FFD8		; Valley of Bowser
	dw $0080		; Special World
	dw $0128		; Star World

Main:
	JSR.w SMW_TurnOffIO_Main
	LDA.w !RAM_SMW_Overworld_WarpingOnPipeOrStarFlag
	BEQ.b CODE_00A093
	JSL.l SMW_HandleOverworldStarPipeWarp_SetPlayerDestination
CODE_00A093:
	JSR.w SMW_ClearOverworldAndCutsceneRAM_Main
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	BEQ.b CODE_00A0B0
	LDA.b #!Define_SMW_Timer_DisplayIntroMessage
	STA.w !RAM_SMW_Timer_DisplaySpecialMessage
#LM000Hijack_Unknown00A0A0:
	STZ.w !RAM_SMW_Overworld_MarioMap					; Note: !Define_SMW_Overworld_MainMap
	LDA.b #!MosaicSizeAndBGEnable_PixelSize16x16
	STA.w !RAM_SMW_Mirror_MosaicSizeAndBGEnable
	LDA.b #!Define_SMW_GameMode10_BufferLevelLoadMessage
	STA.w !RAM_SMW_Misc_GameMode
	JMP.w SMW_GameMode00_LoadNintendoPresents_Mode04Finish

CODE_00A0B0:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_HandleSPCUploads_UploadOverworldMusicBank
	JSR.w SMW_SetStandardPPUSettings_Main
	STZ.w !RAM_SMW_Misc_MusicRegisterBackup
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Player_CurrentLifeCount
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	BPL.b CODE_00A0C7
	INC.w !RAM_SMW_Pointer_DisplayOverworldPrompt
CODE_00A0C7:
endif
	STA.w !RAM_SMW_Player_MariosLives,x
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	STA.w !RAM_SMW_Player_MariosPowerUp,x
	LDA.w !RAM_SMW_Player_CurrentCoinCount
	STA.w !RAM_SMW_Player_MariosCoins,x
	LDA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	BEQ.b CODE_00A0DD
	LDA.w !RAM_SMW_Yoshi_CurrentYoshiColor
CODE_00A0DD:
	STA.w !RAM_SMW_Player_MariosYoshi,x
	LDA.w !RAM_SMW_Player_CurrentItemBox
	STA.w !RAM_SMW_Player_MariosItemBox,x
	LDA.b #$03
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	LDA.b #$30
	LDX.b #$15
	LDY.w !RAM_SMW_Flag_ShowContinueAndEnd
	BEQ.b CODE_00A11B
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	JSR.w SMW_LoadSaveBufferData_Main
	LDA.w !RAM_SMW_Counter_EventsTriggered
	BNE.b CODE_00A101
endif
	JSR.w SMW_GameMode07_TitleScreenDemo_FadeOutToTitleScreen
	JMP.w SMW_GameMode00_LoadNintendoPresents_CODE_0093F4

if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
CODE_00A101:
	JSL.l SMW_LoadOverworldLayer2AndEventsTilemaps_Main
	REP.b #$20
	LDA.w #$318C
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	SEP.b #$20
	LDA.b #$30
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$20
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	LDA.b #$B3
	LDX.b #$17
endif
CODE_00A11B:
	LDY.b #$02
	JSR.w SMW_SetVisibleLayers_Main
	STX.w !REGISTER_MainScreenWindowMask
	STY.w !REGISTER_SubScreenWindowMask
	JSL.l SMW_LoadOverworldLayer1AndEvents_Main
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	ASL
	TAX
	REP.b #$20
	LDA.w DATA_00A06B,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDA.w DATA_00A079,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
#LM000Hijack_Unknown00A140:
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	SEP.b #$20
	JSR.w SMW_UploadGraphicsFiles_Main
	LDY.b #$14
#LM000Hijack_Unknown00A149:
	JSL.l SMW_GraphicsDecompressionRoutines_Main
	JSR.w SMW_BufferPalettesRoutines_Overworld_Sub
	JSR.w SMW_UpdateEntirePalette_Main
#LM000Hijack_Unknown00A153:
	LDA.b #!Define_SMW_StripeImage_OverworldBorder
	STA.b !RAM_SMW_Graphics_StripeImageToUpload
	JSR.w SMW_LoadStripeImage_Sub
	JSL.l SMW_LoadOverworldLifeCounter_Main
	JSR.w SMW_LoadStripeImage_Sub
	JSL.l CODE_048D91
	JSL.l SMW_InitializeOverworldTilemaps_Main
	LDA.b #$F0
	STA.b !RAM_SMW_Mirror_OAMAddressLo
	JSR.w SMW_CompressOAMTileSizeBuffer_Main
	JSR.w SMW_LoadStripeImage_Sub
	STZ.w !RAM_SMW_Pointer_CurrentOverworldProcess
	JSR.w SMW_SetKeepGameModeActiveTimer_OneFrame
	LDA.b #$02
	STA.w !RAM_SMW_Misc_NMIToUseFlag
	REP.b #$10
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.w #$01DE
else
	LDX.w #$01BE
endif
	LDA.b #$FF
CODE_00A185:
	STZ.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,x
	DEX
	DEX
	BPL.b CODE_00A185
	JSR.w SMW_SetupHDMAWindowingEffects_CODE_0092A0
	JMP.w SMW_GameMode00_LoadNintendoPresents_CODE_0093F4
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode0C_LoadOverworld(Address)
namespace SMW_GameMode0C_LoadOverworld
%InsertMacroAtXPosition(<Address>)

DATA_048D74:
	dw $000B,$0013,$001A,$001B
	dw $001F,$0020,$0031,$0032
	dw $0034,$0035,$0040

DATA_048D8A:
	db !Define_SMW_OverworldMusic_Overworld
	db !Define_SMW_OverworldMusic_YoshisIsland
	db !Define_SMW_OverworldMusic_VanillaDome
	db !Define_SMW_OverworldMusic_ForestOfIllusion
	db !Define_SMW_OverworldMusic_BowsersValley
	db !Define_SMW_OverworldMusic_SpecialWorld
	db !Define_SMW_OverworldMusic_StarRoad

CODE_048D91:
	PHB
	PHK
	PLB
	STZ.w !RAM_SMW_Flag_ChangeSubmapMusicOnPlayerSwitch
	LDA.b #$0F
	STA.w !RAM_SMW_Overworld_MakeStandingPlayerFaceDownTimerLo
	LDX.b #$02
	LDA.w !RAM_SMW_Overworld_MarioAnimationLo
	CMP.b #$12
	BEQ.b CODE_048DA9
	AND.b #$08
	BEQ.b CODE_048DAB
CODE_048DA9:
	LDX.b #$0A
CODE_048DAB:
	STX.w !RAM_SMW_Overworld_MarioAnimationLo
	LDX.b #$02
	LDA.w !RAM_SMW_Overworld_LuigiAnimationLo
	CMP.b #$12
	BEQ.b CODE_048DBB
	AND.b #$08
	BEQ.b CODE_048DBD
CODE_048DBB:
	LDX.b #$0A
CODE_048DBD:
	STX.w !RAM_SMW_Overworld_LuigiAnimationLo
	SEP.b #$10
	JSR.w CODE_048E55
	REP.b #$30
	LDA.w !RAM_SMW_Misc_ExitLevelAction-$01			;\ Glitch: This causes Yoshi to act weird and prevent goal walks if a boss is beaten in level 018 (Sunken Ghost Ship)
	AND.w #$FF00						;|
	BEQ.b CODE_048DDF					;|
	BMI.b CODE_048DDF					;|
	LDA.w !RAM_SMW_Overworld_LevelNumberLo			;|
	AND.w #$00FF						;|
	CMP.w #$0018						;|
	BNE.b CODE_048DDF					;|
	BRL.w CODE_048E34					;/

CODE_048DDF:
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	AND.w #$00FF
	BEQ.b CODE_048E38
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	AND.w #$FF00
	STA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	SEP.b #$10						;\ Note: Is this code necessary? It seems to be used to calculate the index for !RAM_SMW_Overworld_LevelTileSettings based on where the current player is standing.
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo		;| But, wouldn't it make sense to just do "LDX.w !RAM_SMW_Overworld_LevelNumberLo"
	LDA.w !RAM_SMW_Overworld_MarioXPosLo,x			;| If that's the case, then this is easily an "Optimization:"
	LSR							;|
	LSR							;|
	LSR							;|
	LSR							;|
	STA.b !RAM_SMW_Misc_ScratchRAM00			;|
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,x			;|
	LSR							;|
	LSR							;|
	LSR							;|
	LSR							;|
	STA.b !RAM_SMW_Misc_ScratchRAM02			;|
	TXA							;|
	LSR							;|
	LSR							;|
	TAX							;|
	JSR.w SMW_CalculateOverworldPlayerPosition_Main		;|
	REP.b #$10						;|
	LDX.b !RAM_SMW_Misc_ScratchRAM04			;|
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x	;|
	AND.w #$00FF						;|
	TAX							;/
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,x
	AND.w #$0080
	BNE.b CODE_048E38
endif
	LDY.w #$0014						;\ Optimization: This loop could be shrunken down to only reference 4 entries instead of 11.
CODE_048E25:							;| This loop checks which levels that end in cutscenes are allowed to keep playing music after being beaten.
	LDA.w !RAM_SMW_Overworld_LevelNumberLo			;| Only 4 of those entries really make sense (Wendy's Castle, Roy's Castle, Larry's Castle, and Lemmy's Castle).
	AND.w #$00FF						;| The rest either don't play a cutscene after being beaten or don't even return to the overworld (aka. Trigger credits).
	CMP.w DATA_048D74,y					;|
	BEQ.b CODE_048E38					;|
	DEY							;|
	DEY							;|
	BPL.b CODE_048E25					;/
CODE_048E34:
	SEP.b #$30
	BRA.b CODE_048E47

CODE_048E38:
	SEP.b #$30
	LDX.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	TAX
	LDA.w DATA_048D8A,x
	STA.w !RAM_SMW_IO_MusicCh1
CODE_048E47:
	PLB
	RTL

#LM220Hijack_SetKoopaTeleportHere1:
KoopaKidTeleportXPos:							;\ LM: Set Koopa Teleport Here... (2.20+)
	dw $0128,$0000,$0188						;|
									;|
#LM220Hijack_SetKoopaTeleportHere2:					;|
KoopaKidTeleportYPos:							;|
	dw $01C8,$0000,$01D8						;/

CODE_048E55:
	REP.b #$30
	LDA.w !RAM_SMW_Player_CurrentCharacter
	AND.w #$00FF
	ASL
	ASL
	STA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDX.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedXPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_MarioGridAlignedYPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	LSR
	LSR
	TAX
	JSR.w SMW_CalculateOverworldPlayerPosition_Main
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l !RAM_SMW_Overworld_LevelNumberOfEachTileTBL,x
	AND.w #$00FF
#LM000Hijack_CustomLevelNames1:
	ASL								;\ LM: NOPs out and inserts a JSL.l to $03BB20 to enable having custom level names.
	TAX								;|
	LDA.w SMW_LevelNames_Main,x					;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	JSR.w SMW_UpdateLevelName_Main					;/
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	BMI.b CODE_048E9E
	CPX.w #$0800
	BCS.b CODE_048E9E
	LDA.l !RAM_SMW_Blocks_Map16TableLo+($0200*$00),x
	AND.w #$00FF
	STA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
CODE_048E9E:
	SEP.b #$30
	LDX.w !RAM_SMW_Overworld_EnterLevelFlag
	BEQ.b CODE_048EE1
	BPL.b ADDR_048ED9
	TXA
	AND.b #$7F
	TAX
	STZ.w !RAM_SMW_OWSpr_Table7E0DF5,x
	LDA.w !RAM_SMW_OWSpr06_KoopaKid_TileIndex
	LDX.w !RAM_SMW_Misc_ExitLevelAction
	BPL.b ADDR_048ECD
	ASL
	TAX
	REP.b #$20
	LDY.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w KoopaKidTeleportXPos,x
	STA.w !RAM_SMW_Overworld_MarioXPosLo,y
	LDA.w KoopaKidTeleportYPos,x
	STA.w !RAM_SMW_Overworld_MarioYPosLo,y
	SEP.b #$20
	BRA.b CODE_048EE1

ADDR_048ECD:
	TAX
	LDA.w SMW_OWSpr06_KoopaKid_DATA_04FB85,x
	ORA.w !RAM_SMW_OWSpr06_KoopaKid_ActivateFlag
	STA.w !RAM_SMW_OWSpr06_KoopaKid_ActivateFlag
	BRA.b CODE_048EE1

ADDR_048ED9:
	LDA.w !RAM_SMW_Misc_ExitLevelAction
	BMI.b CODE_048EE1
	STZ.w !RAM_SMW_OWSpr_SpriteID,x
CODE_048EE1:
	REP.b #$30
	JSR.w SMW_OverworldProcess04_PlayerIsMoving_CODE_049831
	SEP.b #$30
	JSR.w SMW_DrawOverworldBorderPlayer_Main
	JSR.w SMW_OverworldTileAnimations_ShiftWaterTiles
	JMP.w SMW_OverworldTileAnimations_Main
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode0C_LoadOverworld(Address)
namespace SMW_GameMode0C_LoadOverworld
%InsertMacroAtXPosition(<Address>)

OverworldBorderLayer3:
	incbin "images/overworld/border.bin"
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_InitializeOverworldTilemaps(Address)
namespace SMW_InitializeOverworldTilemaps
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$30
	STZ.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w #$FFFF
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateRightDownLo
	LDA.w #$0202
	STA.b !RAM_SMW_Camera_Layer1ScrollingDirection
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	AND.w #$00FF
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	AND.w #$000F
	BEQ.b CODE_04D714						; Note: !Define_SMW_Overworld_MainMap
	LDA.w #$0020
	STA.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	LDA.w #$0200
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
CODE_04D714:
	JSL.l SMW_BufferScrollingTiles_Layer1_Main
	JSL.l SMW_UploadLevelLayer1And2Tilemaps_Main
	REP.b #$30
	INC.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	AND.w #$01FF
	BNE.b CODE_04D714
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STZ.b !RAM_SMW_Camera_Layer1RowColumnToUpdateRightDownLo
	STZ.w !RAM_SMW_Misc_LevelModeSetting
	STZ.b !RAM_SMW_Misc_LevelLayoutFlags
	LDA.w #$FFFF
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateLeftUpLo
	STA.b !RAM_SMW_Camera_XYPositionOfLastLayer1VRAMUpdateRightDownLo
	SEP.b #$30
	LDA.b #$80
	STA.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	LDA.b #!VRAM_SMW_Layer2TilemapVRAMLocation>>8
	STA.w !REGISTER_VRAMAddressHi
	LDX.b #$06
CODE_04D750:
	LDA.l PARAMS_04DAB3,x
	STA.w DMA[$01].Parameters,x
	DEX
	BPL.b CODE_04D750
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	BEQ.b CODE_04D76A						; Note: !Define_SMW_Overworld_MainMap
	LDA.b #(!RAM_SMW_Overworld_Layer2Tiles+$2000)>>8
	STA.w DMA[$01].SourceHi
CODE_04D76A:
	LDA.b #$02
	STA.w !REGISTER_DMAEnable
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_InitializeOverworldTilemaps(Address)
namespace SMW_InitializeOverworldTilemaps
%InsertMacroAtXPosition(<Address>)

PARAMS_04DAB3:
	db $01,!REGISTER_WriteToVRAMPortLo
	dl !RAM_SMW_Overworld_Layer2Tiles
	dw $2000
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OverworldTileAnimations(Address)
namespace SMW_OverworldTileAnimations
%InsertMacroAtXPosition(<Address>)

WaterTileNumbers:
	dw SMW_GraphicDecompressionBuffer[$50].Tile, SMW_GraphicDecompressionBuffer[$51].Tile,SMW_GraphicDecompressionBuffer[$52].Tile

TileNumbers:
	dw SMW_GraphicDecompressionBuffer[$40].Tile, SMW_GraphicDecompressionBuffer[$41].Tile,SMW_GraphicDecompressionBuffer[$42].Tile, SMW_GraphicDecompressionBuffer[$43].Tile
	dw SMW_GraphicDecompressionBuffer[$44].Tile, SMW_GraphicDecompressionBuffer[$45].Tile,SMW_GraphicDecompressionBuffer[$46].Tile, SMW_GraphicDecompressionBuffer[$47].Tile
	dw SMW_GraphicDecompressionBuffer[$48].Tile, SMW_GraphicDecompressionBuffer[$49].Tile,SMW_GraphicDecompressionBuffer[$4A].Tile, SMW_GraphicDecompressionBuffer[$4B].Tile
	dw SMW_GraphicDecompressionBuffer[$4C].Tile, SMW_GraphicDecompressionBuffer[$4D].Tile,SMW_GraphicDecompressionBuffer[$4E].Tile, SMW_GraphicDecompressionBuffer[$4F].Tile
	dw SMW_GraphicDecompressionBuffer[$50].Tile, SMW_GraphicDecompressionBuffer[$51].Tile,SMW_GraphicDecompressionBuffer[$52].Tile, SMW_GraphicDecompressionBuffer[$53].Tile
	dw SMW_GraphicDecompressionBuffer[$54].Tile, SMW_GraphicDecompressionBuffer[$55].Tile,SMW_GraphicDecompressionBuffer[$56].Tile, SMW_GraphicDecompressionBuffer[$57].Tile
	dw SMW_GraphicDecompressionBuffer[$58].Tile, SMW_GraphicDecompressionBuffer[$59].Tile,SMW_GraphicDecompressionBuffer[$5A].Tile, SMW_GraphicDecompressionBuffer[$5B].Tile
	dw SMW_GraphicDecompressionBuffer[$5C].Tile, SMW_GraphicDecompressionBuffer[$5D].Tile,SMW_GraphicDecompressionBuffer[$5E].Tile, SMW_GraphicDecompressionBuffer[$5F].Tile
	dw SMW_GraphicDecompressionBuffer[$60].Tile, SMW_GraphicDecompressionBuffer[$61].Tile,SMW_GraphicDecompressionBuffer[$62].Tile, SMW_GraphicDecompressionBuffer[$63].Tile
	dw SMW_GraphicDecompressionBuffer[$64].Tile, SMW_GraphicDecompressionBuffer[$65].Tile,SMW_GraphicDecompressionBuffer[$66].Tile, SMW_GraphicDecompressionBuffer[$67].Tile
	dw SMW_GraphicDecompressionBuffer[$68].Tile, SMW_GraphicDecompressionBuffer[$69].Tile,SMW_GraphicDecompressionBuffer[$6A].Tile, SMW_GraphicDecompressionBuffer[$6B].Tile
	dw SMW_GraphicDecompressionBuffer[$6C].Tile, SMW_GraphicDecompressionBuffer[$6D].Tile,SMW_GraphicDecompressionBuffer[$6E].Tile, SMW_GraphicDecompressionBuffer[$6F].Tile
	dw SMW_GraphicDecompressionBuffer[$70].Tile, SMW_GraphicDecompressionBuffer[$71].Tile,SMW_GraphicDecompressionBuffer[$72].Tile, SMW_GraphicDecompressionBuffer[$73].Tile
	dw SMW_GraphicDecompressionBuffer[$74].Tile, SMW_GraphicDecompressionBuffer[$75].Tile,SMW_GraphicDecompressionBuffer[$76].Tile, SMW_GraphicDecompressionBuffer[$77].Tile
	dw SMW_GraphicDecompressionBuffer[$78].Tile, SMW_GraphicDecompressionBuffer[$79].Tile,SMW_GraphicDecompressionBuffer[$7A].Tile, SMW_GraphicDecompressionBuffer[$7B].Tile
	dw SMW_GraphicDecompressionBuffer[$7C].Tile, SMW_GraphicDecompressionBuffer[$7D].Tile,SMW_GraphicDecompressionBuffer[$7E].Tile, SMW_GraphicDecompressionBuffer[$7F].Tile

ShiftWaterTiles:
	REP.b #$30
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	STZ.b !RAM_SMW_Misc_ScratchRAM05
-:
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w WaterTileNumbers,x					; Optimization: The 6 bytes in this table are repeated inside DATA_048006.
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$10							;\ Optimization: Move this load/store to be outside this loop and remove the REP/SEPs.
	LDY.b #!RAM_SMW_Graphics_GraphicDecompressionBuffer>>16		;|
	STY.b !RAM_SMW_Misc_ScratchRAM02				;|
	REP.b #$10							;/
	LDX.b !RAM_SMW_Misc_ScratchRAM05
	JSR.w CODE_0480B9
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.w #$0020
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	INC
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM03
	AND.w #$00FF
	CMP.w #$0006
	BNE.b -
	SEP.b #$30
	RTS

CODE_0480B9:
	LDY.w #$0000
	LDA.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM07
	STA.b !RAM_SMW_Misc_ScratchRAM09
CODE_0480C3:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	INY
	INY
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM07
	BNE.b CODE_0480C3
CODE_0480D0:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	AND.w #$00FF
	STA.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	INY
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM09
	BNE.b CODE_0480D0
	RTS

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_048101
	LDX.b #$1F
CODE_0480E8:
	LDA.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TXA
	AND.b #$08
	BNE.b CODE_0480F9
	ASL.b !RAM_SMW_Misc_ScratchRAM00
	ROL.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	BRA.b CODE_0480FE

CODE_0480F9:
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	ROR.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
CODE_0480FE:
	DEX
	BPL.b CODE_0480E8
CODE_048101:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_04810C
	LDX.b #$20
	JSR.w CODE_048172
CODE_04810C:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_048123
	LDX.b #$1F
CODE_048114:
	LDA.w !RAM_SMW_Graphics_DecompressedOverworldGFX+$40,x
	ASL
	ROL.w !RAM_SMW_Graphics_DecompressedOverworldGFX+$40,x
	DEX
	BPL.b CODE_048114
	LDX.b #$40
	JSR.w CODE_048172
CODE_048123:
	REP.b #$30
	LDA.w #$0060
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	STZ.b !RAM_SMW_Misc_ScratchRAM0B
CODE_04812C:
	LDX.w #$0038
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	CMP.w #$0020
	BCS.b CODE_048139
	LDX.w #$0070
CODE_048139:
	TXA
	AND.b !RAM_SMW_Counter_GlobalFrames
	LSR
	LSR
	CPX.w #$0038
	BEQ.b CODE_048144
	LSR
CODE_048144:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0B
	TAX
	LDA.w TileNumbers,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$10
	LDY.b #!RAM_SMW_Graphics_GraphicDecompressionBuffer>>16
	STY.b !RAM_SMW_Misc_ScratchRAM02
	REP.b #$10
	LDX.b !RAM_SMW_Misc_ScratchRAM0D
	JSR.w CODE_0480B9
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	CLC
	ADC.w #$0020
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	CMP.w #$0080
	BNE.b CODE_04812C
	SEP.b #$30
	RTS

CODE_048172:
	REP.b #$20
	LDY.b #$00
CODE_048176:
	PHX
	TXA
	CLC
	ADC.w #$000E
	TAX
	LDA.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PLX
CODE_048183:
	LDA.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Graphics_DecompressedOverworldGFX,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	INY
	CPY.b #$08
	BEQ.b CODE_048176
	CPY.b #$10
	BNE.b CODE_048183
	SEP.b #$20
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateSaveBuffer(Address)
namespace SMW_UpdateSaveBuffer
%InsertMacroAtXPosition(<Address>)

Main:
	PHX
	PHY
	PHP
	SEP.b #$30
	LDA.w !RAM_SMW_Flag_ShowSavePrompt
	BEQ.b CODE_049054
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	%INLINEROUTINE_SMW_PreparePlayerSwap()
endif
	LDX.b #$5F
CODE_049043:
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,x
	STA.w !RAM_SMW_Overworld_SaveBuffer,x
	DEX
	BPL.b CODE_049043
	STZ.w !RAM_SMW_Flag_ShowSavePrompt
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	LDA.b #$05
	STA.w !RAM_SMW_Pointer_DisplayOverworldPrompt
endif
CODE_049054:
	PLP
	PLY
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Info: See "Player Poses.png" to see what the player poses look like.
; This image was taken from the smw wiki.

macro ROUTINE_RT00_SMW_PlayerGFXRt(Address)
namespace SMW_PlayerGFXRt
%InsertMacroAtXPosition(<Address>)

PlayerXYDispIndexIndex:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $02,$04,$04,$04,$0E,$08,$00,$00
	db $00,$00,$00,$00,$00,$00,$08,$08
	db $08,$08,$08,$08,$00,$00,$00,$00
	db $0C,$10,$12,$14,$16,$18,$1A,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$06,$00,$00
	db $00,$00,$00,$0A,$00,$00

PlayerXYDispIndex:
	db $00,$08					; Running
	db $10,$14					; Diagonal
	db $18,$1E					; Sideways
	db $24,$24					; Hurt
	db $28,$30					; ClimbingAndRideYoshi
	db $38,$3E					; BigPBallon
	db $44,$4A					; PointWhileOnYoshi1
	db $50,$54					; VictoryOnYoshi
	db $58,$58					; PointWhileOnYoshi2
	db $5C,$60					; CapeFlight1
	db $64,$68					; CapeFlight2
	db $6C,$70					; CapeFlight3
	db $74,$78					; CapeFlight4
	db $7C,$80					; CapeFlight5

XDisp:
.Running
	dw $0000,$0000,$0010,$0010
	dw $0000,$0000,$FFF8,$FFF8
.Diagonal
	dw $000E,$0006
	dw $FFF2,$FFFA
.Sideways
	dw $0017,$0007,$000F
	dw $FFEA,$FFFA,$FFFA
.Hurt
	dw $0000,$0000
.ClimbingAndRideYoshi
	dw $0000,$0000,$0010,$0010
	dw $0000,$0000,$FFF8,$FFF8
.BigPBallon
	dw $0000,$FFF8,$0008
	dw $0000,$0008,$FFF8
.PointWhileOnYoshi1
	dw $0000,$0000,$FFF8
	dw $0000,$0000,$0010
.VictoryOnYoshi
	dw $0002,$0000
	dw $FFFE,$0000
.PointWhileOnYoshi2
	dw $0000,$0000
.CapeFlight1
	dw $FFFC,$0005
	dw $0004,$FFFB
.CapeFlight2
	dw $FFFB,$0006
	dw $0005,$FFFA
.CapeFlight3
	dw $FFF9,$0009
	dw $0007,$FFF7
.CapeFlight4
	dw $FFFD,$FFFD
	dw $0003,$0003
.CapeFlight5
	dw $FFFF,$0007
	dw $0001,$FFF9

.Cape01
	dw $000A
	dw $FFF6
.Cape02
	dw $0008
	dw $FFF8
.Cape03
	dw $0008
	dw $FFF8
.Cape04
	dw $0000
.Cape05
	dw $0004
	dw $FFFC
.Cape06
	dw $FFFE
	dw $0002
.Cape07
	dw $000B
	dw $FFF5
.Cape08
	dw $0014
	dw $FFEC
.Cape09
	dw $000E
	dw $FFF3
.Cape10
	dw $0008
	dw $FFF8
.Cape11
	dw $000C,$0014,$FFFD
	dw $FFF4,$FFF4,$000B
.Cape12
	dw $000B,$0003,$0013
	dw $FFF5,$0005,$FFF5
.Cape13
	dw $0009,$0001,$0001
	dw $FFF7,$0007,$0007
.Cape14
	dw $0005,$000D,$000D
	dw $FFFB,$FFFB,$FFFB
.Cape15
	dw $FFFF,$000F
	dw $0001,$FFF9
.Cape16
	dw $0000

YDisp:
.Running
	dw $0001,$0011,$0011,$0019
	dw $0001,$0011,$0011,$0019
.Diagonal
	dw $000C,$0014
	dw $000C,$0014
.Sideways
	dw $0018,$0018,$0028
	dw $0018,$0018,$0028
.Hurt
	dw $0006,$0016
.ClimbingAndRideYoshi
	dw $0001,$0011,$0009,$0011
	dw $0001,$0011,$0009,$0011
.BigPBallon
	dw $0001,$0011,$0011
	dw $0001,$0011,$0011
.PointWhileOnYoshi1
	dw $0001,$0011,$0011
	dw $0001,$0011,$0011
.VictoryOnYoshi
	dw $0001,$0011
	dw $0001,$0011
.PointWhileOnYoshi2
	dw $0011,$0005
.CapeFlight1
	dw $0004,$0014
	dw $0004,$0014
.CapeFlight2
	dw $000C,$0014
	dw $000C,$0014
.CapeFlight3
	dw $0010,$0010
	dw $0010,$0010
.CapeFlight4
	dw $0010,$0000
	dw $0010,$0000
.CapeFlight5
	dw $0010,$0000
	dw $0010,$0000

.Cape01
	dw $000B
	dw $000B
.Cape02
	dw $0011
	dw $0011
.Cape03
	dw $FFFF
	dw $FFFF
.Cape04
	dw $0010
.Cape05
	dw $0010
	dw $0010
.Cape06
	dw $0010
	dw $0010
.Cape07
	dw $0010
	dw $0010
.Cape08
	dw $0015
	dw $0015
.Cape09
	dw $0025
	dw $0025
.Cape10
	dw $0004
	dw $0004
.Cape11
	dw $0004,$0014,$0014
	dw $0004,$0014,$0014
.Cape12
	dw $0004,$0004,$0014
	dw $0004,$0004,$0014
.Cape13
	dw $0000,$0008,$0000
	dw $0000,$0008,$0000
.Cape14
	dw $0000,$0010,$0018
	dw $0000,$0010,$0018
.Cape15
	dw $0000,$0010
	dw $0000,$0010
.Cape16
	dw $FFF8

PowerupTilesetIndex:
	db $00,$46,$83,$46

TilesIndex:
.Small
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$28,$00,$00
.Big
.Fire
	db $00,$00,$00,$00,$04,$04,$04,$00
	db $00,$00,$00,$00,$08,$00,$00,$00
	db $00,$0C,$0C,$0C,$00,$00,$10,$10
	db $14,$14,$18,$18,$00,$00,$1C,$00
	db $00,$00,$00,$20,$00,$00,$00,$00
	db $24,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00
.Cape
	db $00,$00,$00,$00,$04,$04,$04,$00
	db $00,$00,$00,$00,$08,$00,$00,$00
	db $00,$0C,$0C,$0C,$00,$00,$10,$10
	db $14,$14,$18,$18,$00,$00,$1C,$00
	db $00,$00,$00,$20,$00,$00,$00,$00
	db $24,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00
Tiles:
	db $00,$02,$80,$80
	db $00,$02,$0C,$80
	db $00,$02,$1A,$1B
	db $00,$02,$0D,$80
	db $00,$02,$22,$23
	db $00,$02,$32,$33
	db $00,$02,$0A,$0B
	db $00,$02,$30,$31
	db $00,$02,$20,$21
	db $00,$02,$7E,$80
	db $00,$02,$02,$80
	db $04,$7F,$4A,$5B

UNK_00E00A:
	db $4B,$5A

HeadTilePointerIndex:
.Small
	db $50,$50,$50,$09,$50,$50,$50,$50
	db $50,$50,$09,$2B,$50,$2D,$50,$D5
	db $2E,$C4,$C4,$C4,$D6,$B6,$50,$50
	db $50,$50,$50,$50,$50,$C5,$D7,$2A
	db $E0,$50,$D5,$29,$2C,$B6,$D6,$28
	db $E0,$E0,$C5,$C5,$C5,$C5,$C5,$C5
	db $5C,$5C,$50,$5A,$B6,$50,$28,$28
	db $C5,$D7,$28,$70,$C5,$70,$1C,$93
	db $C5,$C5,$0B,$85,$90,$84
.Big
.Fire
	db $70,$70,$70,$A0,$70,$70,$70,$70
	db $70,$70,$A0,$74,$70,$80,$70,$84
	db $17,$A4,$A4,$A4,$B3,$B0,$70,$70
	db $70,$70,$70,$70,$70,$E2,$72,$0F
	db $61,$70,$63,$82,$C7,$90,$B3,$D4
	db $A5,$C0,$08,$54,$0C,$0E,$1B,$51
	db $49,$4A,$48,$4B,$4C,$5D,$5E,$5F
	db $E3,$90,$5F,$5F,$C5
.Cape
	db $70,$70,$70,$A0,$70,$70,$70,$70
	db $70,$70,$A0,$74,$70,$80,$70,$84
	db $17,$A4,$A4,$A4,$B3,$B0,$70,$70
	db $70,$70,$70,$70,$70,$E2,$72,$0F
	db $61,$70,$63,$82,$C7,$90,$B3,$D4
	db $A5,$C0,$08,$64,$0C,$0E,$1B,$51
	db $49,$4A,$48,$4B,$4C,$5D,$5E,$5F
	db $E3,$90,$5F,$5F,$C5

BodyTilePointerIndex:
.Small
	db $71,$60,$60,$19,$94,$96,$96,$A2
	db $97,$97,$18,$3B,$B4,$3D,$A7,$E5
	db $2F,$D3,$C3,$C3,$F6,$D0,$B1,$81
	db $B2,$86,$B4,$87,$A6,$D1,$F7,$3A
	db $F0,$F4,$F5,$39,$3C,$C6,$E6,$38
	db $F1,$F0,$C5,$C5,$C5,$C5,$C5,$C5
	db $6C,$4D,$71,$6A,$6B,$60,$38,$F1
	db $5B,$69,$F1,$F1,$4E,$E1,$1D,$A3
	db $C5,$C5,$1A,$95,$10,$07
.Big
.Fire
	db $02,$01,$00,$02,$14,$13,$12,$30
	db $27,$26,$30,$03,$15,$04,$31,$07
	db $E7,$25,$24,$23,$62,$36,$33,$91
	db $34,$92,$35,$A1,$32,$F2,$73,$1F
	db $C0,$C1,$C2,$83,$D2,$10,$B7,$E4
	db $B5,$61,$0A,$55,$0D,$75,$77,$1E
	db $59,$59,$58,$02,$02,$6D,$6E,$6F
	db $F3,$68,$6F,$6F,$06
.Cape
	db $02,$01,$00,$02,$14,$13,$12,$30
	db $27,$26,$30,$03,$15,$04,$31,$07
	db $E7,$25,$24,$23,$62,$36,$33,$91
	db $34,$92,$35,$A1,$32,$F2,$73,$1F
	db $C0,$C1,$C2,$83,$D2,$10,$B7,$E4
	db $B5,$61,$0A,$55,$0D,$75,$77,$1E
	db $59,$59,$58,$02,$02,$6D,$6E,$6F
	db $F3,$68,$6F,$6F,$06

TileXFlip:
	db $00,$40

DATA_00E18E:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$0D,$00,$10
	db $13,$22,$25,$28,$00,$16,$00,$00
	db $00,$00,$00,$00,$00,$08,$19,$1C
	db $04,$1F,$10,$10,$00,$16,$10,$06
	db $04,$08,$2B,$30,$35,$3A,$3F,$43
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $16,$16,$00,$00,$08,$00,$00,$00
	db $00,$00,$00,$10,$04,$00

DATA_00E1D4:
	db $06,$00,$06,$00,$86
	db $02,$06,$03,$06,$01
	db $06,$CE,$06,$06,$40
	db $00,$06,$2C,$06,$06
	db $44,$0E,$86,$2C,$06
	db $86,$2C,$0A,$86,$84
	db $08,$06,$0A,$02,$06
	db $AC,$10,$06,$CC,$10
	db $06,$AE,$10,$00,$8C
	db $14,$80,$2E,$00,$CA
	db $16,$91,$2F,$00,$8E
	db $18,$81,$30,$00,$EB
	db $1A,$90,$31,$04,$ED
	db $1C,$82,$06,$92,$1E

CapeXYDispIndex:
	db $84,$86
	db $88,$8A
	db $8C,$8E
	db $90,$90
	db $92,$94
	db $96,$98
	db $9A,$9C
	db $9E,$A0
	db $A2,$A4
	db $A6,$A8
	db $AA,$B0
	db $B6,$BC
	db $C2,$C8
	db $CE,$D4
	db $DA,$DE
	db $E2,$E2

CapeTilePointerIndex:
	db $0A,$0A,$84,$0A,$88,$88,$88,$88
	db $8A,$8A,$8A,$8A,$44,$44,$44,$44
	db $42,$42,$42,$42,$40,$40,$40,$40
	db $22,$22,$22,$22,$A4,$A4,$A4,$A4
	db $A6,$A6,$A6,$A6,$86,$86,$86,$86
	db $6E,$6E,$6E,$6E

DATA_00E266:
	db $02,$02,$02,$0C,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$04,$12,$04,$04
	db $04,$12,$04,$04,$04,$12,$04,$04
	db $04,$12,$04,$04

DATA_00E292:
	db $01,$01,$01,$01,$02,$02,$02,$02
	db $04,$04,$04,$04,$08,$08,$08,$08

PalettePointers:
	dw SMW_GlobalPalettes_Mario,SMW_GlobalPalettes_Luigi,SMW_GlobalPalettes_Mario,SMW_GlobalPalettes_Luigi
	dw SMW_GlobalPalettes_Mario,SMW_GlobalPalettes_Luigi,SMW_GlobalPalettes_MarioFire,SMW_GlobalPalettes_LuigiFire

PlayerStartingOAMIndex:
	db $10			; Normal
	db $D4			; Behind climbing Net
	db $10			; Enter/exit pipe
	db $E8			; Overworld Border/Mode 7 room

CapeStartingOAMIndex:
	db $08			; Normal
	db $CC			; Behind climbing Net
	db $08			; Enter/exit pipe
	db $E0			; Overworld Border/Mode 7 room

TilePriority:
				; Normal (controlled by !RAM_SMW_Sprites_TilePriority)
	db $10			; Behind climbing Net
	db $10			; Enter/exit pipe
	db $30			; Overworld Border/Mode 7 room

Main:
	PHB
	PHK
	PLB
	LDA.b !RAM_SMW_Player_HidePlayerTileFlags
	CMP.b #$FF
	BEQ.b CODE_00E2CA
	JSL.l CODE_01EA70
CODE_00E2CA:
	LDY.w !RAM_SMW_Timer_PlayerPaletteCycle
	BNE.b CODE_00E308
	LDY.w !RAM_SMW_Timer_StarPower
#Debug_InfiniteStar:
	BEQ.b CODE_00E314
	LDA.b !RAM_SMW_Player_HidePlayerTileFlags
	CMP.b #$FF
	BEQ.b CODE_00E2E3
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_00E2E3
	DEC.w !RAM_SMW_Timer_StarPower
CODE_00E2E3:
	LDA.b !RAM_SMW_Counter_GlobalFrames
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPY.b #$18
else
	CPY.b #$1E
endif
	BCC.b CODE_00E30A
	BNE.b CODE_00E30C
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	CMP.b #$FF
	BEQ.b CODE_00E308
	AND.b #$7F
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
	TAX
	LDA.w !RAM_SMW_Timer_BluePSwitch
	ORA.w !RAM_SMW_Timer_SilverPSwitch
	ORA.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
	BEQ.b CODE_00E305
	LDX.b #!Define_SMW_LevelMusic_DirectCoins
CODE_00E305:
	STX.w !RAM_SMW_IO_MusicCh1
CODE_00E308:
	LDA.b !RAM_SMW_Counter_GlobalFrames
CODE_00E30A:
	LSR
	LSR
CODE_00E30C:
	AND.b #$03
	INC
	INC
	INC
	INC
	BRA.b CODE_00E31A

CODE_00E314:
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	ASL
	ORA.w !RAM_SMW_Player_CurrentCharacter
CODE_00E31A:
	ASL
	TAY
	REP.b #$20
	LDA.w PalettePointers,y
	STA.w !RAM_SMW_Pointer_PlayerPaletteLo
	SEP.b #$20
	LDX.w !RAM_SMW_Player_CurrentPose
	LDA.b #$05
	CMP.w !RAM_SMW_Player_WallWalkStatus
	BCS.b CODE_00E33E
	LDA.w !RAM_SMW_Player_WallWalkStatus
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00E33B
	CPX.b #$13
	BNE.b CODE_00E33D
CODE_00E33B:
	EOR.b #$01
CODE_00E33D:
	LSR
CODE_00E33E:
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Player_OnScreenPosXLo
	LDA.w !RAM_SMW_Player_RelativeYPositionDuringScreenShake
	AND.w #$00FF
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	CPY.b #$01
	LDY.b #$01
	BCS.b CODE_00E359
	DEC
	DEY
CODE_00E359:
	CPX.b #$0A
	BCS.b CODE_00E360
	CPY.w !RAM_SMW_Player_WalkingFrame
CODE_00E360:
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CPX.b #$1C
	BNE.b CODE_00E369
	ADC.w #$0001
CODE_00E369:
	STA.b !RAM_SMW_Player_OnScreenPosYLo
	SEP.b #$20
	LDA.w !RAM_SMW_Timer_PlayerHurt
	BEQ.b CODE_00E385
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_00E292,y
	AND.w !RAM_SMW_Timer_PlayerHurt
	ORA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_Player_FreezePlayerFlag
	BNE.b CODE_00E385
	PLB
	RTL

CODE_00E385:
	LDA.b #$C8
	CPX.b #$43
	BNE.b CODE_00E38D
	LDA.b #$E8
CODE_00E38D:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	CPX.b #$29
	BNE.b CODE_00E399
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_00E399
	LDX.b #$20
CODE_00E399:
	LDA.w PlayerXYDispIndexIndex,x
	ORA.b !RAM_SMW_Player_FacingDirection
	TAY
	LDA.w PlayerXYDispIndex,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	LDA.w !RAM_SMW_Player_CurrentPose
	CMP.b #$3D
	BCS.b CODE_00E3B0
	ADC.w PowerupTilesetIndex,y
CODE_00E3B0:
	TAY
	LDA.w TilesIndex,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w HeadTilePointerIndex,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w BodyTilePointerIndex,y
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b !RAM_SMW_Sprites_TilePriority
	LDX.w !RAM_SMW_Player_CurrentLayerPriority
	BEQ.b CODE_00E3CA
	LDA.w TilePriority-$01,x
CODE_00E3CA:
	LDY.w PlayerStartingOAMIndex,x
	LDX.b !RAM_SMW_Player_FacingDirection
	ORA.w TileXFlip,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$43].Prop,y
	STA.w SMW_OAMBuffer[$44].Prop,y
	STA.w SMW_OAMBuffer[$3E].Prop,y
	STA.w SMW_OAMBuffer[$3F].Prop,y
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	CPX.b #$E8
	BNE.b CODE_00E3EC
	EOR.b #$40
CODE_00E3EC:
	STA.w SMW_OAMBuffer[$42].Prop,y
	JSR.w CODE_00E45D
	JSR.w CODE_00E45D
	JSR.w CODE_00E45D
	JSR.w CODE_00E45D
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	CMP.b #$02
	BNE.b CODE_00E458
	PHY
	LDA.b #$2C
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDX.w !RAM_SMW_Player_CurrentPose
	LDA.w DATA_00E18E,x
	TAX
	LDA.w DATA_00E1D4+$03,x
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.w DATA_00E1D4+$04,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w DATA_00E1D4+$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.b #$04
	BCS.b CODE_00E432
	LDA.w !RAM_SMW_Player_CapeImage
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM0C
	TAY
	LDA.w CapeTilePointerIndex,y
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w DATA_00E266,y
	BRA.b CODE_00E435

CODE_00E432:
	LDA.w DATA_00E1D4+$02,x
CODE_00E435:
	ORA.b !RAM_SMW_Player_FacingDirection
	TAY
	LDA.w CapeXYDispIndex,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	PLY
	LDA.w DATA_00E1D4,x
	TSB.b !RAM_SMW_Player_HidePlayerTileFlags
	BMI.b CODE_00E448
	JSR.w CODE_00E45D
CODE_00E448:
	LDX.w !RAM_SMW_Player_CurrentLayerPriority
	LDY.w CapeStartingOAMIndex,x
	JSR.w CODE_00E45D
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	STA.b !RAM_SMW_Misc_ScratchRAM06
	JSR.w CODE_00E45D
CODE_00E458:
	JSR.w CODE_00F636
	PLB
	RTL

CODE_00E45D:
	LSR.b !RAM_SMW_Player_HidePlayerTileFlags
	BCS.b CODE_00E49F
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w Tiles,x
	BMI.b CODE_00E49F
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.b !RAM_SMW_Misc_ScratchRAM05
	REP.b #$20
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CLC
	ADC.w YDisp,x
	PHA
	CLC
	ADC.w #$0010
	CMP.w #$0100
	PLA
	SEP.b #$20
	BCS.b CODE_00E49F
	STA.w SMW_OAMBuffer[$40].YDisp,y
	REP.b #$20
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CLC
	ADC.w XDisp,x
	PHA
	CLC
	ADC.w #$0080
	CMP.w #$0200
	PLA
	SEP.b #$20
	BCS.b CODE_00E49F
	STA.w SMW_OAMBuffer[$40].XDisp,y
	XBA
	LSR
CODE_00E49F:
	PHP
	TYA
	LSR
	LSR
	TAX
	ASL.b !RAM_SMW_Misc_ScratchRAM04
	ROL
	PLP
	ROL
	AND.b #$03
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	INY
	INY
	INY
	INY
	INC.b !RAM_SMW_Misc_ScratchRAM05
	INC.b !RAM_SMW_Misc_ScratchRAM05
	INC.b !RAM_SMW_Misc_ScratchRAM06
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_PlayerGFXRt(Address)
namespace SMW_PlayerGFXRt
%InsertMacroAtXPosition(<Address>)

CODE_00F636:
	REP.b #$20
	LDX.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM0A-$01
	ORA.w #$0800
	CMP.b !RAM_SMW_Misc_ScratchRAM0A-$01
	BEQ.b CODE_00F644
	CLC
CODE_00F644:
	AND.w #$F700
	ROR
	LSR
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX32
	STA.w SMW_DynamicSpritePointersTop[$00].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$00].LowByte
	LDX.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM0B-$01
	ORA.w #$0800
	CMP.b !RAM_SMW_Misc_ScratchRAM0B-$01
	BEQ.b CODE_00F662
	CLC
CODE_00F662:
	AND.w #$F700
	ROR
	LSR
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX32
	STA.w SMW_DynamicSpritePointersTop[$01].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$01].LowByte
	LDA.b !RAM_SMW_Misc_ScratchRAM0C-$01
	AND.w #$FF00
	LSR
	LSR
	LSR
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX32
	STA.w SMW_DynamicSpritePointersTop[$02].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$02].LowByte
	LDA.b !RAM_SMW_Misc_ScratchRAM0D-$01
	AND.w #$FF00
	LSR
	LSR
	LSR
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX32
	STA.w !RAM_SMW_Graphics_DynamicSpriteTile7FLo
	SEP.b #$20
	LDA.b #$0A
	STA.w !RAM_SMW_Player_NumberOfTilesToUpdate
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_PlayerGFXRt(Address)
namespace SMW_PlayerGFXRt
%InsertMacroAtXPosition(<Address>)

CODE_01EA70:
	LDX.w !RAM_SMW_Yoshi_StrayYoshiFlag
	BEQ.b Return01EA8E
	STZ.w !RAM_SMW_Player_RelativeYPositionDuringScreenShake
	STZ.w !RAM_SMW_Yoshi_KeyInMouthFlag
	LDA.w !RAM_SMW_NorSpr_CurrentSlotID
	PHA
	DEX
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	PHB
	PHK
	PLB
	JSR.w CODE_01EA8F
	PLB
	PLA
	STA.w !RAM_SMW_NorSpr_CurrentSlotID
Return01EA8E:
	RTL

CODE_01EA8F:
	LDA.w !RAM_SMW_GrowingYoshiTimer
	ORA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	BEQ.b CODE_01EA9A
	JMP.w CODE_01EB48

CODE_01EA9A:
	STZ.w !RAM_SMW_Yoshi_DuckingFlag
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$02
	BCC.b CODE_01EAA7
	LDA.b #$30
	BRA.b CODE_01EAB2

CODE_01EAA7:
	LDY.b #$00
	LDA.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_01EADF
	BPL.b CODE_01EAB2
	EOR.b #$FF
	INC
CODE_01EAB2:
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01EAD0
	DEC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	BPL.b CODE_01EAD0
	LDA.w SMW_NorSpr035_Yoshi_Status08_DATA_01EDF5,y
	STA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	DEC.w !RAM_SMW_Yoshi_WalkingFrames
	BPL.b CODE_01EAD0
	LDA.b #$02
	STA.w !RAM_SMW_Yoshi_WalkingFrames
CODE_01EAD0:
	LDY.w !RAM_SMW_Yoshi_WalkingFrames
	LDA.w SMW_NorSpr035_Yoshi_Status08_YoshiWalkFrames,y
	TAY
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$02
	BCS.b CODE_01EB2E
	BRA.b CODE_01EAE2

CODE_01EADF:
	STZ.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_01EAE2:
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_01EAF0
	LDY.b #$02
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_01EAF0
	LDY.b #$05
	BRA.b CODE_01EAF0

CODE_01EAF0:
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_01EAF7
	LDY.b #$03
CODE_01EAF7:
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_01EB21
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	BEQ.b CODE_01EB0C
	LDY.b #$07
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadU>>8
	BEQ.b CODE_01EB0A
	LDY.b #$06
CODE_01EB0A:
	BRA.b CODE_01EB21

CODE_01EB0C:
	LDA.w !RAM_SMW_Timer_YoshiSquatting
	BEQ.b CODE_01EB16
	DEC.w !RAM_SMW_Timer_YoshiSquatting
	BRA.b CODE_01EB1C

CODE_01EB16:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b CODE_01EB21
CODE_01EB1C:
	LDY.b #$04
	INC.w !RAM_SMW_Yoshi_DuckingFlag
CODE_01EB21:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$01
	BEQ.b CODE_01EB2E
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	BNE.b CODE_01EB2E
	LDY.b #$04
CODE_01EB2E:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01EB44
	LDA.w !RAM_SMW_Yoshi_InPipe
	CMP.b #$01
	BNE.b CODE_01EB44
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$08
	LSR
	LSR
	LSR
	ADC.b #$08
	TAY
CODE_01EB44:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01EB48:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$01
	BNE.b CODE_01EB97
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w SMW_NorSpr035_Yoshi_Status08_YoshiPositionX,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.w SMW_NorSpr035_Yoshi_Status08_DATA_01EDF3,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w SMW_NorSpr035_Yoshi_Status08_DATA_01EDE4,y
	STA.w !RAM_SMW_Player_RelativeYPositionDuringScreenShake
	LDA.b #$01
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	CPY.b #$03
	BNE.b BackOnYoshi
	INC
BackOnYoshi:
	STA.w !RAM_SMW_Player_RidingYoshiFlag
	LDA.b #$01
	STA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	LDA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	STA.w !RAM_SMW_Yoshi_CurrentYoshiColor
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
CODE_01EB97:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01EBAD
	LDA.w !RAM_SMW_Yoshi_InPipe
	BEQ.b CODE_01EBAD
	LDA.w !RAM_SMW_Flag_AboutToWarpInPipe
	BNE.b CODE_01EBB0
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_01EBAD:
	JSR.w SMW_NorSpr035_Yoshi_Status08_HandleOffYoshi
CODE_01EBB0:
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandlePlayerPhysics(Address)
namespace SMW_HandlePlayerPhysics
%InsertMacroAtXPosition(<Address>)

JumpHeightTable:		; Glitch: X speeds in the 40-C0 range will use garbage Y speed values.
	db $B0,$B6		; X Speed 00-07/FF-F9
	db $AE,$B4		; X Speed 08-0F/F8-F1
	db $AB,$B2		; X Speed 10-17/F0-E9
	db $A9,$B0		; X Speed 18-1F/E8-E1
	db $A6,$AE		; X Speed 20-27/E0-D9
	db $A4,$AB		; X Speed 28-2F/D8-D1
	db $A1,$A9		; X Speed 30-37/D0-C9
	db $9F,$A6		; X Speed 38-3F/C8-C1

if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
DATA_00D2CD:
	dw $FEC0,$0140,$FEC0,$0140
	dw $FEC0,$0140,$FE20,$00F0
	dw $FF10,$01E0,$FD80,$0050
	dw $FFB0,$0280,$FD80,$0050
	dw $FD80,$0050,$FFB0,$0280
	dw $FFB0,$0280,$FB00,$FEC0
	dw $0140,$0500,$FEC0,$0140
	dw $FEC0,$0140

DATA_00D309:
	dw $FFD8,$0028,$FFD8,$0028
	dw $FFD8,$0028,$FFB0,$0028
	dw $FFD8,$0050,$FF60,$0028
	dw $FFD8,$00A0,$FF60,$0028
	dw $FF60,$0028,$FFD8,$00A0
	dw $FFD8,$00A0,$FD80,$FF60
	dw $00A0,$0280,$FEC0,$0140
	dw $FEC0,$0140

MarioAccel:
	db $20,$FE,$20,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$90,$01,$90,$01
	db $70,$FE,$70,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$40,$01,$40,$01
	db $C0,$FE,$C0,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$40,$01,$40,$01
	db $20,$FE,$20,$FE,$40,$01,$40,$01
	db $C0,$FE,$C0,$FE,$E0,$01,$E0,$01
	db $C0,$FE,$C0,$FE,$E0,$01,$E0,$01
	db $00,$FB,$00,$FB,$40,$FC,$40,$FC
	db $C0,$03,$C0,$03,$00,$05,$00,$05
	db $00,$FB,$00,$FB,$80,$07,$80,$07
	db $80,$F8,$80,$F8,$00,$05,$00,$05
	db $60,$FF,$A0,$00,$C0,$FE,$40,$01
	db $20,$FE,$E0,$01,$20,$FE,$20,$FE
	db $E0,$01,$E0,$01,$20,$FE,$20,$03
	db $E0,$FC,$C0,$F9,$20,$03,$40,$06
	db $E0,$FC,$C0,$F9,$20,$03,$40,$06
	db $E0,$FC,$C0,$F9,$20,$03,$40,$06
	db $90,$FC,$20,$F9,$D0,$02,$A0,$05
	db $C0,$FD,$20,$F9,$70,$03,$E0,$06
	db $40,$FC,$80,$F8,$80,$02,$00,$05
	db $80,$FD,$00,$FB,$C0,$03,$80,$07
	db $40,$FC,$80,$F8,$80,$02,$00,$05
	db $40,$FC,$80,$F8,$80,$02,$00,$05
	db $80,$FD,$00,$FB,$C0,$03,$80,$07
	db $80,$FD,$00,$FB,$C0,$03,$80,$07
	db $40,$FC,$80,$F8,$40,$FC,$80,$F8
	db $C0,$03,$80,$07,$C0,$03,$80,$07

DATA_00D43D:
	db $60,$FF,$20,$FE,$A0,$00,$E0,$01
	db $60,$FF,$20,$FE,$A0,$00,$E0,$01
	db $60,$FF,$20,$FE,$A0,$00,$E0,$01
	db $20,$FE,$20,$FE,$A0,$00,$90,$01
	db $60,$FF,$70,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$A0,$00,$40,$01
	db $60,$FF,$C0,$FE,$E0,$01,$E0,$01
	db $20,$FE,$20,$FE,$A0,$00,$40,$01
	db $20,$FE,$20,$FE,$A0,$00,$40,$01
	db $60,$FF,$C0,$FE,$E0,$01,$E0,$01
	db $60,$FF,$C0,$FE,$E0,$01,$E0,$01
	db $00,$FB,$00,$FB,$80,$FD,$40,$FC
	db $C0,$03,$C0,$03,$00,$05,$00,$05
	db $00,$FB,$00,$FB,$A0,$00,$A0,$00
	db $60,$FF,$60,$FF,$00,$05,$00,$05
	db $60,$FF,$A0,$00,$C0,$FE,$40,$01
	db $20,$FE,$E0,$01,$20,$FE,$20,$FE
	db $E0,$01,$E0,$01,$20,$FE,$20,$03
	db $B0,$FF,$E0,$FC,$50,$00,$20,$03
	db $B0,$FF,$E0,$FC,$50,$00,$20,$03
	db $B0,$FF,$E0,$FC,$50,$00,$20,$03
	db $60,$FF,$90,$FC,$50,$00,$D0,$02
	db $B0,$FF,$30,$FD,$A0,$00,$70,$03
	db $40,$FC,$40,$FC,$50,$00,$80,$02
	db $B0,$FF,$80,$FD,$C0,$03,$C0,$03
	db $40,$FC,$40,$FC,$50,$00,$80,$02
	db $40,$FC,$40,$FC,$50,$00,$80,$02
	db $B0,$FF,$80,$FD,$C0,$03,$C0,$03
	db $B0,$FF,$80,$FD,$C0,$03,$C0,$03
	db $40,$FC,$40,$FC,$40,$FC,$40,$FC
	db $C0,$03,$C0,$03,$C0,$03,$C0,$03

DATA_00D535:
	db $E7,$19,$D3,$2D,$D3,$2D,$C4,$3C
	db $E7,$19,$D3,$2D,$D3,$2D,$C4,$3C
	db $E7,$19,$D3,$2D,$D3,$2D,$C4,$3C
	db $E2,$16,$D3,$28,$D3,$28,$C4,$38
	db $EA,$1E,$D8,$2D,$D8,$2D,$C8,$3C
	db $D3,$14,$D3,$23,$D3,$23,$C4,$34
	db $EC,$2D,$DD,$2D,$DD,$2D,$CC,$3C
	db $D3,$14,$D3,$23,$D3,$23,$C4,$34
	db $D3,$14,$D3,$23,$D3,$23,$C4,$34
	db $EC,$2D,$DD,$2D,$DD,$2D,$CC,$3C
	db $EC,$2D,$DD,$2D,$DD,$2D,$CC,$3C
	db $D3,$EC,$D3,$F6,$D3,$F6,$C4,$FC
	db $14,$2D,$0A,$2D,$0A,$2D,$05,$3C
	db $C4,$0A,$C4,$0A,$C4,$0A,$C4,$0A
	db $F6,$3C,$F6,$3C,$F6,$3C,$F6,$3C
	db $F6,$0A,$EC,$14,$F1,$05,$E2,$0A
	db $EC,$14,$D8,$28,$E7,$0F,$CE,$1E
	db $CE,$32,$C9,$37,$C4,$3C,$C4,$C4
	db $3C,$3C,$D8,$28

DATA_00D5C9:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$EC,$00,$14,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$D8
	db $00,$28,$00,$00,$00,$00,$00,$EC
	db $00,$F6
else
DATA_00D2CD:
	dw $FF00,$0100,$FF00,$0100
	dw $FF00,$0100,$FE80,$00C0
	dw $FF40,$0180,$FE00,$0040
	dw $FFC0,$0200,$FE00,$0040
	dw $FE00,$0040,$FFC0,$0200
	dw $FFC0,$0200,$FC00,$FF00
	dw $0100,$0400,$FF00,$0100
	dw $FF00,$0100

DATA_00D309:
	dw $FFE0,$0020,$FFE0,$0020
	dw $FFE0,$0020,$FFC0,$0020
	dw $FFE0,$0040,$FF80,$0020
	dw $FFE0,$0080,$FF80,$0020
	dw $FF80,$0020,$FFE0,$0080
	dw $FFE0,$0080,$FE00,$FF80
	dw $0080,$0200,$FF00,$0100
	dw $FF00,$0100

MarioAccel:
	db $80,$FE,$80,$FE,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$40,$01,$40,$01
	db $C0,$FE,$C0,$FE,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$00,$01,$00,$01
	db $00,$FF,$00,$FF,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$00,$01,$00,$01
	db $80,$FE,$80,$FE,$00,$01,$00,$01
	db $00,$FF,$00,$FF,$80,$01,$80,$01
	db $00,$FF,$00,$FF,$80,$01,$80,$01
	db $00,$FC,$00,$FC,$00,$FD,$00,$FD
	db $00,$03,$00,$03,$00,$04,$00,$04
	db $00,$FC,$00,$FC,$00,$06,$00,$06
	db $00,$FA,$00,$FA,$00,$04,$00,$04
	db $80,$FF,$80,$00,$00,$FF,$00,$01
	db $80,$FE,$80,$01,$80,$FE,$80,$FE
	db $80,$01,$80,$01,$80,$FE,$80,$02
	db $80,$FD,$00,$FB,$80,$02,$00,$05
	db $80,$FD,$00,$FB,$80,$02,$00,$05
	db $80,$FD,$00,$FB,$80,$02,$00,$05
	db $40,$FD,$80,$FA,$40,$02,$80,$04
	db $C0,$FD,$80,$FB,$C0,$02,$80,$05
	db $00,$FD,$00,$FA,$00,$02,$00,$04
	db $00,$FE,$00,$FC,$00,$03,$00,$06
	db $00,$FD,$00,$FA,$00,$02,$00,$04
	db $00,$FD,$00,$FA,$00,$02,$00,$04
	db $00,$FE,$00,$FC,$00,$03,$00,$06
	db $00,$FE,$00,$FC,$00,$03,$00,$06
	db $00,$FD,$00,$FA,$00,$FD,$00,$FA
	db $00,$03,$00,$06,$00,$03,$00,$06

DATA_00D43D:
	db $80,$FF,$80,$FE,$80,$00,$80,$01
	db $80,$FF,$80,$FE,$80,$00,$80,$01
	db $80,$FF,$80,$FE,$80,$00,$80,$01
	db $80,$FE,$80,$FE,$80,$00,$40,$01
	db $80,$FF,$C0,$FE,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$80,$00,$00,$01
	db $80,$FF,$00,$FF,$80,$01,$80,$01
	db $80,$FE,$80,$FE,$80,$00,$00,$01
	db $80,$FE,$80,$FE,$80,$00,$00,$01
	db $80,$FF,$00,$FF,$80,$01,$80,$01
	db $80,$FF,$00,$FF,$80,$01,$80,$01
	db $00,$FC,$00,$FC,$00,$FE,$00,$FD
	db $00,$03,$00,$03,$00,$04,$00,$04
	db $00,$FC,$00,$FC,$80,$00,$80,$00
	db $80,$FF,$80,$FF,$00,$04,$00,$04
	db $80,$FF,$80,$00,$00,$FF,$00,$01
	db $80,$FE,$80,$01,$80,$FE,$80,$FE
	db $80,$01,$80,$01,$80,$FE,$80,$02
	db $C0,$FF,$80,$FD,$40,$00,$80,$02
	db $C0,$FF,$80,$FD,$40,$00,$80,$02
	db $C0,$FF,$80,$FD,$40,$00,$80,$02
	db $80,$FF,$40,$FD,$40,$00,$40,$02
	db $C0,$FF,$C0,$FD,$80,$00,$C0,$02
	db $00,$FD,$00,$FD,$40,$00,$00,$02
	db $C0,$FF,$00,$FE,$00,$03,$00,$03
	db $00,$FD,$00,$FD,$40,$00,$00,$02
	db $00,$FD,$00,$FD,$40,$00,$00,$02
	db $C0,$FF,$00,$FE,$00,$03,$00,$03
	db $C0,$FF,$00,$FE,$00,$03,$00,$03
	db $00,$FD,$00,$FD,$00,$FD,$00,$FD
	db $00,$03,$00,$03,$00,$03,$00,$03

DATA_00D535:
	db $EC,$14,$DC,$24,$DC,$24,$D0,$30
	db $EC,$14,$DC,$24,$DC,$24,$D0,$30
	db $EC,$14,$DC,$24,$DC,$24,$D0,$30
	db $E8,$12,$DC,$20,$DC,$20,$D0,$2C
	db $EE,$18,$E0,$24,$E0,$24,$D4,$30
	db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28
	db $F0,$24,$E4,$24,$E4,$24,$D8,$30
	db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28
	db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28
	db $F0,$24,$E4,$24,$E4,$24,$D8,$30
	db $F0,$24,$E4,$24,$E4,$24,$D8,$30
	db $DC,$F0,$DC,$F8,$DC,$F8,$D0,$FC
	db $10,$24,$08,$24,$08,$24,$04,$30
	db $D0,$08,$D0,$08,$D0,$08,$D0,$08
	db $F8,$30,$F8,$30,$F8,$30,$F8,$30
	db $F8,$08,$F0,$10,$F4,$04,$E8,$08
	db $F0,$10,$E0,$20,$EC,$0C,$D8,$18
	db $D8,$28,$D4,$2C,$D0,$30,$D0,$D0
	db $30,$30,$E0,$20

DATA_00D5C9:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$F0,$00,$10,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$E0
	db $00,$20,$00,$00,$00,$00,$00,$F0
	db $00,$F8
endif

DATA_00D5EB:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $FF,$FF,$03
else
	db $FF,$FF,$02
endif

DATA_00D5EE:
	db $68,$70

DATA_00D5F0:
	db $1C,$0C

Main:
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00D5F9
	JMP.w CODE_00D682

CODE_00D5F9:
	STZ.b !RAM_SMW_Player_DuckingFlag
	LDA.w !RAM_SMW_Player_SlidingOnGround
	BNE.b CODE_00D60B
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b CODE_00D60B
	STA.b !RAM_SMW_Player_DuckingFlag
	STZ.w !RAM_SMW_Flag_CapeToSpriteInteraction
CODE_00D60B:
	LDA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	CMP.b #$02
	BEQ.b CODE_00D61E
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$08
	BNE.b CODE_00D61E
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	BMI.b PlayerIsJumping
CODE_00D61E:
	LDA.b !RAM_SMW_Player_DuckingFlag
	BEQ.b CODE_00D682
	LDA.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_00D62D
	LDA.b !RAM_SMW_Flag_IceLevel
	BNE.b CODE_00D62D
	JSR.w SMW_SpawnPlayerTurnAroundSmoke_Main
CODE_00D62D:
	JMP.w CODE_00D764

PlayerIsJumping:
	LDA.b !RAM_SMW_Player_XSpeed
	BPL.b CODE_00D637
	EOR.b #$FF
	INC
CODE_00D637:
	LSR
	LSR
	AND.b #$FE
	TAX
	LDA.b !RAM_SMW_IO_ControllerPress2
	BPL.b CODE_00D65E
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	BNE.b CODE_00D65E
	INC
	STA.w !RAM_SMW_Player_SpinJumpFlag
	LDA.b #!Define_SMW_Sound1DFC_SpinJump
	STA.w !RAM_SMW_IO_SoundCh3
	LDY.b !RAM_SMW_Player_FacingDirection
	LDA.w DATA_00D5F0,y
	STA.w !RAM_SMW_Player_SpinjumpFireballTimer
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_00D682
	INX
	BRA.b CODE_00D663

CODE_00D65E:
	LDA.b #!Define_SMW_Sound1DFA_Jump
	STA.w !RAM_SMW_IO_SoundCh2
CODE_00D663:
	LDA.w JumpHeightTable,x
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #$0B
	LDY.w !RAM_SMW_Player_PMeter
	CPY.b #!Define_SMW_Physics_PMeterMax
	BCC.b CODE_00D67D
	LDA.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
	BNE.b CODE_00D67B
	LDA.b #$50
	STA.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
CODE_00D67B:
	LDA.b #$0C
CODE_00D67D:
	STA.b !RAM_SMW_Player_InAirFlag
	STZ.w !RAM_SMW_Player_SlidingOnGround
CODE_00D682:
	LDA.w !RAM_SMW_Player_SlidingOnGround
	BMI.b CODE_00D692
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	BNE.b CODE_00D6B1
CODE_00D68D:
	LDA.w !RAM_SMW_Player_SlidingOnGround
	BEQ.b CODE_00D6AE
CODE_00D692:
	JSR.w SMW_SpawnPlayerTurnAroundSmoke_Main
	LDA.w !RAM_SMW_Player_SlopePlayerIsOn2
	BEQ.b CODE_00D6AE
	JSR.w UpdatePMeter_Decrement
	LDA.w !RAM_SMW_Player_SlopePlayerIsOn1
	LSR
	LSR
	TAY
	ADC.b #$76
	TAX
	TYA
	LSR
	ADC.b #$87
	TAY
	JMP.w CODE_00D742

CODE_00D6AE:
	JMP.w CODE_00D764

CODE_00D6B1:
	STZ.w !RAM_SMW_Player_SlidingOnGround
	AND.b #!Joypad_DPadR>>8
	LDY.w !RAM_SMW_Player_CapeFlyingPhase
	BEQ.b CODE_00D6D5
	CMP.b !RAM_SMW_Player_FacingDirection
	BEQ.b CODE_00D6C3
	LDY.b !RAM_SMW_IO_ControllerPress1
	BPL.b CODE_00D68D
CODE_00D6C3:
	LDX.b !RAM_SMW_Player_FacingDirection
	LDY.w DATA_00D5EE,x
	STY.w !RAM_SMW_Player_SlopePlayerIsOn1
	STA.b !RAM_SMW_Misc_ScratchRAM01
	ASL
	ASL
	ORA.w !RAM_SMW_Player_SlopePlayerIsOn1
	TAX
	BRA.b CODE_00D713

CODE_00D6D5:
	LDY.b !RAM_SMW_Player_FacingDirection
	CMP.b !RAM_SMW_Player_FacingDirection
	BEQ.b CODE_00D6EC
	LDY.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00D6EA
	LDY.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
	BNE.b CODE_00D6EC
	LDY.b #$08
	STY.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
CODE_00D6EA:
	STA.b !RAM_SMW_Player_FacingDirection
CODE_00D6EC:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	ASL
	ASL
	ORA.w !RAM_SMW_Player_SlopePlayerIsOn1
	TAX
	LDA.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_00D713
	EOR.w MarioAccel+$01,x
	BPL.b CODE_00D713
	LDA.w !RAM_SMW_Timer_PlayerSlidesWhenTuring
	BNE.b CODE_00D713
	LDA.b !RAM_SMW_Flag_IceLevel
	BNE.b CODE_00D70E
	LDA.b #$0D
	STA.w !RAM_SMW_Player_TurningAroundFlag
	JSR.w SMW_SpawnPlayerTurnAroundSmoke_Main
CODE_00D70E:
	TXA
	CLC
	ADC.b #$90
	TAX
CODE_00D713:
	LDY.b #$00
	BIT.b !RAM_SMW_IO_ControllerHold1
	BVC.b CODE_00D737
	INX
	INX
	INY
	LDA.b !RAM_SMW_Player_XSpeed
	BPL.b CODE_00D723
	EOR.b #$FF
	INC
CODE_00D723:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$2C
else
	CMP.b #$23
endif
	BMI.b CODE_00D737
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00D732
	LDA.b #$10
	STA.w !RAM_SMW_Timer_ShowRunningFramesBeforeTakeOff
	BRA.b CODE_00D736

CODE_00D732:
	CMP.b #$0C
	BNE.b CODE_00D737
CODE_00D736:
	INY
CODE_00D737:
	JSR.w UpdatePMeter_Variable
	TYA
	ASL
	ORA.w !RAM_SMW_Player_SlopePlayerIsOn1
	ORA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
CODE_00D742:
	LDA.b !RAM_SMW_Player_XSpeed
	SEC
	SBC.w DATA_00D535,y
	BEQ.b CODE_00D76B
	EOR.w DATA_00D535,y
	BPL.b CODE_00D76B
	REP.b #$20
	LDA.w MarioAccel,x
	LDY.b !RAM_SMW_Flag_IceLevel
	BEQ.b CODE_00D75F
	LDY.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00D75F
	LDA.w DATA_00D43D,x
CODE_00D75F:
	CLC
	ADC.b !RAM_SMW_Player_SubXSpeed
	BRA.b CODE_00D7A0

CODE_00D764:
	JSR.w UpdatePMeter_Decrement
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b Return00D7A4
CODE_00D76B:
	LDA.w !RAM_SMW_Player_SlopePlayerIsOn1
	LSR
	TAY
	LSR
	TAX
CODE_00D772:
	LDA.b !RAM_SMW_Player_XSpeed
	SEC
	SBC.w DATA_00D5C9+$01,x
	BPL.b CODE_00D77C
	INY
	INY
CODE_00D77C:
	LDA.w !RAM_SMW_Timer_EndLevel
	ORA.b !RAM_SMW_Player_InAirFlag
	REP.b #$20
	BNE.b CODE_00D78C
	LDA.w DATA_00D309,y
	BIT.b !RAM_SMW_Flag_IceLevel-$01
	BMI.b CODE_00D78F
CODE_00D78C:
	LDA.w DATA_00D2CD,y
CODE_00D78F:
	CLC
	ADC.b !RAM_SMW_Player_SubXSpeed
	STA.b !RAM_SMW_Player_SubXSpeed
	SEC
	SBC.w DATA_00D5C9,x
	EOR.w DATA_00D2CD,y
	BMI.b CODE_00D7A2
	LDA.w DATA_00D5C9,x
CODE_00D7A0:
	STA.b !RAM_SMW_Player_SubXSpeed
CODE_00D7A2:
	SEP.b #$20
Return00D7A4:
	RTS

DATA_00D7A5:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	dw $06E6,$0373,$0499,$1266
	dw $F220,$0126,$0373,$0499
	dw $05C0,$06E6

DATA_00D7AF:
	dw $4000,$4000,$2000,$4000
	dw $4000,$4000,$4000,$4000
	dw $4000,$4000

DATA_00D7B9:
	db $10,$C8,$E0,$02,$03,$03,$04,$03
	db $02,$00,$01,$00,$00,$00

DATA_00D7C8:
	dw $0100,$1000,$3000,$3000
	dw $3800,$3800,$4000
else
	db $06,$03,$04,$10,$F4,$01,$03,$04
	db $05,$06

DATA_00D7AF:
	db $40,$40,$20,$40,$40,$40,$40,$40
	db $40,$40

DATA_00D7B9:
	db $10,$C8,$E0,$02,$03,$03,$04,$03
	db $02,$00,$01,$00,$00,$00,$00

DATA_00D7C8:
	db $01,$10,$30,$30,$38,$38,$40
endif

CapeSpeed:
	db $FF,$01,$01,$FF,$FF

DATA_00D7D4:
	db $01,$06,$03,$01,$00

DATA_00D7D9:
	db $00,$00,$00,$F8,$F8,$F8,$F4,$F0
	db $C8,$02,$01

InAir:
	LDY.w !RAM_SMW_Player_CapeFlyingPhase
	BNE.b CODE_00D824
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00D811
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	ORA.w !RAM_SMW_Player_SpinJumpFlag
	BNE.b CODE_00D811
	LDA.w !RAM_SMW_Player_SlidingOnGround
	BMI.b CODE_00D7FF
	BNE.b CODE_00D811
CODE_00D7FF:
	STZ.w !RAM_SMW_Player_SlidingOnGround
	LDX.b !RAM_SMW_Player_CurrentPowerUp
	CPX.b #$02
	BNE.b CODE_00D811
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00D811
	LDA.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
	BNE.b CODE_00D814
CODE_00D811:
	JMP.w CODE_00D8CD

CODE_00D814:
	STZ.b !RAM_SMW_Player_DuckingFlag
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	STZ.w !RAM_SMW_Player_FurthestCapeDiveStage
	JSR.w CODE_00D94F
	LDX.b #$02
	BRA.b CODE_00D85B

CODE_00D824:
	CPY.b #$02
	BCC.b CODE_00D82B
	JSR.w CODE_00D94F
CODE_00D82B:
	LDX.w !RAM_SMW_Player_CapeGlideIndex
	CPX.b #$04
	BEQ.b CODE_00D856
	LDX.b #$03
	LDY.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00D856
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	TAY
	BNE.b CODE_00D849
	LDA.w !RAM_SMW_Player_CapeFlyingPhase
	CMP.b #$04
	BCS.b CODE_00D856
	DEX
	BRA.b CODE_00D856

CODE_00D849:
	LSR
	LDY.b !RAM_SMW_Player_FacingDirection
	BEQ.b CODE_00D850
	EOR.b #!Joypad_DPadR>>8
CODE_00D850:
	TAX
	CPX.w !RAM_SMW_Player_CapeGlideIndex
	BNE.b CODE_00D85B
CODE_00D856:
	LDA.w !RAM_SMW_Timer_ChangeDivingState
	BNE.b CODE_00D87E
CODE_00D85B:
	BIT.b !RAM_SMW_IO_ControllerHold1
	BVS.b CODE_00D861
	LDX.b #$04
CODE_00D861:
	LDA.w !RAM_SMW_Player_CapeFlyingPhase
	CMP.w DATA_00D7D4,x
	BEQ.b CODE_00D87E
	CLC
	ADC.w CapeSpeed,x
	STA.w !RAM_SMW_Player_CapeFlyingPhase
	LDA.b #$08
	LDY.w !RAM_SMW_Player_FurthestCapeDiveStage
	CPY.b #$C8
	BNE.b CODE_00D87B
	LDA.b #$02
CODE_00D87B:
	STA.w !RAM_SMW_Timer_ChangeDivingState
CODE_00D87E:
	STX.w !RAM_SMW_Player_CapeGlideIndex
	LDY.w !RAM_SMW_Player_CapeFlyingPhase
	BEQ.b CODE_00D8CD
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	PHY
	TYA
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_SubYSpeed
	BPL.b CODE_00D892
	CMP.w #$00C8
	BCS.b CODE_00D89A
	LDA.w #$00C8
else
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00D892
	CMP.b #$C8
	BCS.b CODE_00D89A
	LDA.b #$C8
endif
	BRA.b CODE_00D89A

CODE_00D892:
	CMP.w DATA_00D7C8,y
	BCC.b CODE_00D89A
	LDA.w DATA_00D7C8,y
CODE_00D89A:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	PLY
	PHA
	SEP.b #$20
else
	PHA
endif
	CPY.b #$01
	BNE.b CODE_00D8C6
	LDX.w !RAM_SMW_Player_FurthestCapeDiveStage
	BEQ.b CODE_00D8C4
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_00D8AF
	LDA.b #!Define_SMW_Sound1DF9_FlyWithCape
	STA.w !RAM_SMW_IO_SoundCh1
	BRA.b CODE_00D8B9

CODE_00D8AF:
	CMP.w !RAM_SMW_Player_FurthestCapeDiveStage
	BCS.b CODE_00D8B9
	STX.b !RAM_SMW_Player_YSpeed
	STZ.w !RAM_SMW_Player_FurthestCapeDiveStage
CODE_00D8B9:
	LDX.b !RAM_SMW_Player_FacingDirection
	LDA.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_00D8C4
	EOR.w DATA_00D535,x
	BPL.b CODE_00D8C6
CODE_00D8C4:
	LDY.b #$02
CODE_00D8C6:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	INY
	INY
	INY
	TYA
	ASL
	TAY
	REP.b #$20
	PLA
else
	PLA
	INY
	INY
	INY
endif
	JMP.w CODE_00D948

CODE_00D8CD:
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00D928
	LDX.b #$00
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00D8E7
	LDA.w !RAM_SMW_Yoshi_YoshiHasWings
	LSR
	BEQ.b CODE_00D8E7
	LDY.b #$02
	CPY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00D8E5
	INX
CODE_00D8E5:
	BRA.b CODE_00D8FF

CODE_00D8E7:
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	CMP.b #$02
	BNE.b CODE_00D928
	LDA.b !RAM_SMW_Player_InAirFlag
	CMP.b #$0C
	BNE.b CODE_00D8FD
	LDY.b #$01
	CPY.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
	BCC.b CODE_00D8FF
	INC.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
CODE_00D8FD:
	LDY.b #$00
CODE_00D8FF:
	LDA.w !RAM_SMW_Timer_TimeToFloatAfterCapeFlight
	BNE.b CODE_00D90D
	LDA.b !RAM_SMW_IO_ControllerHold1,x
	BPL.b CODE_00D924
	LDA.b #$10
	STA.w !RAM_SMW_Timer_TimeToFloatAfterCapeFlight
CODE_00D90D:
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00D91B
	LDX.w DATA_00D7B9,y
	BPL.b CODE_00D924
	CMP.w DATA_00D7B9,y
	BCC.b CODE_00D924
CODE_00D91B:
	LDA.w DATA_00D7B9,y
	CMP.b !RAM_SMW_Player_YSpeed
	BEQ.b CODE_00D94C
	BMI.b CODE_00D94C
CODE_00D924:
	CPY.b #$02
	BEQ.b +
CODE_00D928:
	LDY.b #$01
	LDA.b !RAM_SMW_IO_ControllerHold1
	BMI.b +
CODE_00D92E:
	LDY.b #$00
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
+:
	TYA
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_SubYSpeed
else
+:
	LDA.b !RAM_SMW_Player_YSpeed
endif
	BMI.b CODE_00D948
	CMP.w DATA_00D7AF,y
	BCC.b CODE_00D93C
	LDA.w DATA_00D7AF,y
CODE_00D93C:
	LDX.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00D948
	CPX.b #$0B
	BNE.b CODE_00D948
	LDX.b #$24
	STX.b !RAM_SMW_Player_InAirFlag
CODE_00D948:
	CLC
	ADC.w DATA_00D7A5,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	SEP.b #$20
	STA.b !RAM_SMW_Player_SubYSpeed
	XBA
endif
CODE_00D94C:
	STA.b !RAM_SMW_Player_YSpeed
	RTS

CODE_00D94F:
	STZ.w !RAM_SMW_UnusedRAM_7E140A			; Optimization: This is unused
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00D958
	LDA.b #$00
CODE_00D958:
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_00D7D9,y
	CMP.w !RAM_SMW_Player_FurthestCapeDiveStage
	BPL.b Return00D967
	STA.w !RAM_SMW_Player_FurthestCapeDiveStage
Return00D967:
	RTS

UpdatePMeter:
.Decrement:
	LDY.b #$00
.Variable:
	LDA.w !RAM_SMW_Player_PMeter
	CLC
	ADC.w DATA_00D5EB,y
	BPL.b .CODE_00D975
	LDA.b #$00
.CODE_00D975:
	CMP.b #!Define_SMW_Physics_PMeterMax
	BCC.b .CODE_00D97C
	INY
	LDA.b #!Define_SMW_Physics_PMeterMax
.CODE_00D97C:
	STA.w !RAM_SMW_Player_PMeter
	RTS

SwimPoses:
	db $16,$1A,$1A,$18

SwimYSpeed:
	db $E8,$F8,$D0,$D0

Swimming:
	STZ.w !RAM_SMW_Player_SlidingOnGround
	STZ.b !RAM_SMW_Player_DuckingFlag
	STZ.w !RAM_SMW_Player_CapeFlyingPhase
	STZ.w !RAM_SMW_Player_SpinJumpFlag
	LDY.b !RAM_SMW_Player_YSpeed
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00D9EB
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00D9AF
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	BPL.b CODE_00D9AF
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	STZ.w !RAM_SMW_Player_SlidingOnGround
	LDY.b #$F0
	BRA.b CODE_00D9B5

CODE_00D9AF:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b CODE_00D9BD
CODE_00D9B5:
	JSR.w CODE_00DAA9
	TYA
	CLC
	ADC.b #$08
	TAY
CODE_00D9BD:
	INY
	LDA.w !RAM_SMW_Player_CanJumpOutOfWater
	BNE.b CODE_00D9CC
	DEY
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_00D9CC
	DEY
	DEY
CODE_00D9CC:
	TYA
	BMI.b CODE_00D9D7
	CMP.b #$10
	BCC.b CODE_00D9DD
	LDA.b #$10
	BRA.b CODE_00D9DD

CODE_00D9D7:
	CMP.b #$F0
	BCS.b CODE_00D9DD
	LDA.b #$F0
CODE_00D9DD:
	STA.b !RAM_SMW_Player_YSpeed
	LDY.b #$80
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	BNE.b CODE_00DA48
	LDA.b !RAM_SMW_Player_FacingDirection
	BRA.b CODE_00DA46

CODE_00D9EB:
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	BPL.b CODE_00DA0B
	LDA.w !RAM_SMW_Player_CanJumpOutOfWater
	BNE.b CODE_00DA0B
	JSR.w CODE_00DAA9
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00DA06
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	STZ.w !RAM_SMW_Player_SlidingOnGround
	LDY.b #$F0
CODE_00DA06:
	TYA
	SEC
	SBC.b #$20
	TAY
CODE_00DA0B:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_00DA13
	INY
	INY
CODE_00DA13:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	LSR
	LSR
	TAX
	TYA
	BMI.b CODE_00DA25
	CMP.b #$40
	BCC.b CODE_00DA2D
	LDA.b #$40
	BRA.b CODE_00DA2D

CODE_00DA25:
	CMP.w SwimYSpeed,x
	BCS.b CODE_00DA2D
	LDA.w SwimYSpeed,x
CODE_00DA2D:
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00DA40
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b CODE_00DA40
	STZ.w !RAM_SMW_Flag_CapeToSpriteInteraction
	INC.b !RAM_SMW_Player_DuckingFlag
	BRA.b CODE_00DA69

CODE_00DA40:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	BEQ.b CODE_00DA69
CODE_00DA46:
	LDY.b #$78
CODE_00DA48:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #!Joypad_DPadR>>8
	STA.b !RAM_SMW_Player_FacingDirection
	PHA
	ASL
	ASL
	TAX
	PLA
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_Flag_Layer3TideLevel
	BEQ.b CODE_00DA5D
	CLC
	ADC.b #$04
CODE_00DA5D:
	TAY
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00DA64
	INY
	INY
CODE_00DA64:
	JSR.w CODE_00D742
	BRA.b CODE_00DA7C

CODE_00DA69:
	LDY.b #$00
	TYX
	LDA.w !RAM_SMW_Flag_Layer3TideLevel
	BEQ.b CODE_00DA79
	LDX.b #$1E
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00DA79
	INX
	INX
CODE_00DA79:
	JSR.w CODE_00D772
CODE_00DA7C:
	JSR.w SMW_CheckForPowerUpSpecificPlayerAttacks_Main
	JSL.l SMW_SetPlayerPose_Main
	LDA.w !RAM_SMW_Timer_ActiveCapeSpin
	BNE.b Return00DA8C
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b DisplaySwimPoses
Return00DA8C:
	RTS

DisplaySwimPoses:
	LDA.b #$18
	LDY.w !RAM_SMW_Timer_DisplayPlayerShootFireballPose
	BNE.b CODE_00DA9F
	LDA.w !RAM_SMW_Player_AnimationTimer
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w SwimPoses,y
CODE_00DA9F:
	LDY.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00DAA5
	INC
CODE_00DAA5:
	STA.w !RAM_SMW_Player_CurrentPose
	RTS

CODE_00DAA9:
	LDA.b #!Define_SMW_Sound1DF9_Swim
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_Player_AnimationTimer			;\ Glitch: This can potentially run on the same frame the player gets hurt, thus messing up the hurt animation.
	ORA.b #$10						;|
	STA.w !RAM_SMW_Player_AnimationTimer			;/
	RTS

ClimbingSpeed:
	db $10,$08,$F0,$F8

JumpFromVineYSpeed:
	db $B0,$F0

DATA_00DABD:
	db $00,$01,$00,$01,$01,$01,$01,$01
	db $01,$01,$01,$01,$01,$01,$01,$01

SwingOnNetDoorPoses:
	db $22,$15,$22,$15,$21,$1F,$20,$20
	db $20,$20,$1F,$21,$1F,$21

ClimbingPoses:
	db $15		; In front of net
	db $22		; Behind net

NetPunchingPoses:
	db $1E		; In front of net
	db $23		; Behind net

DATA_00DADF:
	db $10,$0F,$0E,$0D,$0C,$0B,$0A,$09
	db $08,$07,$06,$05,$05,$05,$05,$05
	db $05,$05

DATA_00DAF1:
	dw $0120,$0140,$012A,$012A
	dw $0130,$0133,$0132,$0134
	dw $0136,$0138,$013A,$013B
	dw $0145,$0145,$0145,$0145
	dw $0145,$0145

UNK_00DB15:
	db $08,$F8

Climbing:
	STZ.b !RAM_SMW_Player_InAirFlag
	STZ.b !RAM_SMW_Player_YSpeed
	STZ.w !RAM_SMW_Player_CapeImage
	STZ.w !RAM_SMW_Player_SpinJumpFlag
	LDY.w !RAM_SMW_Timer_OnSwingingClimbingNetDoor
	BEQ.b CODE_00DB7D
	LDA.w !RAM_SMW_Sprites_PlayerXSpeedOnSwingingNetDoor
	BPL.b CODE_00DB2E
	EOR.b #$FF
	INC
CODE_00DB2E:
	TAX
	CPY.b #$1E
	BCC.b CODE_00DB45
	LDA.w DATA_00DADF,x
	BIT.w !RAM_SMW_Sprites_PlayerXSpeedOnSwingingNetDoor
	BPL.b CODE_00DB3E
	EOR.b #$FF
	INC
CODE_00DB3E:
	STA.b !RAM_SMW_Player_XSpeed
	STZ.b !RAM_SMW_Player_SubXSpeed
	STZ.w !RAM_SMW_Player_SubXPos
CODE_00DB45:
	TXA
	ASL
	TAX
	LDA.w !RAM_SMW_Sprites_PlayerXSpeedOnSwingingNetDoor
	CPY.b #$08
	BCS.b CODE_00DB51
	EOR.b #$80
CODE_00DB51:
	ASL
	REP.b #$20
	LDA.w DATA_00DAF1,x
	BCS.b CODE_00DB5D
	EOR.w #$FFFF
	INC
CODE_00DB5D:
	CLC
	ADC.b !RAM_SMW_Player_SubXSpeed
	STA.b !RAM_SMW_Player_SubXSpeed
	SEP.b #$20
	TYA
	LSR
	AND.b #$0E
	ORA.w !RAM_SMW_Player_FacingDirectionOnNetDoor
	TAY
	LDA.w DATA_00DABD,y
	BIT.w !RAM_SMW_Sprites_PlayerXSpeedOnSwingingNetDoor
	BMI.b CODE_00DB76
	EOR.b #$01
CODE_00DB76:
	STA.b !RAM_SMW_Player_FacingDirection
	LDA.w SwingOnNetDoorPoses,y
	BRA.b CODE_00DB92

CODE_00DB7D:
	STZ.b !RAM_SMW_Player_XSpeed
	STZ.b !RAM_SMW_Player_SubXSpeed
	LDX.w !RAM_SMW_Player_CurrentLayerPriority
	LDA.w !RAM_SMW_Timer_DisplayPlayerNetPunchPose
	BEQ.b CODE_00DB96
	TXA
	INC
	INC
	JSR.w SMW_InitializeCapeSwingOrNetPunch_Main
	LDA.w NetPunchingPoses,x
CODE_00DB92:
	STA.w !RAM_SMW_Player_CurrentPose
	RTS

CODE_00DB96:
	LDY.b !RAM_SMW_Player_SwimmingFlag
	BIT.b !RAM_SMW_IO_ControllerPress1
	BPL.b CODE_00DBAC
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	LDA.w JumpFromVineYSpeed,y
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DFA_Jump
	STA.w !RAM_SMW_IO_SoundCh2
	BRA.b CODE_00DC00

CODE_00DBAC:
	BVC.b CODE_00DBCA
	LDA.b !RAM_SMW_Player_ClimbingFlag
	BPL.b CODE_00DBCA
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	STX.w !RAM_SMW_Player_FacingDirectionOnNetDoor
	LDA.b !RAM_SMW_Player_XPosLo
	AND.b #$08
	LSR
	LSR
	LSR
	EOR.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
	LDA.b #$08
	STA.w !RAM_SMW_Timer_DisplayPlayerNetPunchPose
CODE_00DBCA:
	LDA.w ClimbingPoses,x
	STA.w !RAM_SMW_Player_CurrentPose
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	BEQ.b CODE_00DBF2
	LSR
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	AND.b #$18
	CMP.b #$18
	BEQ.b CODE_00DBE8
	LDA.b !RAM_SMW_Player_ClimbingFlag
	BPL.b CODE_00DC00
	CPX.b !RAM_SMW_Misc_ScratchRAM8C
	BEQ.b CODE_00DBF2
CODE_00DBE8:
	TXA
	ASL
	ORA.b !RAM_SMW_Player_SwimmingFlag
	TAX
	LDA.w ClimbingSpeed,x
	STA.b !RAM_SMW_Player_XSpeed
CODE_00DBF2:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CODE_00DC16
	AND.b #!Joypad_DPadU>>8
	BNE.b CODE_00DC03
	LSR.b !RAM_SMW_Misc_ScratchRAM8B
	BCS.b CODE_00DC0B
CODE_00DC00:
	STZ.b !RAM_SMW_Player_ClimbingFlag
	RTS

CODE_00DC03:
	INY
	INY
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	AND.b #$02
	BEQ.b CODE_00DC16
CODE_00DC0B:
	LDA.b !RAM_SMW_Player_ClimbingFlag
	BMI.b CODE_00DC11
	STZ.b !RAM_SMW_Player_XSpeed
CODE_00DC11:
	LDA.w ClimbingSpeed,y
	STA.b !RAM_SMW_Player_YSpeed
CODE_00DC16:
	ORA.b !RAM_SMW_Player_XSpeed
	BEQ.b Return00DC2C
	LDA.w !RAM_SMW_Player_AnimationTimer
	ORA.b #$08
	STA.w !RAM_SMW_Player_AnimationTimer
	AND.b #$07
	BNE.b Return00DC2C
	LDA.b !RAM_SMW_Player_FacingDirection
	EOR.b #$01
	STA.b !RAM_SMW_Player_FacingDirection
Return00DC2C:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForPowerUpSpecificPlayerAttacks(Address)
namespace SMW_CheckForPowerUpSpecificPlayerAttacks
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	CMP.b #$02
	BNE.b CODE_00D081
	BIT.b !RAM_SMW_IO_ControllerPress1
	BVC.b Return00D0AD
	LDA.b !RAM_SMW_Player_DuckingFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	ORA.w !RAM_SMW_Player_SpinJumpFlag
	BNE.b Return00D0AD
	LDA.b #$12
	STA.w !RAM_SMW_Timer_ActiveCapeSpin
	LDA.b #!Define_SMW_Sound1DFC_SpinJump
	STA.w !RAM_SMW_IO_SoundCh3
	RTS

CODE_00D081:
	CMP.b #$03
	BNE.b Return00D0AD
	LDA.b !RAM_SMW_Player_DuckingFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b Return00D0AD
	BIT.b !RAM_SMW_IO_ControllerPress1
	BVS.b CODE_00D0AA
	LDA.w !RAM_SMW_Player_SpinJumpFlag
	BEQ.b Return00D0AD
	INC.w !RAM_SMW_Player_SpinjumpFireballTimer
	LDA.w !RAM_SMW_Player_SpinjumpFireballTimer
	AND.b #$0F
	BNE.b Return00D0AD
	TAY
	LDA.w !RAM_SMW_Player_SpinjumpFireballTimer
	AND.b #$10
	BEQ.b CODE_00D0A8
	INY
CODE_00D0A8:
	STY.b !RAM_SMW_Player_FacingDirection
CODE_00D0AA:
	JSR.w SMW_SpawnPlayerFireball_Main
Return00D0AD:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnPlayerFireball(Address)
namespace SMW_SpawnPlayerFireball
%InsertMacroAtXPosition(<Address>)

InitialXSpeed:
	db $FD,$03

InitialXPosLo:
	db $00,$08
	db $F8,$10
	db $F8,$10

InitialXPosHi:
	db $00,$00
	db $FF,$00
	db $FF,$00

InitialYPosLo:
	db $08,$08
	db $0C,$0C
	db $14,$14

Main:
	LDX.b #!Define_SMW_MaxExtendedSpriteSlot
CODE_00FEAA:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	BEQ.b CODE_00FEB5
	DEX
	CPX.b #!Define_SMW_MaxExtendedSpriteSlot-$02
	BNE.b CODE_00FEAA
	RTS

CODE_00FEB5:
	LDA.b #!Define_SMW_Sound1DFC_ShootFireball
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$0A
	STA.w !RAM_SMW_Timer_DisplayPlayerShootFireballPose
	LDA.b #!Define_SMW_SpriteID_ExtSpr05_MarioFireball
	STA.w !RAM_SMW_ExtSpr_SpriteID,x
	LDA.b #$30
	STA.w !RAM_SMW_ExtSpr_YSpeed,x
	LDY.b !RAM_SMW_Player_FacingDirection
	LDA.w InitialXSpeed,y
	STA.w !RAM_SMW_ExtSpr_XSpeed,x
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00FEDF
	INY							;\ Note: It's impossible to throw fireballs on Yoshi normally, so this code goes unused.
	INY							;|
	LDA.w !RAM_SMW_Yoshi_DuckingFlag			;|
	BEQ.b CODE_00FEDF					;|
	INY							;|
	INY							;|
CODE_00FEDF:							;/
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w InitialXPosLo,y
	STA.w !RAM_SMW_ExtSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.w InitialXPosHi,y
	STA.w !RAM_SMW_ExtSpr_XPosHi,x
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w InitialYPosLo,y
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,x
	LDA.w !RAM_SMW_Player_CurrentLayerPriority
	STA.w !RAM_SMW_ExtSpr05_MarioFireball_CurrentLayerPriority,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleStandardLevelCameraScroll(Address)
namespace SMW_HandleStandardLevelCameraScroll
%InsertMacroAtXPosition(<Address>)

DATA_00F69F:
	dw $0064,$007C

DATA_00F6A3:
	dw $0000,$FFFF

DATA_00F6A7:
	dw $FFFD,$0005,$FFFA

DATA_00F6AD:
	dw $0000,$0000,$00C0

DATA_00F6B3:
	dw $0090,$0060,$0000,$0000
	dw $0000,$0000

DATA_00F6BF:
	dw $0000,$FFFE,$0002,$0000

DATA_00F6C7:
	dw $FFFE,$0002

DATA_00F6CB:
	dw $0000,$0020

DATA_00F6CF:
	dw $00D0,$0000,$0020,$00D0

DATA_00F6D7:
	dw $0001,$FFFF

Main:
	PHB
	PHK
	PLB
	REP.b #$20
	LDA.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	SEC
#LM170Hijack_VRAMRearrangement7:
	SBC.w #$000C
	STA.w !RAM_SMW_Camera_RelativePositionNeededToScrollScreenRightLo
	CLC
	ADC.w #$0018
	STA.w !RAM_SMW_Camera_RelativePositionNeededToScrollScreenLeftLo
	LDA.w !RAM_SMW_Misc_Layer1XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_Misc_Layer1YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_Misc_Layer2XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCC.b CODE_00F70D
	JMP.w CODE_00F75C

CODE_00F70D:
	LDA.w #$00C0
	JSR.w CODE_00F7F4
	LDY.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	BEQ.b CODE_00F75A
	LDY.b #$02
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	BPL.b CODE_00F728
	LDY.b #$00
CODE_00F728:
	STY.b !RAM_SMW_Camera_Layer1ScrollingDirection
	STY.b !RAM_SMW_Camera_Layer2ScrollingDirection
	SEC
	SBC.w !RAM_SMW_Camera_RelativePositionNeededToScrollScreenRightLo,y
	BEQ.b CODE_00F75A
	STA.b !RAM_SMW_Misc_ScratchRAM02
	EOR.w DATA_00F6A3,y
	BPL.b CODE_00F75A
	JSR.w CODE_00F8AB
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	BPL.b CODE_00F746
	LDA.w #$0000
CODE_00F746:
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.b !RAM_SMW_Camera_LastScreenHoriz
	DEC
	XBA
	AND.w #$FF00
	BPL.b CODE_00F754
	LDA.w #$0080
CODE_00F754:
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	BPL.b CODE_00F75A
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
CODE_00F75A:
	BRA.b CODE_00F79D

CODE_00F75C:
	LDA.b !RAM_SMW_Camera_LastScreenVert
	DEC
	XBA
	AND.w #$FF00
	JSR.w CODE_00F7F4
	LDY.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	BEQ.b CODE_00F79D
	LDY.b #$00
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	BMI.b CODE_00F77B
	LDY.b #$02
CODE_00F77B:
	SEC
	SBC.w !RAM_SMW_Camera_RelativePositionNeededToScrollScreenRightLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	EOR.w DATA_00F6A3,y
	BPL.b CODE_00F79D
	JSR.w CODE_00F8AB
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	BPL.b CODE_00F793
	LDA.w #$0000
CODE_00F793:
	CMP.w #$0101
	BMI.b CODE_00F79B
	LDA.w #$0100
CODE_00F79B:
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
CODE_00F79D:
	LDY.w !RAM_SMW_Flag_Layer2HorizontalScrollLevelSetting
	BEQ.b CODE_00F7AA
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	DEY
	BEQ.b CODE_00F7A8
	LSR
CODE_00F7A8:
	STA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
CODE_00F7AA:
	LDY.w !RAM_SMW_Flag_Layer2VerticalScrollLevelSetting
	BEQ.b CODE_00F7C2
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	DEY
	BEQ.b CODE_00F7BC
	LSR
	DEY
	BEQ.b CODE_00F7BC
	LSR
	LSR
	LSR
	LSR
CODE_00F7BC:
	CLC
	ADC.w !RAM_SMW_Camera_Layer2YPosRelativeToLayer1Lo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
CODE_00F7C2:
	SEP.b #$20
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.w !RAM_SMW_Misc_Layer1XPosLo
	STA.w !RAM_SMW_Misc_Layer1XDisp
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.w !RAM_SMW_Misc_Layer1YPosLo
	STA.w !RAM_SMW_Misc_Layer1YDisp
	LDA.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	SEC
	SBC.w !RAM_SMW_Misc_Layer2XPosLo
	STA.w !RAM_SMW_Misc_Layer2XDisp
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	SEC
	SBC.w !RAM_SMW_Misc_Layer2YPosLo
	STA.w !RAM_SMW_Misc_Layer2YDisp
#LM170Hijack_VRAMRearrangement8:
	LDX.b #$07
CODE_00F7EA:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.w !RAM_SMW_Misc_Layer1XPosLo,x
	DEX
	BPL.b CODE_00F7EA
	PLB
	RTL

CODE_00F7F4:
	LDX.w !RAM_SMW_Flag_Layer1VerticalScrollLevelSetting
	BNE.b CODE_00F7FA
	RTS

CODE_00F7FA:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.b #$00
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w #$0070
	BMI.b CODE_00F80C
	LDY.b #$02
CODE_00F80C:
	STY.b !RAM_SMW_Camera_Layer1ScrollingDirection
	STY.b !RAM_SMW_Camera_Layer2ScrollingDirection
	SEC
	SBC.w DATA_00F69F,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	EOR.w DATA_00F6A3,y
	BMI.b CODE_00F81F
	LDY.b #$02
	STZ.b !RAM_SMW_Misc_ScratchRAM02
CODE_00F81F:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BMI.b CODE_00F82A
	LDX.b #$00
	STX.w !RAM_SMW_Flag_ScrollUpToPlayer
	BRA.b CODE_00F883

CODE_00F82A:
	SEP.b #$20
	LDA.w !RAM_SMW_Player_WallWalkStatus
	CMP.b #$06
	BCS.b CODE_00F845
	LDA.w !RAM_SMW_Flag_DisplayYoshisWings
	LSR
	ORA.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
	ORA.b !RAM_SMW_Player_ClimbingFlag
	ORA.w !RAM_SMW_Timer_InflateFromPBalloon
	ORA.w !RAM_SMW_Flag_PlayerInLakitusCloud
	ORA.w !RAM_SMW_Camera_BounceOffSpringFlag
CODE_00F845:
	TAX
	REP.b #$20
	BNE.b CODE_00F869
	LDX.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00F856
	LDX.w !RAM_SMW_Yoshi_YoshiHasWings
	CPX.b #$02
	BCS.b CODE_00F869
CODE_00F856:
	LDX.b !RAM_SMW_Player_SwimmingFlag
	BEQ.b CODE_00F85E
	LDX.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00F869
CODE_00F85E:
	LDX.w !RAM_SMW_Flag_Layer1VerticalScrollLevelSetting
	DEX
	BEQ.b CODE_00F875
	LDX.w !RAM_SMW_Flag_EnableVerticalScroll
	BNE.b CODE_00F875
CODE_00F869:
	STX.w !RAM_SMW_Flag_EnableVerticalScroll
	LDX.w !RAM_SMW_Flag_EnableVerticalScroll
	BNE.b CODE_00F881
	LDY.b #$04
	BRA.b CODE_00F881

CODE_00F875:
	LDX.w !RAM_SMW_Flag_ScrollUpToPlayer
	BNE.b CODE_00F881
	LDX.b !RAM_SMW_Player_InAirFlag
	BNE.b Return00F8AA
	INC.w !RAM_SMW_Flag_ScrollUpToPlayer
CODE_00F881:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
CODE_00F883:
	SEC
	SBC.w DATA_00F6A7,y
	EOR.w DATA_00F6A7,y
	ASL
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_00F892
	LDA.w DATA_00F6A7,y
CODE_00F892:
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.w DATA_00F6AD,y
	BPL.b CODE_00F89D
	LDA.w DATA_00F6AD,y
CODE_00F89D:
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	BPL.b Return00F8AA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STZ.w !RAM_SMW_Flag_EnableVerticalScroll		; Optimization: This affects unused RAM $7E13F2
Return00F8AA:
	RTS

CODE_00F8AB:
	LDY.w !RAM_SMW_Flag_LRScrollFlag
	BNE.b Return00F8DE
	SEP.b #$20
	LDX.w !RAM_SMW_Player_FacingDirectionX2
	REP.b #$20
	LDY.b #$08
	LDA.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	CMP.w DATA_00F6B3,x
	BPL.b CODE_00F8C3
	LDY.b #$0A
CODE_00F8C3:
	LDA.w DATA_00F6C7-$08,y
	EOR.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b Return00F8DE
	LDA.w DATA_00F6BF,x
	EOR.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b Return00F8DE
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w DATA_00F6D7-$08,y
	BEQ.b Return00F8DE
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STY.w !RAM_SMW_Camera_LRScrollMoveFlag
Return00F8DE:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeCapeSwingOrNetPunch(Address)
namespace SMW_InitializeCapeSwingOrNetPunch
%InsertMacroAtXPosition(<Address>)

DATA_00D034:
	dw $000C,$FFF4,$0008,$FFF8

DATA_00D03C:
	dw $0010,$0010,$0002,$0002

Main:
	LDY.b #$01
	STY.w !RAM_SMW_Flag_CapeToSpriteInteraction
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_00D034,y
	STA.w !RAM_SMW_Player_CapeHitboxXLo
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w DATA_00D03C,y
	STA.w !RAM_SMW_Player_CapeHitboxYLo
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleCapeInteraction(Address)
namespace SMW_HandleCapeInteraction
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_CapeToSpriteInteraction
	BEQ.b Return02950A
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_029507
	JSR.w SMW_CheckForPlayerAttackToNormalSpriteCollision_CapeSwingEntry
	JSR.w SMW_HandleCapeToExtendedSpriteCollision_Main
CODE_029507:
#LMBlockOffset_MarioCape:
	JSR.w SMW_HandleCapeLevelCollision_Main
Return02950A:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_HandleCapeLevelCollision(Address)
namespace SMW_HandleCapeLevelCollision
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	JSR.w CODE_029540
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	BPL.b Return02953B
	INC.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_Player_CapeHitboxXLo
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.w !RAM_SMW_Player_CapeHitboxXLo
	LDA.w !RAM_SMW_Player_CapeHitboxXHi
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosHi
	STA.w !RAM_SMW_Player_CapeHitboxXHi
	LDA.w !RAM_SMW_Player_CapeHitboxYLo
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.w !RAM_SMW_Player_CapeHitboxYLo
	LDA.w !RAM_SMW_Player_CapeHitboxYHi
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosHi
	STA.w !RAM_SMW_Player_CapeHitboxYHi
	JSR.w CODE_029540
Return02953B:
	RTS

DATA_02953C:
	db $08,$08

DATA_02953E:
	db $02,$0E

CODE_029540:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	INC
	AND.b !RAM_SMW_Misc_LevelLayoutFlags
	BEQ.b CODE_0295AE
	LDA.w !RAM_SMW_Player_CapeHitboxYLo
	CLC
	ADC.w DATA_02953C,y
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_Player_CapeHitboxYHi
	ADC.b #$00
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b Return0295AD
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_Player_CapeHitboxXLo
	CLC
	ADC.w DATA_02953E,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_Player_CapeHitboxXHi
	ADC.b #$00
	CMP.b #$02
	BCS.b Return0295AD
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_029596
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x
CODE_029596:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_0295A7
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x
CODE_0295A7:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
	BRA.b CODE_02960D

Return0295AD:
	RTS

CODE_0295AE:
	LDA.w !RAM_SMW_Player_CapeHitboxYLo
	CLC
	ADC.w DATA_02953C,y
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_Player_CapeHitboxYHi
	ADC.b #$00
	CMP.b #$02
	BCS.b Return0295AD
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_Player_CapeHitboxXLo
	CLC
	ADC.w DATA_02953E,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_Player_CapeHitboxXHi
	ADC.b #$00
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b Return0295AD
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_0295F8
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
CODE_0295F8:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_029609
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
CODE_029609:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02960D:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
#LM000Hijack_ProcessCustomCapeBlockCode:
	JSL.l SMW_ModifyMap16IDForSpecialBlocks_Main
	CMP.b #$00
	BEQ.b Return029630
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	STA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	LDY.b #$00
	JSL.l SMW_CheckIfBlockWasHit_Main
Return029630:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_HandleCapeToExtendedSpriteCollision(Address)
namespace SMW_HandleCapeToExtendedSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_029633:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr02_ReznorFireball
	BCC.b CODE_029653
	JSR.w SMW_GetExtendedSpriteClipping_Main
	JSR.w SMW_CheckForPlayerAttackToNormalSpriteCollision_GetCapeSwingOrNetPunchClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_029653
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr12_BreathBubble
	BEQ.b CODE_029653
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_CODE_02A4DE
CODE_029653:
	DEX
	BPL.b CODE_029633
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SpawnSparkles(Address)
namespace SMW_SpawnSparkles
%InsertMacroAtXPosition(<Address>)

PlayerEntry:
	LDY.b #$1F
	LDX.b #$00
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_02859B
	LDY.b #$0F
	LDX.b #$10
CODE_02859B:
	STX.b !RAM_SMW_Misc_ScratchRAM01
	JSL.l SMW_GetRand_Main
	TYA
	AND.w !RAM_SMW_Misc_RandomByte1
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$0F
	CLC
	ADC.b #$FE
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
Main:
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_0285BC:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_0285C5
	DEY
	BPL.b CODE_0285BC
	RTL

CODE_0285C5:
	LDA.b #!Define_SMW_SpriteID_MExtSpr05_SmallStar
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_MExtSpr_YSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.b #$17
	STA.w !RAM_SMW_MExtSpr_Timer,y
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_SpawnSparkles(Address)
namespace SMW_SpawnSparkles
%InsertMacroAtXPosition(<Address>)

NormalSpriteEntry:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
GoalSphereEntry:
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01B191
	JSL.l SMW_GetRand_Main
	AND.b #$0F
	CLC
	LDY.b #$00
	ADC.b #$FC
	BPL.b CODE_01B167
	DEY
CODE_01B167:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PLA
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b Return01B191
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$0F
	CLC
	ADC.b #$FE
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSL.l SMW_SpawnSparkles_Main
Return01B191:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_KickHelplessSprite(Address)
namespace SMW_KickHelplessSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$10
	STA.w !RAM_SMW_Timer_DisplayPlayerKickingPose
	LDA.b #!Define_SMW_Sound1DF9_KickShell
	STA.w !RAM_SMW_IO_SoundCh1
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w SMW_NorSprXXX_FixedMovementCheepCheep_Status08_KickedXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$E0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	STY.b !RAM_SMW_Player_FacingDirection
	LDA.b #$01
	JSL.l SMW_GivePoints_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnSpinJumpStars(Address)
namespace SMW_SpawnSpinJumpStars
%InsertMacroAtXPosition(<Address>)

InitialXSpeed:
	db $E0,$20,$E0,$20

InitialYSpeed:
	db $F0,$F0,$10,$10

Main:
	PHX
	LDX.b #$03
CODE_07FC3E:
	JSL.l CODE_07FC47
	DEX
	BPL.b CODE_07FC3E
	PLX
	RTL

CODE_07FC47:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_07FC49:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_07FC52
	DEY
	BPL.b CODE_07FC49
	RTL

CODE_07FC52:
	LDA.b #!Define_SMW_SpriteID_ExtSpr10_SpinJumpStars
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	PHX
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	PLX
	LDA.l InitialXSpeed,x
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	LDA.l InitialYSpeed,x
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b #$17
	STA.w !RAM_SMW_ExtSpr10_SpinJumpStars_DespawnTimer,y
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateLevelName(Address)
namespace SMW_UpdateLevelName
%InsertMacroAtXPosition(<Address>)

;LM: This routine becomes freespace in ROMs with edited overworlds, so you can have unique level names for each level.
;In the original SMW, levels names are made up of up to 3 (US) or 4 (JP) strings strung together.
;This is not ideal for the average SMW hacker, so LM adds a routine at $03BB20 that allows each level name to be unique.

if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
LevelNameStrings:
	base $0000
	incbin "strings/LevelNameStrings_SMW_J.bin"
	base off

DATA_049B9F:
	dw $011A,$0000,$0007,$000F
	dw $0017,$001F,$0029,$0033
	dw $003A,$0040,$0047,$004E
	dw $0058,$0064,$0070,$0077
	dw $007E,$0088,$0091

DATA_049BC5:
	dw $011A,$0097,$009D,$00A3
	dw $00AA,$00B2,$00B5,$00BC
	dw $00BF,$00C3,$00C7,$00CC
	dw $00D9,$00E4

DATA_049BE1:
	dw $011A,$00EF,$00F3,$00F7
	dw $00FB,$00FF,$0103,$0107
	dw $010E,$0114,$0116

DATA_049BF7:
	dw $0119,$011A

Main:
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	CLC
	ADC.w #$0020
	STA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$0024
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	LDA.w #$1F00
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$13].LowByte,x
	LDA.w #$8C50
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.w #$6C50
	STA.l SMW_StripeImageUploadTable[$12].LowByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.w #$001F
	ASL
	TAY
	LDA.w DATA_049B9F,y
	TAY
	SEP.b #$20
	LDA.w LevelNameStrings,y
	BMI.b CODE_049C51
	JSR.w CODE_049CAB
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ASL
	ROL
	ROL
	REP.b #$20
	AND.w #$0003
	ASL
	TAY
	LDA.w DATA_049BF7,y
	TAY
	SEP.b #$20
	JSR.w CODE_049CAB

CODE_049C51:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00F0
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_049BC5,y
	TAY
	SEP.b #$20
	LDA.w LevelNameStrings,y
	CMP.b #$DD
	BEQ.b CODE_049C84
	JSR.w CODE_049CAB
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.b #$20
	ASL
	ASL
	ASL
	ROL
	REP.b #$20
	AND.w #$0001
	ASL
	TAY
	LDA.w DATA_049BF7,y
	TAY
	SEP.b #$20
	JSR.w CODE_049CAB

CODE_049C84:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$000F
	ASL
	TAY
	LDA.w DATA_049BE1,y
	TAY
	SEP.b #$20
	JSR.w CODE_049CAB

CODE_049C96:
	CPX.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_049CA2
	LDY.w #$011A
	JSR.w CODE_049CAB
	BRA.b CODE_049C96

CODE_049CA2:
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$14].LowByte,x
	REP.b #$20
	RTS

CODE_049CAB:
	LDA.w LevelNameStrings,y
	PHP
	CPX.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_049CD9
	AND.b #$7F
	CMP.b #$59
	BEQ.b CODE_049CBD
	CMP.b #$5B
	BNE.b CODE_049CC3

CODE_049CBD:
	STA.l SMW_StripeImageUploadTable[$13].LowByte,x
	BRA.b CODE_049CD9

CODE_049CC3:
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	LDA.b #$5D
	STA.l SMW_StripeImageUploadTable[$14].LowByte,x
	LDA.b #$39
	STA.l SMW_StripeImageUploadTable[$02].HighByte,x
	STA.l SMW_StripeImageUploadTable[$14].HighByte,x
	INX
	INX

CODE_049CD9:
	INY
	PLP
	BPL.b CODE_049CAB
	RTS

else
LevelNameStrings:
	base $0000
	incsrc "strings/LevelNameStrings.asm"
	base off

DATA_049C91:
	dw LevelStr_None,LevelStr_0100,LevelStr_0200,LevelStr_0300
	dw LevelStr_0400,LevelStr_0500,LevelStr_0600,LevelStr_0700
	dw LevelStr_0800,LevelStr_0900,LevelStr_0A00,LevelStr_0B00
	dw LevelStr_0C00,LevelStr_0D00,LevelStr_0E00,LevelStr_0F00
	dw LevelStr_1000,LevelStr_1100,LevelStr_1200,LevelStr_1300
	dw LevelStr_1400,LevelStr_1500,LevelStr_1600,LevelStr_1700
	dw LevelStr_1800,LevelStr_1900,LevelStr_1A00,LevelStr_1B00
	dw LevelStr_1C00,LevelStr_1D00,LevelStr_1E00

DATA_049CCF:
	dw LevelStr_None,LevelStr_0010,LevelStr_0020,LevelStr_0030
	dw LevelStr_0040,LevelStr_0050,LevelStr_0060,LevelStr_0070
	dw LevelStr_0080,LevelStr_0090,LevelStr_00A0,LevelStr_00B0
	dw LevelStr_00C0,LevelStr_00D0,LevelStr_00E0

DATA_049CED:
	dw LevelStr_None,LevelStr_0001,LevelStr_0002,LevelStr_0003
	dw LevelStr_0004,LevelStr_0005,LevelStr_0006,LevelStr_0007
	dw LevelStr_0008,LevelStr_0009,LevelStr_000A,LevelStr_000B
	dw LevelStr_000C

Main:
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	CLC
	ADC.w #$0026
	STA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$0004
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	LDA.w #$2500
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	LDA.w #$8B50
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.w #$007F
	ASL
	TAY
	LDA.w DATA_049C91,y
	TAY
	SEP.b #$20
	LDA.w LevelNameStrings,y
	BMI.b CODE_049D3D
	JSR.w CODE_049D7F
CODE_049D3D:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00F0
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_049CCF,y
	TAY
	SEP.b #$20
	LDA.w LevelNameStrings,y
	CMP.b #$9F
	BEQ.b CODE_049D58
	JSR.w CODE_049D7F
CODE_049D58:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$000F
	ASL
	TAY
	LDA.w DATA_049CED,y
	TAY
	SEP.b #$20
	JSR.w CODE_049D7F
CODE_049D6A:
	CPX.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_049D76
	LDY.w #$01CB
	JSR.w CODE_049D7F
	BRA.b CODE_049D6A

CODE_049D76:
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	REP.b #$20
	RTS

CODE_049D7F:
	LDA.w LevelNameStrings,y
	PHP
	CPX.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_049D95
	AND.b #$7F
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	LDA.b #$39
	STA.l SMW_StripeImageUploadTable[$02].HighByte,x
	INX
	INX
CODE_049D95:
	INY
	PLP
	BPL.b CODE_049D7F
	RTS
endif
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus0A_Kicked(Address)
namespace SMW_NorSprStatus0A_Kicked
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $E0,$20

CODE_0198A9:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_0198B0
	JMP.w SMW_KickedShellGFXRt_Main

CODE_0198B0:
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	LDA.w !RAM_SMW_NorSpr_Table7E151C,x
	AND.b #$1F
	BNE.b CODE_0198BD
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
CODE_0198BD:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	CPY.b #$00
	BNE.b CODE_0198D0
	CMP.b #$20
	BPL.b CODE_0198D8
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b CODE_0198D8

CODE_0198D0:
	CMP.b #$E0
	BMI.b CODE_0198D8
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0198D8:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_0198EA
	PHA
	JSR.w SMW_MakeNormalSpriteReboundOffWall_Main
	PLA
	AND.b #$03
	TAY
	LDA.w XSpeed-$01,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0198EA:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_0198F6
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_0198F6:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_0198FD
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_0198FD:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_01990D
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	INC
	INC
	AND.b #$CF
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
CODE_01990D:
	JMP.w CODE_01998C

UNK_019910:
	db $F0,$EE,$EC

Main:
	LDA.w !RAM_SMW_NorSpr_Table7E187B,x
	BEQ.b CODE_01991B
	JMP.w CODE_0198A9

CODE_01991B:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_CantBeKickedLikeShell
	BEQ.b CODE_019928
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01AA0B
	JMP.w SMW_ProcessStunnedNormalSprite_Main

CODE_019928:
	LDA.w !RAM_SMW_NorSpr_Table7E1528,x
	BNE.b CODE_019939
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.b #$20
	CMP.b #$40
	BCS.b CODE_019939
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01AA0B
CODE_019939:
	STZ.w !RAM_SMW_NorSpr_Table7E1528,x
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	BEQ.b CODE_019946
	JMP.w CODE_01998F

CODE_019946:
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	LDA.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	PHA
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	PLA
	BEQ.b CODE_019969
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BNE.b CODE_019969
	CMP.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	BEQ.b CODE_019969
	EOR.b !RAM_SMW_NorSpr_XSpeed,x
	BMI.b CODE_019969
	LDA.b #$F8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_019975

CODE_019969:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_019984
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_019975:
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyLo
	CMP.b #$B5
	BEQ.b CODE_019980
	CMP.b #$B4
	BNE.b CODE_019984
CODE_019980:
	LDA.b #$B8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_019984:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_01998C
	JSR.w SMW_MakeNormalSpriteReboundOffWall_Main
CODE_01998C:
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
CODE_01998F:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	BEQ.b CODE_01999B
	JMP.w SMW_KickedShellGFXRt_Main

CODE_01999B:
	JMP.w SMW_ProcessStunnedNormalSprite_StunnedThrowBlock
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_KickedShellGFXRt(Address)
namespace SMW_KickedShellGFXRt
%InsertMacroAtXPosition(<Address>)

ShellAniTiles:
	db $06,$07,$08,$07

Prop:
	db $00,$00,$00,$40

Main:
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	TAY
	PHY
	LDA.w ShellAniTiles,y
	JSR.w SMW_StunnedShellGFXRt_CODE_01980F
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	PLY
	LDA.w Prop,y
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	EOR.w SMW_OAMBuffer[$42].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus0B_Carried(Address)
namespace SMW_NorSprStatus0B_Carried
%InsertMacroAtXPosition(<Address>)

CarriedSpriteXOffsetLo:
	db $0B,$F5			; Normal
	db $04,$FC,$04			; Facing Screen (during standing turn)
	db $00				; Climbing/Turning Around/Enter Vertical Pipe

CarriedSpriteXOffsetHi:
	db $00,$FF			; Normal
	db $00,$FF,$00			; Facing Screen (during standing turn)
	db $00				; Climbing/Turning Around/Enter Vertical Pipe

PlacedSpriteInitialXPosLo:
	db $F3,$0D

PlacedSpriteInitialXPosHi:
	db $FF,$00

ShellXSpeed:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $C9,$37			; Normal
	db $C2,$3E			; Riding Yoshi (Unused?)
else
	db $D2,$2E			; Normal
	db $CC,$34			; Riding Yoshi (Unused?)
endif

UNK_019F6F:
	db $00,$10

Main:
	JSR.w CODE_019F9B
	LDA.w !RAM_SMW_Player_TurningAroundFlag
	BNE.b CODE_019F83
	LDA.w !RAM_SMW_Yoshi_InPipe
	BNE.b CODE_019F83
	LDA.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
	BEQ.b CODE_019F86
CODE_019F83:
	STZ.w !RAM_SMW_NorSpr_OAMIndex,x
CODE_019F86:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_Yoshi_InPipe
	BEQ.b CODE_019F92
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_019F92:
	JSR.w SMW_ProcessStunnedNormalSprite_Main
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	RTS

PlacedSpriteInitiaXSpeed:
	db $FC,$04

CODE_019F9B:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b NotCarryingBalloon
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_019FBE
	DEC.w !RAM_SMW_Timer_PlayerHasPBalloon
	BEQ.b BalloonExpired
	LDA.w !RAM_SMW_Timer_PlayerHasPBalloon
	CMP.b #$30
	BCS.b CODE_019FBE
	LDY.b #$01
	AND.b #$04
	BEQ.b CODE_019FBB
	LDY.b #$09
CODE_019FBB:
	STY.w !RAM_SMW_Timer_InflateFromPBalloon
CODE_019FBE:
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCC.b BalloonActive
BalloonExpired:
	STZ.w !RAM_SMW_Timer_InflateFromPBalloon
	JMP.w SMW_SubOffscreen_Bank01_EraseSprite

BalloonActive:
	PHB
	LDA.b #SMW_HandleHeldPBalloonAndInLakituCloudMovement_Main>>16
	PHA
	PLB
	JSL.l SMW_HandleHeldPBalloonAndInLakituCloudMovement_Main
	PLB
	JSR.w CODE_01A0B1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$40].YDisp,y
	RTS

NotCarryingBalloon:
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCC.b CODE_019FF4
	LDA.w !RAM_SMW_Yoshi_InPipe
	BNE.b CODE_019FF4
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

CODE_019FF4:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b Return01A014
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01A002
	JMP.w CODE_01A0B1

CODE_01A002:
	JSR.w SMW_NorSprStatus09_Stunned_CODE_019624
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	LDA.w !RAM_SMW_Yoshi_InPipe
	BNE.b CODE_01A011
	BIT.b !RAM_SMW_IO_ControllerHold1
	BVC.b ReleaseSprCarried
CODE_01A011:
	JSR.w CODE_01A0B1
Return01A014:
	RTS

ReleaseSprCarried:
	STZ.w !RAM_SMW_NorSpr_Table7E1626,x
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BNE.b CODE_01A026
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_01A026
	LDY.b #$EC
CODE_01A026:
	STY.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadU>>8
	BNE.b TossUpSprCarried
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr015_HorizontalCheepCheep
	BCS.b CODE_01A041
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b KickSprCarried
	BRA.b PlaceDownSprite

CODE_01A041:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	BNE.b KickSprCarried
PlaceDownSprite:
	LDY.b !RAM_SMW_Player_FacingDirection
	LDA.b !RAM_SMW_Player_CurrentXPosLo
	CLC
	ADC.w PlacedSpriteInitialXPosLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_CurrentXPosHi
	ADC.w PlacedSpriteInitialXPosHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w PlacedSpriteInitiaXSpeed,y
	CLC
	ADC.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b StartKickPose

TossUpSprCarried:
	JSL.l SMW_SpawnContactEffectFromSide_Main
	LDA.b #$90
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	ASL
	ROR.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b StartKickPose

KickSprCarried:
	JSL.l SMW_SpawnContactEffectFromSide_Main
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	STA.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.b #!Define_SMW_NorSprStatus0A_Kicked
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDY.b !RAM_SMW_Player_FacingDirection
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01A090
	INY
	INY
CODE_01A090:
	LDA.w ShellXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b !RAM_SMW_Player_XSpeed
	BMI.b StartKickPose
	LDA.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL.b !RAM_SMW_Misc_ScratchRAM00
	ROR
	CLC
	ADC.w ShellXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
StartKickPose:
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b #$0C
	STA.w !RAM_SMW_Timer_DisplayPlayerKickingPose
	RTS

CODE_01A0B1:
	LDY.b #$00
	LDA.b !RAM_SMW_Player_FacingDirection
	BNE.b CODE_01A0B8
	INY
CODE_01A0B8:
	LDA.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
	BEQ.b CODE_01A0C4
	INY
	INY
	CMP.b #$05
	BCC.b CODE_01A0C4
	INY
CODE_01A0C4:
	LDA.w !RAM_SMW_Yoshi_InPipe
	BEQ.b CODE_01A0CD
	CMP.b #$02
	BEQ.b CODE_01A0D4
CODE_01A0CD:
	LDA.w !RAM_SMW_Player_TurningAroundFlag
	ORA.b !RAM_SMW_Player_ClimbingFlag
	BEQ.b CODE_01A0D6
CODE_01A0D4:
	LDY.b #$05
CODE_01A0D6:
	PHY
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	CMP.b #$03
	BEQ.b CODE_01A0E2
	LDY.b #!RAM_SMW_Player_CurrentXPosLo-!RAM_SMW_Player_XPosLo
CODE_01A0E2:
	LDA.w !RAM_SMW_Player_XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Player_XPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Player_YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Player_YPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PLY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w CarriedSpriteXOffsetLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w CarriedSpriteXOffsetHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$0D
	LDY.b !RAM_SMW_Player_DuckingFlag
	BNE.b CODE_01A111
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_01A113
CODE_01A111:
	LDA.b #$0F
CODE_01A113:
	LDY.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	BEQ.b CODE_01A11A
	LDA.b #$0F
CODE_01A11A:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$01
	STA.w !RAM_SMW_Player_CarryingSomethingFlag2
	STA.w !RAM_SMW_Player_CarryingSomethingFlag1
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleHeldPBalloonAndInLakituCloudMovement(Address)
namespace SMW_HandleHeldPBalloonAndInLakituCloudMovement
%InsertMacroAtXPosition(<Address>)

XAcceleration:
	db $01,$FF				;\ Glitch: The code referencing these tables doesn't account for holding left+right at the same time.
						;| Doing so causes the X acceleration value to be $10 and the max X speed to be A5 (although it gets capped to 7F)
MaxXSpeed:					;|
	db $10,$F0				;/

Main:
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	BNE.b CscGoLeftOrRight
CscSlowSpeedX:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_02D226
	BPL.b CODE_02D224
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	INC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02D224:
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02D226:
	BRA.b CscDecideY

CscGoLeftOrRight:
	TAY
	CPY.b #!Joypad_DPadR>>8
	BNE.b CscGoRight
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed-$01,y
	BEQ.b CscDecideY
	BPL.b CscSlowSpeedX
	BRA.b CscUnderLimitX

CscGoRight:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed-$01,y
	BEQ.b CscDecideY
	BMI.b CscSlowSpeedX
CscUnderLimitX:
	CLC
	ADC.w XAcceleration-$01,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CscDecideY:
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr087_LakituCloud
	BNE.b CscNotLakituCloud
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CscHandleY
	LDY.b #$10
	AND.b #!Joypad_DPadU>>8
	BEQ.b CscHandleY
	LDY.b #$F0
	BRA.b CscHandleY

CscNotLakituCloud:
	LDY.b #$F8
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CscHandleY
	LDY.b #$F0
	AND.b #!Joypad_DPadU>>8
	BNE.b CscHandleY
	LDY.b #$08
CscHandleY:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_02D27F
	BPL.b CODE_02D27D
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02D27D:
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02D27F:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_Player_XSpeed
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	STA.b !RAM_SMW_Player_YSpeed
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprStatus02_Dead(Address)
namespace SMW_NorSprStatus02_Dead
%InsertMacroAtXPosition(<Address>)

Status05Entry:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BEQ.b SMW_NorSprStatus04_SpinJumpKill_EraseSprite
	LDA.b #$04
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	ASL.w !RAM_SMW_NorSpr_PropertyBits190F,x				;\ Note: !Define_SMW_NorSpr_190FProp_DontGetStuckInWallsWhenCarried
	LSR.w !RAM_SMW_NorSpr_PropertyBits190F,x				;/
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_019A9D
	BPL.b CODE_019A94
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b CODE_019A9D

CODE_019A94:
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_019A9D
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_019A9D:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
Main:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr086_Wiggler
	BNE.b CODE_019AAB
	JMP.w SMW_NorSprStatus08_Normal_Main

CODE_019AAB:
	CMP.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	BNE.b CODE_019AB4
	LDY.b #$FF
	STY.w !RAM_SMW_Timer_DespawnLakituCloud
CODE_019AB4:
	CMP.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	BNE.b CODE_019ABC
	JSR.w SMW_BreakThrowBlock_Main
	RTS

CODE_019ABC:
	CMP.b #!Define_SMW_SpriteID_NorSpr04C_ExplodingBlock
	BNE.b CODE_019AC4
	JSL.l SMW_ShatterExplodingBlock_Main
CODE_019AC4:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_DisappearAsSmokeCloud
	BEQ.b CODE_019AD6
SetNorSprStatus04:
.Main:
	LDA.b #!Define_SMW_NorSprStatus04_SpinJumpKill
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr_SpinJumpKillTimer,x
	RTS

CODE_019AD6:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_019ADD
	JSR.w SMW_HandleNormalSpriteGravity_Sub
CODE_019ADD:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w HandleGenericSpriteDeath
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSprStatus02_Dead(Address)
namespace SMW_NorSprStatus02_Dead
%InsertMacroAtXPosition(<Address>)

HandleGenericSpriteDeath:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_DontDisableClippingWhenStarKilled
	BEQ.b CODE_019B1D
	JMP.w SMW_NorSprStatus08_Normal_Main

CODE_019B1D:
	STZ.w !RAM_SMW_NorSpr_Table7E1602,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x
	AND.b #!Define_SMW_NorSpr_190FProp_2TileTallDeathFrame
	BEQ.b CODE_019B64
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #!Define_SMW_NorSpr_1662Prop_UseShellAsDeathFrame
	BNE.b CODE_019B5F
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	BEQ.b CODE_019B3D
	CMP.b #!Define_SMW_SpriteID_NorSpr04B_PipeLakitu
	BNE.b CODE_019B44
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
CODE_019B3D:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	BRA.b CODE_019B4C

CODE_019B44:
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b #$80
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
CODE_019B4C:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDY.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	BEQ.b CODE_019B56
	LDA.b #$10
CODE_019B56:
	STA.b !RAM_SMW_Sprites_TilePriority
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	RTS

CODE_019B5F:
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr_Table7E1602,x
CODE_019B64:
	LDA.b #$00
	CPY.b #$1C
	BEQ.b CODE_019B6C
	LDA.b #$80
CODE_019B6C:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDY.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	BEQ.b CODE_019B78
	LDA.b #$10
CODE_019B78:
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry2
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprStatus02_Dead_Status05Entry, SMW_NorSprStatus05_SinkInLava_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus04_SpinJumpKill(Address)
namespace SMW_NorSprStatus04_SpinJumpKill
%InsertMacroAtXPosition(<Address>)

SmokeTiles:
	db $64,$62,$60,$62

Main:
	LDA.w !RAM_SMW_NorSpr_SpinJumpKillTimer,x
	BEQ.b EraseSprite
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_SpinJumpKillTimer,x
	LSR
	LSR
	LSR
	AND.b #$03
	PHX
	TAX
	LDA.w SmokeTiles,x
	PLX
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$30
	STA.w SMW_OAMBuffer[$40].Prop,y
	RTS

EraseSprite:
	JSR.w SMW_SubOffscreen_Bank01_EraseSprite
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus03_Smushed(Address)
namespace SMW_NorSprStatus03_Smushed
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_019AFE
	LDA.w !RAM_SMW_NorSpr_SmushedSpriteDespawnTimer,x
	BNE.b ShowSmushedGfx
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

ShowSmushedGfx:
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_019AFE
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_019AFE:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr06F_DinoTorch
	BNE.b CODE_019B10
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$AC
	STA.w SMW_OAMBuffer[$40].Tile,y
	RTS

CODE_019B10:
	JMP.w SMW_GenericSmushedSpriteGFXRt_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenericSmushedSpriteGFXRt(Address)
namespace SMW_GenericSmushedSpriteGFXRt
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_GetDrawInfo_Bank01
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return01E75A
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	PHX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	TAX
	LDA.b #$FE
	CPX.b #!Define_SMW_SpriteID_NorSpr03E_PSwitch
	BEQ.b CODE_01E73A
	LDA.b #$EE
	CPX.b #!Define_SMW_SpriteID_NorSpr0BD_SlidingNakedBlueKoopa
	BEQ.b CODE_01E73A
	CPX.b #!Define_SMW_SpriteID_NorSpr004_GreenKoopa
	BCC.b CODE_01E73A
	LDA.b #$C7
	CPX.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BCS.b CODE_01E73A
	LDA.b #$4D
CODE_01E73A:
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	PLX
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$40
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
Return01E75A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleNormalSpriteGravity(Address)
namespace SMW_HandleNormalSpriteGravity
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleNormalSpriteGravity(Address)
namespace SMW_HandleNormalSpriteGravity
%InsertMacroAtXPosition(<Address>)

MaxYSpeed:
	db $40			; Air
	db $10			; Water

YAcceleration:
	db $03			; Air
	db $01			; Water

Sub:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_019049
	INY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_019049
	CMP.b #$E8
	BCS.b CODE_019049
	LDA.b #$E8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_019049:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01905D
	CMP.w MaxYSpeed,y
	BCC.b CODE_01905D
	LDA.w MaxYSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01905D:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	LDY.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_019076
	ASL
	ROR.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ROR.b !RAM_SMW_Misc_ScratchRAM00
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_019076:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	PLA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr_NoLevelCollisionFlag,x
	BNE.b ADDR_019085
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	RTS

ADDR_019085:
	STZ.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnMap16TileFromBounceSprite(Address)
namespace SMW_SpawnMap16TileFromBounceSprite
%InsertMacroAtXPosition(<Address>)

UNK_02919D:
	db $01,$00

MultiCoinBlock:
	LDA.w !RAM_SMW_BounceSpr_Map16TileToSpawn,x
	CMP.b #$0A
	BEQ.b CODE_0291AA
	CMP.b #$0B
	BNE.b CODE_0291B6
CODE_0291AA:
	LDY.w !RAM_SMW_Blocks_MultiCoinBlockTimer
	CPY.b #$01
	BNE.b CODE_0291B6
	STZ.w !RAM_SMW_Blocks_MultiCoinBlockTimer
	LDA.b #$0D
CODE_0291B6:
	BRA.b Main

InvisibleSolidBlock:
	LDA.b #$09
Main:
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.w !RAM_SMW_BounceSpr_XPosLo,x
	CLC
	ADC.b #$08
	AND.b #$F0
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_BounceSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	CLC
	ADC.b #$08
	AND.b #$F0
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	ASL
	ROL
	AND.b #$01
	STA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	JSL.l SMW_GenerateTile_Main
Return0291EC:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BounceSpriteGFXRt(Address)
namespace SMW_BounceSpriteGFXRt
%InsertMacroAtXPosition(<Address>)

OAMIndex:
	db $10,$14,$18,$1C

Tiles:
	db $40			; Turn Block
	db $6B			; Note Block
	db $2A			; ? Block
	db $42			; Sideways Block (Glitch: Should be $40, as this displays the P-switch tile)
	db $EA			; Glass Block
	db $8A			; On/Off Block
	db $40			; Spinning Turn Block

Main:
	LDY.b #$00
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	BPL.b CODE_029201
	LDY.b #$04
CODE_029201:
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Mirror_CurrentLayer1XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_Mirror_CurrentLayer1XPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b SMW_SpawnMap16TileFromBounceSprite_Return0291EC
	LDA.w !RAM_SMW_BounceSpr_XPosLo,x
	CMP.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_BounceSpr_XPosHi,x
	SBC.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b SMW_SpawnMap16TileFromBounceSprite_Return0291EC
	LDY.w OAMIndex,x
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_BounceSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_BounceSpr_YXPPCCCT,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDA.w !RAM_SMW_BounceSpr_SpriteID,x
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles-$01,x
else
	LDA.w Tiles-$01,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_AimTowardsPlayer(Address)
namespace SMW_AimTowardsPlayer
%InsertMacroAtXPosition(<Address>)

Bank01:
	%INLINEROUTINE_SMW_AimTowardsPlayer(Bank01)
namespace off
endmacro

macro ROUTINE_RT01_SMW_AimTowardsPlayer(Address)
namespace SMW_AimTowardsPlayer
%InsertMacroAtXPosition(<Address>)

Bank02:
	%INLINEROUTINE_SMW_AimTowardsPlayer(Bank02)
namespace off
endmacro

macro ROUTINE_RT02_SMW_AimTowardsPlayer(Address)
namespace SMW_AimTowardsPlayer
%InsertMacroAtXPosition(<Address>)

Bank03:
	%INLINEROUTINE_SMW_AimTowardsPlayer(Bank03)
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEROUTINE_SMW_AimTowardsPlayer(Bank)
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHX
	PHY
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_<Bank>_Y
	STY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	BPL.b +
	EOR.b #$FF
	CLC
	ADC.b #$01
+:
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_<Bank>_X
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b +
	EOR.b #$FF
	CLC
	ADC.b #$01
+:
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	CMP.b !RAM_SMW_Misc_ScratchRAM0C
	BCS.b +
	INY
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM0C
+:
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM01
-:
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.b !RAM_SMW_Misc_ScratchRAM0D
	BCC.b +
	SBC.b !RAM_SMW_Misc_ScratchRAM0D
	INC.b !RAM_SMW_Misc_ScratchRAM00
+:
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	DEX
	BNE.b -
	TYA
	BEQ.b +
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM01
+:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b +
	EOR.b #$FF
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
+:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	BEQ.b +
	EOR.b #$FF
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
+:
	PLY
	PLX
	RTS
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleNormalSpriteLevelCollision(Address)
namespace SMW_HandleNormalSpriteLevelCollision
%InsertMacroAtXPosition(<Address>)

SpriteObjClippingX:
	db $0E,$02,$08,$08,$0E,$02,$07,$07
	db $07,$07,$07,$07,$0E,$02,$08,$08
	db $10,$00,$08,$08,$0D,$02,$08,$08
	db $07,$00,$04,$04,$1F,$01,$10,$10
	db $0F,$00,$08,$08,$10,$00,$08,$08
	db $0D,$02,$08,$08,$0E,$02,$08,$08
	db $0D,$02,$08,$08,$10,$00,$08,$08
	db $1F,$00,$10,$10,$08

SpriteObjClippingY:
	db $08,$08,$10,$02,$12,$12,$20,$02
	db $07,$07,$07,$07,$10,$10,$20,$0B
	db $12,$12,$20,$02,$18,$18,$20,$10
	db $04,$04,$08,$00,$10,$10,$1F,$01
	db $08,$08,$0F,$00,$08,$08,$10,$00
	db $48,$48,$50,$42,$04,$04,$08,$00
	db $00,$00,$00,$00,$08,$08,$10,$00
	db $08,$08,$10,$00,$04

DATA_019134:
	db $01,$02,$04,$08

Main:
;$019138
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	STZ.w !RAM_SMW_Sprites_DistanceToSnapDownToNearestTile
	STZ.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	STZ.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	STZ.w !RAM_SMW_Misc_ScratchRAM7E185E
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	STA.w !RAM_SMW_Sprites_SpriteEnterOrExitingWater
	STZ.w !RAM_SMW_NorSpr_InLiquidFlag,x
#LMBlockOffset_Unknown2:
	JSR.w CODE_019211
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	BPL.b CODE_0191BE
	INC.w !RAM_SMW_Misc_ScratchRAM7E185E
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b !RAM_SMW_Misc_SecondLevelLayerXPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b !RAM_SMW_Misc_SecondLevelLayerYPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
#LMBlockOffset_Unknown5:
	JSR.w CODE_019211
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BPL.b CODE_0191BE
	AND.b #$03
	BNE.b CODE_0191BE
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_Layer2XDisp
	EOR.b #$FF
	INC
	BPL.b CODE_0191B2
	DEY
CODE_0191B2:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,x
CODE_0191BE:
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x				;\ Note: !Define_SMW_NorSpr_190FProp_DontGetStuckInWallsWhenCarried
	BPL.b CODE_0191ED							;/
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_0191ED
	TAY
	LDA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b CODE_0191ED
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_019284-$01,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_019286-$01,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BNE.b CODE_0191ED
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$FC
	STA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
CODE_0191ED:
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	EOR.w !RAM_SMW_Sprites_SpriteEnterOrExitingWater
	BEQ.b Return019210
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	TAY
else
	ASL
endif
	LDA.w !RAM_SMW_NorSpr_PropertyBits166E,x
	AND.b #!Define_SMW_NorSpr_166EProp_DisableSplashing
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
	BNE.b Return019210
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_NorSpr_YPosLo,X
	SEC
	SBC.w !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$D2
	BCS.b Return019210
	TYA
	BMI.b CODE_01920C
else
	BCS.b CODE_01920C
endif
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BMI.b CODE_01920C
	JSL.l SMW_SpawnWaterSplash_Main
	RTS

CODE_01920C:
	JSL.l SMW_SpawnLavaSplash_Main
Return019210:
	RTS

CODE_019211:
	LDA.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	BEQ.b CODE_01925B
	LDA.b !RAM_SMW_Flag_UnderwaterLevel
	BNE.b CODE_019258
	LDY.b #$3C
	JSR.w CODE_01944D
	BEQ.b CODE_019233
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$6E
	BCC.b CODE_01925B
	JSL.l SMW_CheckForWaterSlope_Main
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	BCC.b CODE_01925B
	BCS.b CODE_01923A
CODE_019233:
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$06
	BCS.b CODE_01925B
CODE_01923A:
	TAY
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	ORA.b #$01
	CPY.b #$04
	BNE.b CODE_019258
	PHA
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	BEQ.b CODE_019252
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	BNE.b CODE_019255
CODE_019252:
	JSR.w CODE_019330
CODE_019255:
	PLA
	ORA.b #$80
CODE_019258:
	STA.w !RAM_SMW_NorSpr_InLiquidFlag,x
CODE_01925B:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x				;\ Note: !Define_SMW_NorSpr_1686Prop_DisableObjectClipping
	BMI.b Return019210							;/
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_01926F
	BIT.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	BVS.b Return0192C0
	LDA.w !RAM_SMW_NorSpr_PropertyBits166E,x				;\ Note: !Define_SMW_NorSpr_166EProp_OnlyInteractWithLayer1
	BMI.b Return0192C0							;/
CODE_01926F:
#LMBlockOffset_Unknown1:
	JSR.w CODE_0192C9
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x				;\ Note: !Define_SMW_NorSpr_190FProp_DontGetStuckInWallsWhenCarried
	BPL.b CODE_019288							;/
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,x
	BNE.b CODE_019288
	LDA.b !RAM_SMW_Counter_GlobalFrames
	JSR.w CODE_01928E
	RTS

DATA_019284:
	db $FC,$04

DATA_019286:
	db $FF,$00

CODE_019288:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b Return0192C0
	ASL
	ROL
CODE_01928E:
	AND.b #$01
	TAY
#LMBlockOffset_Unknown4:
	JSR.w CODE_019441
	STA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyHi
	BEQ.b CODE_0192BA
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$11
	BCC.b CODE_0192BA
	CMP.b #$6E
	BCS.b CODE_0192BA
	JSR.w CODE_019425
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.w !RAM_SMW_Blocks_CopyOfCurrentlyProcessedMap16TileLo2
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_0192BA
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	ORA.b #$40
	STA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
CODE_0192BA:
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyLo
Return0192C0:
	RTS

DATA_0192C1:
	db $FE,$02,$FF,$00

DATA_0192C5:
	db $01,$FF

DATA_0192C7:
	db $00,$FF

CODE_0192C9:
	LDY.b #$02
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_0192D0
	INY
CODE_0192D0:
#LMBlockOffset_Unknown3:
	JSR.w CODE_019441
	STA.w !RAM_SMW_Sprites_Map16TileBeingTouchedVerticallyHi
	PHP
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.w !RAM_SMW_Sprites_Map16TileBeingTouchedVerticallyLo
	PLP
	BEQ.b Return01930F
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CPY.b #$02
	BEQ.b CODE_019310
	CMP.b #$11
	BCC.b Return01930F
	CMP.b #$6E
	BCC.b CODE_0192F9
	CMP.w !RAM_SMW_Blocks_LowestNumberSolidMap16TileForSprites
	BCC.b Return01930F
	CMP.w !RAM_SMW_Blocks_HighestNumberSolidMap16TileForSprites
	BCS.b Return01930F
CODE_0192F9:
	JSR.w CODE_019425
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.w !RAM_SMW_Blocks_CopyOfCurrentlyProcessedMap16TileLo1
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b Return01930F
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	ORA.b #$20
	STA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
Return01930F:
	RTS

CODE_019310:
	CMP.b #$59
	BCC.b CODE_01933B
	CMP.b #$5C
	BCS.b CODE_01933B
	LDY.w !RAM_SMW_Misc_LevelTilesetSetting
	CPY.b #$0E
	BEQ.b CODE_019323
	CPY.b #$03
	BNE.b CODE_01933B
CODE_019323:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	BEQ.b CODE_019330
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	BNE.b CODE_01933B
CODE_019330:
	LDA.b #!Define_SMW_NorSprStatus05_SinkInLava
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	RTS

CODE_01933B:
	CMP.b #$11
	BCC.b CODE_0193B0
	CMP.b #$6E
	BCC.b CODE_0193B8
	CMP.b #$D8
	BCS.b CODE_019386
	JSL.l SMW_CheckWhatSlopeSpriteIsOn_Main
	LDA.b [!RAM_SMW_Misc_ScratchRAM05],y
	CMP.b #$10
	BEQ.b Return0193AF
	BCS.b CODE_019386
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$0C
	BCS.b CODE_01935D
	CMP.b [!RAM_SMW_Misc_ScratchRAM05],y
	BCC.b Return0193AF
CODE_01935D:
	LDA.b [!RAM_SMW_Misc_ScratchRAM05],y
	STA.w !RAM_SMW_Sprites_DistanceToSnapDownToNearestTile
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM08
	LDA.l SMW_SlopeDataTables_SlopeType,x
	PLX
	STA.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	CMP.b #$04
	BEQ.b CODE_019375
	CMP.b #$FC
	BNE.b CODE_019384
CODE_019375:
	EOR.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_019380
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_019380
	JSR.w SMW_ChangeNormalSpriteDirection_Main
CODE_019380:
	JSL.l CODE_03C1CA
CODE_019384:
	BRA.b CODE_0193B8

CODE_019386:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	AND.b #$0F
	CMP.b #$05
	BCS.b Return0193AF
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BEQ.b Return0193AF
	CMP.b #!Define_SMW_NorSprStatus05_SinkInLava
	BEQ.b Return0193AF
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b Return0193AF
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$01
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSR.w CODE_0192C9
Return0193AF:
	RTS

CODE_0193B0:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	AND.b #$0F
	CMP.b #$05
	BCS.b Return019424
CODE_0193B8:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	AND.b #!Define_SMW_NorSpr_1686Prop_DisableGroundShifting
	BNE.b CODE_019414
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BEQ.b Return019424
	CMP.b #!Define_SMW_NorSprStatus05_SinkInLava
	BEQ.b Return019424
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b Return019424
	LDY.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CPY.b #$0C
	BEQ.b CODE_0193D9
	CPY.b #$0D
	BNE.b CODE_019405
CODE_0193D9:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_019405
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BNE.b CODE_019405
	LDA.w !RAM_SMW_Misc_LevelTilesetSetting
	CMP.b #$02
	BEQ.b ADDR_0193EF
	CMP.b #$08
	BNE.b CODE_019405
ADDR_0193EF:
	TYA
	SEC
	SBC.b #$0C
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_0192C5,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_0192C7,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
CODE_019405:
	LDA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b CODE_019414
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$F0
	CLC
	ADC.w !RAM_SMW_Sprites_DistanceToSnapDownToNearestTile
	STA.b !RAM_SMW_NorSpr_YPosLo,x
CODE_019414:
	JSR.w CODE_019435
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b Return019424
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	ORA.b #$80
	STA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
Return019424:
	RTS

CODE_019425:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	STA.b !RAM_SMW_Blocks_YPosHi
CODE_019435:
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	ORA.w DATA_019134,y
	STA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	RTS

CODE_019441:
	STY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_ObjectClipping
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	TAY
CODE_01944D:
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	INC
	AND.b !RAM_SMW_Misc_LevelLayoutFlags
	BEQ.b CODE_0194BF
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w SpriteObjClippingY,y
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b CODE_0194B4
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w SpriteObjClippingX,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	CMP.b #$02
	BCS.b CODE_0194B4
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x
	LDY.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_01949A
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x
CODE_01949A:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x
	LDY.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_0194AC
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x
CODE_0194AC:
	ADC.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM06
	JSR.w CODE_019523
	RTS

CODE_0194B4:
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b #$00
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	STA.w !RAM_SMW_Sprites_DistanceToSnapDownToNearestTile
	RTS

CODE_0194BF:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w SpriteObjClippingY,y
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.w #$01B0
	SEP.b #$20
	BCS.b CODE_0194B4
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w SpriteObjClippingX,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B			;\ Optimization: I don't think this line of code is necessary, as if the sprite is going off the left side of the level, it's position will be greater than $1F.
	BMI.b CODE_0194B4					;| This STA.b !RAM_SMW_Misc_ScratchRAM0B can also be moved to after this block of code
	CMP.b !RAM_SMW_Misc_ScreensInLvl			;|
	BCS.b CODE_0194B4					;/
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	LDY.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_01950D
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
CODE_01950D:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	LDY.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_01951F
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
CODE_01951F:
	ADC.b !RAM_SMW_Misc_ScratchRAM0D
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_019523:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
#LM000Hijack_ProcessCustomNormalSpriteBlockCode:
	JSL.l SMW_ModifyMap16IDForSpecialBlocks_Main
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$00
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleNormalSpriteLevelCollision(Address)
namespace SMW_HandleNormalSpriteLevelCollision
%InsertMacroAtXPosition(<Address>)

DATA_03C1C6:
	db $02,$FE

DATA_03C1C8:
	db $00,$FF

CODE_03C1CA:
	PHB
	PHK
	PLB
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	BPL.b CODE_03C1D5
	INY
CODE_03C1D5:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_03C1C6,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_03C1C8,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$18
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnWaterSplash(Address)
namespace SMW_SpawnWaterSplash
%InsertMacroAtXPosition(<Address>)

CODE_0284A6:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0284AC:
	JSL.l CODE_0284D8
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0284AC
	RTL

VerticalCheepCheepEntry:
	LDA.b #$12
	BRA.b CODE_0284C2

Main:
	LDA.b #$00
CODE_0284C2:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr041_LongJumpDolphin
	BEQ.b CODE_0284D0
	CMP.b #!Define_SMW_SpriteID_NorSpr042_ShortJumpDolphin
	BNE.b CODE_0284D8
CODE_0284D0:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b Return0284E7
	LDA.b #$0A
	BRA.b CODE_0284A6

CODE_0284D8:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_CopyOfBank02
	BNE.b Return0284E7
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_0284DF:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_0284E8
	DEY
	BPL.b CODE_0284DF
Return0284E7:
	RTL

CODE_0284E8:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$00
	AND.b #$F0
	CLC
	ADC.b #$03
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	LDA.b #!Define_SMW_SpriteID_MExtSpr07_WaterSplash
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_MExtSpr_Timer,y
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SpawnBrickPieces(Address)
namespace SMW_SpawnBrickPieces
%InsertMacroAtXPosition(<Address>)

Main:
	PHX
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #$03
	LDX.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_02866A:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,x
	BEQ.b CODE_02867F
CODE_02866F:
	DEX
	BPL.b CODE_02866A
	DEC.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_02867C
	LDA.b #!Define_SMW_MaxMinorExtendedSpriteSlot
	STA.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_02867C:
	LDX.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_02867F:
	LDA.b #!Define_SMW_Sound1DFC_BreakBlock
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #!Define_SMW_SpriteID_MExtSpr01_BrickPiece
	STA.w !RAM_SMW_MExtSpr_SpriteID,x
	LDA.b !RAM_SMW_Blocks_XPosLo
	CLC
	ADC.w InitialXPosLo,y
	STA.w !RAM_SMW_MExtSpr_XPosLo,x
	LDA.b !RAM_SMW_Blocks_XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_XPosHi,x
	LDA.b !RAM_SMW_Blocks_YPosLo
	CLC
	ADC.w InitialYPosLo,y
	STA.w !RAM_SMW_MExtSpr_YPosLo,x
	LDA.b !RAM_SMW_Blocks_YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_YPosHi,x
	LDA.w InitialYSpeed,y
	STA.w !RAM_SMW_MExtSpr_YSpeed,x
	LDA.w InitialXSpeed,y
	STA.w !RAM_SMW_MExtSpr_XSpeed,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_MExtSpr_Timer,x
	DEY
	BPL.b CODE_02866F
	PLX
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_SpawnBrickPieces(Address)
namespace SMW_SpawnBrickPieces
%InsertMacroAtXPosition(<Address>)

InitialYPosLo:
	db $00,$00,$08,$08

InitialXPosLo:
	db $00,$08,$00,$08

InitialYSpeed:
	db $FB,$FB,$FD,$FD

InitialXSpeed:
	db $FF,$01,$FF,$01
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode11_LoadSublevel(Address)
namespace SMW_GameMode11_LoadSublevel
%InsertMacroAtXPosition(<Address>)

GameMode03Entry:
	STZ.w !REGISTER_IRQNMIAndJoypadEnableFlags
	JSR.w SMW_InitializeFirst8KBOfRAM_Main
	LDX.b #$07
	LDA.b #$FF
CODE_0096B8:
	STA.w !RAM_SMW_Misc_CurrentlyLoadedSpriteGraphicsFiles,x
	DEX
	BPL.b CODE_0096B8
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	BNE.b CODE_0096CB
	JSR.w SMW_HandleSPCUploads_UploadOverworldMusicBank
	LDA.b #!Define_SMW_OverworldMusic_TitleScreen
	STA.w !RAM_SMW_IO_MusicCh1
CODE_0096CB:
	LDA.b #!Define_SMW_LevelID_TitleScreenSublevel
	LDY.b #!Define_SMW_Overworld_MainMap
CODE_0096CF:
	STA.w !RAM_SMW_Misc_IntroLevelFlag
	STY.w !RAM_SMW_Overworld_MarioMap
Main:
#SA1Pack_OptimizeThisRoutine1:
	STZ.w !REGISTER_IRQNMIAndJoypadEnableFlags
	JSR.w SMW_DamagePlayer_DisableButtons
	LDA.w !RAM_SMW_Counter_SublevelsEntered			;\ Optimization: What is the point of this?
	BNE.b CODE_0096E9					;| Is this a remnant of the idea for having the titlescreen show the overworld?
	LDA.w !RAM_SMW_Flag_ShowPlayerStart			;|
	BEQ.b CODE_0096E9					;|
	JSL.l SMW_LoadOverworldLayer1AndEvents_Main		;/
CODE_0096E9:
	STZ.w !RAM_SMW_Flag_DisableLayer3Scroll
	STZ.w !RAM_SMW_Pointer_CurrentLevelEndProcess
	LDA.b #$50
	STA.w !RAM_SMW_Timer_WaitBeforeScoreTally
	JSL.l SMW_SpecifySublevelToLoad_Main
	LDX.b #$07
CODE_0096FA:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.w !RAM_SMW_Misc_Layer1XPosLo,x
	DEX
	BPL.b CODE_0096FA
#SA1Pack_OptimizeThisRoutine2:
	JSR.w SMW_HandleSPCUploads_CODE_008134
	JSR.w SMW_InitializeLevelRAM_Main
#LM300Hijack_HorizontalScrollFixAndInitialFaceLeft:
	LDA.b #$20
	STA.b !RAM_SMW_Camera_LastScreenHoriz
	JSR.w CODE_00A796
	INC.w !RAM_SMW_Flag_ScrollUpToPlayer
	JSL.l SMW_HandleStandardLevelCameraScroll_Main
	JSL.l SMW_LoadSublevel_Main
	LDA.w !RAM_SMW_Misc_IntroLevelFlag
	BEQ.b CODE_009728
	CMP.b #!Define_SMW_LevelID_IntroSublevel
	BNE.b CODE_009740
	LDA.b #!Define_SMW_LevelMusic_Welcome
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
CODE_009728:
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	CMP.b #$40
	BCS.b CODE_00973B
	LDY.w !RAM_SMW_Misc_NMIToUseFlag
	CPY.b #$C1
	BNE.b CODE_009738
	LDA.b #!Define_SMW_LevelMusic_FightBowser2
CODE_009738:
	STA.w !RAM_SMW_IO_MusicCh1
CODE_00973B:
	AND.b #$BF
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
CODE_009740:
	STZ.w !RAM_SMW_Mirror_ScreenDisplayRegister			; Note: !ScreenDisplayRegister_MinBrightness00
	STZ.w !RAM_SMW_Misc_MosaicDirection
	INC.w !RAM_SMW_Misc_GameMode
#SA1Pack_OptimizeThisRoutine3:
	JMP.w SMW_GameMode00_LoadNintendoPresents_Mode04Finish
namespace off
	%SetDuplicateOrNullPointer(SMW_GameMode11_LoadSublevel_GameMode03Entry, SMW_GameMode03_LoadTitleScreenSublevel_Main)
endmacro

macro ROUTINE_RT01_SMW_GameMode11_LoadSublevel(Address)
namespace SMW_GameMode11_LoadSublevel
%InsertMacroAtXPosition(<Address>)

CODE_00A796:
	REP.b #$20
	LDY.w !RAM_SMW_Flag_Layer2VerticalScrollLevelSetting
	BEQ.b CODE_00A7B9
	DEY
	BNE.b CODE_00A7A7
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	BRA.b CODE_00A7B6

CODE_00A7A7:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LSR
	DEY
	BEQ.b CODE_00A7AF
	LSR
	LSR
CODE_00A7AF:
	EOR.w #$FFFF
	INC
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
CODE_00A7B6:
	STA.w !RAM_SMW_Camera_Layer2YPosRelativeToLayer1Lo
CODE_00A7B9:
	LDA.w #$0080
	STA.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GameMode12_PrepareLevel(Address)
namespace SMW_GameMode12_PrepareLevel
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_ClearLayer3Tilemap_Main
	JSR.w SMW_DamagePlayer_DisableButtons
#LM170Hijack_VRAMRearrangement6:
	STZ.w !RAM_SMW_Flag_UploadLoadScreenLettersToVRAM
	JSR.w SMW_SetStandardPPUSettings_Main
	JSR.w SMW_InitializeStatusBarTilemap_Main
	JSL.l SMW_InitializeLevelLayer1And2Tilemaps_Main
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b PrepareNormalLevel
	JSR.w PrepareMode7Level
	BRA.b CODE_00A5CF

PrepareNormalLevel:
	JSR.w SMW_UploadGraphicsFiles_Main
	JSR.w SMW_BufferPalettesRoutines_Levels
#LM000Hijack_CustomLevelPalettes:
	JSL.l InitializeLayer3RAM
	JSR.w SMW_InitializeLevelLayer3_Main
	JSR.w SMW_InitializeLevelTileAnimations_Main
	JSR.w SMW_SetupHDMAWindowingEffects_EndHDMA
	JSR.w CODE_009860
CODE_00A5CF:
	JSR.w SMW_UpdateEntirePalette_Main
	JSR.w SMW_SetKeepGameModeActiveTimer_OneFrame
	JSR.w SMW_UpdateStatusBarCounters_Main
	REP.b #$30
	PHB
	LDX.w #!RAM_SMW_Palettes_PaletteMirror
	LDY.w #!RAM_SMW_Palettes_CopyOfPaletteMirror
#LM000Hijack_Unknown00A5E1:
	LDA.w #$01EF
	MVN !RAM_SMW_Palettes_CopyOfPaletteMirror>>16,!RAM_SMW_Palettes_PaletteMirror>>16
	PLB
	LDX.w !RAM_SMW_Palettes_BackgroundColorLo
	STX.w !RAM_SMW_Palettes_CopyOfBackgroundColorLo
	SEP.b #$30
	JSR.w CODE_00919B
	JSR.w SMW_CompressOAMTileSizeBuffer_Main
	JMP.w SMW_GameMode00_LoadNintendoPresents_CODE_0093F4
namespace off
endmacro

macro ROUTINE_RT01_SMW_GameMode12_PrepareLevel(Address)
namespace SMW_GameMode12_PrepareLevel
%InsertMacroAtXPosition(<Address>)

CODE_00919B:
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState0A_NoYoshiCutscene
	BNE.b CODE_0091A6
	JSR.w SMW_GameMode14_InLevel_HandlePlayerState
	BRA.b Return0091B0

CODE_0091A6:
	LDA.w !RAM_SMW_Counter_SublevelsEntered
	BNE.b Return0091B0
	LDA.b #$1E
	STA.w !RAM_SMW_Counter_GreenStarBlock
Return0091B0:
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_GameMode12_PrepareLevel(Address)
namespace SMW_GameMode12_PrepareLevel
%InsertMacroAtXPosition(<Address>)

PrepareMode7Level:
	LDA.b #!ScreenDisplayRegister_MaxBrightness0F
	STA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	STZ.w !RAM_SMW_Mirror_MosaicSizeAndBGEnable				; Note: !MosaicSizeAndBGEnable_PixelSize1x1
	JSR.w SMW_GameModeXX_FadeInOrOut_GMMosaic
	LDA.b #$20
	STA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_M7AngleHi
	STZ.w !RAM_SMW_ShakingLayer1DispYLo
	JSR.w SMW_ClearLayer3Tilemap_Main						; Optimization: This is called earlier in the code.
	LDA.b #$FF
	STA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	JSL.l UploadTiltingPlatformTilemap
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_009801
	JSR.w PrepareNonIggyLarryRoom
	LDY.w !RAM_SMW_Misc_CurrentlyActiveBoss
	CPY.b #$03
	BCC.b CODE_0097F1
	BNE.b CODE_00983B
	LDA.b #$18
	BRA.b CODE_0097FC

CODE_0097F1:
	LDA.b #$03
	STA.w !RAM_SMW_Player_CurrentLayerPriority
	LDA.b #$C8
	STA.b !RAM_SMW_Mirror_OAMAddressLo
	LDA.b #$12
CODE_0097FC:
	DEC.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	BRA.b CODE_00983D

CODE_009801:
	JSR.w SMW_BufferPalettesRoutines_IggyLarryPlatform
	JSR.w SMW_SetupHDMAWindowingEffects_CODE_0092A8
	LDX.b #$50
	JSR.w CODE_009A3D
	REP.b #$20
	LDA.w #$0050
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w #$FFD0
	STA.b !RAM_SMW_Player_YPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.w !RAM_SMW_Misc_Layer1XPosLo
	LDA.w #$FF90
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_Misc_Layer1YPosLo
	LDA.w #$0080
	STA.b !RAM_SMW_Mirror_M7CenterXPosLo
	LDA.w #$0050
	STA.b !RAM_SMW_Mirror_M7CenterYPosLo
	LDA.w #$0080
	STA.b !RAM_SMW_Mirror_M7XPosLo
	LDA.w #$0010
	STA.b !RAM_SMW_Mirror_M7YPosLo
	SEP.b #$20
CODE_00983B:
	LDA.b #$13
CODE_00983D:
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	JSR.w SMW_UploadGraphicsFiles_Main
	LDA.b #$11
	STA.w !REGISTER_MainScreenWindowMask
	STZ.w !REGISTER_SubScreenLayers
	STZ.w !REGISTER_SubScreenWindowMask
	LDA.b #$02
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	LDA.b #$32
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$20
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	JSR.w SMW_InitializeStatusBarTilemap_Main
	JSR.w SMW_ManipulateMode7Image_Main
CODE_009860:
	JSL.l SMW_PlayerGFXRt_Main
	JSR.w SMW_UpdateCurrentPlayerPositionRAM_Main
	JSR.w SMW_GameMode14_InLevel_HandlePlayerState
	STZ.b !RAM_SMW_Player_YSpeed
	JSL.l SMW_ProcessNormalSprites_Main
	JSL.l !RAM_SMW_Sprites_ResetSpriteOAMRt
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_GameMode12_PrepareLevel(Address)
namespace SMW_GameMode12_PrepareLevel
%InsertMacroAtXPosition(<Address>)

PrepareNonIggyLarryRoom:
	STZ.b !RAM_SMW_Player_YPosHi
	REP.b #$20
	LDA.w #$0020
	STA.b !RAM_SMW_Player_XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.w !RAM_SMW_Misc_Layer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STZ.w !RAM_SMW_Misc_Layer1YPosLo
	LDA.w #$0080
	STA.b !RAM_SMW_Mirror_M7CenterXPosLo
	LDA.w #$00A0
	STA.b !RAM_SMW_Mirror_M7CenterYPosLo
	SEP.b #$20
	JSR.w SMW_BufferPalettesRoutines_ReznorAndMode7KoopaBosses
	JSL.l SMW_ProcessNormalSprites_Main
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.b #$D0
	LDA.b #$B0
else
	LDX.b #$C0
	LDA.b #$A0
endif
	BCC.b CODE_00995B
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	JMP.w CODE_009A17

CODE_00995B:
	REP.b #$30
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBoss
	AND.w #$00FF
	ASL
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDY.w #$0300
else
	LDY.w #$02C0
endif
	LDA.w SMW_PlayerState00_Normal_DATA_00F8E8,x
	BPL.b CODE_009970
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDY.w #$FBC0
else
	LDY.w #$FB80
endif
CODE_009970:
	CMP.w #$0012
	BNE.b CODE_009978
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDY.w #$0360
else
	LDY.w #$0320
endif
CODE_009978:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0000
	LDA.w #$C05A
CODE_009980:
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	XBA
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	ADC.w #$00C0
else
	ADC.w #$0080
endif
	XBA
	STA.l SMW_StripeImageUploadTable[$42].LowByte,x
	XBA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	XBA
	STA.l SMW_StripeImageUploadTable[$84].LowByte,x
	LDA.w #$7F00
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$43].LowByte,x
	STA.l SMW_StripeImageUploadTable[$85].LowByte,x
	LDY.w #$0010
CODE_0099A9:
	LDA.w #$38A2
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	LDA.w #$38B2
	STA.l SMW_StripeImageUploadTable[$22].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$23].LowByte,x
	LDA.w #$2C80
	STA.l SMW_StripeImageUploadTable[$44].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$45].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$64].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$65].LowByte,x
	LDA.w #$28A0
	STA.l SMW_StripeImageUploadTable[$86].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$87].LowByte,x
	LDA.w #$28B0
	STA.l SMW_StripeImageUploadTable[$A6].LowByte,x
	INC
	STA.l SMW_StripeImageUploadTable[$A7].LowByte,x
	INX
	INX
	INX
	INX
	DEY
	BNE.b CODE_0099A9
	TXA
	CLC
	ADC.w #$014C
	TAX
	LDA.w #$C05E
	CPX.w #$0318
	BCS.b CODE_009A07
	JMP.w CODE_009980

CODE_009A07:
	LDA.w #$00FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	SEP.b #$30
	JSR.w SMW_LoadStripeImage_Sub
	LDX.b #$B0
	LDA.b #$90
CODE_009A17:
	STA.b !RAM_SMW_Player_YPosLo
	JSR.w CODE_009A1F
	JMP.w SMW_SetupHDMAWindowingEffects_CODE_009283

CODE_009A1F:
	LDY.b #$10
	LDA.b #$32
CODE_009A23:
	STA.l !RAM_SMW_Blocks_Map16TableLo+($01B0*$00),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($01B0*$01),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$00),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$01),x
	INX
	DEY
	BNE.b CODE_009A23
	CPX.b #$C0
	BNE.b Return009A4D
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.b #$E0
else
	LDX.b #$D0
endif
CODE_009A3D:
	LDY.b #$10
	LDA.b #$05
CODE_009A41:
	STA.l !RAM_SMW_Blocks_Map16TableLo+($01B0*$00),x
	STA.l !RAM_SMW_Blocks_Map16TableLo+($01B0*$01),x
	INX
	DEY
	BNE.b CODE_009A41
Return009A4D:
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_GameMode12_PrepareLevel(Address)
namespace SMW_GameMode12_PrepareLevel
%InsertMacroAtXPosition(<Address>)

IggyPlatformTiles:
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$15,$16,$17,$18,$17,$18,$17,$18,$17,$18,$19,$1A,$00,$00
	db $00,$00,$01,$02,$03,$04,$03,$04,$03,$04,$03,$04,$05,$12,$00,$00
	db $00,$00,$00,$07,$04,$03,$04,$03,$04,$03,$04,$03,$08,$00,$00,$00
	db $00,$00,$00,$09,$0A,$04,$03,$04,$03,$04,$03,$0B,$0C,$00,$00,$00
	db $00,$00,$00,$00,$0D,$0E,$04,$03,$04,$03,$0F,$10,$00,$00,$00,$00
	db $00,$00,$00,$00,$11,$02,$03,$04,$03,$04,$05,$12,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$07,$04,$03,$04,$03,$08,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$09,$0A,$04,$03,$0B,$0C,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$13,$03,$04,$14,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$13,$14,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

DATA_03D8EC:
	incbin "tilemaps/mode7/TiltingPlatform.bin"

UploadTiltingPlatformTilemap:
	REP.b #$10
	STZ.w !REGISTER_VRAMAddressIncrementValue
	STZ.w !REGISTER_VRAMAddressLo
	STZ.w !REGISTER_VRAMAddressHi
	LDX.w #$4000
	LDA.b #$FF
CODE_03D968:
	STA.w !REGISTER_WriteToVRAMPortLo
	DEX
	BNE.b CODE_03D968
	SEP.b #$10
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVS.b Return03D990
	PHB
	PHK
	PLB
	LDA.b #IggyPlatformTiles
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b #IggyPlatformTiles>>8
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b #IggyPlatformTiles>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w CODE_03D991
	PLB
Return03D990:
	RTL

CODE_03D991:
	STZ.w !REGISTER_VRAMAddressIncrementValue
	LDY.b #$00
CODE_03D996:
	STY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$00
CODE_03D99A:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_VRAMAddressLo
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !REGISTER_VRAMAddressHi
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_03D9AC:
	LDA.b [!RAM_SMW_Misc_ScratchRAM05],y
	STA.w !RAM_SMW_Misc_IggyLarryPlatformInteraction,y
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w DATA_03D8EC,x
else
	LDA.l DATA_03D8EC,x
endif
	STA.w !REGISTER_WriteToVRAMPortLo
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w DATA_03D8EC+$02,x
else
	LDA.l DATA_03D8EC+$02,x
endif
	STA.w !REGISTER_WriteToVRAMPortLo
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_03D9AC
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_03D9D4
	INC.b !RAM_SMW_Misc_ScratchRAM01
CODE_03D9D4:
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	EOR.b #$01
	BNE.b CODE_03D99A
	TYA
	BNE.b CODE_03D996
	RTS
namespace off
endmacro

macro ROUTINE_RT05_SMW_GameMode12_PrepareLevel(Address)
namespace SMW_GameMode12_PrepareLevel
%InsertMacroAtXPosition(<Address>)

InitializeLayer3RAM:
	PHB									;\ Optimization: Unnecessary bank wrapper
	PHK									;|
	PLB									;/
	REP.b #$20
	LDA.w SMW_NorSpr0F1_UnusedSprite_DATA_05CA26				;\ Note: Why not just load #$0001?
	STA.w !RAM_SMW_Flag_Layer3VerticalScrollDirection			;/ Also, this affects unused RAM $7E1461
	STZ.w !RAM_SMW_Misc_Layer3XSpeedLo
	STZ.w !RAM_SMW_Misc_Layer3YSpeedLo
	STZ.w !RAM_SMW_Misc_Layer3TideSubYPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
	SEP.b #$20
	PLB									; Optimization: Unnecessary PLB.
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeLevelTileAnimations(Address)
namespace SMW_InitializeLevelTileAnimations
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$E7
	TRB.b !RAM_SMW_Counter_LocalFrames
-:
#LM160Hijack_LevelExAnimations3:
	JSL.l SMW_LevelTileAnimations_Main
	JSR.w SMW_UploadLevelAnimations_Main
	INC.b !RAM_SMW_Counter_LocalFrames
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	BNE.b -
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateMode7SpriteAnimations(Address)
namespace SMW_UpdateMode7SpriteAnimations
%InsertMacroAtXPosition(<Address>)

DATA_03DEBB:
	dw $0100,$0110

DATA_03DEBF:
	db $6E,$70,$FF,$50,$FE,$FE,$FF,$57

DATA_03DEC7:
	db $72,$74,$52,$54,$3C,$3E,$55,$53

DATA_03DECF:
	db $76,$56,$56,$FF,$FF,$FF,$51,$FF

DATA_03DED7:
	db $20,$03,$30,$03,$40,$03,$50,$03

Main:
	PHB
	PHK
	PLB
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.b #$00
	JSR.w CODE_03DFAE
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	LDY.b #$02
	JSR.w CODE_03DFAE
	PHX
	REP.b #$30
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	LDY.w #$0003
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BCC.b CODE_03DF44
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_PropellerAnimationFrameCounter
	AND.w #$0003
	ASL
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w DATA_03DEBF,x
else
	LDA.l DATA_03DEBF,x
endif
	STA.l !RAM_SMW_Misc_Mode7BossTilemap+$01
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w DATA_03DEC7,x
else
	LDA.l DATA_03DEC7,x
endif
	STA.l !RAM_SMW_Misc_Mode7BossTilemap+$03
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w DATA_03DECF,x
else
	LDA.l DATA_03DECF,x
endif
	STA.l !RAM_SMW_Misc_Mode7BossTilemap+$05
	LDA.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDX.w #$0380
	LDA.w !RAM_SMW_Misc_Mode7TilemapIndex
	AND.w #$007F
	CMP.w #$002C
	BCC.b CODE_03DF3C
	LDX.w #$0388
CODE_03DF3C:
	TXA
	LDX.w #$000A
	LDY.w #$0007
	SEC
CODE_03DF44:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	BCS.b CODE_03DF55
CODE_03DF48:
	LDA.w !RAM_SMW_Misc_Mode7TilemapIndex
	AND.w #$007F
	ASL
	ASL
	ASL
	ASL
	LDX.w #$0003
CODE_03DF55:
	STX.b !RAM_SMW_Misc_ScratchRAM02
	PHA
	LDY.w !RAM_SMW_UnusedRAM_7E1BA1			;\ Optimization: Unused?
	BPL.b CODE_03DF60				;|
	CLC						;|
	ADC.b !RAM_SMW_Misc_ScratchRAM00		;/
CODE_03DF60:
	TAY
	SEP.b #$20
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_03DF69:
	LDA.w SMW_InitializeMode7TilemapsAndPalettes_TilemapData,y
	INY
	BIT.w !RAM_SMW_Misc_Mode7TilemapIndex
	BPL.b CODE_03DF76
	EOR.b #$01
	DEY
	DEY
CODE_03DF76:
	STA.l !RAM_SMW_Misc_Mode7BossTilemap,x
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_03DF69
	STX.b !RAM_SMW_Misc_ScratchRAM06
	REP.b #$20
	PLA
	SEC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	CPX.w #$0004
	BEQ.b CODE_03DF48
	CPX.w #$0008
	BNE.b CODE_03DF96
	LDA.w #$0360
CODE_03DF96:
	CPX.w #$000A
	BNE.b CODE_03DFA6
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarFaceAnimationFrame
	AND.w #$0003
	ASL
	TAY
	LDA.w DATA_03DED7,y
CODE_03DFA6:
	DEX
	BPL.b CODE_03DF55
	SEP.b #$30
	PLX
	PLB
	RTL

CODE_03DFAE:
	PHX
	TYX
	REP.b #$20
	EOR.w #$FFFF
	INC
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.w DATA_03DEBB,x
else
	ADC.l DATA_03DEBB,x
endif
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo,x
	STA.b !RAM_SMW_Mirror_M7XPosLo,x
	SEP.b #$20
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ProcessMinorExtendedSprites(Address)
namespace SMW_ProcessMinorExtendedSprites
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_028B69:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,x
	BEQ.b CODE_028B74
	STX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	JSR.w CODE_028B94
CODE_028B74:
	DEX
	BPL.b CODE_028B69
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessMinorExtendedSprites_Return, SMW_MExtSpr00_Unused_Main)
endmacro

macro ROUTINE_RT01_SMW_ProcessMinorExtendedSprites(Address)
namespace SMW_ProcessMinorExtendedSprites
%InsertMacroAtXPosition(<Address>)

CODE_028B94:
	JSL.l SMW_ExecutePtr_Absolute

MinorExtendedSpritesPtrs:
base $000000
.MExtSpr00_Unused:		dw SMW_MExtSpr00_Unused_Main
.MExtSpr01_BrickPiece:		dw SMW_MExtSpr01_BrickPiece_Main
.MExtSpr02_SmallStar:		dw SMW_MExtSpr02_SmallStar_Main
.MExtSpr03_EggShell:		dw SMW_MExtSpr03_EggShell_Main
.MExtSpr04_PodobooFire:		dw SMW_MExtSpr04_PodobooFire_Main
.MExtSpr05_SmallStar:		dw SMW_MExtSpr05_SmallStar_Main
.MExtSpr06_RipVanFishZ:		dw SMW_MExtSpr06_RipVanFishZ_Main
.MExtSpr07_WaterSplash:		dw SMW_MExtSpr07_WaterSplash_Main
.MExtSpr08_UnusedMusicNote:	dw SMW_MExtSpr08_UnusedMusicNote_Main
.MExtSpr09_UnusedMusicNote:	dw SMW_MExtSpr09_UnusedMusicNote_Main
.MExtSpr0A_BooStream:		dw SMW_MExtSpr0A_BooStream_Main
.MExtSpr0B_UnusedYoshiSmoke:	dw SMW_MExtSpr0B_UnusedYoshiSmoke_Main
base off
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ProcessBounceAndSmokeSprites(Address)
namespace SMW_ProcessBounceAndSmokeSprites
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Blocks_MultiCoinBlockTimer
	CMP.b #$02
	BCC.b CODE_02903B
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02903B
	DEC.w !RAM_SMW_Blocks_MultiCoinBlockTimer
CODE_02903B:
	LDX.b #!Define_SMW_MaxBounceSpriteSlot
CODE_02903D:
	STX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	JSR.w BounceSprites
	JSR.w SMW_CheckForPlayerAttackToNormalSpriteCollision_Main
	JSR.w SmokeSprites
	DEX
	BPL.b CODE_02903D
Return02904C:
	RTS

BounceSprites:
	LDA.w !RAM_SMW_BounceSpr_SpriteID,x
	BEQ.b Return02904C
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02905E
	LDY.w !RAM_SMW_BounceSpr_Timer,x
	BEQ.b CODE_02905E
	DEC.w !RAM_SMW_BounceSpr_Timer,x
CODE_02905E:
	JSL.l SMW_ExecutePtr_Absolute

BounceSpritePtrs:
base ($000000)
.BounceSpr00_Unused:			dw SMW_BounceSpr00_Unused_Main
.BounceSpr01_TurnBlock:			dw SMW_BounceSpr01_TurnBlock_Main
.BounceSpr02_NoteBlock:			dw SMW_BounceSpr02_NoteBlock_Main
.BounceSpr03_QuestionBlock:		dw SMW_BounceSpr03_QuestionBlock_Main
.BounceSpr04_SidewaysMovingBlock:	dw SMW_BounceSpr04_SidewaysMovingBlock_Main
.BounceSpr05_GlassBlock:		dw SMW_BounceSpr05_GlassBlock_Main
.BounceSpr06_OnOffBlock:		dw SMW_BounceSpr06_OnOffBlock_Main
.BounceSpr07_SpinningTurnBlock:		dw SMW_BounceSpr07_SpinningTurnBlock_Main
base off

namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessBounceAndSmokeSprites_Return02904C, SMW_BounceSpr00_Unused_Main)
endmacro

macro ROUTINE_RT01_SMW_ProcessBounceAndSmokeSprites(Address)
namespace SMW_ProcessBounceAndSmokeSprites
%InsertMacroAtXPosition(<Address>)

SmokeSprites:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,x
	BEQ.b Return0296D7
	AND.b #$7F
	JSL.l SMW_ExecutePtr_Absolute

SmokeSpritePtrs:
base $000000
.SmokeSpr00_Unused:			dw SMW_SmokeSpr00_Unused_Main
.SmokeSpr01_PuffOfSmoke:		dw SMW_SmokeSpr01_PuffOfSmoke_Main
.SmokeSpr02_ContactEffect:		dw SMW_SmokeSpr02_ContactEffect_Main
.SmokeSpr03_TurnAroundSmoke:		dw SMW_SmokeSpr03_TurnAroundSmoke_Main
.SmokeSpr04_Unused:			dw SMW_SmokeSpr04_Unused_Main
.SmokeSpr05_Glitter:			dw SMW_SmokeSpr05_Glitter_Main
base off

Return0296D7:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessBounceAndSmokeSprites_Return0296D7, SMW_SmokeSpr00_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ProcessBounceAndSmokeSprites_Return0296D7, SMW_SmokeSpr04_Unused_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_CheckForPlayerAttackToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerAttackToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

DATA_029392:
	db $F8,$08

CODE_029394:
	STZ.w !RAM_SMW_BounceSpr_Type,x
Return029397:
	RTS

Main:
	LDA.w !RAM_SMW_BounceSpr_Type,x
	BEQ.b Return029397
	DEC.w !RAM_SMW_BounceSpr_InteractTimer,x
	BEQ.b CODE_029394
	LDA.w !RAM_SMW_BounceSpr_InteractTimer,x
	CMP.b #$03
	BCS.b SMW_GetBounceSpriteLevelCollisionMap16ID_Return029391
	LDY.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	STZ.b !RAM_SMW_Misc_ScratchRAM0E
CapeSwingEntry:
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
CODE_0293B0:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_0293F7
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_0293F7
	LDA.w !RAM_SMW_NorSpr_PropertyBits166E,x
	AND.b #!Define_SMW_NorSpr_166EProp_ImmuneToCape
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
	BNE.b CODE_0293F7
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	PHY
	LDY.b !RAM_SMW_Player_ClimbingFlag
	BEQ.b CODE_0293D8
	EOR.b #$01
CODE_0293D8:
	PLY
	EOR.w !RAM_SMW_Player_CurrentLayerPriority
	BNE.b CODE_0293F7
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b CODE_0293EB
	JSR.w GetCapeSwingOrNetPunchClipping
	BRA.b CODE_0293EE

CODE_0293EB:
	JSR.w GetBounceSpriteClipping
CODE_0293EE:
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_0293F7
	JSR.w CODE_029404
CODE_0293F7:
	LDY.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	DEX
	BMI.b CODE_029400
	JMP.w CODE_0293B0

CODE_029400:
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	RTS

CODE_029404:
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr081_ChangingItem
	BNE.b CODE_029427
	LDA.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	BEQ.b Return029426
	STZ.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSprXXX_PowerUps_RisingOutOfBlockTimer,x
	STZ.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b #$20
	STA.w !RAM_SMW_NorSprXXX_PowerUps_NoBlockSideInteractionTimer,x
Return029426:
	RTS

CODE_029427:
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BEQ.b CODE_029448
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	BNE.b CODE_0294A2
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_029443
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BEQ.b CODE_029448
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	BEQ.b CODE_029448
CODE_029443:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_029448:
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CMP.b #$35
	BEQ.b CODE_029455
	JSL.l SMW_SpawnContactEffectFromSide_Main
CODE_029455:
	LDA.b #$00
	JSL.l SMW_GivePoints_Main
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	BNE.b CODE_02946B
	LDA.b #$1F							;\ Glitch: (?) Why is this not indexed RAM?
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540+$09		;/
CODE_02946B:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #!Define_SMW_NorSpr_1662Prop_FallWhenKilled
	BNE.b CODE_0294A2
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_SafeToJumpOn			;\ Optimization: Use BIT.b to avoide needing to reload A
	BEQ.b CODE_0294A2						;|
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x			;/
	AND.b #!Define_SMW_NorSpr_1656Prop_DiesWhenJumpedOn
	BNE.b CODE_0294A2
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	ASL.w !RAM_SMW_NorSpr_Table7E15F6,x
	SEC
	ROR.w !RAM_SMW_NorSpr_Table7E15F6,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	AND.b #!Define_SMW_NorSpr_1686Prop_SpawnsNewSprite
	BEQ.b CODE_0294A2
	PHX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	TAX
	LDA.l SMW_GenericSpriteToSpawnTable_Main,x
	PLX
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
CODE_0294A2:
	LDA.b #$C0
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b CODE_0294B0
	LDA.b #$B0
	CPY.b #$02
	BNE.b CODE_0294B0
	LDA.b #$C0
CODE_0294B0:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_CopyOfBank02_X
	LDA.w DATA_029392,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	TYA
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckForPlayerAttackToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerAttackToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

DATA_029657:
	db $FC,$E0

DATA_029658:
	db $FF,$FF

DATA_02965A:
	db $18,$50

DATA_02965C:
	db $FC,$F8

DATA_02965E:
	db $FF,$FF

DATA_029660:
	db $18,$10

GetBounceSpriteClipping:
	PHX
	LDA.w !RAM_SMW_BounceSpr_Type,y
	TAX
	LDA.w !RAM_SMW_BounceSpr_HitboxXLo,y
	CLC
	ADC.w DATA_029657-$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_BounceSpr_HitboxXHi,y
	ADC.w DATA_029658-$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w DATA_02965A-$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_BounceSpr_HitboxYLo,y
	CLC
	ADC.w DATA_02965C-$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_BounceSpr_HitboxYHi,y
	ADC.w DATA_02965E-$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w DATA_029660-$01,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PLX
	RTS

GetCapeSwingOrNetPunchClipping:
	LDA.w !RAM_SMW_Player_CapeHitboxXLo
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Player_CapeHitboxXHi
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$14
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Player_CapeHitboxYLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Player_CapeHitboxYHi
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM03
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessExtendedSprites(Address)
namespace SMW_ProcessExtendedSprites
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxExtendedSpriteSlot
CODE_029B0C:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	JSR.w CODE_029B16
	DEX
	BPL.b CODE_029B0C
Return029B15:
	RTS

CODE_029B16:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	BEQ.b Return029B15
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029B27
	LDY.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,x
	BEQ.b CODE_029B27
	DEC.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,x
CODE_029B27:
	JSL.l SMW_ExecutePtr_Absolute

ExtendedSpritePtrs:
base ($000000)
.ExtSpr00_Unused:		dw SMW_ExtSpr00_Unused_Main
.ExtSpr01_SmokePuff:		dw SMW_ExtSpr01_SmokePuff_Main
.ExtSpr02_ReznorFireball:	dw SMW_ExtSpr02_ReznorFireball_Main
.ExtSpr03_FlameRemnant:		dw SMW_ExtSpr03_FlameRemnant_Main
.ExtSpr04_Hammer:		dw SMW_ExtSpr04_Hammer_Main
.ExtSpr05_MarioFireball:	dw SMW_ExtSpr05_MarioFireball_Main
.ExtSpr06_ThrownBone:		dw SMW_ExtSpr06_ThrownBone_Main
.ExtSpr07_LavaSplash:		dw SMW_ExtSpr07_LavaSplash_Main
.ExtSpr08_LauncherArm:		dw SMW_ExtSpr08_LauncherArm_Main
.ExtSpr09_Unused:		dw SMW_ExtSpr09_Unused_Main
.ExtSpr0A_CloudCoin:		dw SMW_ExtSpr0A_CloudCoin_Main
.ExtSpr0B_PiranhaFireball:	dw SMW_ExtSpr0B_PiranhaFireball_Main
.ExtSpr0C_VolcanoLotusFire:	dw SMW_ExtSpr0C_VolcanoLotusFire_Main
.ExtSpr0D_Baseball:		dw SMW_ExtSpr0D_Baseball_Main
.ExtSpr0E_WigglerFlower:	dw SMW_ExtSpr0E_WigglerFlower_Main
.ExtSpr0F_SmokeTrail:		dw SMW_ExtSpr0F_SmokeTrail_Main
.ExtSpr10_SpinJumpStars:	dw SMW_ExtSpr10_SpinJumpStars_Main
.ExtSpr11_YoshiFireball:	dw SMW_ExtSpr11_YoshiFireball_Main
.ExtSpr12_BreathBubble:		dw SMW_ExtSpr12_BreathBubble_Main
base off
namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessExtendedSprites_Return029B15, SMW_ExtSpr00_Unused_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessGeneratorSprite(Address)
namespace SMW_ProcessGeneratorSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_GenSpr_SpriteID
	BEQ.b Return02B02A
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02B02A
	DEC
	JSL.l SMW_ExecutePtr_Absolute

GeneratorSprPtrs:
base $000002
.GenSpr01_GenerateEerie:		dw SMW_GenSpr01_GenerateEerie_Main
.GenSpr02_GenParachuteEnemy:		dw SMW_GenSpr02_GenParachuteEnemy_Main
.GenSpr03_GenParachuteGoomba:		dw SMW_GenSpr03_GenParachuteGoomba_Main
.GenSpr04_GenParachuteBobOmb:		dw SMW_GenSpr04_GenParachuteBobOmb_Main
.GenSpr05_GenerateLeftDolphins:		dw SMW_GenSpr05_GenerateLeftDolphins_Main
.GenSpr06_GenerateRightDolphins:	dw SMW_GenSpr06_GenerateRightDolphins_Main
.GenSpr07_GenerateFish:			dw SMW_GenSpr07_GenerateFish_Main
.GenSpr08_TurnOffRespawningSprite:	dw SMW_GenSpr08_TurnOffRespawningSprite_Main
.GenSpr09_GenerateSuperKoopa:		dw SMW_GenSpr09_GenerateSuperKoopa_Main
.GenSpr0A_GenerateBubbles:		dw SMW_GenSpr0A_GenerateBubbles_Main
.GenSpr0B_GenerateBullet:		dw SMW_GenSpr0B_GenerateBullet_Main
.GenSpr0C_GenerateSurroundingBullets:	dw SMW_GenSpr0C_GenerateSurroundingBullets_Main
.GenSpr0D_GenerateDiagnalBullets:	dw SMW_GenSpr0D_GenerateDiagnalBullets_Main
.GenSpr0E_GenerateFire:			dw SMW_GenSpr0E_GenerateFire_Main
.GenSpr0F_TurnOffGenerator:		dw SMW_GenSpr0F_TurnOffGenerator_Main
base off

Return02B02A:
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessShooterSprites(Address)
namespace SMW_ProcessShooterSprites
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02B3AA
	LDX.b #!Define_SMW_MaxShooterSpriteSlot
CODE_02B38D:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_ShooterSpr_SpriteID,x
	BEQ.b CODE_02B3A7
	LDY.w !RAM_SMW_ShooterSpr_ShootTimer,x
	BEQ.b CODE_02B3A4
	PHA
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_02B3A3
	DEC.w !RAM_SMW_ShooterSpr_ShootTimer,x
CODE_02B3A3:
	PLA
CODE_02B3A4:
	JSR.w CODE_02B3AB
CODE_02B3A7:
	DEX
	BPL.b CODE_02B38D
Return02B3AA:
	RTS

CODE_02B3AB:
	DEC
	JSL.l SMW_ExecutePtr_Absolute

ShooterSprPtrs:
base $000000
.ShooterSpr01_BulletBillShooter:	dw SMW_ShooterSpr01_BulletBillShooter_Main
.ShooterSpr02_TorpedoShooter:		dw SMW_ShooterSpr02_TorpedoShooter_Main
.ShooterSpr03_Unused:			dw SMW_ShooterSpr03_Unused_Main
base off
namespace off
	%SetDuplicateOrNullPointer(SMW_ProcessShooterSprites_Return02B3AA, SMW_ShooterSpr03_Unused_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_LoadOverworldLayer1AndEvents(Address)
namespace SMW_LoadOverworldLayer1AndEvents
%InsertMacroAtXPosition(<Address>)

DATA_04DC02:
	db $11,$12,$13,$14,$15,$16,$17

Main:
	SEP.b #$30
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_MarioMap,x
	TAX
	LDA.l DATA_04DC02,x
	STA.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	LDA.b #$11
	STA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	LDA.b #$07
	STA.w !RAM_SMW_Misc_LevelModeSetting
	LDA.b #$03
	STA.b !RAM_SMW_Misc_LevelLayoutFlags
	REP.b #$10
	LDX.w #$0000
	TXA
CODE_04DC30:
	JSR.w InitializedOverworldLayer1Tilemap
	CPX.w #$01B0
	BNE.b CODE_04DC30
	REP.b #$30
	LDA.w #SMW_Map16Data_OverworldLayer1
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.w #$0000
CODE_04DC42:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Pointer_Map16Tiles,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	CPX.w #$0400
	BNE.b CODE_04DC42
	PHB
	LDA.w #$07FF
	LDX.w #DATA_0CF7DF
	LDY.w #!RAM_SMW_Blocks_Map16TableLo
	MVN !RAM_SMW_Blocks_Map16TableLo>>16,DATA_0CF7DF>>16
	PLB
	JSR.w CODE_04D7F2
	SEP.b #$30
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_LoadOverworldLayer1AndEvents(Address)
namespace SMW_LoadOverworldLayer1AndEvents
%InsertMacroAtXPosition(<Address>)

DATA_04D678:
	db $00,$C0,$C0,$C0,$30,$C0,$C0,$00				;\ LM: This table becomes unused in ROMs with edited overworlds.
	db $C0,$20,$30,$C0,$C0,$C0,$C0,$D0				;|
	db $40,$40,$40,$D0,$40,$80,$80,$00				;|
	db $00,$00,$00,$40,$00,$80,$20,$80				;|
	db $40,$40,$80,$60,$90,$00,$00,$C0				;|
	db $00,$00,$00,$C0,$40,$20,$40,$C0				;|
	db $E0,$C0,$00,$C0,$00,$00,$C0,$20				;|
	db $80,$80,$80,$80,$30,$40,$E0,$00				;|
	db $40,$E0,$E0,$D0,$70,$FF,$40,$90				;|
	db $55,$80,$80,$80,$80,$00,$C0,$C0				;|
	db $C0,$C0,$40,$00,$80,$A0,$30,$AA				;|
	db $60,$D0,$80,$00,$55,$55,$00,$00				;|
	db $AA,$55,$FF,$FF,$00,$00,$00,$00				;|
	db $00,$00,$00,$00,$00,$00,$00,$00				;|
	db $00								;/
namespace off
endmacro

macro ROUTINE_RT02_SMW_LoadOverworldLayer1AndEvents(Address)
namespace SMW_LoadOverworldLayer1AndEvents
%InsertMacroAtXPosition(<Address>)

InitializedOverworldLayer1Tilemap:
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$00),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$01),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$02),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$03),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$04),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$05),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$06),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$07),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$08),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$09),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$0A),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$0B),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$0C),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$0D),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$0E),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$0F),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$10),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$11),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$12),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$13),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$14),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$15),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$16),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$17),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$18),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$19),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$1A),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$1B),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$1C),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$1D),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$1E),x
	STA.l !RAM_SMW_Blocks_Map16TableHi+($01B0*$1F),x
	INX
	RTS

CODE_04D7F2:
	REP.b #$30
	LDA.w #$0000
	SEP.b #$20
#LM000Hijack_PlaceOverworldLevelAnywhere:
	LDA.b #!RAM_SMW_Overworld_LevelNumberOfEachTileTBL	;\ LM: Rewrites and skips over this code.
	STA.b !RAM_SMW_Misc_ScratchRAM0D			;| This is to allow you to place levels anywhere you want on the overworld.
	LDA.b #!RAM_SMW_Overworld_LevelNumberOfEachTileTBL>>8	;| In the original SMW, the overworld is divided up into chunks of 16x16 tiles ordered internally from left to right, top to bottom.
	STA.b !RAM_SMW_Misc_ScratchRAM0E			;| Within these blocks, the level numbers are arranged going from left to right, top to bottom.
	LDA.b #!RAM_SMW_Overworld_LevelNumberOfEachTileTBL>>16	;| To give an example, the top left section of the main map contains levels 001-00A. The top right section contains 00B-012. The bottom section left contains 013-01D. And the bottom right section contains 01E-024.
	STA.b !RAM_SMW_Misc_ScratchRAM0F			;|
	LDA.b #!RAM_SMW_Overworld_LevelDirectionFlags		;|
	STA.b !RAM_SMW_Misc_ScratchRAM0A			;|
	LDA.b #!RAM_SMW_Overworld_LevelDirectionFlags>>8	;|
	STA.b !RAM_SMW_Misc_ScratchRAM0B			;|
	LDA.b #!RAM_SMW_Overworld_LevelDirectionFlags>>16	;|
	STA.b !RAM_SMW_Misc_ScratchRAM0C			;|
	LDA.b #!RAM_SMW_Blocks_Map16TableLo			;|
	STA.b !RAM_SMW_Misc_ScratchRAM04			;|
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>8			;|
	STA.b !RAM_SMW_Misc_ScratchRAM05			;|
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16			;|
	STA.b !RAM_SMW_Misc_ScratchRAM06			;|
	LDY.w #$0001						;|
	STY.b !RAM_SMW_Misc_ScratchRAM00			;|
	LDY.w #$07FF						;|
	LDA.b #$00						;|
CODE_04D827:							;|
	STA.b [!RAM_SMW_Misc_ScratchRAM0A],y			;|
	STA.b [!RAM_SMW_Misc_ScratchRAM0D],y			;|
	DEY							;|
	BPL.b CODE_04D827					;|
	LDY.w #$0000						;|
	TYX							;|
CODE_04D832:							;|
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y			;|
	CMP.b #$56						;|
	BCC.b CODE_04D849					;|
	CMP.b #$81						;|
	BCS.b CODE_04D849					;|
	LDA.b !RAM_SMW_Misc_ScratchRAM00			;|
	STA.b [!RAM_SMW_Misc_ScratchRAM0D],y			;|
	TAX							;|
	LDA.l DATA_04D678,x					;|
	STA.b [!RAM_SMW_Misc_ScratchRAM0A],y			;|
	INC.b !RAM_SMW_Misc_ScratchRAM00			;|
CODE_04D849:							;|
	INY							;|
	CPY.w #$0800						;|
	BNE.b CODE_04D832					;/
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
CODE_04D851:
	JSR.w CODE_04DA49
	INC.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$6F
	BNE.b CODE_04D851
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_LoadOverworldLayer1AndEvents(Address)
namespace SMW_LoadOverworldLayer1AndEvents
%InsertMacroAtXPosition(<Address>)

CODE_04DA49:
	REP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	AND.w #$00F8
	LSR
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	AND.w #$0007
	TAX
	SEP.b #$20
	LDA.w !RAM_SMW_Overworld_EventFlags,y
	AND.l SMW_BitTable_DATA_04E44B,x
	BEQ.b Return04DAAC
	REP.b #$20
	LDA.w #!RAM_SMW_Blocks_Map16TableLo
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_ChangingLayer1OverworldTiles_Layer1TileLocation,x
	TAY
	LDX.w #$0015
	SEP.b #$20
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b [!RAM_SMW_Misc_ScratchRAM04],y
CODE_04DA83:
	CMP.l SMW_ChangingLayer1OverworldTiles_TilesThatChange,x
	BEQ.b CODE_04DA8F
	DEX
	BPL.b CODE_04DA83
	JMP.w CODE_04DA9D

CODE_04DA8F:
	LDA.l SMW_ChangingLayer1OverworldTiles_TilesToBecome,x
	STA.b [!RAM_SMW_Misc_ScratchRAM04],y
	CPX.w #$0015
	BNE.b CODE_04DA9D
	INY
	STA.b [!RAM_SMW_Misc_ScratchRAM04],y
CODE_04DA9D:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	JSR.w SMW_CheckIfDestroyTileEventIsActive_Main
	SEP.b #$10
	STZ.w !RAM_SMW_Pointer_OverworldEventProcess
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	JSR.w SMW_OverworldEventProcess07_SilentEventsAndEndOfEvent_Entry2
Return04DAAC:
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_LoadOverworldLayer1AndEvents(Address)
namespace SMW_LoadOverworldLayer1AndEvents
%InsertMacroAtXPosition(<Address>)

DATA_0CF7DF:
	incbin "overworld/layer1/levels.bin"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameModeXX_FadeInOrOut(Address)
namespace SMW_GameModeXX_FadeInOrOut
%InsertMacroAtXPosition(<Address>)

DATA_009F2F:
	db $01,$FF

DATA_009F31:
	db $F0,$10

DATA_009F33:
	db !ScreenDisplayRegister_MaxBrightness0F,!ScreenDisplayRegister_MinBrightness00

UNK_009F35:
	db $00,$F0

MosaicFade:
	DEC.w !RAM_SMW_Timer_KeepGameModeActive
	BPL.b Return009F6E
	JSR.w SMW_SetKeepGameModeActiveTimer_OneFrame
	LDY.w !RAM_SMW_Misc_MosaicDirection
	LDA.w !RAM_SMW_Mirror_MosaicSizeAndBGEnable
	CLC
	ADC.w DATA_009F31,y
	STA.w !RAM_SMW_Mirror_MosaicSizeAndBGEnable
CODE_009F4C:
	LDA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	CLC
	ADC.w DATA_009F2F,y
	STA.w !RAM_SMW_Mirror_ScreenDisplayRegister
	CMP.w DATA_009F33,y
	BNE.b CODE_009F66
GMMosaic:
	INC.w !RAM_SMW_Misc_GameMode
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDA.w !RAM_SMW_Misc_GameMode
	CMP.b #!Define_SMW_GameMode03_LoadTitleScreenSublevel
	BNE.b +
	LDA.l !SRAM_SMAS_Global_RunningDemoFlag
	BEQ.b +
	JML.l SMAS_ResetToSMASTitleScreen_Main
+:
elseif !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
	LDA.l !SRAM_SMAS_Global_RunningDemoFlag
	BEQ.b +
	LDA.w !RAM_SMW_Misc_GameMode
	CMP.b #!Define_SMW_GameMode03_LoadTitleScreenSublevel
	BNE.b +
	JML.l SMAS_CopyOfResetToSMASTitleScreen_Main
+:
endif
	LDA.w !RAM_SMW_Misc_MosaicDirection
	EOR.b #$01
	STA.w !RAM_SMW_Misc_MosaicDirection
CODE_009F66:
	LDA.b #!MosaicSizeAndBGEnable_Layer1|!MosaicSizeAndBGEnable_Layer2
	ORA.w !RAM_SMW_Mirror_MosaicSizeAndBGEnable
	STA.w !REGISTER_MosaicSizeAndBGEnable
Return009F6E:
	RTS

Main:
	DEC.w !RAM_SMW_Timer_KeepGameModeActive
	BPL.b Return009F6E
	JSR.w SMW_SetKeepGameModeActiveTimer_OneFrame
CODE_009F77:
	LDY.w !RAM_SMW_Misc_MosaicDirection
	BRA.b CODE_009F4C
namespace off
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_MosaicFade, SMW_GameMode0F_MosaicFadeOutToLevel_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_MosaicFade, SMW_GameMode13_MosaicFadeInToLevel_Main)

	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode02_FadeOutToTitleScreen_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode05_FadeInToTitleScreen_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode0B_FadeOutToOverworld_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode0D_FadeInToOverworld_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode15_FadeOutToDeathMessage_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode18_FadeOutToCutscene_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode1A_FadeOutToCredits_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode1C_FadeOutToYoshisHouse_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode1E_FadeInToYoshisHouse_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode20_FadeOutToEnemyRollcallDelay_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode22_FadeOutToEnemyRollcall_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode24_FadeInToEnemyRollcall_Main)
	%SetDuplicateOrNullPointer(SMW_GameModeXX_FadeInOrOut_Main, SMW_GameMode26_FadeOutToTheEnd_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode28_ShowTheEnd(Address)
namespace SMW_GameMode28_ShowTheEnd
%InsertMacroAtXPosition(<Address>)

Main:
	DEC.w !RAM_SMW_Timer_KeepGameModeActive
	BPL.b SMW_GameModeXX_FadeInOrOut_Return009F6E
	LDA.b #$08
	JSR.w SMW_SetKeepGameModeActiveTimer_VariableFrames
	BRA.b SMW_GameModeXX_FadeInOrOut_CODE_009F77
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode06_CircleEffect(Address)
namespace SMW_GameMode06_CircleEffect
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckWhichControllersArePluggedIn_Main
	JSR.w SMW_GameMode07_TitleScreenDemo_CODE_009CBE
	BEQ.b CODE_00942E
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDA.l !SRAM_SMAS_Global_RunningDemoFlag
	BNE.b CODE_3093EF
	LDA.w !RAM_SMW_IO_ControllerHold2CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP1
	ORA.w !RAM_SMW_IO_ControllerHold2CopyP2
	ORA.w !RAM_SMW_IO_ControllerHold1CopyP2
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b CODE_3093F3

CODE_3093EF:
	JML.l SMAS_ResetToSMASTitleScreen_Main

CODE_3093F3:
endif
	LDA.b #$EC
	JSR.w CODE_009440
	INC.w !RAM_SMW_Misc_GameMode
	JMP.w SMW_GameMode07_TitleScreenDemo_InitializeFileSelect

CODE_00942E:
	DEC.w !RAM_SMW_Timer_TitleScreenInputTimer
	BNE.b SMW_GameMode01_ShowNintendoPresents_Return00941A
	INC.w !RAM_SMW_Timer_TitleScreenInputTimer
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	CLC
	ADC.b #$04
	CMP.b #$F0
	BCS.b SMW_GameMode01_ShowNintendoPresents_CODE_009417
CODE_009440:
	STA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
CODE_009443:
	JSR.w SMW_UpdateHDMAWindowBuffer_SetCircleHDMAPointer
	LDA.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM00
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$78
else
	LDA.b #$70
endif
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JMP.w SMW_UpdateHDMAWindowBuffer_TitleScreenEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GameMode01_ShowNintendoPresents(Address)
namespace SMW_GameMode01_ShowNintendoPresents
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	JSR.w SMW_GraphicsDecompressionRoutines_DecompressGFX32And33
	JSL.l SMAS_CheckWhichControllersArePluggedIn_Main
	INC.w !RAM_SMW_Misc_GameMode
else
	DEC.w !RAM_SMW_Timer_DisplayNintendoPresents
	BNE.b Return00941A
	JSR.w SMW_GraphicsDecompressionRoutines_DecompressGFX32And33
endif
CODE_009417:
	INC.w !RAM_SMW_Misc_GameMode
Return00941A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetStandardPPUSettings(Address)
namespace SMW_SetStandardPPUSettings
%InsertMacroAtXPosition(<Address>)

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #!InitialScreenSettings_EnableOverscanFlag
	STA.w !REGISTER_InitialScreenSettings
else
	STZ.w !REGISTER_InitialScreenSettings
endif
	STZ.w !REGISTER_MosaicSizeAndBGEnable			; Note: !MosaicSizeAndBGEnable_PixelSize1x1
	LDA.b #!Define_SMW_Layer1TilemapSize|(!Define_SMW_Layer1TilemapVRAMLocation<<2)
	STA.w !REGISTER_BG1AddressAndSize
	LDA.b #!Define_SMW_Layer2TilemapSize|(!Define_SMW_Layer2TilemapVRAMLocation<<2)
	STA.w !REGISTER_BG2AddressAndSize
	LDA.b #!Define_SMW_Layer3TilemapSize|(!Define_SMW_Layer3TilemapVRAMLocation<<2)
	STA.w !REGISTER_BG3AddressAndSize
	LDA.b #!Define_SMW_Layer1GFXVRAMLocation|(!Define_SMW_Layer2GFXVRAMLocation<<4)
	STA.w !REGISTER_BG1And2TileDataDesignation
	LDA.b #!Define_SMW_Layer3GFXVRAMLocation|(!Define_SMW_Layer4GFXVRAMLocation<<4)
	STA.w !REGISTER_BG3And4TileDataDesignation
	STZ.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	STZ.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	STZ.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	STZ.w !REGISTER_BGWindowLogicSettings
	STZ.w !REGISTER_ColorAndObjectWindowLogicSettings
	STZ.w !REGISTER_MainScreenWindowMask
	STZ.w !REGISTER_SubScreenWindowMask
	LDA.b #$02
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	LDA.b #$80
	STA.w !REGISTER_Mode7TilemapSettings
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ManipulateMode7Image(Address)
namespace SMW_ManipulateMode7Image
%InsertMacroAtXPosition(<Address>)

DATA_008AB4:
	dw $0000,$00FE,$0000,$00FE

DATA_008ABC:
	dw $0000,$0002,$0000,$0002

UNK_008AC4:
	db $00,$00,$00,$01,$FF,$FF,$00,$10
	db $F0

Main:
	LDA.b !RAM_SMW_Misc_M7AngleHi
	STA.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$30
	JSR.w CODE_008AE8
	LDA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$30
	LDA.b !RAM_SMW_Mirror_M7MatrixALo
	STA.b !RAM_SMW_Mirror_M7MatrixDLo
	LDA.b !RAM_SMW_Mirror_M7MatrixBLo
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Mirror_M7MatrixCLo
CODE_008AE8:
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ASL
	PHA
	XBA
	AND.w #$0003
	ASL
	TAY
	PLA
	AND.w #$00FE
	EOR.w DATA_008AB4,y
	CLC
	ADC.w DATA_008ABC,y
	TAX
	JSR.w CODE_008B2B
	CPY.w #$0004
	BCC.b CODE_008B0A
	EOR.w #$FFFF
	INC
CODE_008B0A:
	STA.b !RAM_SMW_Mirror_M7MatrixBLo
	TXA
	EOR.w #$00FE
	CLC
	ADC.w #$0002
	AND.w #$01FF
	TAX
	JSR.w CODE_008B2B
	DEY
	DEY
	CPY.w #$0004
	BCS.b CODE_008B26
	EOR.w #$FFFF
	INC
CODE_008B26:
	STA.b !RAM_SMW_Mirror_M7MatrixALo
	SEP.b #$30
	RTS

CODE_008B2B:
	SEP.b #$20
	LDA.w DATA_008B57+$01,x
	BEQ.b CODE_008B34
	LDA.b !RAM_SMW_Misc_ScratchRAM00
CODE_008B34:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w DATA_008B57,x
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	XBA
	LDA.w !REGISTER_ProductOrRemainderLo
	REP.b #$20
	LSR
	LSR
	LSR
	LSR
	LSR
	RTS

DATA_008B57:
	dw $0000,$0003,$0006,$0009,$000C,$000F,$0012,$0015
	dw $0019,$001C,$001F,$0022,$0025,$0028,$002B,$002E
	dw $0031,$0035,$0038,$003B,$003E,$0041,$0044,$0047
	dw $004A,$004D,$0050,$0053,$0056,$0059,$005C,$005F
	dw $0061,$0064,$0067,$006A,$006D,$0070,$0073,$0075
	dw $0078,$007B,$007E,$0080,$0083,$0086,$0088,$008B
	dw $008E,$0090,$0093,$0095,$0098,$009B,$009D,$009F
	dw $00A2,$00A4,$00A7,$00A9,$00AB,$00AE,$00B0,$00B2
	dw $00B5,$00B7,$00B9,$00BB,$00BD,$00BF,$00C1,$00C3
	dw $00C5,$00C7,$00C9,$00CB,$00CD,$00CF,$00D1,$00D3
	dw $00D4,$00D6,$00D8,$00D9,$00DB,$00DD,$00DE,$00E0
	dw $00E1,$00E3,$00E4,$00E6,$00E7,$00E8,$00EA,$00EB
	dw $00EC,$00ED,$00EE,$00EF,$00F1,$00F2,$00F3,$00F4
	dw $00F4,$00F5,$00F6,$00F7,$00F8,$00F9,$00F9,$00FA
	dw $00FB,$00FB,$00FC,$00FC,$00FD,$00FD,$00FE,$00FE
	dw $00FE,$00FF,$00FF,$00FF,$00FF,$00FF,$00FF,$00FF
	dw $0100,$3CB7,$BCB7,$3CB8,$3CB9,$3CBA,$3CBB,$3CBA
	dw $BCBA,$3CBC,$3CBD,$3CBE,$3CBF,$3CC0,$BCB7,$3CC1
	dw $3CB9,$3CC2,$BCC2,$3CB7,$FCC0
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetVisibleLayers(Address)
namespace SMW_SetVisibleLayers
%InsertMacroAtXPosition(<Address>)

Main:
	STA.w !REGISTER_ColorMathSelectAndEnable
	STA.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	STX.w !REGISTER_MainScreenLayers
	STY.w !REGISTER_SubScreenLayers
	STZ.w !REGISTER_MainScreenWindowMask
	STZ.w !REGISTER_SubScreenWindowMask
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerState07_ShootOutOfPipe(Address)
namespace SMW_PlayerState07_ShootOutOfPipe
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_DamagePlayer_DisableButtons
	LDA.b #$02
	STA.w !RAM_SMW_Player_CurrentLayerPriority
	LDA.b #$0C
	STA.b !RAM_SMW_Player_InAirFlag
	JSR.w SMW_PlayerState00_Normal_CODE_00CD8B
	DEC.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	BNE.b CODE_00D29D
	JMP.w SMW_PlayerStateXX_EnterPipe_CODE_00D26A

CODE_00D29D:
	LDA.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	CMP.b #$18
	BCC.b CODE_00D2AA
	BNE.b CODE_00D2B2
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
CODE_00D2AA:
	STZ.w !RAM_SMW_Player_CurrentLayerPriority
	STZ.w !RAM_SMW_Yoshi_InPipe
	STZ.b !RAM_SMW_Flag_SpritesLocked
CODE_00D2B2:
#LM300Hijack_ShootingDirectionOnLevelLoad:
	LDA.b #$40
	STA.b !RAM_SMW_Player_XSpeed
	LDA.b #$C0
	STA.b !RAM_SMW_Player_YSpeed
	JMP.w SMW_UpdatePlayerSpritePosition_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprStatus09_Stunned(Address)
namespace SMW_NorSprStatus09_Stunned
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x				;\
	CMP.b #!Define_SMW_SpriteID_NorSpr02C_YoshiEgg			;| Todo: Is this !RAM_SMW_NorSpr_Table7E00C2 ever non-zero?
	BNE.b CODE_019554						;| If not, then this code is useless.
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x				;|
	BEQ.b CODE_01956A						;/
BulletBillEntry:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	RTS

CODE_019554:
	CMP.b #!Define_SMW_SpriteID_NorSpr02F_PortableSpringboard
	BEQ.b SetNormalStatus2
	CMP.b #!Define_SMW_SpriteID_NorSpr085_Unused
	BEQ.b SetNormalStatus2
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b CODE_01956A
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
SetNormalStatus2:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	JMP.w SMW_ProcessStunnedNormalSprite_Main

CODE_01956A:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_019571
	JMP.w CODE_0195F5

CODE_019571:
	JSR.w CODE_019624
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_019598
	JSR.w SMW_MakeStunnedSpriteBounceOrSlowDownOnGround_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr016_VerticalCheepCheep
	BEQ.b ADDR_019589
	CMP.b #!Define_SMW_SpriteID_NorSpr015_HorizontalCheepCheep
	BNE.b CODE_01958C
ADDR_019589:
	JMP.w SetNormalStatus2

CODE_01958C:
	CMP.b #!Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	BNE.b CODE_019598
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_PrepareToHatchNormalSpriteYoshiEgg_Entry2
CODE_019598:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_0195DB
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BNE.b CODE_0195DB
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$F0
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$20
	ASL
	ASL
	ASL
	ROL
	AND.b #$01
	STA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	LDY.b #$00
	LDA.w !RAM_SMW_Blocks_CopyOfCurrentlyProcessedMap16TileLo1
	JSL.l SMW_CheckIfBlockWasHit_Main
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
CODE_0195DB:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_0195F2
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BCC.b CODE_0195E9
	JSR.w SMW_MakeNormalSpriteReboundOffWall_Main
CODE_0195E9:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	ASL
	PHP
	ROR.b !RAM_SMW_NorSpr_XSpeed,x
	PLP
	ROR.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0195F2:
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
CODE_0195F5:
	JSR.w SMW_ProcessStunnedNormalSprite_Main
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	RTS

UNK_0195FC:
	db $00,$00,$00,$00,$04,$05,$06,$07
	db $00,$00,$00,$00,$04,$05,$06,$07
	db $00,$00,$00,$00,$04,$05,$06,$07
	db $00,$00,$00,$00,$04,$05,$06,$07

SpriteKoopasSpawn:
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr001_RedNakedKoopa
	db !Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	db !Define_SMW_SpriteID_NorSpr003_YellowNakedKoopa

CODE_019624:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BNE.b CODE_01965C
	LDA.w !RAM_SMW_NorSpr00D_BobOmb_WaitBeforeExplosion,x
	CMP.b #$01
	BNE.b CODE_01964E
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr00D_BobOmb_IsExploding,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	AND.b #!Define_SMW_NorSpr_1686Prop_DisableSpriteClipping^$FF
	STA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	RTS

CODE_01964E:
	CMP.b #$40
	BCS.b Return01965B
	ASL
	AND.b #$0E
	EOR.w !RAM_SMW_NorSpr_Table7E15F6,x
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
Return01965B:
	RTS

CODE_01965C:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	STA.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BEQ.b CODE_01969C
	CMP.b #$01
	BNE.b CODE_01969C
	LDY.w !RAM_SMW_NorSpr_Table7E1594,x
	LDA.w !RAM_SMW_NorSpr_OnYoshisTongue,y
	BNE.b CODE_01969C
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	ASL.w !RAM_SMW_NorSpr_Table7E15F6,x
	LSR.w !RAM_SMW_NorSpr_Table7E15F6,x
	LDY.w !RAM_SMW_NorSpr_Table7E160E,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	CPY.b #$03
	BNE.b CODE_019698
	INC.w !RAM_SMW_NorSpr_Table7E187B,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits166E,x
	ORA.b #!Define_SMW_NorSpr_166EProp_ImmuneToFire|!Define_SMW_NorSpr_166EProp_ImmuneToCape
	STA.w !RAM_SMW_NorSpr_PropertyBits166E,x
	LDA.b #!Define_SMW_NorSprStatus0A_Kicked
CODE_019698:
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
Return01969B:
	RTS

CODE_01969C:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BEQ.b Return01969B
	CMP.b #$03
	BEQ.b UnstunSprite
	CMP.b #$01
	BNE.b IncrmntStunTimer
UnstunSprite:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr011_BuzzyBeetle
	BEQ.b SetNormalStatus
	CMP.b #!Define_SMW_SpriteID_NorSpr02E_SpikeTop
	BEQ.b SetNormalStatus
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BEQ.b Return0196CA
	CMP.b #!Define_SMW_SpriteID_NorSpr0A2_MechaKoopa
	BEQ.b SetNormalStatus
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BEQ.b SetNormalStatus
	CMP.b #!Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	BEQ.b Return0196CA
	CMP.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	BNE.b GeneralResetSpr
	JSR.w SMW_NorSprStatus02_Dead_SetNorSprStatus04_Main
Return0196CA:
	RTS

SetNormalStatus:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	ASL.w !RAM_SMW_NorSpr_Table7E15F6,x
	LSR.w !RAM_SMW_NorSpr_Table7E15F6,x
	RTS

IncrmntStunTimer:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b Return0196E0
	INC.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
Return0196E0:
	RTS

GeneralResetSpr:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return0196CA
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	TAX
	LDA.w SpriteKoopasSpawn,x
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_Table7E157C,y
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,y
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	STA.w !RAM_SMW_NorSpr_InLiquidFlag,y
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	CMP.b #$01
	BEQ.b CODE_019747
	LDA.b #$D0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	PHY
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	EOR.b #$01
	PLY
	STA.w !RAM_SMW_NorSpr_Table7E157C,y
	PHX
	TAX
	LDA.w SMW_NorSprXXX_GenericEnemies_Status08_Spr0to13SpeedX,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	PLX
	RTS

CODE_019747:
	PHY
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w DATA_0197AD,y
	STY.b !RAM_SMW_Misc_ScratchRAM00
	PLY
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E157C,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,y
	STA.w !RAM_SMW_NorSpr_Table7E1528,y
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr007_YellowKoopa
	BNE.b Return019775
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$03
CODE_01976D:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b SpawnMovingCoin
	DEY
	BPL.b CODE_01976D
Return019775:
	RTS

SpawnMovingCoin:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	LDA.b #$D0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_FacingDirection,y
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,y
	RTS

DATA_0197AD:
	db $C0,$40
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GivePlayerStarPower(Address)
namespace SMW_GivePlayerStarPower
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_StarPower
	LDA.b #!Define_SMW_LevelMusic_HaveStar
	STA.w !RAM_SMW_IO_MusicCh1
	ASL.w !RAM_SMW_Misc_MusicRegisterBackup
	SEC
	ROR.w !RAM_SMW_Misc_MusicRegisterBackup
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerState08_WarpToYoshiWingsBonus(Address)
namespace SMW_PlayerState08_WarpToYoshiWingsBonus
%InsertMacroAtXPosition(<Address>)

DATA_00C7F9:
	dw $FFC0,$00A0

Main:
	JSR.w SMW_DamagePlayer_DisableButtons
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	JSR.w SMW_HandlePlayerPhysics_InAir
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00C80F
	CMP.b #$90
	BCC.b CODE_00C814
CODE_00C80F:
	SEC
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	SBC.b #$0F
else
	SBC.b #$0D
endif
	STA.b !RAM_SMW_Player_YSpeed
CODE_00C814:
	LDA.b #$02
	LDY.b !RAM_SMW_Player_XSpeed
	BEQ.b CODE_00C827
	BMI.b CODE_00C81E
	LDA.b #$FE
CODE_00C81E:
	CLC
	ADC.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_Player_XSpeed
	BVC.b CODE_00C827
	STZ.b !RAM_SMW_Player_XSpeed
CODE_00C827:
	JSR.w SMW_UpdatePlayerSpritePosition_Main
	REP.b #$20
	LDY.w !RAM_SMW_InYoshiWingsBonusArea
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CMP.w DATA_00C7F9,y
	SEP.b #$20
	BPL.b CODE_00C845
	STZ.b !RAM_SMW_Player_CurrentState
	TYA
	BNE.b CODE_00C845
	INY
	INY
	STY.w !RAM_SMW_InYoshiWingsBonusArea
	JSR.w SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel_Main
CODE_00C845:
	JMP.w SMW_PlayerState00_Normal_CODE_00CD8F
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerState0A_NoYoshiCutscene(Address)
namespace SMW_PlayerState0A_NoYoshiCutscene
%InsertMacroAtXPosition(<Address>)

DATA_00C848:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $01,$4C,$00,$30,$08,$30,$00,$20
	db $40,$01,$00,$30,$01,$80,$FF,$01
	db $2C,$00,$30,$20,$01,$80,$06,$00
	db $3A,$01,$30,$00,$30,$08,$30,$00
	db $20,$40,$01,$00,$30,$01,$80,$FF
else
	db $01,$5F,$00,$30,$08,$30,$00,$20
	db $40,$01,$00,$30,$01,$80,$FF,$01
	db $3F,$00,$30,$20,$01,$80,$06,$00
	db $3A,$01,$38,$00,$30,$08,$30,$00
	db $20,$40,$01,$00,$30,$01,$80,$FF
endif

Main:
	STZ.w !RAM_SMW_Player_SpinjumpFireballTimer
	LDX.w !RAM_SMW_Misc_LevelTilesetSetting
	BIT.w SMW_InitializeLevelRAM_DATA_00A625,x
	BMI.b CastleCutscene
	BVS.b MushroomCutscene
	JSL.l SMW_DrawGhostHouseEntranceDoor_Main
	BRA.b CODE_00C88D

MushroomCutscene:
	JSL.l SMW_DrawNoYoshiSign_Main
	BRA.b CODE_00C88D

CastleCutscene:
	JSL.l SMW_DrawBigCastleGate_Main
CODE_00C88D:
	LDX.b !RAM_SMW_Player_CutsceneInputTimer1
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
	JSR.w SMW_DamagePlayer_DisableButtons
	BMI.b CODE_00C8FB
	STZ.w !RAM_SMW_Player_OverrideWalkingFrames
	DEC.b !RAM_SMW_Player_CutsceneInputTimer2
	BNE.b CODE_00C8A8
	INX
	INX
	STX.b !RAM_SMW_Player_CutsceneInputTimer1
	LDA.w DATA_00C848-$01,x
	STA.b !RAM_SMW_Player_CutsceneInputTimer2
CODE_00C8A8:
	LDA.w DATA_00C848-$02,x
	CMP.b #$FF
	BEQ.b CODE_00C8FB
	AND.b #(!Joypad_DPadR>>8)|(!Joypad_DPadL>>8)|(!Joypad_DPadD>>8)|(!Joypad_DPadU>>8)|(!Joypad_Start>>8)|(!Joypad_X)|(!Joypad_Y>>8)|!Joypad_A|(!Joypad_B>>8)
	STA.b !RAM_SMW_IO_ControllerHold1
	CMP.w DATA_00C848-$02,x
	BEQ.b CODE_00C8BC
	LDY.b #!Joypad_A
	STY.b !RAM_SMW_IO_ControllerPress2
CODE_00C8BC:
	ASL
	BPL.b CODE_00C8D1
	JSR.w SMW_DamagePlayer_DisableButtons
	LDY.b #$B0
	LDX.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	BIT.w SMW_InitializeLevelRAM_DATA_00A625,x
	BMI.b CODE_00C8CE
	LDY.b #$7F
CODE_00C8CE:
	STY.w !RAM_SMW_Timer_NoYoshiIntroDoorTimer
CODE_00C8D1:
	JSR.w SMW_UpdatePlayerSpritePosition_Main
	LDA.b #$24
	STA.b !RAM_SMW_Player_InAirFlag
	LDA.b #$6F
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00C8E1
	LDA.b #$5F
CODE_00C8E1:
	LDX.w !RAM_SMW_Misc_OverworldAndCutsceneGFXToLoad
	BIT.w SMW_InitializeLevelRAM_DATA_00A625,x
	BVC.b CODE_00C8EC
	SEC
	SBC.b #$10
CODE_00C8EC:
	CMP.b !RAM_SMW_Player_YPosLo
	BCS.b CODE_00C8F8
	INC
	STA.b !RAM_SMW_Player_YPosLo
	STZ.b !RAM_SMW_Player_InAirFlag
	STZ.w !RAM_SMW_Player_SpinJumpFlag
CODE_00C8F8:
	JMP.w SMW_PlayerState00_Normal_CODE_00CD82

CODE_00C8FB:
	INC.w !RAM_SMW_Flag_ShowPlayerStart
	LDA.b #!Define_SMW_GameMode0F_MosaicFadeOutToLevel
	STA.w !RAM_SMW_Misc_GameMode
	CPX.b #$11
	BCC.b CODE_00C90A
	INC.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
CODE_00C90A:
	LDA.b #$01
	STA.w !RAM_SMW_Flag_PreventYoshiCarryOver
	LDA.b #!Define_SMW_Sound1DFA_TurnOffYoshiDrum
	STA.w !RAM_SMW_IO_SoundCh2
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_DrawBigCastleGate(Address)
namespace SMW_DrawBigCastleGate
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_DrawBigCastleGate(Address)
namespace SMW_DrawBigCastleGate
%InsertMacroAtXPosition(<Address>)

Sub:
	LDA.w !RAM_SMW_Timer_NoYoshiIntroDoorTimer
	BEQ.b CODE_02F676
	DEC.w !RAM_SMW_Timer_NoYoshiIntroDoorTimer
CODE_02F676:
	CMP.b #$B0
	BNE.b CODE_02F67F
	LDY.b #!Define_SMW_Sound1DFC_Door1
	STY.w !RAM_SMW_IO_SoundCh3
CODE_02F67F:
	CMP.b #$01
	BNE.b CODE_02F688
	LDY.b #!Define_SMW_Sound1DFC_Door2
	STY.w !RAM_SMW_IO_SoundCh3
CODE_02F688:
	CMP.b #$30
	BCC.b CODE_02F69A
	CMP.b #$81
	BCC.b CODE_02F698
	CLC
	ADC.b #$4F
	EOR.b #$FF
	INC
	BRA.b CODE_02F69A

CODE_02F698:
	LDA.b #$30
CODE_02F69A:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w DrawBigCastleGate
	RTS

XDisp:
	db $00,$10,$20,$00,$10,$20,$00,$10
	db $20,$00,$10,$20

YDisp:
	db $00,$00,$00,$10,$10,$10,$20,$20
	db $20,$30,$30,$30

DrawBigCastleGate:
	LDX.b #$0B
	LDY.b #$B0
CODE_02F6BC:
	LDA.b #$B8
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b #$50
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l YDisp,x
else
	ADC.w YDisp,x
endif
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$A5
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$21
	STA.w SMW_OAMBuffer[$00].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02F6BC
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_DrawNoYoshiSign(Address)
namespace SMW_DrawNoYoshiSign
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_DrawNoYoshiSign(Address)
namespace SMW_DrawNoYoshiSign
%InsertMacroAtXPosition(<Address>)

XDisp:
	db $F8,$08,$F8,$08,$00,$00,$00,$00


YDisp:
	db $00,$00,$10,$10,$20,$30,$40,$08


Tiles:
	db $C7,$A7,$A7,$C7,$A9,$C9,$C9,$E0


Prop:
	db $A9,$69,$A9,$69,$29,$29,$29,$6B

Sub:
	LDX.b #$07
	LDY.b #$B0
ADDR_02F63D:
	LDA.b #$C0
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b #$70
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l YDisp,x
else
	ADC.w YDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b ADDR_02F63D
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_DrawGhostHouseEntranceDoor(Address)
namespace SMW_DrawGhostHouseEntranceDoor
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_DrawGhostHouseEntranceDoor(Address)
namespace SMW_DrawGhostHouseEntranceDoor
%InsertMacroAtXPosition(<Address>)

XDisp:
	db $00,$00,$00,$00,$10,$10,$10,$10
	db $00,$00,$00,$00,$10,$10,$10,$10
	db $00,$00,$00,$00,$10,$10,$10,$10
	db $F2,$F2,$F2,$F2,$1E,$1E,$1E,$1E


YDisp:
	db $00,$08,$18,$20,$00,$08,$18,$20


Prop:
	db $7D,$7D,$FD,$FD,$3D,$3D,$BD,$BD


Tiles:
	db $A0,$B0,$B0,$A0,$A0,$B0,$B0,$A0
	db $A3,$B3,$B3,$A3,$A3,$B3,$B3,$A3
	db $A2,$B2,$B2,$A2,$A2,$B2,$B2,$A2
	db $A3,$B3,$B3,$A3,$A3,$B3,$B3,$A3


OAMIndexes:
	db $40,$44,$48,$4C,$F0,$F4,$F8,$FC


AnimationFrame:
	db $00,$01,$02,$03,$03,$03,$03,$03
	db $03,$03,$03,$03,$03,$02,$01,$00

Sub:
	LDA.w !RAM_SMW_Timer_NoYoshiIntroDoorTimer
	BEQ.b CODE_02F761
	DEC.w !RAM_SMW_Timer_NoYoshiIntroDoorTimer
CODE_02F761:
	CMP.b #$76
	BNE.b CODE_02F76A
	LDY.b #!Define_SMW_Sound1DFC_Door1
	STY.w !RAM_SMW_IO_SoundCh3
CODE_02F76A:
	CMP.b #$08
	BNE.b CODE_02F773
	LDY.b #!Define_SMW_Sound1DFC_Door2
	STY.w !RAM_SMW_IO_SoundCh3
CODE_02F773:
	LSR
	LSR
	LSR
	TAY
	LDA.w AnimationFrame,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b #$07
	LDA.b #$B8
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$60
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01

CODE_02F78C:
	STX.b !RAM_SMW_Misc_ScratchRAM02
	LDY.w OAMIndexes,x
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	ASL
	ASL
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	TYA
	BMI.b CODE_02F7D0
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l YDisp,x
else
	ADC.w YDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$03
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	BCC.b CODE_02F7C2
	EOR.b #$40
CODE_02F7C2:
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	BRA.b CODE_02F801

CODE_02F7D0:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$00].XDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l YDisp,x
else
	ADC.w YDisp,x
endif
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$03
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	BCC.b CODE_02F7F5
	EOR.b #$40
CODE_02F7F5:
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
CODE_02F801:
	DEX
	BMI.b Return02F807
	JMP.w CODE_02F78C

Return02F807:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeLevelRAM(Address)
namespace SMW_InitializeLevelRAM
%InsertMacroAtXPosition(<Address>)

DATA_00A60D:
	db $00,$01,$01,$01

DATA_00A611:
	dw $000D,$FFF3,$FFFE,$FFFE

DATA_00A619:
	dw $0000,$0000,$000A,$0000

DATA_00A621:
	db $1A,$1A,$0A,$0A

DATA_00A625:
	db $00,$80,$40,$00,$01,$02,$40,$00
	db $40,$00,$00,$00,$00,$02,$00,$00

Main:
	LDA.w !RAM_SMW_Timer_BluePSwitch
	ORA.w !RAM_SMW_Timer_SilverPSwitch
	ORA.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
	BNE.b CODE_00A64A
	LDA.w !RAM_SMW_Timer_StarPower
	BEQ.b CODE_00A660
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	BPL.b CODE_00A64F
CODE_00A64A:
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	AND.b #$7F
CODE_00A64F:
	ORA.b #$40
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
	STZ.w !RAM_SMW_Timer_BluePSwitch
	STZ.w !RAM_SMW_Timer_SilverPSwitch
	STZ.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
	STZ.w !RAM_SMW_Timer_StarPower
CODE_00A660:
	LDA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow1
	ORA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow2
	ORA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow3
	ORA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow4
	ORA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow5
	BEQ.b CODE_00A674
	STA.w !RAM_SMW_Flag_PreventCoinBonusGameReplay
CODE_00A674:
	LDX.b #$23
CODE_00A676:
	STZ.b !RAM_SMW_Player_CurrentState-$01,x
	DEX
	BNE.b CODE_00A676
	LDX.b #$37
CODE_00A67D:
	STZ.w !RAM_SMW_Player_SubXPos-$01,x
	DEX
	BNE.b CODE_00A67D
	ASL.w !RAM_SMW_UnusedRAM_GotInvincibleStarFromGoal		; Optimization: Unused RAM
	STZ.w !RAM_SMW_Timer_DisplayPlayerKickingPose
	STZ.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	STZ.w !RAM_SMW_Timer_LevelEndFade
	STZ.w !RAM_SMW_Yoshi_InPipe
	LDY.b #$01
	LDX.w !RAM_SMW_Misc_LevelTilesetSetting
	CPX.b #$10
	BCS.b CODE_00A6CC
	LDA.w DATA_00A625,x
	LSR
	BEQ.b CODE_00A6CC
	LDA.w !RAM_SMW_Flag_ShowPlayerStart
	ORA.w !RAM_SMW_Counter_SublevelsEntered
	ORA.w !RAM_SMW_Flag_DisableNoYoshiIntro
	BNE.b CODE_00A6CC
	LDA.w !RAM_SMW_Flag_OverrideNoYoshiIntroForMidwayEntrance
	BEQ.b CODE_00A6B6
	JSR.w SMW_PlayerState0A_NoYoshiCutscene_CODE_00C90A
	BRA.b CODE_00A6CC

CODE_00A6B6:
	STZ.b !RAM_SMW_Player_InAirFlag
#LM000Hijack_ClearSublevelNumber:
	STY.b !RAM_SMW_Player_FacingDirection
	STY.b !RAM_SMW_Player_PipeAction
	LDX.b #!Define_SMW_PlayerState0A_NoYoshiCutscene
	LDY.b #$00
	LDA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	BEQ.b CODE_00A6C7
	LDY.b #$0F
CODE_00A6C7:
	STX.b !RAM_SMW_Player_CurrentState
	STY.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	RTS

CODE_00A6CC:
#LM000Hijack_JSLTo05DD00:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo			;\ LM: Inserts a JSL.l SMW_$05DD00 here.
	CMP.b #$C0							;/
	BEQ.b CODE_00A6D5
	INC.w !RAM_SMW_Flag_EnableVerticalScroll
CODE_00A6D5:
	LDA.w !RAM_SMW_Misc_LevelHeaderEntranceSettings
	BEQ.b CODE_00A6E0
	CMP.b #$05
	BNE.b CODE_00A716
	ROR.b !RAM_SMW_Flag_IceLevel
CODE_00A6E0:
	STY.b !RAM_SMW_Player_FacingDirection
	LDA.b #$24
	STA.b !RAM_SMW_Player_InAirFlag
	STZ.b !RAM_SMW_Flag_SpritesLocked
	LDA.w !RAM_SMW_Timer_EndLevelViaKeyhole				;\ Todo: What exactly is this code for?
	BEQ.b CODE_00A704						;| Does !RAM_SMW_Timer_EndLevelViaKeyhole have an extra function or is this leftover code?
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup				;|
	ORA.b #$7F							;|
	STA.w !RAM_SMW_Misc_MusicRegisterBackup				;|
	LDA.b !RAM_SMW_Player_XPosLo					;|
	ORA.b #$04							;|
	STA.w !RAM_SMW_NorSpr00E_Keyhole_XPosLo				;|
	LDA.b !RAM_SMW_Player_YPosLo					;|
	CLC								;|
	ADC.b #$10							;|
	STA.w !RAM_SMW_NorSpr00E_Keyhole_YPosLo				;|
CODE_00A704:								;/
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BEQ.b Return00A715
	LDA.b #!Define_SMW_PlayerState08_WarpToYoshiWingsBonus
	STA.b !RAM_SMW_Player_CurrentState
	LDA.b #$A0
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b #$90
	STA.b !RAM_SMW_Player_YSpeed
Return00A715:
	RTS

CODE_00A716:
	CMP.b #$06
	BCC.b CODE_00A740
	BNE.b CODE_00A734
	STY.b !RAM_SMW_Player_FacingDirection
	STY.w !RAM_SMW_Player_CapeImage
	LDA.b #$FF
	STA.w !RAM_SMW_Yoshi_InPipe
	LDA.b #$08
	TSB.b !RAM_SMW_Player_XPosLo
	LDA.b #$02
	TSB.b !RAM_SMW_Player_YPosLo
	LDX.b #!Define_SMW_PlayerState07_ShootOutOfPipe
	LDY.b #$20
	BRA.b CODE_00A6C7

CODE_00A734:
	STY.b !RAM_SMW_Flag_UnderwaterLevel
	LDA.w !RAM_SMW_Flag_OverrideNoYoshiIntroForMidwayEntrance
	ORA.w !RAM_SMW_Timer_EndLevelViaKeyhole
	BNE.b CODE_00A6E0
	LDA.b #$04
CODE_00A740:
	CLC
	ADC.b #$03
	STA.b !RAM_SMW_Player_PipeAction
	TAY
	LSR
	DEC
	STA.w !RAM_SMW_Yoshi_InPipe
	LDA.w DATA_00A60D-$04,y
	STA.b !RAM_SMW_Player_FacingDirection
	LDX.b #!Define_SMW_PlayerState05_EnterHorizontalPipe
	CPY.b #$06
	BCC.b CODE_00A768
	LDA.b #$08
	TSB.b !RAM_SMW_Player_XPosLo
	LDX.b #!Define_SMW_PlayerState06_EnterVerticalPipe
	CPY.b #$07
	LDY.b #$1E
	BCC.b CODE_00A76A
	LDY.b #$0F
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00A76A
CODE_00A768:
	LDY.b #$1C
CODE_00A76A:
	STY.b !RAM_SMW_Player_YSpeed
	JSR.w CODE_00A6C7
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b Return00A795
	LDX.b !RAM_SMW_Player_PipeAction
	LDA.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	CLC
	ADC.w DATA_00A621-$04,x
	STA.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	TXA
	ASL
	TAX
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_00A611-$08,x
	STA.b !RAM_SMW_Player_XPosLo
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w DATA_00A619-$08,x
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
Return00A795:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_PlayerState00_Normal(Address)
namespace SMW_PlayerState00_Normal
%InsertMacroAtXPosition(<Address>)

FreeMovementDebugPlayerSpeed:
	dw $0000,$0000
	dw $0002,$0006
	dw $FFFE,$FFFA

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2) == $00
if !Define_Global_ROMToAssemble&(!ROM_SMASW_E) != $00
#Debug_FreeMovementAndPowerUpSelect:
	BRA.b CODE_00CCBB
	LDA.b !RAM_SMW_IO_ControllerPress2
	AND.b #!Joypad_L
	BEQ.b +
	LDA.w !RAM_SMW_Debug_FreeMovement
	EOR.b #$02
	STA.w !RAM_SMW_Debug_FreeMovement
	BEQ.b +
	LDA.b #$01
	STA.b !RAM_SMW_Player_CurrentPowerUp

+:
	LDA.w !RAM_SMW_Debug_FreeMovement
	BEQ.b CODE_00CCBB
	LSR
	BEQ.b ADDR_00CCB3
	LDA.b !RAM_SMW_IO_ControllerPress2
	AND.b #!Joypad_A
	BEQ.b +
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	INC
	AND.b #$03
	STA.b !RAM_SMW_Player_CurrentPowerUp
+
else
	LDA.b !RAM_SMW_IO_ControllerHold2
	AND.b #!Joypad_L
	BEQ.b CODE_00CC81
	LDA.b !RAM_SMW_IO_ControllerPress2
	CMP.b #!Joypad_A
	BNE.b CODE_00CC81
	INC.w !RAM_SMW_Debug_FreeMovement
	LDA.w !RAM_SMW_Debug_FreeMovement
	CMP.b #$03
	BCC.b CODE_00CC81
	STZ.w !RAM_SMW_Debug_FreeMovement
CODE_00CC81:
	LDA.w !RAM_SMW_Debug_FreeMovement
#Debug_FreeMovement:
	BRA.b CODE_00CCBB
	LSR
	BEQ.b ADDR_00CCB3
endif
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_PlayerHurt
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)
	ASL
	ASL
	LDX.b #$00
	JSR.w ADDR_00CC9F
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	LDX.b #$02
ADDR_00CC9F:
	BIT.b !RAM_SMW_IO_ControllerHold1
	BVC.b ADDR_00CCA5
	ORA.b #$02
ADDR_00CCA5:
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo,x
	CLC
	ADC.w FreeMovementDebugPlayerSpeed,y
	STA.b !RAM_SMW_Player_XPosLo,x
	SEP.b #$20
	RTS

ADDR_00CCB3:
	LDA.b #!Define_SMW_Physics_PMeterMax
	STA.w !RAM_SMW_Player_PMeter
	STA.w !RAM_SMW_Timer_WaitBeforeCapeFlightBegins
CODE_00CCBB:
endif
	LDA.w !RAM_SMW_Timer_EndLevel
	BEQ.b CODE_00CCC3
	JMP.w HandleEndOfLevel

CODE_00CCC3:
	JSR.w HandleLRScrolling
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return00CCDF
	STZ.w !RAM_SMW_Flag_CapeToSpriteInteraction
	STZ.w !RAM_SMW_Player_OverrideWalkingFrames
	LDA.w !RAM_SMW_Timer_StunPlayer
	BEQ.b CODE_00CCE0
	DEC.w !RAM_SMW_Timer_StunPlayer
	STZ.b !RAM_SMW_Player_XSpeed
	LDA.b #$0F
	STA.w !RAM_SMW_Player_CurrentPose
Return00CCDF:
	RTS

CODE_00CCE0:
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b CODE_00CD24
	LSR
	BCS.b CODE_00CD24
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVS.b CODE_00CD1C
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00CD1C
	REP.b #$20
	LDA.w !RAM_SMW_Player_OnTiltingPlatformXPosLo
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w !RAM_SMW_Player_OnTiltingPlatformYPosLo
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	JSR.w SMW_UpdatePlayerSpritePosition_Main
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w !RAM_SMW_Player_OnTiltingPlatformXPosLo
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	LDA.b !RAM_SMW_Player_YPosLo
	AND.w #$FFF0
	STA.w !RAM_SMW_Player_OnTiltingPlatformYPosLo
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
	JSR.w CODE_00F9C9
	BRA.b CODE_00CD1F

CODE_00CD1C:
	JSR.w SMW_UpdatePlayerSpritePosition_Main
CODE_00CD1F:
	JSR.w CODE_00F8F2
	BRA.b CODE_00CD36

CODE_00CD24:
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00CD30
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$08
	BEQ.b CODE_00CD30
	STZ.b !RAM_SMW_Player_YSpeed
CODE_00CD30:
	JSR.w SMW_UpdatePlayerSpritePosition_Main
	JSR.w SMW_HandlePlayerLevelCollision_Main
CODE_00CD36:
	JSR.w CheckForPlayerPitFall
CODE_00CD39:
	STZ.w !RAM_SMW_Player_TurningAroundFlag
	LDY.w !RAM_SMW_Timer_InflateFromPBalloon
	BNE.b CODE_00CD95
	LDA.w !RAM_SMW_Flag_PlayerClimbOnAir
	BEQ.b CODE_00CD4A
	LDA.b #$1F
	STA.b !RAM_SMW_Misc_ScratchRAM8B
CODE_00CD4A:
	LDA.b !RAM_SMW_Player_ClimbingFlag
	BNE.b CODE_00CD72
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag2
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_00CD79
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	AND.b #$1B
	CMP.b #$1B
	BNE.b CODE_00CD79
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CODE_00CD79
	LDY.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_00CD72
	AND.b #!Joypad_DPadU>>8
	BNE.b CODE_00CD72
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	AND.b #$04
	BEQ.b CODE_00CD79
CODE_00CD72:
	LDA.b !RAM_SMW_Misc_ScratchRAM8B
	STA.b !RAM_SMW_Player_ClimbingFlag
	JMP.w SMW_HandlePlayerPhysics_Climbing

CODE_00CD79:
	LDA.b !RAM_SMW_Player_SwimmingFlag
	BEQ.b CODE_00CD82
	JSR.w SMW_HandlePlayerPhysics_Swimming
	BRA.b CODE_00CD8F

CODE_00CD82:
	JSR.w SMW_HandlePlayerPhysics_Main
	JSR.w SMW_CheckForPowerUpSpecificPlayerAttacks_Main
	JSR.w SMW_HandlePlayerPhysics_InAir
CODE_00CD8B:
	JSL.l SMW_SetPlayerPose_Main
CODE_00CD8F:
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_00CDAD
	RTS

CODE_00CD95:
	LDA.b #$42
	LDX.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00CD9D
	LDA.b #$43
CODE_00CD9D:
	DEY
	BEQ.b CODE_00CDA5
	STY.w !RAM_SMW_Timer_InflateFromPBalloon
	LDA.b #$0F
CODE_00CDA5:
	STA.w !RAM_SMW_Player_CurrentPose
	RTS

OnYoshiAnimations:
	db $20,$21,$27,$28

CODE_00CDAD:
	LDX.w !RAM_SMW_Timer_YoshiTongueIsOut
	BEQ.b CODE_00CDBA
	LDY.b #$03
	CPX.b #$0C
	BCS.b CODE_00CDBA
	LDY.b #$04
CODE_00CDBA:
	LDA.w OnYoshiAnimations-$01,y
	DEY
	BNE.b CODE_00CDC6
	LDY.b !RAM_SMW_Player_DuckingFlag
	BEQ.b CODE_00CDC6
	LDA.b #$1D
CODE_00CDC6:
	STA.w !RAM_SMW_Player_CurrentPose
	LDA.w !RAM_SMW_Yoshi_YoshiHasWings
	CMP.b #$01
	BNE.b Return00CDDC 					;\ Note: This will always branch in the original SMW.
	BIT.b !RAM_SMW_IO_ControllerPress1			;/ If it didn't, then you could shoot fireballs while on Yoshi.
	BVC.b Return00CDDC
	LDA.b #$08						;\ Optimization: Should be commented out so that 18DB can be used as free RAM.
	STA.w !RAM_SMW_UnusedRAM_7E18DB				;/
	JSR.w SMW_SpawnPlayerFireball_Main
Return00CDDC:
	RTS

HandleLRScrolling:
	LDA.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	BEQ.b Return00CDDC
	LDY.w !RAM_SMW_Misc_LRScrollDirection
	LDA.w !RAM_SMW_Flag_LRScrollFlag
	STA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_00CE4C
	LDA.w !RAM_SMW_Camera_LRScrollMoveFlag
	BEQ.b CODE_00CDF6
	STZ.w !RAM_SMW_Misc_LRScrollDirection
	BRA.b CODE_00CE48

CODE_00CDF6:
	LDA.b !RAM_SMW_IO_ControllerHold2
	AND.b #!Joypad_X|!Joypad_A|$0F
	ORA.b !RAM_SMW_IO_ControllerHold1
	BNE.b CODE_00CE49
	LDA.b !RAM_SMW_IO_ControllerHold2
	AND.b #!Joypad_L|!Joypad_R
	BEQ.b CODE_00CE49
	CMP.b #!Joypad_L|!Joypad_R
	BEQ.b CODE_00CE49
	LSR
	LSR
	LSR
	INC.w !RAM_SMW_Timer_TimeBeforeLRScroll
	LDX.w !RAM_SMW_Timer_TimeBeforeLRScroll
	CPX.b #$10
	BCC.b CODE_00CE4C
	TAX
	REP.b #$20
	LDA.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	CMP.w SMW_HandleStandardLevelCameraScroll_DATA_00F6CB,x
	SEP.b #$20
	BEQ.b CODE_00CE4C
	LDA.b #$01
	TRB.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	INC.w !RAM_SMW_Flag_LRScrollFlag
	LDA.b #$00
	CPX.b #$02
	BNE.b CODE_00CE33
	LDA.b !RAM_SMW_Camera_LastScreenHoriz
	DEC
CODE_00CE33:
	REP.b #$20
	XBA
	AND.w #$FF00
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEP.b #$20
	BEQ.b CODE_00CE44
	LDY.b #!Define_SMW_Sound1DFC_LRScroll
	STY.w !RAM_SMW_IO_SoundCh3
CODE_00CE44:
	TXA
	STA.w !RAM_SMW_Misc_LRScrollDirection
CODE_00CE48:
	TAY
CODE_00CE49:
	STZ.w !RAM_SMW_Timer_TimeBeforeLRScroll
CODE_00CE4C:
	LDX.b #$00
	LDA.b !RAM_SMW_Player_FacingDirection
	ASL
	STA.w !RAM_SMW_Player_FacingDirectionX2
	REP.b #$20
	LDA.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	CMP.w SMW_HandleStandardLevelCameraScroll_DATA_00F6CB,y
	BEQ.b CODE_00CE6D
	CLC
	ADC.w SMW_HandleStandardLevelCameraScroll_DATA_00F6BF,y
	LDY.w !RAM_SMW_Player_FacingDirectionX2
	CMP.w SMW_HandleStandardLevelCameraScroll_DATA_00F6B3,y
	BNE.b CODE_00CE70
	STX.w !RAM_SMW_Misc_LRScrollDirection
CODE_00CE6D:
	STX.w !RAM_SMW_Flag_LRScrollFlag
CODE_00CE70:
	STA.w !RAM_SMW_Player_RelativePositionNeededToScrollScreenLo
	STX.w !RAM_SMW_Camera_LRScrollMoveFlag
	SEP.b #$20
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_PlayerState00_Normal(Address)
namespace SMW_PlayerState00_Normal
%InsertMacroAtXPosition(<Address>)

CODE_00B03E:
	JSR.w SMW_HandlePaletteFades_CODE_00AF35
	LDA.w !RAM_SMW_Palettes_PaletteUploadTableIndex
	CMP.b #$03
	BNE.b Return00B090
	LDA.b #SMW_GlobalPalettes_Mario>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
	REP.b #$30
	LDA.w !RAM_SMW_Pointer_PlayerPaletteLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w #$0014
CODE_00B056:
	LDA.b [!RAM_SMW_Misc_ScratchRAM00],y
	STA.w SMW_CopyOfPaletteMirror[!CGRAM_SMW_DynamicPlayerPalette].LowByte,y
	DEY
	DEY
	BPL.b CODE_00B056
	LDA.w #$81EE
	STA.w SMW_CopyOfPaletteMirror[$80].LowByte
	LDX.w #$00CE
CODE_00B068:
	LDA.w #$0007
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_00B06D:
	LDA.w SMW_CopyOfPaletteMirror[$90].LowByte,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w SMW_PaletteMirror[$90].LowByte,x
	JSR.w SMW_HandlePaletteFades_CODE_00AFC0
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_CopyOfPaletteMirror[$90].LowByte,x
	DEX
	DEX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_00B06D
	TXA
	SEC
	SBC.w #$0012
	TAX
	BPL.b CODE_00B068
	SEP.b #$30
	STZ.w !RAM_SMW_UnusedRAM_7E0AF5				; Optimization: This should be removed.
Return00B090:
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_PlayerState00_Normal(Address)
namespace SMW_PlayerState00_Normal
%InsertMacroAtXPosition(<Address>)

HandleEndOfLevel:
	JSR.w SMW_DamagePlayer_DisableButtons
	STZ.w !RAM_SMW_Flag_PlayerInLakitusCloud
	STZ.w !RAM_SMW_Player_OverrideWalkingFrames
	STZ.w !RAM_SMW_Player_SlidingOnGround
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCS.b CODE_00C944
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	ORA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BEQ.b CODE_00C96B
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00C935
	JSR.w CODE_00CCE0
CODE_00C935:
	LDA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BNE.b CODE_00C948
	JSR.w CODE_00B03E
	LDA.w !RAM_SMW_Timer_LevelEndFade
	CMP.b #$40
	BCC.b Return00C96A
CODE_00C944:
	JSL.l SMW_ProcessLevelEndRoutines_Main
CODE_00C948:
	LDY.b #$01
	STY.b !RAM_SMW_Flag_SpritesLocked
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b Return00C96A
	DEC.w !RAM_SMW_Timer_EndLevel
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_Timer_EndLevel
	CMP.b #$50
	BCS.b Return00C96A
else
	BNE.b Return00C96A
endif
	LDA.w !RAM_SMW_Misc_ColorOfPalaceSwitchPressed1
	BNE.b CODE_00C962
CODE_00C95B:
	LDY.b #$0B
	LDA.b #$01
	JMP.w CODE_00C9FE

CODE_00C962:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.b #$70
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$6A
else
	LDA.b #$A0
endif
	STA.w !RAM_SMW_Timer_DisplaySpecialMessage
	INC.w !RAM_SMW_Misc_DisplayMessage
Return00C96A:
	RTS

CODE_00C96B:
	JSR.w SMW_HandlePaletteFades_Main
	LDA.w !RAM_SMW_Flag_ShowVictoryPoseDuringLevelEnd
	BNE.b CODE_00C9AF
	LDA.w !RAM_SMW_Timer_EndLevel
#LM253Hijack_VictoryPoseTimingFix:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$50
else
	CMP.b #$28						; LM: Changes this to #$38 to fix the timing of Mario showing his victory pose in non-SA-1 ROMs (2.53+)
endif
	BCC.b CODE_00C984
	LDA.b #!Joypad_DPadR>>8
	STA.b !RAM_SMW_Player_FacingDirection
	STA.b !RAM_SMW_IO_ControllerHold1
	LDA.b #$05
	STA.b !RAM_SMW_Player_XSpeed
CODE_00C984:
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00C98B
	JSR.w SMW_HandlePlayerPhysics_CODE_00D76B
CODE_00C98B:
	LDA.b !RAM_SMW_Player_XSpeed
	BNE.b CODE_00C9A4
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	JSR.w CODE_00CA3E
	INC.w !RAM_SMW_Flag_ShowVictoryPoseDuringLevelEnd
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$6E
	STA.w !RAM_SMW_Timer_ShowVictoryPose
	LDA.b #$80
else
	LDA.b #$40
	STA.w !RAM_SMW_Timer_ShowVictoryPose
	ASL
endif
	STA.w !RAM_SMW_Palettes_LevelEndColorFadeDirection
	STZ.w !RAM_SMW_Timer_LevelEndFade
CODE_00C9A4:
	JMP.w CODE_00CD24

LevelsThatTriggerCutscenes:
	db !Define_SMW_LevelID_IggysCastle
	db !Define_SMW_LevelID_MortonsCastle
	db !Define_SMW_LevelID_LemmysCastle
	db !Define_SMW_LevelID_LudwigsCastle
	db !Define_SMW_LevelID_RoysCastle
	db !Define_SMW_LevelID_WendysCastle
	db !Define_SMW_LevelID_LarrysCastle
	db !Define_SMW_LevelID_BackDoor

CODE_00C9AF:
	JSR.w SetMarioPeaceImg
	LDA.w !RAM_SMW_Timer_ShowVictoryPose
	BEQ.b CODE_00C9C2
	DEC.w !RAM_SMW_Timer_ShowVictoryPose
	BNE.b Return00C9C1
	LDA.b #!Define_SMW_LevelMusic_ZoomIn
	STA.w !RAM_SMW_IO_MusicCh1
Return00C9C1:
	RTS

CODE_00C9C2:
	JSR.w CODE_00CA44
	LDA.b #!Joypad_DPadR>>8
	STA.b !RAM_SMW_IO_ControllerHold1
	JSR.w CODE_00CD24
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	BNE.b Return00CA30
	LDA.w !RAM_SMW_Flag_SecretGoalSprite
	INC
	CMP.b #$03
	BNE.b CODE_00C9DF
	LDA.b #!Define_SMW_Overworld_YoshisIsland
	STA.w !RAM_SMW_Overworld_MarioMap
	LSR
CODE_00C9DF:
	LDY.b #!Define_SMW_GameMode0C_LoadOverworld
	LDX.w !RAM_SMW_Flag_ActiveBonusGame
	BEQ.b CODE_00C9F8
	LDX.b #$FF
	STX.w !RAM_SMW_Flag_ActiveBonusGame
	LDX.b #!MosaicSizeAndBGEnable_PixelSize16x16
	STX.w !RAM_SMW_Mirror_MosaicSizeAndBGEnable
	STZ.w !RAM_SMW_Timer_EndLevel
	STZ.w !RAM_SMW_Misc_MusicRegisterBackup
	LDY.b #!Define_SMW_GameMode10_BufferLevelLoadMessage
CODE_00C9F8:
	STZ.w !RAM_SMW_Mirror_ScreenDisplayRegister				; Note: !ScreenDisplayRegister_MinBrightness00
	STZ.w !RAM_SMW_Misc_MosaicDirection
CODE_00C9FE:
	STA.w !RAM_SMW_Misc_ExitLevelAction
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	BEQ.b CODE_00CA25
	LDX.b #$08
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	CMP.b #!Define_SMW_LevelID_UseSecretExitForBoss
	BNE.b CODE_00CA12
	INC.w !RAM_SMW_Misc_ExitLevelAction
CODE_00CA12:
	CMP.b #!Define_SMW_LevelID_FrontDoor
	BEQ.b CODE_00CA20
CODE_00CA16:
	CMP.w LevelsThatTriggerCutscenes-$01,x
	BEQ.b CODE_00CA20
	DEX
	BNE.b CODE_00CA16
	BRA.b CODE_00CA25

CODE_00CA20:
	STX.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDY.b #!Define_SMW_GameMode18_FadeOutToCutscene
CODE_00CA25:
	STY.w !RAM_SMW_Misc_GameMode
	INC.w !RAM_SMW_Overworld_CheckIfEventPassedFlag			; Optimization: Change this to an RTS to both prevent !RAM_SMW_Overworld_CheckIfEventPassedFlag and !RAM_SMW_Flag_GotMidpoint from being set when exiting to the overworld (both of which don't need to be set).
SetMidpointFlag:
	LDA.b #$01							;\ Note: This is also mistakenly used on the overworld to activate an event.
	STA.w !RAM_SMW_Flag_GotMidpoint					;/
Return00CA30:
	RTS

SetMarioPeaceImg:
	LDA.b #$26
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00CA3A
	LDA.b #$14
CODE_00CA3A:
	STA.w !RAM_SMW_Player_CurrentPose
	RTS

CODE_00CA3E:
	LDA.b #$F0
	STA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	RTS

CODE_00CA44:
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	BNE.b CODE_00CA4A
	RTS

CODE_00CA4A:
	JSR.w SMW_UpdateHDMAWindowBuffer_SetCircleHDMAPointer
	LDA.b #$FC
	JSR.w SMW_UpdateHDMAWindowBuffer_IrisInOnPlayerEntry
	LDA.b #$33
	STA.b !RAM_SMW_Mirror_BG1And2WindowMaskSettings
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$03
	STA.b !RAM_SMW_Mirror_BG3And4WindowMaskSettings
	LDA.b #$22
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_PlayerState00_Normal(Address)
namespace SMW_PlayerState00_Normal
%InsertMacroAtXPosition(<Address>)

CheckForPlayerPitFall:
	REP.b #$20
	LDA.w #$FF80
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b !RAM_SMW_Player_YPosLo
	BMI.b CODE_00F5A3
	STA.b !RAM_SMW_Player_YPosLo
CODE_00F5A3:
	SEP.b #$20
	LDA.b !RAM_SMW_Player_OnScreenPosYHi
	DEC
	BMI.b Return00F5B6
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BEQ.b Kill
	JMP.w CODE_00C95B

Kill:
	JSL.l SMW_DamagePlayer_PitFall
Return00F5B6:
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_PlayerState00_Normal(Address)
namespace SMW_PlayerState00_Normal
%InsertMacroAtXPosition(<Address>)

DATA_00F8DF:
	db $0C,$0C,$08,$00,$20,$04,$0A,$0D
	db $0D

DATA_00F8E8:
	dw $002A		; Morton
	dw $002A		; Roy
	dw $0012		; Ludwig
	dw $0000		; Bowser
	dw $FFED		; Reznor

CODE_00F8F2:
	JSR.w SMW_ResetPlayerLevelCollisionRAM_Main
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_00F94E
	JSR.w SMW_HandlePlayerLevelCollision_Main
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBoss
	ASL
	TAX
	PHX
	LDY.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00F91E
	REP.b #$20
	LDA.b !RAM_SMW_Player_YPosLo
	CMP.w DATA_00F8E8,x
	BPL.b CODE_00F91E
	LDA.w DATA_00F8E8,x
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
CODE_00F91E:
	SEP.b #$20
	PLX
	LDA.w DATA_00F8E8,x
	CMP.b #$2A
	BNE.b Return00F94D
	REP.b #$20
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr_Table7E160E+$09
	AND.w #$00FF
	INC
	CMP.b !RAM_SMW_Player_XPosLo
	BEQ.b CODE_00F94A
	BMI.b CODE_00F94A
	LDA.w !RAM_SMW_NorSpr_Table7E1534+$09
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w #$000F
	CMP.b !RAM_SMW_Misc_ScratchRAM00
CODE_00F94A:
	JMP.w SMW_HandlePlayerLevelCollision_CODE_00E9C8

Return00F94D:
	RTS

CODE_00F94E:
	LDY.b #$00
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_00F957
	JMP.w CODE_00F997

CODE_00F957:
	JSR.w CODE_00F9A8
	BCS.b CODE_00F962
	JSR.w SMW_RunPlayerBlockCode_CODE_00EE1D
	JMP.w CODE_00F997

CODE_00F962:
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_00F983
	REP.b #$20
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileXPosLo
	AND.w #$00FF
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	STA.w !RAM_SMW_Player_OnTiltingPlatformXPosLo
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileYPosLo
	AND.w #$00F0
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
	STA.w !RAM_SMW_Player_OnTiltingPlatformYPosLo
	JSR.w CODE_00F9C9
CODE_00F983:
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.b #$48
	LSR
	LSR
	LSR
	LSR
	TAX
	LDY.w DATA_00F8DF,x
	LDA.b #$80
	STA.b !RAM_SMW_Misc_ScratchRAM8E
	JSR.w SMW_RunPlayerBlockCode_CODE_00EEE1
CODE_00F997:
	REP.b #$20
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CMP.w #$00AE
	SEP.b #$20
	BMI.b CODE_00F9A5
	JSR.w SMW_DamagePlayer_KillAndDisableButtons
CODE_00F9A5:
	JMP.w SMW_HandlePlayerLevelCollision_CODE_00E98C

CODE_00F9A8:
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w #$0008
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.w #$0020							; Glitch: This code fails to account for Yoshi, resulting in the player sinking into the platform while riding him.
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
CODE_00F9BC:
	SEP.b #$20
	PHB
	LDA.b #SMW_CheckForTiltingPlatformCollision_Main>>16
	PHA
	PLB
	JSL.l SMW_CheckForTiltingPlatformCollision_Main
	PLB
	RTS

CODE_00F9C9:
	LDA.b !RAM_SMW_Misc_M7RotationLo
	PHA
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Misc_M7RotationLo
	JSR.w CODE_00F9BC
	REP.b #$20
	PLA
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileXPosLo
	AND.w #$00FF
	SEC
	SBC.w #$0008
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileYPosLo
	AND.w #$00FF
	SEC
	SBC.w #$0020							; Glitch: This code fails to account for Yoshi, resulting in the player sinking into the platform while riding him.
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerStateXX_PowerupAnimations(Address)
namespace SMW_PlayerStateXX_PowerupAnimations
%InsertMacroAtXPosition(<Address>)

GrowingAniImgs:
	db $00,$3D,$00,$3D,$00,$3D,$46,$3D
	db $46,$3D,$46,$3D

PowerDownEntry:
	LDA.w !RAM_SMW_Player_AnimationTimer
	BEQ.b CODE_00D140
	LSR
	LSR
CODE_00D130:
	TAY
	LDA.w GrowingAniImgs,y
	STA.w !RAM_SMW_Player_CurrentPose
DecrementAnimationTimer:
	LDA.w !RAM_SMW_Player_AnimationTimer
	BEQ.b Return00D13F
	DEC.w !RAM_SMW_Player_AnimationTimer
Return00D13F:
	RTS

CODE_00D140:
	LDA.b #$7F
	STA.w !RAM_SMW_Timer_PlayerHurt
	BRA.b CODE_00D158

GrowAnimationEntry:
	LDA.w !RAM_SMW_Player_AnimationTimer
	BEQ.b CODE_00D156
	LSR
	LSR
	EOR.b #$FF
	INC
	CLC
	ADC.b #$0B
	BRA.b CODE_00D130

CODE_00D156:
	INC.b !RAM_SMW_Player_CurrentPowerUp
CODE_00D158:
	LDA.b #!Define_SMW_PlayerState00_Normal
	STA.b !RAM_SMW_Player_CurrentState
	STZ.b !RAM_SMW_Flag_SpritesLocked
Return00D15E:
	RTS

GotCapeAnimationEntry:
	LDA.b #$7F
	STA.b !RAM_SMW_Player_HidePlayerTileFlags
	DEC.w !RAM_SMW_Player_AnimationTimer
	BNE.b Return00D15E
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	LSR
	BEQ.b CODE_00D140
	BNE.b CODE_00D158
GotFlowerAnimationEntry:
	LDA.w !RAM_SMW_Player_SlidingOnGround
	AND.b #$80
	ORA.w !RAM_SMW_Player_CapeFlyingPhase
	BEQ.b CODE_00D187
	STZ.w !RAM_SMW_Player_CapeFlyingPhase
	LDA.w !RAM_SMW_Player_SlidingOnGround
	AND.b #$7F
	STA.w !RAM_SMW_Player_SlidingOnGround
	STZ.w !RAM_SMW_Player_CurrentPose
CODE_00D187:
	DEC.w !RAM_SMW_Timer_PlayerPaletteCycle
	BEQ.b CODE_00D158
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_PlayerStateXX_PowerupAnimations_PowerDownEntry, SMW_PlayerState01_PowerDown_Main)
	%SetDuplicateOrNullPointer(SMW_PlayerStateXX_PowerupAnimations_GrowAnimationEntry, SMW_PlayerState02_Grow_Main)
	%SetDuplicateOrNullPointer(SMW_PlayerStateXX_PowerupAnimations_GotCapeAnimationEntry, SMW_PlayerState03_GotCape_Main)
	%SetDuplicateOrNullPointer(SMW_PlayerStateXX_PowerupAnimations_GotFlowerAnimationEntry, SMW_PlayerState04_GotFlower_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandlePaletteFades(Address)
namespace SMW_HandlePaletteFades
%InsertMacroAtXPosition(<Address>)

DATA_00AE65:
	dw $001F,$03E0,$7C00

DATA_00AE6B:
	dw $FFFF,$FFE0,$FC00

DATA_00AE71:
	dw $0001,$0020,$0400

DATA_00AE77:
	dw $0000,$0000
	dw $0001,$0000
	dw $8000,$8000
	dw $8020,$0400
	dw $8080,$8080
	dw $8208,$1040
	dw $8420,$8420
	dw $8844,$2210
	dw $8888,$8888
	dw $9122,$4488
	dw $9248,$9248
	dw $A492,$4924
	dw $A4A4,$A4A4
	dw $A949,$5294
	dw $AAAA,$5294
	dw $AAAA,$5554
	dw $AAAA,$AAAA
	dw $D5AA,$AAAA
	dw $D5AA,$D5AA
	dw $D6B5,$AD6A
	dw $DADA,$DADA
	dw $DB6D,$B6DA
	dw $EDB6,$EDB6
	dw $EEDD,$BB76
	dw $EEEE,$EEEE
	dw $F7BB,$DDEE
	dw $FBDE,$FBDE
	dw $FDF7,$EFBE
	dw $FEFE,$FEFE
	dw $FFDF,$FBFE
	dw $FFFE,$FFFE
	dw $FFFF,$FFFE

DATA_00AEF7:
	dw $8000,$4000,$2000,$1000
	dw $0800,$0400,$0200,$0100
	dw $0080,$0040,$0020,$0010
	dw $0008,$0004,$0002,$0001

Main:
	LDY.w !RAM_SMW_Timer_EndLevel
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_00AF25
	DEY
	BEQ.b CODE_00AF25
	STY.w !RAM_SMW_Timer_EndLevel
CODE_00AF25:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPY.b #$B0
else
	CPY.b #$A0
endif
	BCS.b CODE_00AF35
	LDA.b #$04
	TRB.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	LDA.b #!BGModeAndTileSizeSetting_Mode01Enable|!BGModeAndTileSizeSetting_Mode01Layer3Priority
	STA.b !RAM_SMW_Mirror_BGModeAndTileSizeSetting
	JSL.l SMW_ProcessLevelEndRoutines_Main
CODE_00AF35:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return00AFA2
	LDA.w !RAM_SMW_Timer_LevelEndFade
	CMP.b #$40
	BCS.b Return00AFA2
	JSR.w CODE_00AFA3
	LDA.w #$01FE
	STA.w SMW_CopyOfPaletteMirror[$00].LowByte
#LM170Hijack_FadeFix1:
	LDX.w #$00EE						; LM: Changed to LDX.w #$00FE as part of the fade fix hijacks (1.70+)
CODE_00AF4E:
#LM170Hijack_FadeFix2:
	LDA.w #$0007						; LM: Changed to LDA.w #$000F as part of the fade fix hijacks (1.70+)
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_00AF53:
	LDA.w SMW_CopyOfPaletteMirror[$00].LowByte,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w SMW_PaletteMirror[$00].LowByte,x
	JSR.w CODE_00AFC0
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_CopyOfPaletteMirror[$00].LowByte,x
	DEX
	DEX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_00AF53
	TXA
	SEC
#LM170Hijack_FadeFix3:
	SBC.w #$0012						; LM: Changed to SBC.w #$0002 as part of the fade fix hijacks (1.70+)
	TAX
	BPL.b CODE_00AF4E
#LM170Hijack_FadeFix4:
	LDX.w #$0004						;\ LM: Puts a JSL.l to the expanded area and skips this loop to prevent the status bar colors from fading out (1.70+)
CODE_00AF74:							;|
	LDA.w SMW_CopyOfPaletteMirror[$0D].LowByte,x		;|
	STA.b !RAM_SMW_Misc_ScratchRAM02			;|
	LDA.w SMW_PaletteMirror[$0D].LowByte,x			;|
	JSR.w CODE_00AFC0					;|
	LDA.b !RAM_SMW_Misc_ScratchRAM04			;|
	STA.w SMW_CopyOfPaletteMirror[$0D].LowByte,x		;|
	DEX							;|
	DEX							;|
	BPL.b CODE_00AF74					;/
	LDA.w !RAM_SMW_Palettes_BackgroundColorLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Palettes_CopyOfBackgroundColorLo
	JSR.w CODE_00AFC0
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	SEP.b #$30
	STZ.w SMW_CopyOfPaletteMirror[$80].LowByte
	LDA.b #$03
	STA.w !RAM_SMW_Palettes_PaletteUploadTableIndex
Return00AFA2:
	RTS

CODE_00AFA3:
	TAY
	INC
	INC
	STA.w !RAM_SMW_Timer_LevelEndFade
	TYA
	LSR
	LSR
	LSR
	LSR
	REP.b #$30
	AND.w #$0002
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	TYA
	AND.w #$001E
	TAY
	LDA.w DATA_00AEF7,y
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	RTS

CODE_00AFC0:
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.w #$001F
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.w #$03E0
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	AND.w #$007C
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w #$0004
CODE_00AFDF:
	PHY
	LDA.w !RAM_SMW_Misc_ScratchRAM06,y
	ORA.b !RAM_SMW_Misc_ScratchRAM0C
	TAY
	LDA.w DATA_00AE77,y
	PLY
	AND.b !RAM_SMW_Misc_ScratchRAM0E
	BEQ.b CODE_00AFF9
	LDA.w DATA_00AE6B,y
	BIT.w !RAM_SMW_Palettes_LevelEndColorFadeDirection-$01
	BPL.b CODE_00AFF9
	LDA.w DATA_00AE71,y
CODE_00AFF9:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	AND.w DATA_00AE65,y
	TSB.b !RAM_SMW_Misc_ScratchRAM04
	DEY
	DEY
	BPL.b CODE_00AFDF
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetupHDMAWindowingEffects(Address)
namespace SMW_SetupHDMAWindowingEffects
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$04
-:
	LDA.w PARAMS_009277,x
	STA.w HDMA[$07].Parameters,x
	DEX
	BPL.b -
	LDA.b #$00
	STA.w HDMA[$07].IndirectSourceBank
EndHDMA:
	STZ.w !RAM_SMW_Mirror_HDMAEnable
ClearWindowTable:
	REP.b #$10
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.w #$01DE
else
	LDX.w #$01BE
endif
	LDA.b #$FF
-:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	STZ.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,x
	DEX
	DEX
	BPL.b -
	SEP.b #$10
	RTS

PARAMS_009277:
	db $41,!REGISTER_Window1LeftPositionDesignation
	dl DATA_00927C

DATA_00927C:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $F8
	dw !RAM_SMW_Misc_HDMAWindowEffectTable
	db $F8
	dw !RAM_SMW_Misc_HDMAWindowEffectTable+$F0
	db $00
else
	db $F0
	dw !RAM_SMW_Misc_HDMAWindowEffectTable
	db $F0
	dw !RAM_SMW_Misc_HDMAWindowEffectTable+$E0
	db $00
endif

CODE_009283:
	JSR.w ClearWindowTable
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	LSR
	BCS.b CODE_0092A0
	REP.b #$10
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDX.w #$01DE
else
	LDX.w #$01BE
endif
WindowHDMAenable:
	STZ.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	LDA.b #$FF
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,x
	INX
	INX
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPX.w #$01E0
else
	CPX.w #$01C0
endif
	BCC.b WindowHDMAenable
CODE_0092A0:
	LDA.b #$80
	STA.w !RAM_SMW_Mirror_HDMAEnable
	SEP.b #$10
	RTS

CODE_0092A8:
	JSR.w ClearWindowTable
	REP.b #$10
	LDX.w #$0198
	BRA.b WindowHDMAenable

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleMenuCursor(Address)
namespace SMW_HandleMenuCursor
%InsertMacroAtXPosition(<Address>)

DATA_009AC8:
	db $01,$FF,$FF

Entry2:
	PHY
	JSR.w SMW_CheckWhichControllersArePluggedIn_Main
	PLY
Main:
	INC.w !RAM_SMW_Counter_BlinkingCursorFrame
	JSR.w CODE_009E82
	LDX.w !RAM_SMW_Misc_BlinkingCursorPos
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	LDA.w !RAM_SMW_Misc_GameMode
	CMP.b #!Define_SMW_GameMode0A_PlayerSelect
	BNE.b +
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.w !RAM_SMW_IO_ControllerPress1CopyP2
	STA.b !RAM_SMW_IO_ControllerPress1
+:
endif
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #(!Joypad_Start>>8)|(!Joypad_B>>8)
	BNE.b CODE_009AE3
	LDA.b !RAM_SMW_IO_ControllerPress2
	BPL.b CODE_009AEA
CODE_009AE3:
	LDA.b #!Define_SMW_Sound1DFC_Coin
	STA.w !RAM_SMW_IO_SoundCh3
	BRA.b CODE_009B11

CODE_009AEA:
	PLA							;\ Note: Destructive return
	PLA							;/
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_Select>>8
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_IO_ControllerPress1
	AND.b #(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b Return009B16
	LDY.b #!Define_SMW_Sound1DFC_ShootFireball
	STY.w !RAM_SMW_IO_SoundCh3
	STZ.w !RAM_SMW_Counter_BlinkingCursorFrame
	LSR
	LSR
	TAY
	TXA
	ADC.w DATA_009AC8-$01,y
	BPL.b CODE_009B0D
	LDA.b !RAM_SMW_Misc_ScratchRAM8A
	DEC
CODE_009B0D:
	CMP.b !RAM_SMW_Misc_ScratchRAM8A
	BCC.b CODE_009B13
CODE_009B11:
	LDA.b #$00
CODE_009B13:
	STA.w !RAM_SMW_Misc_BlinkingCursorPos
Return009B16:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleMenuCursor(Address)
namespace SMW_HandleMenuCursor
%InsertMacroAtXPosition(<Address>)

DATA_009E6A:
	dw $0002,$0004,$0002,$0002,$0004

DATA_009E74:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	dw $51CC,$5208,$5228,$5208,$5208
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	dw $51CB,$5208,$5208,$51C4,$5205
else
	dw $51CB,$51E8,$5208,$51C4,$51E5
endif

DATA_009E7E:
	db $01,$02,$04,$08

CODE_009E82:
	LDX.w !RAM_SMW_Misc_BlinkingCursorPos
	LDA.w DATA_009E7E,x
	TAX
	LDA.w !RAM_SMW_Counter_BlinkingCursorFrame
	EOR.b #$1F
	AND.b #$18
	BNE.b CODE_009E94
	LDX.b #$00
CODE_009E94:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	REP.b #$20
	LDA.w DATA_009E6A,y
	STA.b !RAM_SMW_Misc_ScratchRAM8A
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w DATA_009E74,y
CODE_009EA7:
	XBA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	XBA
	CLC
	ADC.w #$0040
	PHA
	LDA.w #$0100
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	LDA.w #$38FC
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_009EC3
	LDA.w #$3D2E
CODE_009EC3:
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	PLA
	INX
	INX
	INX
	INX
	INX
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_009EA7
	SEP.b #$20
CODE_009ED4:
	TXA
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	LDA.b #$FF
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerState0B_RescuedPeach(Address)
namespace SMW_PlayerState0B_RescuedPeach
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Player_OverrideWalkingFrames
	STZ.w !RAM_SMW_Player_SlidingOnGround
	LDA.w !RAM_SMW_Timer_EndLevel
	BEQ.b CODE_00C5CE
	JSL.l SMW_CreditsFadeOut_Main
	LDA.w !RAM_SMW_Misc_GameMode
	CMP.b #!Define_SMW_GameMode14_InLevel
	BEQ.b CODE_00C5D1
	JMP.w SMW_PlayerState00_Normal_CODE_00C95B

CODE_00C5CE:
	STZ.w !RAM_SMW_Mirror_HDMAEnable
CODE_00C5D1:
	LDA.b #$01
	STA.w !RAM_SMW_Flag_MessageWindowSizeChangeDirection
	LDA.b #$07
	STA.w !RAM_SMW_Unknown_7E1928
	JSR.w SMW_DamagePlayer_DisableButtons
	JMP.w SMW_PlayerState00_Normal_CODE_00CD24

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnGlitterEffectForCoin(Address)
namespace SMW_SpawnGlitterEffectForCoin
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Player_OnScreenPosXHi
	ORA.b !RAM_SMW_Player_OnScreenPosYHi
	BNE.b Return00FD6A
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_00FD62:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_00FD6B
	DEY
	BPL.b CODE_00FD62
Return00FD6A:
	RTS

CODE_00FD6B:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr05_Glitter
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.b #$F0
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_00FD97
	LDA.b !RAM_SMW_Blocks_XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	AND.b #$F0
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_Blocks_YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	AND.b #$F0
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
CODE_00FD97:
	LDA.b #$10
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnPlayerTurnAroundSmoke(Address)
namespace SMW_SpawnPlayerTurnAroundSmoke
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	ORA.b !RAM_SMW_Player_InAirFlag
	ORA.b !RAM_SMW_Player_OnScreenPosXHi
	ORA.b !RAM_SMW_Player_OnScreenPosYHi
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return00FE71
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadD>>8
	BEQ.b CODE_00FE67
	LDA.b !RAM_SMW_Player_XSpeed
	CLC
	ADC.b #$08
	CMP.b #$10
	BCC.b Return00FE71
CODE_00FE67:
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_00FE69:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_00FE72
	DEY
	BNE.b CODE_00FE69
Return00FE71:
	RTS

CODE_00FE72:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr03_TurnAroundSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_Player_XPosLo
	ADC.b #$04
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_Player_YPosLo
	ADC.b #$1A
	PHX
	LDX.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00FE8A
	ADC.b #$10
CODE_00FE8A:
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	PLX
	LDA.b #$13
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UnusedYoshiRelatedRoutine(Address)
namespace SMW_UnusedYoshiRelatedRoutine
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
ADDR_00FC25:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b ADDR_00FC73
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	BNE.b ADDR_00FC73
	LDA.b #$01
	STA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	STZ.w !RAM_SMW_Yoshi_YoshiHasWings
	LDA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,y
	AND.b #$F1
	ORA.b #$0A
	STA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,y
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b Return00FC72
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.b #$10
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_Player_YPosLo
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.b !RAM_SMW_Player_YPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr035_Yoshi_CurrentState,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_FacingDirection,y
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_XSpeed,y
Return00FC72:
	RTL

ADDR_00FC73:
	DEY
	BPL.b ADDR_00FC25
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ClearOutNormalSpriteSlots(Address)
namespace SMW_ClearOutNormalSpriteSlots
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
-:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	DEX
	BPL.b -
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_ClearOutNormalSpriteSlots(Address)
namespace SMW_ClearOutNormalSpriteSlots
%InsertMacroAtXPosition(<Address>)

ADDR_00FA10: 						;\ Note: Unused RTL varient of above routine.
	LDX.b #!Define_SMW_MaxNormalSpriteSlot		;|
-:							;|
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x		;|
	DEX						;|
	BPL.b -						;|
	RTL						;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnNormalSpriteTurnAroundSmoke(Address)
namespace SMW_SpawnNormalSpriteTurnAroundSmoke
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BEQ.b Return018072
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	ORA.b !RAM_SMW_Flag_IceLevel
	BNE.b Return018072
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$0A
	STA.b !RAM_SMW_Misc_ScratchRAM01
Entry2:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return018072
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_01806A:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_018073
	DEY
	BPL.b CODE_01806A
Return018072:
	RTS

CODE_018073:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr03_TurnAroundSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$13
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckForNormalSpriteToNormalSpriteCollision(Address)
namespace SMW_CheckForNormalSpriteToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckForNormalSpriteToNormalSpriteCollision(Address)
namespace SMW_CheckForNormalSpriteToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

DATA_01A40B:
	db $02,$0A

Sub:
	TXA
	BEQ.b SMW_GenericGFXRtMoveTileOffscreenVertically_Return01A40A
	TAY
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b SMW_GenericGFXRtMoveTileOffscreenVertically_Return01A40A
	DEX
CODE_01A417:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCS.b CODE_01A421
	JMP.w CODE_01A4B0

CODE_01A421:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	ORA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	AND.b #!Define_SMW_NorSpr_1686Prop_DisableSpriteClipping
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,y
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	ORA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	EOR.w !RAM_SMW_NorSpr_CurrentLayerPriority,y
	BNE.b CODE_01A4B0
	STX.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_XPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$0010
	CMP.w #$0020
	SEP.b #$20
	BCS.b CODE_01A4B0
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping0F
	BEQ.b CODE_01A46C
	INY
CODE_01A46C:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w DATA_01A40B,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w !RAM_SMW_NorSpr_CurrentSlotID
	LDX.b #$00
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,y
	AND.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping0F
	BEQ.b CODE_01A488
	INX
CODE_01A488:
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l DATA_01A40B,x
else
	ADC.w DATA_01A40B,x
endif
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_YPosHi,y
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$000C
	CMP.w #$0018
	SEP.b #$20
	BCS.b CODE_01A4B0
	JSR.w CODE_01A4BA
CODE_01A4B0:
	DEX
	BMI.b CODE_01A4B6
	JMP.w CODE_01A417

CODE_01A4B6:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

CODE_01A4BA:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01A4CE
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BEQ.b CODE_01A4E2
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b CODE_01A506
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_01A51A
	RTS

CODE_01A4CE:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01A53D
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BEQ.b CODE_01A540
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b CODE_01A537
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_01A534
	RTS

CODE_01A4E2:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,y
	AND.b #$04
	BNE.b CODE_01A4F2
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BEQ.b CODE_01A534
	BRA.b CODE_01A506

CODE_01A4F2:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01A540
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BEQ.b CODE_01A555
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b ADDR_01A53A
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_01A534
	RTS

CODE_01A506:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01A52E
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BEQ.b CODE_01A531
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b CODE_01A534
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_01A534
	RTS

CODE_01A51A:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01A534
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BEQ.b CODE_01A534
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b CODE_01A534
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BEQ.b CODE_01A534
	RTS

CODE_01A52E:
	JMP.w CODE_01A625

CODE_01A531:
	JMP.w CODE_01A642

CODE_01A534:
	JMP.w CODE_01A685

CODE_01A537:
	JMP.w CODE_01A5C4

ADDR_01A53A:
	JMP.w CODE_01A5C4

CODE_01A53D:
	JMP.w CODE_01A56D

CODE_01A540:
	JSR.w CODE_01A6D9
	PHX
	PHY
	TYA
	TXY
	TAX
	JSR.w CODE_01A6D9
	PLY
	PLX
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,y
	BNE.b Return01A5C3
CODE_01A555:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BNE.b CODE_01A56D
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BNE.b CODE_01A56D
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BNE.b CODE_01A56A
	JMP.w CODE_01A685

CODE_01A56A:
	JMP.w CODE_01A5C4

CODE_01A56D:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.w !RAM_SMW_NorSpr_XPosHi,y
	ROL
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	AND.b #!Define_SMW_NorSpr_1686Prop_DontChangeDirectionWhenTouched
	BNE.b CODE_01A5A1
	LDY.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_Table7E157C,y
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_Table7E157C,y
	PLA
	CMP.w !RAM_SMW_NorSpr_Table7E157C,y
	BEQ.b CODE_01A5A1
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,y
	BNE.b CODE_01A5A1
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,y
CODE_01A5A1:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	AND.b #!Define_SMW_NorSpr_1686Prop_DontChangeDirectionWhenTouched
	BNE.b Return01A5C3
	LDA.w !RAM_SMW_NorSpr_Table7E157C,x
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
	PLA
	CMP.w !RAM_SMW_NorSpr_Table7E157C,x
	BEQ.b Return01A5C3
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,x
	BNE.b Return01A5C3
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,x
Return01A5C3:
	RTS

CODE_01A5C4:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr083_LeftFlyingBlock
	CMP.b #$02
	BCS.b CODE_01A5DA
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01A5D3:
	PHX
	TYX
	JSR.w SMW_SolidSpriteBlock_Entry2
	PLX
	RTS

CODE_01A5DA:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	JSR.w CODE_01A77C
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	PHX
	TYX
	JSL.l SMW_SpawnContactEffectFromSide_NoKickSound
	PLX
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	ASL
	LDA.b #$10
	BCC.b CODE_01A5F8
	LDA.b #$F0
CODE_01A5F8:
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #$D0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	PHY
	INC.w !RAM_SMW_NorSpr_Table7E1626,x
	LDY.w !RAM_SMW_NorSpr_Table7E1626,x
	CPY.b #$08
	BCS.b CODE_01A611
	LDA.w SMW_StompSoundTable_Bank01-$01,y
	STA.w !RAM_SMW_IO_SoundCh1
CODE_01A611:
	TYA
	CMP.b #$08
	BCC.b CODE_01A618
	LDA.b #$08
CODE_01A618:
	PLY
	JSL.l SMW_GivePoints_Entry2
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_CheckForNormalSpriteToNormalSpriteCollision(Address)
namespace SMW_CheckForNormalSpriteToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

CODE_01A625:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr083_LeftFlyingBlock
	CMP.b #$02
	BCS.b CODE_01A63D
	PHX
	TYX
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	PLX
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	JSR.w SMW_SolidSpriteBlock_Entry2
	RTS

CODE_01A63D:
	JSR.w CODE_01A77C
	BRA.b CODE_01A64A

CODE_01A642:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BNE.b CODE_01A64A
	JMP.w CODE_01A685

CODE_01A64A:
	PHX
	LDA.w !RAM_SMW_NorSpr_Table7E1626,y
	INC
	STA.w !RAM_SMW_NorSpr_Table7E1626,y
	LDX.w !RAM_SMW_NorSpr_Table7E1626,y
	CPX.b #$08
	BCS.b CODE_01A65F
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l SMW_StompSoundTable_Bank01-$01,x
else
	LDA.w SMW_StompSoundTable_Bank01-$01,x
endif
	STA.w !RAM_SMW_IO_SoundCh1
CODE_01A65F:
	TXA
	CMP.b #$08
	BCC.b CODE_01A666
	LDA.b #$08
CODE_01A666:
	PLX
	JSL.l SMW_GivePoints_Main
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	JSL.l SMW_SpawnContactEffectFromSide_NoKickSound
	LDA.w !RAM_SMW_NorSpr_XSpeed,y
	ASL
	LDA.b #$10
	BCC.b CODE_01A67E
	LDA.b #$F0
CODE_01A67E:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

CODE_01A685:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr083_LeftFlyingBlock
	BEQ.b ADDR_01A69A
	CMP.b #!Define_SMW_SpriteID_NorSpr084_HorizontalFlyingBlock
	BEQ.b ADDR_01A69A
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_01A69D

ADDR_01A69A:
	JSR.w SMW_SolidSpriteBlock_Entry2
CODE_01A69D:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BEQ.b CODE_01A6BB
	CMP.b #!Define_SMW_SpriteID_NorSpr083_LeftFlyingBlock
	BEQ.b ADDR_01A6B8
	CMP.b #!Define_SMW_SpriteID_NorSpr084_HorizontalFlyingBlock
	BEQ.b ADDR_01A6B8
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$D0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	BRA.b CODE_01A6BB

ADDR_01A6B8:
	JSR.w CODE_01A5D3
CODE_01A6BB:
	JSL.l SMW_SpawnContactEffectFromSide_Main
	LDA.b #$04
	JSL.l SMW_GivePoints_Main
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	ASL
	LDA.b #$10
	BCS.b CODE_01A6CE
	LDA.b #$F0
CODE_01A6CE:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	RTS

DATA_01A6D7:
	db $30,$D0

CODE_01A6D9:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b Return01A72D
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,y
	AND.b #$04
	BEQ.b Return01A72D
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_HopInOrKickShells
	BEQ.b Return01A72D
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,y
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BNE.b Return01A72D
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.w !RAM_SMW_NorSpr_XPosLo,y
	BMI.b CODE_01A702
	INC.b !RAM_SMW_Misc_ScratchRAM02
CODE_01A702:
	CLC
	ADC.b #$08
	CMP.b #$10
	BCC.b Return01A72D
	LDA.w !RAM_SMW_NorSpr_Table7E157C,x
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b Return01A72D
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BNE.b HopIntoShell
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	LDA.b #$23
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	TYA
	STA.w !RAM_SMW_NorSpr_Table7E160E,x
	RTS

PlayKickSfx:
	LDA.b #!Define_SMW_Sound1DF9_KickShell
	STA.w !RAM_SMW_IO_SoundCh1
Return01A72D:
	RTS

HopIntoShell:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,y
	BNE.b Return01A777
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BCS.b Return01A777
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,y
	AND.b #$04
	BEQ.b Return01A777
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,y
	BPL.b CODE_01A75D
	AND.b #$7F
	STA.w !RAM_SMW_NorSpr_Table7E15F6,y
	LDA.b #$E0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,y
CODE_01A755:
	LDA.b #$20
	STA.b !RAM_SMW_NorSpr_Table7E00C2,x
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	RTS

CODE_01A75D:
	LDA.b #$E0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	CMP.b #$01
	LDA.b #$18
	BCC.b CODE_01A76C
	LDA.b #$2C
CODE_01A76C:
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	TXA
	STA.w !RAM_SMW_NorSpr_Table7E1594,y
	TYA
	STA.w !RAM_SMW_NorSpr_Table7E1594,x
Return01A777:
	RTS

DATA_01A778:
	db $10,$F0

DATA_01A77A:
	db $00,$FF

CODE_01A77C:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BNE.b CODE_01A7C2
	LDA.w !RAM_SMW_NorSpr_Table7E187B,y
	BNE.b CODE_01A7C2
	LDA.w !RAM_SMW_NorSpr_Table7E157C,x
	CMP.w !RAM_SMW_NorSpr_Table7E157C,y
	BEQ.b CODE_01A7C2
	STY.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w !RAM_SMW_NorSpr_Table7E1534,x
	BNE.b CODE_01A7C0
	STZ.w !RAM_SMW_NorSpr_Table7E1528,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	TAY
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_01A778,y
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w DATA_01A77A,y
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	TYA
	STA.w !RAM_SMW_NorSpr_Table7E160E,x
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E1534,x
CODE_01A7C0:
	PLA
	PLA
CODE_01A7C2:
	LDX.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDY.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckForPlayerToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_ProcessPlayerInteractionEveryFrame
	BNE.b ProcessInteract
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BEQ.b ProcessInteract
ReturnNoContact:
	CLC
	RTS

ProcessInteract:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$50
	CMP.b #$A0
	BCS.b ReturnNoContact
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CLC
	ADC.b #$60
	CMP.b #$C0
	BCS.b ReturnNoContact
CODE_01A80F:
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCS.b ReturnNoContact
	LDA.b #$00
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVS.b CODE_01A822
	LDA.w !RAM_SMW_Player_CurrentLayerPriority
	EOR.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
CODE_01A822:
	BNE.b ReturnNoContact2
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b ReturnNoContact2
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x		;\ Note: !Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction
	BPL.b DefaultInteractR					;/
	SEC
	RTS

DATA_01A839:
	db $F0,$10

DefaultInteractR:
	LDA.w !RAM_SMW_Timer_StarPower
	BEQ.b CODE_01A87E
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	BNE.b CODE_01A87E
CODE_01A847:
	JSL.l SMW_SpawnContactEffectFromSide_Main
	INC.w !RAM_SMW_Player_StarKillCount
	LDA.w !RAM_SMW_Player_StarKillCount
	CMP.b #$08
	BCC.b CODE_01A85A
	LDA.b #$08
	STA.w !RAM_SMW_Player_StarKillCount
CODE_01A85A:
	JSL.l SMW_GivePoints_Main
	LDY.w !RAM_SMW_Player_StarKillCount
	CPY.b #$08
	BCS.b CODE_01A86B
	LDA.w SMW_StompSoundTable_Bank01-$01,y
	STA.w !RAM_SMW_IO_SoundCh1
CODE_01A86B:
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w DATA_01A839,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
ReturnNoContact2:
	CLC
	RTS

CODE_01A87E:
	STZ.w !RAM_SMW_Player_StarKillCount
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b CODE_01A895
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BNE.b CODE_01A897
	JSR.w CODE_01AA42
CODE_01A895:
	CLC
	RTS

CODE_01A897:
	LDA.b #$14
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM01
	ROL.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_Player_CurrentYPosLo
	PHP
	LSR.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	SBC.b #$00
	PLP
	SBC.b !RAM_SMW_Player_CurrentYPosHi
	BMI.b CODE_01A8E6
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_01A8C0
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x
	AND.b #!Define_SMW_NorSpr_190FProp_CanBeJumpedOnWithUpwardYSpeed
	BNE.b CODE_01A8C0
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	BEQ.b CODE_01A8E6
CODE_01A8C0:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01A8C9
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_01A8E6
CODE_01A8C9:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_SafeToJumpOn
	BNE.b CODE_01A91C
	LDA.w !RAM_SMW_Player_SpinJumpFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01A8E6
CODE_01A8D8:
	LDA.b #!Define_SMW_Sound1DF9_Contact
	STA.w !RAM_SMW_IO_SoundCh1
	JSL.l SMW_BoostMarioSpeed_Main
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	RTS

CODE_01A8E6:
	LDA.w !RAM_SMW_Player_SlidingOnGround
	BEQ.b CODE_01A8F9
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x
	AND.b #!Define_SMW_NorSpr_190FProp_ImmuneToSliding
	BNE.b CODE_01A8F9
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_PlayKickSfx
	JSR.w CODE_01A847
	RTS

CODE_01A8F9:
	LDA.w !RAM_SMW_Timer_PlayerHurt
	BNE.b Return01A91B
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b Return01A91B
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	AND.b #!Define_SMW_NorSpr_1686Prop_DontChangeDirectionWhenTouched
	BNE.b CODE_01A911
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
CODE_01A911:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	BEQ.b Return01A91B
	JSL.l SMW_DamagePlayer_Hurt
Return01A91B:
	RTS

CODE_01A91C:
	LDA.w !RAM_SMW_Player_SpinJumpFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01A947
CODE_01A924:
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	LDA.b #$F8
	STA.b !RAM_SMW_Player_YSpeed
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01A935
	JSL.l SMW_BoostMarioSpeed_Main
CODE_01A935:
	JSR.w SMW_NorSprStatus02_Dead_SetNorSprStatus04_Main
	JSL.l SMW_SpawnSpinJumpStars_Main
	JSR.w CODE_01AB46
	LDA.b #!Define_SMW_Sound1DF9_SpinJumpKill
	STA.w !RAM_SMW_IO_SoundCh1
	JMP.w CODE_01A9F2

CODE_01A947:
	JSR.w CODE_01A8D8
	LDA.w !RAM_SMW_NorSpr_Table7E187B,x
	BEQ.b CODE_01A95D
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b #$18
	CPY.b #$00
	BEQ.b CODE_01A95A
	LDA.b #$E8
CODE_01A95A:
	STA.b !RAM_SMW_Player_XSpeed
	RTS

CODE_01A95D:
	JSR.w CODE_01AB46
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	AND.b #!Define_SMW_NorSpr_1686Prop_SpawnsNewSprite
	BEQ.b CODE_01A9BE
	CPY.b #!Define_SMW_SpriteID_NorSpr072_YellowCapeSuperKoopa
	BCC.b CODE_01A979
	PHX
	PHY
	JSL.l SpawnFeatherFromSuperKoopa
	PLY
	PLX
	LDA.b #$02
	BRA.b CODE_01A99B

CODE_01A979:
	CPY.b #!Define_SMW_SpriteID_NorSpr06E_DinoRhino
	BNE.b CODE_01A98A
	LDA.b #$02
	STA.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr06F_DinoTorch_BreathFireTimer,x
	LDA.b #!Define_SMW_SpriteID_NorSpr06F_DinoTorch
	BRA.b CODE_01A99B

CODE_01A98A:
	CPY.b #!Define_SMW_SpriteID_NorSpr03F_ParachuteGoomba
	BCC.b CODE_01A998
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.w SMW_GenericSpriteToSpawnTable_Main-$2E,y
	BRA.b CODE_01A99B

CODE_01A998:
	LDA.w SMW_GenericSpriteToSpawnTable_Main,y
CODE_01A99B:
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	AND.b #$0E
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	AND.b #$F1
	ORA.b !RAM_SMW_Misc_ScratchRAM0F
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BNE.b Return01A9BD
	INC.w !RAM_SMW_NorSpr_Table7E151C,x
Return01A9BD:
	RTS

CODE_01A9BE:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x			;\ Glitch: This code is buggy. It makes glitch graphics appear when landing on some sprites with a cape.
	SEC							;|
	SBC.b #!Define_SMW_SpriteID_NorSpr004_GreenKoopa	;|
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb		;|
	BCS.b CODE_01A9CC					;|
	LDA.w !RAM_SMW_Player_CapeFlyingPhase			;|
	BNE.b CODE_01A9D3					;/
CODE_01A9CC:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_DiesWhenJumpedOn
	BEQ.b CODE_01A9E2
CODE_01A9D3:
	LDA.b #!Define_SMW_NorSprStatus03_Smushed
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_SmushedSpriteDespawnTimer,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

CODE_01A9E2:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #!Define_SMW_NorSpr_1662Prop_FallWhenKilled
	BEQ.b CODE_01AA01
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01A9F2:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	BNE.b Return01AA00
	LDY.w !RAM_SMW_Sprites_LakituCloudSlotIndex
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,y
Return01AA00:
	RTS

CODE_01AA01:
	LDY.w !RAM_SMW_NorSpr_CurrentStatus,x
	STZ.w !RAM_SMW_NorSpr_Table7E1626,x
	CPY.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b SetStunnedTimer
CODE_01AA0B:
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	BNE.b SetStunnedTimer
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BRA.b SetAsStunned

SetStunnedTimer:
	LDA.b #$02
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BEQ.b CODE_01AA28
	CPY.b #!Define_SMW_SpriteID_NorSpr011_BuzzyBeetle
	BEQ.b CODE_01AA28
	CPY.b #!Define_SMW_SpriteID_NorSpr0A2_MechaKoopa
	BEQ.b CODE_01AA28
	CPY.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BNE.b CODE_01AA2A
CODE_01AA28:
	LDA.b #$FF
CODE_01AA2A:
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
SetAsStunned:
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckForPlayerToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

CODE_01AA42:
	LDA.w !RAM_SMW_Player_SpinJumpFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01AA58
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01AA58
	LDA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	AND.b #!Define_SMW_NorSpr_1656Prop_SafeToJumpOn
	BEQ.b CODE_01AA58
	JMP.w CODE_01A924

CODE_01AA58:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w !RAM_SMW_IO_ControllerHold1
else
	LDA.b !RAM_SMW_IO_ControllerHold1
endif
	AND.b #!Joypad_X|(!Joypad_Y>>8)
	BEQ.b CODE_01AA74
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag1
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01AA74
	LDA.b #!Define_SMW_NorSprStatus0B_Carried
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	INC.w !RAM_SMW_Player_CarryingSomethingFlag1
	LDA.b #$08
	STA.w !RAM_SMW_Timer_DisplayPlayerPickUpPose
	RTS

CODE_01AA74:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BEQ.b CODE_01AAB7
	CMP.b #!Define_SMW_SpriteID_NorSpr03E_PSwitch
	BEQ.b CODE_01AAB2
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BEQ.b CODE_01AA97
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BEQ.b CODE_01AA97
	CMP.b #!Define_SMW_SpriteID_NorSpr0A2_MechaKoopa
	BEQ.b CODE_01AA97
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BNE.b CODE_01AA94
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_01AA97

CODE_01AA94:
	JSR.w CODE_01AB46
CODE_01AA97:
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_PlayKickSfx
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	STA.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.b #!Define_SMW_NorSprStatus0A_Kicked
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w SMW_NorSprStatus0B_Carried_ShellXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	RTS

CODE_01AAB2:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	BNE.b Return01AB2C
CODE_01AAB7:
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Player_CurrentYPosLo
	CLC
	ADC.b #$08
	CMP.b #$20
	BCC.b CODE_01AB31
	BPL.b CODE_01AACD
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
	RTS

CODE_01AACD:
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return01AB2C
	STZ.b !RAM_SMW_Player_YSpeed
	STZ.b !RAM_SMW_Player_InAirFlag
	INC.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.b #$1F
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01AAE1
	LDA.b #$2F
CODE_01AAE1:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr03E_PSwitch
	BNE.b Return01AB2C
	ASL.w !RAM_SMW_NorSpr_PropertyBits167A,x				;\ Note: !Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction
	LSR.w !RAM_SMW_NorSpr_PropertyBits167A,x				;/
	LDA.b #!Define_SMW_Sound1DF9_ONOFFSwitch
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	BMI.b CODE_01AB0C
	LDA.b #!Define_SMW_LevelMusic_DirectCoins
	STA.w !RAM_SMW_IO_MusicCh1
CODE_01AB0C:
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	LSR.w !RAM_SMW_NorSpr_Table7E15F6,x
	ASL.w !RAM_SMW_NorSpr_Table7E15F6,x
	LDY.w !RAM_SMW_NorSpr_Table7E151C,x
	LDA.b #$B0
	STA.w !RAM_SMW_Timer_BluePSwitch,y
	LDA.b #$20
	STA.w !RAM_SMW_Timer_ShakeLayer1
	CPY.b #$01
	BNE.b Return01AB2C
	JSL.l TurnSpritesIntoSilverCoins
Return01AB2C:
	RTS

DATA_01AB2D:
	dw $0001,$FFFF

CODE_01AB31:
	STZ.b !RAM_SMW_Player_XSpeed
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_01AB2D,y
	STA.b !RAM_SMW_Player_XPosLo
	SEP.b #$20
	RTS

CODE_01AB46:
	PHY
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	CLC
	ADC.w !RAM_SMW_NorSpr_Table7E1626,x
	INC.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	TAY
	INY
	CPY.b #$08
	BCS.b CODE_01AB5D
	LDA.w SMW_StompSoundTable_Bank01-$01,y
	STA.w !RAM_SMW_IO_SoundCh1
CODE_01AB5D:
	TYA
	CMP.b #$08
	BCC.b CODE_01AB64
	LDA.b #$08
CODE_01AB64:
	JSL.l SMW_GivePoints_Main
	PLY
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_CheckForPlayerToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

TurnSpritesIntoSilverCoins:
	LDA.b #$02
	STA.w !RAM_SMW_Counter_CurrentSilverCoins
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_02B9C4:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_02B9D5
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,y
	AND.b #!Define_SMW_NorSpr_190FProp_ImmuneToSilverPSwitch
	BNE.b CODE_02B9D5
	JSR.w CODE_02B9D9
CODE_02B9D5:
	DEY
	BPL.b CODE_02B9C4
	RTL

CODE_02B9D9:
	LDA.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	AND.b #$F1
	ORA.b #$02
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
	LDA.b #$D8
	STA.w !RAM_SMW_NorSpr_YSpeed,x
	PLX
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_CheckForPlayerToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

SpawnFeatherFromSuperKoopa:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return02EB26
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr077_Feather
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return02EB26:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckForPlayerFireballToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerFireballToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

Main:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b SMW_ExtSpr05_MarioFireball_Return02A0A8
	PHX
	TXY
	STY.w !RAM_SMW_Misc_ScratchRAM7E185E
	LDX.b #!Define_SMW_MaxNormalSpriteSlot-$02
FireRtLoopStart:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b FireRtNextSprite
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	ORA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	EOR.w !RAM_SMW_ExtSpr05_MarioFireball_CurrentLayerPriority,y
	BNE.b FireRtNextSprite
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSR.w GetPlayerFireballClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b FireRtNextSprite
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_ExtSpr11_YoshiFireball
	BEQ.b CODE_02A0EE
	PHX
	TYX
	JSR.w SMW_ExtSpr05_MarioFireball_CODE_02A045
	PLX
CODE_02A0EE:
	LDA.w !RAM_SMW_NorSpr_PropertyBits166E,x
	AND.b #!Define_SMW_NorSpr_166EProp_ImmuneToFire
	BNE.b FireRtNextSprite
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x
	AND.b #!Define_SMW_NorSpr_190FProp_5FireballHP
	BEQ.b TurnSpriteToCoin
	INC.w !RAM_SMW_NorSpr_FireballHPCounter,x
	LDA.w !RAM_SMW_NorSpr_FireballHPCounter,x
	CMP.b #$05
	BCC.b FireRtNextSprite
	LDA.b #!Define_SMW_Sound1DF9_Contact
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_CopyOfBank02_X
	LDA.w FireKillXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$04
	JSL.l SMW_GivePoints_Main
	BRA.b FireRtNextSprite

TurnSpriteToCoin:
	LDA.b #!Define_SMW_Sound1DF9_KickShell
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_CopyOfBank02_X
	TYA
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
FireRtNextSprite:
	LDY.w !RAM_SMW_Misc_ScratchRAM7E185E
	DEX
	BMI.b CODE_02A14C
	JMP.w FireRtLoopStart

CODE_02A14C:
	PLX
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

FireKillXSpeed:
	db $F0,$10
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckForPlayerFireballToNormalSpriteCollision(Address)
namespace SMW_CheckForPlayerFireballToNormalSpriteCollision
%InsertMacroAtXPosition(<Address>)

GetPlayerFireballClipping:
	LDA.w !RAM_SMW_ExtSpr_XPosLo,y
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosHi,y
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ExtSpr_YPosLo,y
	SEC
	SBC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_YPosHi,y
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$13
	STA.b !RAM_SMW_Misc_ScratchRAM03
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ParseLevelSpriteList(Address)
namespace SMW_ParseLevelSpriteList
%InsertMacroAtXPosition(<Address>)

SpriteSlotMax:
	db !Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$06,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$05
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$05,!Define_SMW_MaxNormalSpriteSlot-$05
	db !Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$03,!Define_SMW_MaxNormalSpriteSlot-$07
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$03,!Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$06
	db !Define_SMW_MaxNormalSpriteSlot-$06

SpriteSlotMax1:
	db !Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$0A,!Define_SMW_MaxNormalSpriteSlot-$0B,!Define_SMW_MaxNormalSpriteSlot-$0A
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$05,!Define_SMW_MaxNormalSpriteSlot-$05
	db !Define_SMW_MaxNormalSpriteSlot-$0B,!Define_SMW_MaxNormalSpriteSlot-$09,!Define_SMW_MaxNormalSpriteSlot-$0B
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$0A,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$03,!Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$06

SpriteSlotMax2:
	db !Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$0A,!Define_SMW_MaxNormalSpriteSlot-$0B,!Define_SMW_MaxNormalSpriteSlot-$05
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$05,!Define_SMW_MaxNormalSpriteSlot-$05
	db !Define_SMW_MaxNormalSpriteSlot-$0B,!Define_SMW_MaxNormalSpriteSlot-$09,!Define_SMW_MaxNormalSpriteSlot-$0B
	db !Define_SMW_MaxNormalSpriteSlot-$04,!Define_SMW_MaxNormalSpriteSlot-$0A,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$03,!Define_SMW_MaxNormalSpriteSlot-$02,!Define_SMW_MaxNormalSpriteSlot-$04
	db !Define_SMW_MaxNormalSpriteSlot-$06

SpriteSlotStart:
	db !NullSpriteSlot,!NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$0B
	db !Define_SMW_MaxNormalSpriteSlot-$0A,!Define_SMW_MaxNormalSpriteSlot-$0B,!Define_SMW_MaxNormalSpriteSlot-$0A
	db !NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$0A,!NullSpriteSlot
	db !Define_SMW_MaxNormalSpriteSlot-$0B,!NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$0B
	db !NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$0A,!NullSpriteSlot
	db !NullSpriteSlot,!NullSpriteSlot,!NullSpriteSlot
	db !NullSpriteSlot

SpriteSlotStart1:
	db !NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$06,!NullSpriteSlot
	db !NullSpriteSlot,!NullSpriteSlot,!NullSpriteSlot
	db !NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$0A,!NullSpriteSlot
	db !NullSpriteSlot,!NullSpriteSlot,!NullSpriteSlot
	db !NullSpriteSlot,!NullSpriteSlot,!NullSpriteSlot
	db !NullSpriteSlot,!NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$06
	db !NullSpriteSlot

ReservedSprite1:							;\ Info: Sprite memory index...
	db $FF								;| $00
	db !Define_SMW_SpriteID_NorSpr05F_BrownChainedPlatform		;| $01
	db !Define_SMW_SpriteID_NorSpr054_ClimbingNetDoor		;| $02
	db !Define_SMW_SpriteID_NorSpr05E_FloatingOrangePlatform	;| $03
	db !Define_SMW_SpriteID_NorSpr060_FlatPalaceSwitch		;| $04
	db !Define_SMW_SpriteID_NorSpr028_BigBoo			;| $05
	db !Define_SMW_SpriteID_NorSpr088_WingedCage			;| $06
	db $FF								;| $07
	db $FF								;| $08
	db !Define_SMW_SpriteID_NorSpr0C5_BigBooBoss			;| $09
	db !Define_SMW_SpriteID_NorSpr086_Wiggler			;| $0A
	db !Define_SMW_SpriteID_NorSpr028_BigBoo			;| $0B
	db $FF								;| $0C
	db !Define_SMW_SpriteID_NorSpr090_GreenGasBubble		;| $0D
	db $FF								;| $0E
	db $FF								;| $0F
	db $FF								;| $10
	db !Define_SMW_SpriteID_NorSpr0AE_FishinBoo			;/ $11

ReservedSprite2:							;\ Info: Sprite memory index...
	db $FF								;| $00
	db !Define_SMW_SpriteID_NorSpr064_LineGuideRope			;| $01
	db $FF								;| $02
	db $FF								;| $03
	db !Define_SMW_SpriteID_NorSpr09F_BanzaiBill			;| $04
	db $FF								;| $05
	db $FF								;| $06
	db $FF								;| $07
	db $FF								;| $08
	db $FF								;| $09
	db $FF								;| $0A
	db $FF								;| $0B
	db $FF								;| $0C
	db !Define_SMW_SpriteID_NorSpr09F_BanzaiBill			;| $0D
	db $FF								;| $0E
	db $FF								;| $0F
	db $FF								;| $10
	db $FF								;/ $11

DATA_02A7F6:
	db $D0,$00,$20

DATA_02A7F9:
	db $FF,$00,$01

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b Return02A84B
Entry2:
	LDY.b !RAM_SMW_Camera_Layer1ScrollingDirection
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCC.b CODE_02A817
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w DATA_02A7F6,y
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BRA.b CODE_02A823

CODE_02A817:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w DATA_02A7F6,y
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
CODE_02A823:
	ADC.w DATA_02A7F9,y
#LM300Hijack_UpdatedSpriteListRt1:
	BMI.b Return02A84B
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$00
#LM_JMLHere_UpdatedSpriteListRt:
	LDY.b #$01
LoadSpriteLoopStrt:
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
#LM300Hijack_UpdatedSpriteListRt2:				; LM: Inserts 3 JMLs here. (3.00+)
	CMP.b #$FF
	BEQ.b Return02A84B
	ASL
	ASL
	ASL
	AND.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM02
	INY
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	AND.b #$0F
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b !RAM_SMW_Misc_ScratchRAM01
	BCS.b CODE_02A84C
LoadNextSprite:
	INY
	INY
	INX
	BRA.b LoadSpriteLoopStrt

Return02A84B:
	RTS

CODE_02A84C:
	BNE.b Return02A84B
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	AND.b #$F0
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b LoadNextSprite
	LDA.w !RAM_SMW_Sprites_LoadStatus,x
	BNE.b LoadNextSprite
	STX.b !RAM_SMW_Misc_ScratchRAM02
	INC.w !RAM_SMW_Sprites_LoadStatus,x
	INY
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	DEY
	CMP.b #$E7
	BCC.b CODE_02A88C
	LDA.w !RAM_SMW_L1ScrollSpr_SpriteID
	ORA.w !RAM_SMW_L2ScrollSpr_SpriteID
	BNE.b CODE_02A88A
	PHY
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	SEC
	SBC.b #$E7
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	DEY
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	LSR
	LSR
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	JSL.l SMW_InitializeScrollSprites_Main
	PLX
	PLY
CODE_02A88A:
	BRA.b LoadNextSprite

CODE_02A88C:
	CMP.b #$DE
	BNE.b CODE_02A89C
	PHY
	PHX
	DEY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	JSR.w SMW_NorSpr0DE_Load5Eeries_Main
	PLX
	PLY
CODE_02A89A:
	BRA.b LoadNextSprite

CODE_02A89C:
	CMP.b #$E0
	BNE.b CODE_02A8AC
	PHY
	PHX
	DEY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	JSR.w SMW_NorSpr0E0_Load3Platforms_Main
	PLX
	PLY
	BRA.b CODE_02A89A

CODE_02A8AC:
	CMP.b #$CB
	BCC.b CODE_02A8D4
	CMP.b #$DA
	BCS.b CODE_02A8C0
	SEC
	SBC.b #$CB
	INC
	STA.w !RAM_SMW_GenSpr_SpriteID
	STZ.w !RAM_SMW_Sprites_LoadStatus,x
	BRA.b CODE_02A89A

CODE_02A8C0:
	CMP.b #$E1
	BCC.b CODE_02A8D0
	PHX
	PHY
	DEY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	JSR.w SMW_NorSpr0E1_LoadBooCeiling_Main
	PLY
	PLX
	BRA.b CODE_02A89A

CODE_02A8D0:
	LDA.b #$09
	BRA.b CODE_02A8DF

CODE_02A8D4:
	CMP.b #$C9
	BCC.b LoadNormalSprite
	JSR.w SMW_NorSprXXX_LoadShooter_Main
	BRA.b CODE_02A89A

LoadNormalSprite:
	LDA.b #$01
CODE_02A8DF:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	DEY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDY.w !RAM_SMW_Sprites_SpriteMemorySetting
	LDX.w SpriteSlotMax,y
	LDA.w SpriteSlotStart,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CMP.w ReservedSprite1,y
	BNE.b CODE_02A8FE
	LDX.w SpriteSlotMax1,y
	LDA.w SpriteSlotStart1,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02A8FE:
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CMP.w ReservedSprite2,y
	BNE.b CODE_02A916
	CMP.b #!Define_SMW_SpriteID_NorSpr064_LineGuideRope
	BNE.b CODE_02A90F
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$10
	BEQ.b CODE_02A916
CODE_02A90F:
	LDX.w SpriteSlotMax2,y
	LDA.b #$FF
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02A916:
	STX.b !RAM_SMW_Misc_ScratchRAM0F
CODE_02A918:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b CODE_02A93C
	DEX
	CPX.b !RAM_SMW_Misc_ScratchRAM06
	BNE.b CODE_02A918
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CMP.b #!Define_SMW_SpriteID_NorSpr07B_GoalTape
	BNE.b CODE_02A936
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
ADDR_02A92A:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	BEQ.b CODE_02A93C
	DEX
	CPX.b !RAM_SMW_Misc_ScratchRAM06
	BNE.b ADDR_02A92A
CODE_02A936:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	STZ.w !RAM_SMW_Sprites_LoadStatus,x
	RTS

CODE_02A93C:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCC.b CODE_02A95B
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PLA
	AND.b #$0D
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	BRA.b CODE_02A971

CODE_02A95B:
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	AND.b #$0D
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_XPosHi,x
CODE_02A971:
	INY
	INY
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	BCC.b CODE_02A984
	SEC
	SBC.b #$DA
	CLC
	ADC.b #!Define_SMW_SpriteID_NorSpr004_GreenKoopa
CODE_02A984:
	PHY
	LDY.w !RAM_SMW_Overworld_LevelTileSettings+!Define_SMW_LevelID_ChangeKoopaColors
	BPL.b CODE_02A996
	CMP.b #!Define_SMW_SpriteID_NorSpr004_GreenKoopa
	BNE.b CODE_02A990
	LDA.b #!Define_SMW_SpriteID_NorSpr007_YellowKoopa
CODE_02A990:
	CMP.b #!Define_SMW_SpriteID_NorSpr005_RedKoopa
	BNE.b CODE_02A996
	LDA.b #!Define_SMW_SpriteID_NorSpr006_BlueKoopa
CODE_02A996:
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	PLY
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	LDA.w !RAM_SMW_Timer_SilverPSwitch
	BEQ.b CODE_02A9C9
	PHX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	TAX
	LDA.l SMW_InitializeNormalSpriteRAMTables_Sprite190FVals,x
	PLX
	AND.b #!Define_SMW_NorSpr_190FProp_ImmuneToSilverPSwitch
	BNE.b CODE_02A9C9
	LDA.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	AND.b #$F1
	ORA.b #$02
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
	BRA.b CODE_02A9CD

CODE_02A9C9:
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
CODE_02A9CD:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
	INY
	LDX.b !RAM_SMW_Misc_ScratchRAM02
#LM_JMLHere_02A9DA:
	INX
	JMP.w LoadSpriteLoopStrt
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UnusedGenTileFromSpr(Address)
namespace SMW_UnusedGenTileFromSpr
%InsertMacroAtXPosition(<Address>)

Main:
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UnusedPrepareToAimAtPlayerRoutine(Address)
namespace SMW_UnusedPrepareToAimAtPlayerRoutine
%InsertMacroAtXPosition(<Address>)

Main:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_XPosLo
	PHA
	LDA.b !RAM_SMW_Player_XPosHi
	PHA
	LDA.b !RAM_SMW_Player_YPosLo
	PHA
	LDA.b !RAM_SMW_Player_YPosHi
	PHA
	LDA.w !RAM_SMW_NorSpr_XPosLo,y
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,y
	STA.b !RAM_SMW_Player_XPosHi
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,y
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_AimTowardsPlayer_Bank02
	PLA
	STA.b !RAM_SMW_Player_YPosHi
	PLA
	STA.b !RAM_SMW_Player_YPosLo
	PLA
	STA.b !RAM_SMW_Player_XPosHi
	PLA
	STA.b !RAM_SMW_Player_XPosLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_LineGuideSpeedTable(Address)
namespace SMW_LineGuideSpeedTable
%InsertMacroAtXPosition(<Address>)

Main:
Tile076:
	incbin "geometry/lines/76.bin"
Tile077:
	incbin "geometry/lines/77.bin"
Tile078:
	incbin "geometry/lines/78.bin"
Tile079:
	incbin "geometry/lines/79.bin"
Tile07A:
	incbin "geometry/lines/7A.bin"
Tile07B:
	incbin "geometry/lines/7B.bin"
Tile07C:
	incbin "geometry/lines/7C.bin"
Tile07D:
	incbin "geometry/lines/7D.bin"
Tile07E:
	incbin "geometry/lines/7E.bin"
Tile07F:
	incbin "geometry/lines/7F.bin"
Tile080:
	incbin "geometry/lines/80.bin"
Tile081:
	incbin "geometry/lines/81.bin"
Tile082:
	incbin "geometry/lines/82.bin"
Tile083:
	incbin "geometry/lines/83.bin"
Tile084:
	incbin "geometry/lines/84.bin"
Tile085:
	incbin "geometry/lines/85.bin"
Tile086:
	incbin "geometry/lines/86.bin"
Tile087:
	incbin "geometry/lines/87.bin"
Tile088:
	incbin "geometry/lines/88.bin"
Tile089:
	incbin "geometry/lines/89.bin"
Tile08A:
	incbin "geometry/lines/8A.bin"
Tile08B:
	incbin "geometry/lines/8B.bin"
Tile08C:
	incbin "geometry/lines/8C.bin"
Tile08D:
	incbin "geometry/lines/8D.bin"
Tile08E:
	incbin "geometry/lines/8E.bin"
Tile08F:
	incbin "geometry/lines/8F.bin"
Tile090:
	incbin "geometry/lines/90.bin"
Tile091:
	incbin "geometry/lines/91.bin"
Tile092:
	incbin "geometry/lines/92.bin"
Tile093:
	incbin "geometry/lines/93.bin"
Tile094:
	incbin "geometry/lines/94.bin"
Tile095:
	incbin "geometry/lines/95.bin"

PtrsLo:
	db Tile076,Tile077,Tile078,Tile079,Tile07A,Tile07B,Tile07C,Tile07D
	db Tile07E,Tile07F,Tile080,Tile081,Tile082,Tile083,Tile084,Tile085
	db Tile086,Tile087,Tile088,Tile089,Tile08A,Tile08B,Tile08C,Tile08D
	db Tile08E,Tile08F,Tile090,Tile091,Tile092,Tile093,Tile094,Tile095

PtrsHi:
	db Tile076>>8,Tile077>>8,Tile078>>8,Tile079>>8,Tile07A>>8,Tile07B>>8,Tile07C>>8,Tile07D>>8
	db Tile07E>>8,Tile07F>>8,Tile080>>8,Tile081>>8,Tile082>>8,Tile083>>8,Tile084>>8,Tile085>>8
	db Tile086>>8,Tile087>>8,Tile088>>8,Tile089>>8,Tile08A>>8,Tile08B>>8,Tile08C>>8,Tile08D>>8
	db Tile08E>>8,Tile08F>>8,Tile090>>8,Tile091>>8,Tile092>>8,Tile093>>8,Tile094>>8,Tile095>>8
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_CircleCoordinates(Address)
namespace SMW_CircleCoordinates
%InsertMacroAtXPosition(<Address>)

Main:
	incbin "geometry/coordinates/circle.bin"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawLeaningEndingYoshis(Address)
namespace SMW_DrawLeaningEndingYoshis
%InsertMacroAtXPosition(<Address>)

DATA_0CA93A:
	db $BB,$B9,$DC,$DB,$DA,$D9
	db $8B,$89,$AC,$AB,$AA,$A9
	db $B9,$BB,$D9,$DA,$DB,$DC
	db $89,$8B,$A9,$AA,$AB,$AC

DATA_0CA952:
	db $78,$78,$78,$78,$78,$78
	db $78,$78,$78,$78,$78,$78
	db $34,$34,$34,$34,$34,$34
	db $34,$34,$34,$34,$34,$34

DATA_0CA96A:
	db $00,$10,$00,$08,$10,$18
	db $00,$10,$00,$08,$10,$18
	db $00,$10,$00,$08,$10,$18
	db $00,$10,$00,$08,$10,$18

DATA_0CA982:
	db $00,$00,$10,$10,$10,$10
	db $00,$00,$10,$10,$10,$10
	db $00,$00,$10,$10,$10,$10
	db $00,$00,$10,$10,$10,$10

DATA_0CA99A:
	db $00,$06,$0C,$12

Main:
	TYA
	LSR
	LSR
	TAY
	LDA.w DATA_0CA99A,y
	TAY
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_0CA9AA:
	LDA.w DATA_0CA96A,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w DATA_0CA96A+$01,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$01].XDisp,x
	LDA.w DATA_0CA982,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.w DATA_0CA982+$01,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$01].YDisp,x
	LDA.w DATA_0CA93A,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w DATA_0CA93A+$01,y
	STA.w SMW_OAMBuffer[$01].Tile,x
	LDA.w DATA_0CA952,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	LDA.w DATA_0CA952+$01,y
	STA.w SMW_OAMBuffer[$01].Prop,x
	PHY
	PHX
	TXA
	LSR
	LSR
	TAX
	LDY.b #$02
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	AND.b #$02
	BNE.b CODE_0CA9F6
	LDY.b #$00
CODE_0CA9F6:
	TYA
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,x
	PLX
	PLY
	TXA
	CLC
	ADC.b #$08
	TAX
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_0CA9AA
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawCameraFacingEndingYoshis(Address)
namespace SMW_DrawCameraFacingEndingYoshis
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $C4,$E4	; Stand
	db $E6,$E8	; Cheer
	db $CE,$EE	; Lean in

Prop:
	db $36,$36
	db $3A,$3A

BlueYoshi:
GreenYoshi:
	PHY
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ASL
	TAY
	LDA.w Prop,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	LDA.w Prop+$01,y
	STA.w SMW_OAMBuffer[$01].Prop,x
	PLY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,x
	STA.w SMW_OAMBuffer[$01].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].YDisp,x
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$01].YDisp,x
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w Tiles+$01,y
	STA.w SMW_OAMBuffer[$01].Tile,x
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawCreditsPeachRedAndYellowYoshi(Address)
namespace SMW_DrawCreditsPeachRedAndYellowYoshi
%InsertMacroAtXPosition(<Address>)

DATA_0CA7B9:
	db $63,$64,$68,$69		;\ Peach Riding Yoshi
	db $63,$64,$68,$69		;|
	db $4B,$4C,$6B,$6C		;/
	db $8A,$8B,$AA,$68		;\ Peach Walking
	db $8D,$8E,$AD,$AE		;/
	db $8A,$00,$AA,$44		;\ Peach Waving
	db $8A,$0E,$AA,$2E		;/
	db $81,$80,$A1,$A0		;\ Red Yoshi Cheering
	db $84,$83,$A4,$A3		;|
	db $87,$86,$A7,$A6		;/
	db $80,$81,$A0,$A1		;\ Yellow Yoshi Cheering
	db $83,$84,$A3,$A4		;|
	db $86,$87,$A6,$A7		;/

DATA_0CA7ED:
	db $21,$21,$21,$21		;\ Peach Riding Yoshi
	db $21,$21,$21,$21		;|
	db $21,$21,$21,$21		;/
	db $21,$21,$21,$21		;\ Peach Walking
	db $20,$20,$20,$20		;/
	db $21,$21,$21,$21		;\ Peach Waving
	db $21,$21,$21,$21		;/
	db $78,$78,$78,$78		;\ Red Yoshi Cheering
	db $78,$78,$78,$78		;|
	db $78,$78,$78,$78		;/
	db $34,$34,$34,$34		;\ Yellow Yoshi Cheering
	db $34,$34,$34,$34		;|
	db $34,$34,$34,$34		;/

Peach:
RedYoshi:
YellowYoshi:
	REP.b #$30
	TXA
	AND.w #$00FF
	TAX
	TYA
	AND.w #$00FF
	CMP.w #$0028
	BCC.b CODE_0CA836
	TXA
	ORA.w #$0100
	TAX
CODE_0CA836:
	SEP.b #$20
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_0CA83C:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0CA8A0
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$01].XDisp,x
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$00].XDisp,x
	BCC.b CODE_0CA855
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0A
CODE_0CA855:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].YDisp,x
	STA.w SMW_OAMBuffer[$01].YDisp,x
	LDA.w DATA_0CA7B9,y
	STA.w SMW_OAMBuffer[$01].Tile,x
	LDA.w DATA_0CA7B9+$01,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w DATA_0CA7ED,y
	STA.w SMW_OAMBuffer[$01].Prop,x
	LDA.w DATA_0CA7ED+$01,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	REP.b #$20
	TXA
	LSR
	LSR
	TAX
	SEP.b #$20
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	REP.b #$20
	TXA
	CLC
	ADC.w #$0008
	TAX
	SEP.b #$20
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_0CA83C
CODE_0CA8A0:
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GiveCoins(Address)
namespace SMW_GiveCoins
%InsertMacroAtXPosition(<Address>)

MultipleCoins:
	PHA
	LDA.b #!Define_SMW_Sound1DFC_Coin
	STA.w !RAM_SMW_IO_SoundCh3
	PLA
.NoCoinSound:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_Counter_CoinHandler
	STA.w !RAM_SMW_Counter_CoinHandler
	LDA.w !RAM_SMW_Counter_GreenStarBlock
	BEQ.b Return05B35A
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_05B345
	LDA.b #$00
CODE_05B345:
	STA.w !RAM_SMW_Counter_GreenStarBlock
	BRA.b Return05B35A

OneCoin:
Main:
	INC.w !RAM_SMW_Counter_CoinHandler
	LDA.b #!Define_SMW_Sound1DFC_Coin
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.w !RAM_SMW_Counter_GreenStarBlock
	BEQ.b Return05B35A
	DEC.w !RAM_SMW_Counter_GreenStarBlock
Return05B35A:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UnusedOverworldEventPassedCheck(Address)
namespace SMW_UnusedOverworldEventPassedCheck
%InsertMacroAtXPosition(<Address>)

Main:
	TYA
	AND.b #$07
	PHA
	TYA
	LSR
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Overworld_EventFlags,x
	PLX
	AND.l SMW_BitTable_Bank05,x
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerStateXX_EnterPipe(Address)
namespace SMW_PlayerStateXX_EnterPipe
%InsertMacroAtXPosition(<Address>)

PipeXSpeed:
	db $F8,$08

PipeYSpeed:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $00,$00,$F2,$0E
else
	db $00,$00,$F0,$10
endif

HIDEPIPESETS:
	db $00,$63,$1C,$00

Horizontal:
	JSR.w SMW_DamagePlayer_DisableButtons
	STZ.w !RAM_SMW_Player_OverrideWalkingFrames
	JSL.l SMW_SetPlayerPose_Main
	JSL.l SMW_SetPlayerPose_Entry2
	JSR.w CODE_00D1F4
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00D1B2
	LDA.b #$29
	STA.w !RAM_SMW_Player_CurrentPose
CODE_00D1B2:
	REP.b #$20
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.w #$0008
	AND.w #$FFF0
	ORA.w #$000E
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	LDA.b !RAM_SMW_Player_PipeAction
	LSR
	TAY
	INY
	LDA.w HIDEPIPESETS-$01,y
	LDX.w !RAM_SMW_Player_CarryingSomethingFlag2
	BEQ.b CODE_00D1DB
	EOR.b #$1C
	DEC.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
	BPL.b CODE_00D1DB
	INC.w !RAM_SMW_Timer_DisplayPlayerFaceScreenPose
CODE_00D1DB:
	LDX.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	CPX.b #$1D
	BCS.b CODE_00D1F0
	CPY.b #$03
	BCC.b CODE_00D1ED
	REP.b #$20
	INC.b !RAM_SMW_Player_YPosLo
	INC.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
CODE_00D1ED:
	LDA.w HIDEPIPESETS,y
CODE_00D1F0:
	STA.b !RAM_SMW_Player_HidePlayerTileFlags
	BRA.b CODE_00D22D

CODE_00D1F4:
	LDA.w !RAM_SMW_Timer_CapeFlapAnimation
	BEQ.b CODE_00D1FC
	DEC.w !RAM_SMW_Timer_CapeFlapAnimation
CODE_00D1FC:
	JMP.w SMW_PlayerStateXX_PowerupAnimations_DecrementAnimationTimer

PipeCntrBoundryX:
	db $0A,$06

PipeCntringSpeed:
	db $FF,$01

Vertical:
	JSR.w SMW_DamagePlayer_DisableButtons
	STZ.w !RAM_SMW_Player_CapeImage
	LDA.b #$0F
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00D22A
	LDX.b #$00
	LDY.b !RAM_SMW_Player_FacingDirection
	LDA.b !RAM_SMW_Player_XPosLo
	AND.b #$0F
	CMP.w PipeCntrBoundryX,y
	BEQ.b CODE_00D228
	BPL.b CODE_00D220
	INX
CODE_00D220:
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w PipeCntringSpeed,x
	STA.b !RAM_SMW_Player_XPosLo
CODE_00D228:
	LDA.b #$21
CODE_00D22A:
	STA.w !RAM_SMW_Player_CurrentPose
CODE_00D22D:
	LDA.b #!Joypad_X|(!Joypad_Y>>8)
	STA.b !RAM_SMW_IO_ControllerHold1
	LDA.b #$02
	STA.w !RAM_SMW_Player_CurrentLayerPriority
	LDA.b !RAM_SMW_Player_PipeAction
	CMP.b #$04
	LDY.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	BEQ.b CODE_00D268
	AND.b #$03
	TAY
	DEC.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	BNE.b CODE_00D24E
	BCS.b CODE_00D24E
	LDA.b #$7F
	STA.b !RAM_SMW_Player_HidePlayerTileFlags
	INC.w !RAM_SMW_Flag_AboutToWarpInPipe
CODE_00D24E:
	LDA.b !RAM_SMW_Player_XSpeed
	ORA.b !RAM_SMW_Player_YSpeed
	BNE.b CODE_00D259
	LDA.b #!Define_SMW_Sound1DF9_IntoPipe
	STA.w !RAM_SMW_IO_SoundCh1
CODE_00D259:
	LDA.w PipeXSpeed,y
	STA.b !RAM_SMW_Player_XSpeed
	LDA.w PipeYSpeed,y
	STA.b !RAM_SMW_Player_YSpeed
	STZ.b !RAM_SMW_Player_InAirFlag
	JMP.w SMW_UpdatePlayerSpritePosition_Main

CODE_00D268:
	BCC.b SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel_Main
CODE_00D26A:
	STZ.w !RAM_SMW_Player_CurrentLayerPriority
	STZ.w !RAM_SMW_Yoshi_InPipe
	JMP.w SMW_PlayerStateXX_PowerupAnimations_CODE_00D158

namespace off
	%SetDuplicateOrNullPointer(SMW_PlayerStateXX_EnterPipe_Horizontal, SMW_PlayerState05_EnterHorizontalPipe_Main)
	%SetDuplicateOrNullPointer(SMW_PlayerStateXX_EnterPipe_Vertical, SMW_PlayerState06_EnterVerticalPipe_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ChangeNormalSpriteDirection(Address)
namespace SMW_ChangeNormalSpriteDirection
%InsertMacroAtXPosition(<Address>)

CheckIfTouchingWall:
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	INC
	AND.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b Return019097
	JSR.w Main
Return019097:
	RTS

Main:
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b Return0190B1
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
FlipXSpeedAndDirection:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return0190B1:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel(Address)
namespace SMW_IncrementSublevelsEnteredAndPrepareToLoadSublevel
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_Counter_SublevelsEntered
	LDA.b #!Define_SMW_GameMode0F_MosaicFadeOutToLevel
	STA.w !RAM_SMW_Misc_GameMode
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UnusedAddToWarpPipeTimerRoutine(Address)
namespace SMW_UnusedAddToWarpPipeTimerRoutine
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_Player_CurrentYPosLo
	CLC
	ADC.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	STA.b !RAM_SMW_Player_TimerBeforeWarpingInPipe
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UnusedJSLTo_NorSpr09A_SumoBro_Status08_Bank02(Address)
namespace SMW_UnusedJSLTo_NorSpr09A_SumoBro_Status08_Bank02
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l SMW_NorSpr09A_SumoBro_Status08_Bank02
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawWingTiles(Address)
namespace SMW_DrawWingTiles
%InsertMacroAtXPosition(<Address>)

XDispLo:
	db $FF,$F7,$09,$09

XDispHi:
	db $FF,$FF,$00,$00

YDisp:
	db $FC,$F4,$FC,$F4

Tiles:
	db $5D,$C6,$5D,$C6

Prop:
	db $46,$46,$06,$06

TileSize:
	db $00,$02,$00,$02

ParaKoopaEntry:
	LDY.b #$00
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BNE.b CODE_019E35
	LDA.w !RAM_SMW_NorSpr_Table7E1602,x
	AND.b #$01
	TAY
CODE_019E35:
	STY.b !RAM_SMW_Misc_ScratchRAM02
CODE_019E37:
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return019E94
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDA.w !RAM_SMW_NorSpr_Table7E157C,x
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDispLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ADC.w XDispHi,x
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLA
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b CODE_019E93
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
CODE_019E93:
	PLX
Return019E94:
	RTS

Main:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	PHA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_Table7E157C,x
	PHA
	STZ.w !RAM_SMW_NorSpr_Table7E157C,x
	LDA.w !RAM_SMW_NorSpr_Table7E1570,x
	LSR
	LSR
	LSR
	AND.b #$01
	TAY
	JSR.w CODE_019E35
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	INC.w !RAM_SMW_NorSpr_Table7E157C,x
	JSR.w CODE_019E37
	PLA
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
	PLA
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MakeNormalSpriteReboundOffWall(Address)
namespace SMW_MakeNormalSpriteReboundOffWall
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	JSR.w SMW_ChangeNormalSpriteDirection_FlipXSpeedAndDirection
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_0199D2
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$14
	CMP.b #$1C
	BCC.b CODE_0199D2
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$40
	ASL
	ASL
	ROL
	AND.b #$01
	STA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	LDY.b #$00
	LDA.w !RAM_SMW_Blocks_CopyOfCurrentlyProcessedMap16TileLo2
	JSL.l SMW_CheckIfBlockWasHit_Main
	LDA.b #$05
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
CODE_0199D2:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	BNE.b Return0199DB
	JSR.w SMW_BreakThrowBlock_Main
Return0199DB:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BreakThrowBlock(Address)
namespace SMW_BreakThrowBlock
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDY.b #$FF
MontyMoleEntry:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return019A03
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	PHB
	LDA.b #SMW_SpawnBrickPieces_Main>>16
	PHA
	PLB
	TYA
	JSL.l SMW_SpawnBrickPieces_Main
	PLB
Return019A03:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StunnedShellGFXRt(Address)
namespace SMW_StunnedShellGFXRt
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$06
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	BNE.b CODE_01980F
	LDA.b #$08
CODE_01980F:
	STA.w !RAM_SMW_NorSpr_Table7E1602,x
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	PHA
	BEQ.b CODE_01981B
	CLC
	ADC.b #$08
CODE_01981B:
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	PLA
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_Overworld_LevelTileSettings+!Define_SMW_LevelID_ChangeSP2GFX
	BMI.b Return0198A6
	LDA.w !RAM_SMW_NorSpr_Table7E1602,x
	CMP.b #$06
	BNE.b Return0198A6
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BNE.b CODE_019842
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BEQ.b Return0198A6
	CMP.b #$30
	BCS.b CODE_01984D
CODE_019842:
	LSR
	LDA.w SMW_OAMBuffer[$42].XDisp,y
	ADC.b #$00
	BCS.b CODE_01984D
	STA.w SMW_OAMBuffer[$42].XDisp,y
CODE_01984D:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr011_BuzzyBeetle
	BEQ.b Return0198A6
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return0198A6
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ASL
	LDA.b #$08
	BCC.b CODE_019862
	LDA.b #$00
CODE_019862:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w SMW_OAMBuffer[$42].XDisp,y
	CLC
	ADC.b #$02
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$04
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.w SMW_OAMBuffer[$42].YDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	PHY
	LDY.b #$64
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$F8
	BNE.b CODE_01988A
	LDY.b #$4D
CODE_01988A:
	TYA
	PLY
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
Return0198A6:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessStunnedNormalSprite(Address)
namespace SMW_ProcessStunnedNormalSprite
%InsertMacroAtXPosition(<Address>)

StunnedGoomba:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LDY.w !RAM_SMW_NorSpr00F_Goomba_StunTimer,x
	CPY.b #$30
	BCC.b .CODE_01A13B
	LSR
.CODE_01A13B:
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CPY.b #$08
	BNE.b .CODE_01A14D
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b .CODE_01A14D
	LDA.b #$D8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
.CODE_01A14D:
	LDA.b #$80
	JMP.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry2

StunnedMechaKoopa:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PHA
	LDA.w !RAM_SMW_NorSpr0A2_MechaKoopa_StunTimer,x
	CMP.b #$30
	BCS.b .CODE_01A162
	AND.b #$01
	EOR.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
.CODE_01A162:
	JSL.l SMW_NorSpr0A2_MechaKoopa_Status08_GFXRt
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
.CODE_01A169:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BNE.b .Return01A177
	LDA.b !RAM_SMW_Player_FacingDirection
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
.Return01A177:
	RTS

StunnedFish:
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b #$80
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	RTS

Main:
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_DontBecomeShellWhenStunned
	BEQ.b CODE_01A1D0
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A2_MechaKoopa
	BEQ.b StunnedMechaKoopa
	CMP.b #!Define_SMW_SpriteID_NorSpr015_HorizontalCheepCheep
	BEQ.b StunnedFish
	CMP.b #!Define_SMW_SpriteID_NorSpr016_VerticalCheepCheep
	BEQ.b StunnedFish
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BEQ.b StunnedGoomba
	CMP.b #!Define_SMW_SpriteID_NorSpr053_ThrowBlock
	BEQ.b StunnedThrowBlock
	CMP.b #!Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	BEQ.b StunnedYoshiEgg
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BEQ.b StunnedKey
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BEQ.b Return01A1D3
	CMP.b #!Define_SMW_SpriteID_NorSpr03E_PSwitch
	BEQ.b StunnedPSwitch
	CMP.b #!Define_SMW_SpriteID_NorSpr02F_PortableSpringboard
	BEQ.b StunnedSpringBoard
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BEQ.b StunnedBobOmb
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BEQ.b StunnedBabyYoshi
	CMP.b #!Define_SMW_SpriteID_NorSpr085_Unused
	BNE.b CODE_01A1D0
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1		;\ Note: Code for NorSpr085_Unused
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x			;|
	LDA.b #$47						;|
	STA.w SMW_OAMBuffer[$40].Tile,y				;|
	RTS							;/

CODE_01A1D0:
	JSR.w SMW_StunnedShellGFXRt_Main
Return01A1D3:
	RTS

StunnedThrowBlock:
	LDA.w !RAM_SMW_NorSpr053_ThrowBlock_DespawnTimer,x
	CMP.b #$40
	BCS.b .CODE_01A1DE
	LSR
	BCS.b StunnedYoshiEgg
.CODE_01A1DE:
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	INC
	INC
	AND.b #$0F
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
StunnedYoshiEgg:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	RTS

StunnedBobOmb:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDA.b #$CA
	BRA.b CODE_01A222

StunnedKey:
	JSR.w StunnedMechaKoopa_CODE_01A169
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDA.b #$EC
	BRA.b CODE_01A222

StunnedPSwitch:
	LDY.w !RAM_SMW_NorSpr03E_PSwitch_DespawnTimer,x
	BEQ.b .CODE_01A218
	CPY.b #$01
	BNE.b .CODE_01A209
	JMP.w SMW_NorSprStatus02_Dead_SetNorSprStatus04_Main

.CODE_01A209:
	JSR.w SMW_GenericSmushedSpriteGFXRt_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$FE
	STA.w SMW_OAMBuffer[$40].Prop,y
	RTS

.CODE_01A218:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDA.b #$42
CODE_01A222:
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	RTS

StunnedSpringBoard:
	JMP.w SMW_NorSpr02F_PortableSpringboard_Status08_CODE_01E6F0

StunnedBabyYoshi:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b .CODE_01A27B
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	JSL.l SMW_CheckForBerryTileCollisionWithYoshiTongue_Main
	JSL.l SMW_CheckIfBabyYoshiCanEatNormalSprite_Main
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SwallowAnimationTimer,x
	BNE.b .CODE_01A27E
	DEC
	STA.w !RAM_SMW_NorSpr02D_BabyYoshi_SlotOfSpriteBeingEaten,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BNE.b .CODE_01A26D
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b .CODE_01A26D
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
.CODE_01A26D:
	LDY.b #$00
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$18
	BNE.b .CODE_01A277
	LDY.b #$03
.CODE_01A277:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
.CODE_01A27B:
	JMP.w .CODE_01A34F

.CODE_01A27E:
	STZ.w !RAM_SMW_NorSpr_OAMIndex,x
	CMP.b #$20
	BEQ.b .CODE_01A288
	JMP.w .CODE_01A30A

.CODE_01A288:
	LDY.w !RAM_SMW_NorSpr02D_BabyYoshi_SlotOfSpriteBeingEaten,x
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_Sound1DF9_YoshiGulp
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SlotOfSpriteBeingEaten,y
	BNE.b .CODE_01A2F4
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr081_ChangingItem
	BNE.b .CODE_01A2AD
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w SMW_NorSprXXX_PowerUps_Status08_ChangingItemSprite,y
.CODE_01A2AD:
	CMP.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	BCC.b .CODE_01A2F4
	CMP.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom
	BCS.b .CODE_01A2F4
.CODE_01A2B5:
	STZ.w !RAM_SMW_Yoshi_SwallowTimer
	STZ.w !RAM_SMW_Yoshi_YoshiHasWings
	LDA.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	STA.w !RAM_SMW_NorSpr_SpriteID,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_Sound1DFC_MountYoshi
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SBC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	PHA
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	AND.b #$FE
	STA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	DEC.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.b #$40
	STA.w !RAM_SMW_GrowingYoshiTimer
	RTS

.CODE_01A2F4:
	INC.w !RAM_SMW_NorSpr02D_BabyYoshi_SpritesEatenCounter,x
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SpritesEatenCounter,x
	CMP.b #$05
	BNE.b .CODE_01A300
	BRA.b .CODE_01A2B5

.CODE_01A300:
	JSL.l SMW_GiveCoins_OneCoin
	LDA.b #$01
	JSL.l SMW_GivePoints_Main
.CODE_01A30A:
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SwallowAnimationTimer,x
	LSR
	LSR
	LSR
	TAY
	LDA.w .DATA_01A35A,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SwallowAnimationTimer,x
	CMP.b #$20
	BCC.b .CODE_01A34F
	SBC.b #$10
	LSR
	LSR
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b .CODE_01A32E
	EOR.b #$FF
	INC
	DEC.b !RAM_SMW_Misc_ScratchRAM01
.CODE_01A32E:
	LDY.w !RAM_SMW_NorSpr02D_BabyYoshi_SlotOfSpriteBeingEaten,x
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$02
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
.CODE_01A34F:
	JSR.w StunnedMechaKoopa_CODE_01A169
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	JSL.l SMW_SetBabyYoshiDynamicGraphicsPointer_Main
	RTS

.DATA_01A35A:
	db $00,$03,$02,$02,$01,$01,$01
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateHDMAWindowBuffer(Address)
namespace SMW_UpdateHDMAWindowBuffer
%InsertMacroAtXPosition(<Address>)

SetCircleHDMAPointer:
	REP.b #$20
	LDA.w #CircleHDMAData
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM06
	SEP.b #$20
	RTS

IrisInOnPlayerEntry:
	CLC
	ADC.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	STA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$18
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_00CA83
	LDA.b #$10
CODE_00CA83:
	CLC
	ADC.b !RAM_SMW_Player_OnScreenPosYLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
TitleScreenEntry:
KeyholeEntry:
#SA1Pack_OptimizeThisRoutine:
	REP.b #$30
	AND.w #$00FF
	ASL
	DEC
	ASL
	TAY
	SEP.b #$20
	LDX.w #$0000
CODE_00CA96:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CMP.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	BCC.b CODE_00CABD
	LDA.b #$FF
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	STZ.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPY.w #$01E0
else
	CPY.w #$01C0
endif
	BCS.b CODE_00CAB1
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,y
	INC
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,y
CODE_00CAB1:
	INX
	INX
	DEY
	DEY
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_00CB0A
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BRA.b CODE_00CA96

CODE_00CABD:
	JSR.w CODE_00CC14
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_00CAC7
	LDA.b #$FF
CODE_00CAC7:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_00CAD3
	LDA.b #$00
CODE_00CAD3:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	CPY.w #$01E0
	BCS.b CODE_00CAFE
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	BNE.b CODE_00CAE7
	LDA.b #$00
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,y
	DEC
	BRA.b CODE_00CAFB

CODE_00CAE7:
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_00CAEF
	LDA.b #$FF
CODE_00CAEF:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM03
	BCS.b CODE_00CAFB
	LDA.b #$00
CODE_00CAFB:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,y
CODE_00CAFE:
	INX
	INX
	DEY
	DEY
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_00CB0A
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_00CABD
CODE_00CB0A:
	LDA.b #$80
	STA.w !RAM_SMW_Mirror_HDMAEnable
	SEP.b #$10
	RTS

CircleHDMAData:
	incbin "geometry/shapes/circle.bin"

KeyholeHDMAData:
	incbin "geometry/shapes/keyhole.bin"

CODE_00CC14:
	PHY
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !REGISTER_DividendHi
	STZ.w !REGISTER_DividendLo
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
	LSR
	TAY
	SEP.b #$20
	LDA.b (!RAM_SMW_Misc_ScratchRAM06),y
	STA.w !REGISTER_Multiplicand
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b (!RAM_SMW_Misc_ScratchRAM04),y
	STA.w !REGISTER_Multiplicand
	LDA.w !RAM_SMW_Timer_HDMAWindowScalingFactor
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PLY
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_SlopeDataTables(Address)
namespace SMW_SlopeDataTables
%InsertMacroAtXPosition(<Address>)

Player:
.SlopeType:
	db $08,$08,$08,$08,$10,$10,$10,$10	; Gradual slope
	db $18,$18,$20,$20			; Normal slope
	db $28,$30				; Steep slope
	db $08,$10				; Purple triangle
	db $00,$00				; Very steep slope ledge edge
	db $28,$00				; Upside-down steep slope
	db $00,$00,$00,$00			; Upside down normal slope
	db $38,$50,$48,$40			; Conveyor slope
	db $58,$58,$60,$60			; Very steep slope
	db $00					; Flat ground

.StationaryYSpeed:
	db $10,$10,$10,$10,$10,$10,$10,$10	; Gradual slope
	db $20,$20,$20,$20			; Normal slope
	db $30,$30				; Steep slope
	db $40,$30				; Purple triangle
	db $30,$30				; Very steep slope ledge edge
	db $30,$00				; Upside-down steep slope
	db $00,$00,$00,$00			; Upside down normal slope
	db $30,$30,$30,$30			; Conveyor slope
	db $40,$40,$40,$40			; Very steep slope
	db $00					; Flat ground

.TowardsPeakYSpeed:
	db $00,$00,$00,$00,$00,$00,$00,$00	; Gradual slope
	db $EC,$EC,$EE,$EE			; Normal slope
	db $DA,$DA				; Steep slope
	db $00,$00				; Purple triangle
	db $00,$00				; Very steep slope ledge edge
	db $00,$00				; Upside-down steep slope
	db $00,$00,$00,$00			; Upside down normal slope
	db $DA,$DA,$DA,$DA			; Conveyor slope
	db $00,$00,$00,$00			; Very steep slope
	db $00					; Flat ground

.SnapToSlopeDistance:
	db $08,$08,$08,$08,$08,$08,$08,$08	; Gradual slope
	db $09,$09,$09,$09			; Normal slope
	db $0B,$0B				; Steep slope
	db $0B,$0B				; Purple triangle
	db $0B,$0B				; Very steep slope ledge edge
	db $0B,$00				; Upside-down steep slope
	db $00,$00,$00,$00			; Upside down normal slope
	db $0B,$0B,$0B,$0B			; Conveyor slope
	db $14,$14,$14,$14			; Very steep slope
	db $06

SlopeType:
	db $FF,$FF,$FF,$FF,$01,$01,$01,$01	; Gradual slope
	db $FE,$FE,$02,$02			; Normal slope
	db $FD,$03				; Steep slope
	db $FD,$03				; Purple triangle
	db $FD,$03				; Very steep slope ledge edge
	db $FD,$00				; Upside-down steep slope
	db $00,$00,$00,$00			; Upside down normal slope
	db $08,$08,$F8,$F8			; Conveyor slope
	db $FC,$FC,$04,$04			; Very steep slope
	db $00					; Flat ground
namespace off
endmacro

macro DATATABLE_RT01_SMW_SlopeDataTables(Address)
namespace SMW_SlopeDataTables
%InsertMacroAtXPosition(<Address>)

ShapeOfSlope:
	db $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E,$0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C		; Gradual slope left tile 1
	db $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$08,$08,$08,$08		; Gradual slope left tile 2
	db $07,$07,$07,$07,$06,$06,$06,$06,$05,$05,$05,$05,$04,$04,$04,$04		; Gradual slope left tile 3
	db $03,$03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00		; Gradual slope left tile 4
	db $00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03		; Gradual slope right tile 1
	db $04,$04,$04,$04,$05,$05,$05,$05,$06,$06,$06,$06,$07,$07,$07,$07		; Gradual slope right tile 2
	db $08,$08,$08,$08,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B		; Gradual slope right tile 3
	db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D,$0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F		; Gradual slope right tile 4
	db $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C,$0B,$0B,$0A,$0A,$09,$09,$08,$08		; Normal slope left tile 1
	db $07,$07,$06,$06,$05,$05,$04,$04,$03,$03,$02,$02,$01,$01,$00,$00		; Normal slope left tile 2
	db $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07		; Normal slope right tile 1
	db $08,$08,$09,$09,$0A,$0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F		; Normal slope right tile 2
	db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00		; Steep slope left tile
	db $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F		; Steep slope right tile
	db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00		; Left facing purple triangle
	db $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F		; Right facing purple triangle
	db $08,$06,$04,$03,$02,$02,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00		; Solid left, very steep top left slope
	db $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$02,$02,$03,$04,$06,$08		; Solid right, very steep top right slope
	db $FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0		; Steep slope left upside down
	db $F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF		; Steep slope right upside down
	db $FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC,$FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8		; Normal slope left upside down tile 1
	db $F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4,$F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0		; Normal slope left upside down tile 2
	db $F0,$F0,$F1,$F1,$F2,$F2,$F3,$F3,$F4,$F4,$F5,$F5,$F6,$F6,$F7,$F7		; Normal slope right upside down tile 1
	db $F8,$F8,$F9,$F9,$FA,$FA,$FB,$FB,$FC,$FC,$FD,$FD,$FE,$FE,$FF,$FF		; Normal slope right upside down tile 2
	db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00		; Left facing up conveyor
	db $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F		; Right facing down conveyor
	db $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F		; Right facing up conveyor
	db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00		; Left facing down conveyor
	db $10,$10,$10,$10,$10,$10,$10,$10,$0E,$0C,$0A,$08,$06,$04,$02,$00		; Very steep left slope (Top half)
	db $0E,$0C,$0A,$08,$06,$04,$02,$00,$FE,$FC,$FA,$F8,$F6,$F4,$F2,$F0		; Very steep left slope (Bottom half)
	db $00,$02,$04,$06,$08,$0A,$0C,$0E,$10,$10,$10,$10,$10,$10,$10,$10		; Very steep right slope (Top half)
	db $F0,$F2,$F4,$F6,$F8,$FA,$FC,$FE,$00,$02,$04,$06,$08,$0A,$0C,$0E		; Very steep left slope (Bottom half)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckWhatSlopeSpriteIsOn(Address)
namespace SMW_CheckWhatSlopeSpriteIsOn
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #SMW_SlopeDataTables_ShapeOfSlope
	STY.b !RAM_SMW_Misc_ScratchRAM05
	LDY.b #SMW_SlopeDataTables_ShapeOfSlope>>8
	STY.b !RAM_SMW_Misc_ScratchRAM06
	LDY.b #SMW_SlopeDataTables_ShapeOfSlope>>16
	STY.b !RAM_SMW_Misc_ScratchRAM07
	SEC
	SBC.b #$6E
	TAY
	LDA.b [!RAM_SMW_Pointer_SlopeSteepnessLo],y
	STA.b !RAM_SMW_Misc_ScratchRAM08
	ASL
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b CODE_00FA37
	INC.b !RAM_SMW_Misc_ScratchRAM06
CODE_00FA37:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$0F
	ORA.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_CheckIfBlockWasHit(Address)
namespace SMW_CheckIfBlockWasHit
%InsertMacroAtXPosition(<Address>)

Entry2:
	XBA
Main:
	SEC
	SBC.b #$11
	CMP.b #$1D
	BCC.b Entry3
	XBA
	PHX
	LDX.w !RAM_SMW_Misc_LevelTilesetSetting
	LDA.l SMW_InitializeLevelRAM_DATA_00A625,x
	PLX
	AND.b #$03
	BEQ.b CODE_00F176
	RTL

CODE_00F176:
	XBA
	SBC.b #$59
	CMP.b #$02
	BCS.b Return00F1F8
	ADC.b #$22
Entry3:
	PHX
	PHA
	TYX
	LDA.l DATA_00F0EC,x
	PLX
	AND.l DATA_00F0A4,x
	BEQ.b CODE_00F1F6
	STY.b !RAM_SMW_Misc_ScratchRAM06
	LDA.l DATA_00F0C8,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.l DATA_00F05C,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l DATA_00F080,x
	BPL.b CODE_00F1BA
	CMP.b #$FF
	BNE.b CODE_00F1AE
	LDA.b #$05
	LDY.w !RAM_SMW_Counter_GreenStarBlock
	BEQ.b CODE_00F1D0
	BRA.b CODE_00F1CE

CODE_00F1AE:
	LSR
	LDA.b !RAM_SMW_Blocks_XPosLo
	ROR
	LSR
	LSR
	LSR
	TAX
	LDA.l DATA_00F100,x
CODE_00F1BA:
	LSR
	BCC.b CODE_00F1D0
	CMP.b #$03
	BEQ.b CODE_00F1C9
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_00F1D0
	LDA.b #$01
	BRA.b CODE_00F1D0

CODE_00F1C9:
	LDY.w !RAM_SMW_Timer_StarPower
	BNE.b CODE_00F1D0
CODE_00F1CE:
	LDA.b #$06
CODE_00F1D0:
	STA.b !RAM_SMW_Misc_ScratchRAM05
	CMP.b #$05
	BNE.b CODE_00F1DA
	LDA.b #$16
	STA.b !RAM_SMW_Misc_ScratchRAM07
CODE_00F1DA:
	TAY
	LDA.b #$0F
	TRB.b !RAM_SMW_Blocks_XPosLo
	TRB.b !RAM_SMW_Blocks_YPosLo
	CPY.b #$06
	BNE.b CODE_00F1EC
	LDY.w !RAM_SMW_Misc_LevelTilesetSetting
	CPY.b #$04
	BEQ.b CODE_00F1F9
CODE_00F1EC:
	PHB
	LDA.b #SMW_SpawnBounceSprite_Main>>16
	PHA
	PLB
	JSL.l SMW_SpawnBounceSprite_Main
	PLB
CODE_00F1F6:
	PLX
	CLC
Return00F1F8:
	RTL

CODE_00F1F9:
	LDA.b !RAM_SMW_Blocks_YPosHi
	LSR
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$C0
	ROL
	ROL
	ROL
	TAY
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow1-$01,y
	ORA.l DATA_00F0EC,x
	LDX.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow1-$01,y
	STA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow1-$01,y
	CMP.b #$FF
	BNE.b CODE_00F226
	LDA.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM05
CODE_00F220:
	LDA.b #$17
	STA.b !RAM_SMW_Misc_ScratchRAM07
	BRA.b CODE_00F1EC

CODE_00F226:
	LDA.w !RAM_SMW_Flag_PreventCoinBonusGameReplay
	BNE.b CODE_00F236
	TXA
	BEQ.b CODE_00F230
	LDA.b #$02
CODE_00F230:
	EOR.b #$03
	AND.b !RAM_SMW_Counter_GlobalFrames
	BNE.b CODE_00F220
CODE_00F236:
	LDA.b #!Define_SMW_Sound1DFC_Wrong
	STA.w !RAM_SMW_IO_SoundCh3
	PHY
	STZ.b !RAM_SMW_Misc_ScratchRAM05
	PHB
	LDA.b #SMW_SpawnBounceSprite_Main>>16
	PHA
	PLB
	JSL.l SMW_SpawnBounceSprite_Main
	PLB
	PLY
	LDX.b #$07
	LDA.w !RAM_SMW_Blocks_GiveLifeInCoinBonusGameFlagsRow1-$01,y
CODE_00F24E:
	LSR
	BCS.b CODE_00F261
	PHA
	LDA.b #$0D
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.l DATA_00F0F8,x
	STA.b !RAM_SMW_Blocks_XPosLo
	JSL.l SMW_GenerateTile_Main
	PLA
CODE_00F261:
	DEX
	BPL.b CODE_00F24E
	JMP.w CODE_00F1F6
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckIfBlockWasHit(Address)
namespace SMW_CheckIfBlockWasHit
%InsertMacroAtXPosition(<Address>)

DATA_00F05C:
	db $01,$05,$01,$02,$01,$01,$00,$00
	db $00,$00,$00,$00,$00,$06,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$02
	db $02,$03,$03,$04,$02,$02,$02,$01
	db $01,$07,$11,$10

DATA_00F080:
	db $80,$00,$00,$1E,$00,$00,$05,$09
	db $06,$81,$0E,$0C,$14,$00,$05,$09
	db $06,$07,$0E,$0C,$16,$18,$1A,$1A
	db $00,$09,$00,$00,$FF,$0C,$0A,$00
	db $00,$00,$08,$02

DATA_00F0A4:
	db $0C,$08,$0C,$08,$0C,$0F,$08,$08
	db $08,$08,$08,$08,$08,$08,$08,$08
	db $08,$08,$08,$08,$08,$08,$08,$08
	db $08,$03,$03,$08,$08,$08,$08,$08
	db $08,$04,$08,$08

DATA_00F0C8:
	db $0E,$13,$0E,$0D,$0E,$10,$0D,$0D
	db $0D,$0D,$0A,$0D,$0D,$0C,$0D,$0D
	db $0D,$0D,$0B,$0D,$0D,$16,$0D,$0D
	db $0D,$11,$11,$12,$0D,$0D,$0D,$0E
	db $0F,$0C,$0D,$0D

DATA_00F0EC:
	db $08,$01,$02,$04,$ED,$F6,$00,$7D
	db $BE,$00,$6F,$B7

DATA_00F0F8:
	db $40,$50,$00,$70,$80,$00,$A0,$B0

DATA_00F100:
	db $05,$09,$06,$05,$09,$06,$05,$09
	db $06,$05,$09,$06,$05,$09,$06,$05
	db $07,$0A,$10,$07,$0A,$10,$07,$0A
	db $10,$07,$0A,$10,$07,$0A,$10,$07
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleTNTFuse(Address)
namespace SMW_HandleTNTFuse
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_TNTPlungerWasPressed
	BNE.b CODE_0CCB30
	LDA.b #$60
	STA.w !RAM_SMW_Sprites_TNTFuseAndLineXPos
	LDA.b #$01
	STA.w !RAM_SMW_Sprites_TNTFuseAnimationTimer
	STZ.w !RAM_SMW_Sprites_TNTFuseAnimationIndex
	BRA.b CODE_0CCB55

CODE_0CCB30:
	LDX.b #$00
	LDY.b #$30
	LDA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	DEC
	BNE.b CODE_0CCB3C
	LDY.b #$18
CODE_0CCB3C:
	TYA
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X
	DEC.w !RAM_SMW_Sprites_TNTFuseAnimationTimer
	BPL.b CODE_0CCB55
	LDA.b #$01
	STA.w !RAM_SMW_Sprites_TNTFuseAnimationTimer
	LDA.w !RAM_SMW_Sprites_TNTFuseAnimationIndex
	EOR.b #$01
	STA.w !RAM_SMW_Sprites_TNTFuseAnimationIndex
CODE_0CCB55:
	JSR.w SMW_DrawCastleDestructionCastleDoor_Main
	BRL.w TNTFuseAndLineGFXRt
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleTNTFuse(Address)
namespace SMW_HandleTNTFuse
%InsertMacroAtXPosition(<Address>)

TNTFuseAndLineGFXRt:
	LDX.b #$60
	LDA.w !RAM_SMW_Flag_TNTPlungerWasPressed
	BEQ.b CODE_0CCB8A
	LDX.w !RAM_SMW_Sprites_TNTFuseAndLineXPos
CODE_0CCB8A:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$67
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$14
CODE_0CCB92:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$B0
	BCS.b CODE_0CCBB5
	STA.w SMW_OAMBuffer[$60].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$60].YDisp,x
	LDA.b #$E4
	STA.w SMW_OAMBuffer[$60].Tile,x
	LDA.b #$3F
	STA.w SMW_OAMBuffer[$60].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$60].Slot,x
	PLX
CODE_0CCBB5:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	INX
	INX
	CPX.b #$28
	BNE.b CODE_0CCB92
	LDA.w !RAM_SMW_Flag_TNTPlungerWasPressed
	BEQ.b Return0CCBF9
	LDA.w !RAM_SMW_Sprites_TNTFuseAndLineXPos
	SEC
	SBC.b #$08
	CMP.b #$B0
	BCC.b CODE_0CCBD8
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRA.b Return0CCBF9

CODE_0CCBD8:
	STA.w SMW_OAMBuffer[$60].XDisp,x
	LDA.b #$6F
	STA.w SMW_OAMBuffer[$60].YDisp,x
	LDY.b #$85
	LDA.w !RAM_SMW_Sprites_TNTFuseAnimationIndex
	BEQ.b CODE_0CCBE9
	LDY.b #$95
CODE_0CCBE9:
	TYA
	STA.w SMW_OAMBuffer[$60].Tile,x
	LDA.b #$35
	STA.w SMW_OAMBuffer[$60].Prop,x
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$60].Slot,x
Return0CCBF9:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeTNTExplosion(Address)
namespace SMW_InitializeTNTExplosion
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DFC_Explosion
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$FF
	STA.w !RAM_SMW_Sprites_TNTExplosionAnimationIndex
	LDA.b #$30
	STA.w !RAM_SMW_Sprites_TNTExplosionTimer
	LDA.b #$01
	STA.w !RAM_SMW_Sprites_TNTExplosionAnimationTimer
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSR.w SMW_DrawCastleDestructionCastleDoor_Main
	BRL.w SMW_HandleTNTExplosion_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleTNTExplosion(Address)
namespace SMW_HandleTNTExplosion
%InsertMacroAtXPosition(<Address>)

DATA_0CCC49:
	db $03,$01,$03,$01

DATA_0CCC4D:
	dw $7393,$7FFF

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$02
	TAX
	REP.b #$20
	LDA.w DATA_0CCC4D,x
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	SEP.b #$20
	DEC.w !RAM_SMW_Sprites_TNTExplosionTimer
	BPL.b CODE_0CCC82
	JSR.w SMW_ClearCutsceneSpritesSubpixelPosition_Main
	LDX.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.l SMW_GameMode19_Cutscene_SkyColorSetting-$01,x
	ASL
	TAX
	REP.b #$20
	LDA.l SMW_GlobalPalettes_Sky,x
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	SEP.b #$20
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRL.w CODE_0CCC9A

CODE_0CCC82:
	DEC.w !RAM_SMW_Sprites_TNTExplosionAnimationTimer
	BPL.b CODE_0CCC97
	LDA.w !RAM_SMW_Sprites_TNTExplosionAnimationIndex
	INC
	AND.b #$03
	STA.w !RAM_SMW_Sprites_TNTExplosionAnimationIndex
	TAX
	LDA.w DATA_0CCC49,x
	STA.w !RAM_SMW_Sprites_TNTExplosionAnimationTimer
CODE_0CCC97:
	JSR.w TNTExplosionGFXRt
CODE_0CCC9A:
	LDX.b #$1C
	BRL.w SMW_DrawCastleDestructionCastleDoor_Entry2

DATA_0CCC9F:
	db $A0,$A4,$00,$C0,$C4,$00
	db $A0,$A2,$A4,$C0,$C2,$C4
	db $00,$00,$00,$00,$00,$00

DATA_0CCCB1:
	db $00,$06,$0C,$06,$0C

TNTExplosionGFXRt:
	LDA.w !RAM_SMW_Sprites_TNTExplosionAnimationIndex
	INC
	TAX
	LDA.w DATA_0CCCB1,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDY.b #$A0
	CPX.b #$00
	BNE.b CODE_0CCCC8
	LDY.b #$A8
CODE_0CCCC8:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	STY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b #$57
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$00
CODE_0CCCD2:
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w DATA_0CCC9F,y
	BEQ.b CODE_0CCD02
	STA.w SMW_OAMBuffer[$01].Tile,x
	LDY.b #$35
	LDA.w !RAM_SMW_Sprites_TNTExplosionAnimationIndex
	BMI.b CODE_0CCCE9
	AND.b #$02
	BEQ.b CODE_0CCCE9
	LDY.b #$39
CODE_0CCCE9:
	TYA
	STA.w SMW_OAMBuffer[$01].Prop,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$01].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$01].YDisp,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,x
	PLX
CODE_0CCD02:
	INC.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INX
	INX
	INX
	INX
	CPX.b #$0C
	BNE.b CODE_0CCD1E
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0CCD1E:
	CPX.b #$18
	BNE.b CODE_0CCCD2
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeCastleCrumblingDown(Address)
namespace SMW_InitializeCastleCrumblingDown
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DF9_ValleyOfBowserAppears
	STA.w !RAM_SMW_IO_SoundCh1
	JSR.w SMW_InitializeCastleDust_Main
	BRL.w SMW_HandleCastleCrumblingDown_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_HandleCastleCrumblingDown(Address)
namespace SMW_HandleCastleCrumblingDown
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$00
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$C0
	BNE.b CODE_0CCD31
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BRA.b CODE_0CCD75

CODE_0CCD31:
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	LDA.b #$F0
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	JSR.w SMW_ShakeCutsceneCastle_Main
	SEP.b #$20
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$FD
	BNE.b CODE_0CCD59
	LDA.b #$01
	STA.w !RAM_SMW_Flag_ShowWhiteFlag
CODE_0CCD59:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$E8
	BNE.b CODE_0CCD62
	JSR.w SMW_InitializeCastleDestructionTextTimers_DontIncrementCutsceneProcess
CODE_0CCD62:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$C0
	BNE.b CODE_0CCD75
	LDA.b #!Define_SMW_Sound1DF9_EndValleyOfBowserAppears
	STA.w !RAM_SMW_IO_SoundCh1
	JSR.w DrawCastleRubble
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_CastleDustYSpeed
CODE_0CCD75:
	LDX.b #$01
	LDA.w !RAM_SMW_Sprites_CastleDustYSpeed-$01,x
	BPL.b CODE_0CCD85
	LDA.w !RAM_SMW_Sprites_CastleDustYPos-$01,x
	CMP.b #$68
	BCS.b CODE_0CCD91
	BRA.b CODE_0CCD94

CODE_0CCD85:
	LDA.w !RAM_SMW_Sprites_CastleDustYPos-$01,x
	CMP.b #$78
	BNE.b CODE_0CCD91
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRA.b CODE_0CCD9E

CODE_0CCD91:
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
CODE_0CCD94:
	LDX.b #$00
	LDA.b #$04
	STA.w !RAM_SMW_Sprites_CutsceneSpriteXSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X
CODE_0CCD9E:
	BRL.w SMW_HandleCastleLiftoff_CODE_0CCE2A
namespace off
endmacro

macro ROUTINE_RT01_SMW_HandleCastleCrumblingDown(Address)
namespace SMW_HandleCastleCrumblingDown
%InsertMacroAtXPosition(<Address>)

RubbleTiles:
	%StripeImageHeader(.Top, $13, $05, 0, $0000, 1)
	db $C0,$01,$C1,$01,$C2,$01,$C3,$01
	db $C4,$01,$C5,$01,$C1,$41,$C0,$41
.TopEnd:
	%StripeImageHeader(.Bottom, $13, $06, 0, $0000, 1)
	db $D0,$01,$D1,$01,$D2,$01,$D3,$01
	db $D4,$01,$D5,$01,$D1,$41,$D0,$41
.BottomEnd:
	db $FF

DrawCastleRubble:
	LDY.b #$28
	TYA
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
-:
	LDA.w RubbleTiles,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	DEY
	BPL.b -
	LDA.b #$28
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_DrawCastleDestructionCastleDoor(Address)
namespace SMW_DrawCastleDestructionCastleDoor
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$04
Entry2:
	LDA.b #$A8
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$5F
	STA.b !RAM_SMW_Misc_ScratchRAM01
Entry3:
	LDY.b #$00
CODE_0CCC08:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$60].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$60].YDisp,x
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$60].Tile,x
	LDA.b #$2D
	STA.w SMW_OAMBuffer[$60].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$60].Slot,x
	PLX
	INY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TYA
	AND.b #$01
	BNE.b CODE_0CCC40
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0CCC40:
	INX
	INX
	INX
	INX
	CPY.b #$04
	BNE.b CODE_0CCC08
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_DrawCastleDestructionCastleDoor(Address)
namespace SMW_DrawCastleDestructionCastleDoor
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $86,$87,$96,$97
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeDudTNTExplosion(Address)
namespace SMW_InitializeDudTNTExplosion
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$03
	STA.w !RAM_SMW_Sprites_DudTNTSmokeAnimationTimer
	STZ.w !RAM_SMW_Sprites_DudTNTSmokeAnimationIndex
	LDA.b #!Define_SMW_Sound1DFC_Clap
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSR.w SMW_DrawCastleDestructionCastleDoor_Main
	BRL.w SMW_HandleDudTNTExplosion_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleDudTNTExplosion(Address)
namespace SMW_HandleDudTNTExplosion
%InsertMacroAtXPosition(<Address>)

Main:
	DEC.w !RAM_SMW_Sprites_DudTNTSmokeAnimationTimer
	BPL.b CODE_0CCF8B
	LDA.b #$03
	STA.w !RAM_SMW_Sprites_DudTNTSmokeAnimationTimer
	INC.w !RAM_SMW_Sprites_DudTNTSmokeAnimationIndex
	LDA.w !RAM_SMW_Sprites_DudTNTSmokeAnimationIndex
	CMP.b #$04
	BNE.b CODE_0CCF8B
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRA.b CODE_0CCF90

CODE_0CCF8B:
	LDX.b #$04
	JSR.w DrawDudTNTExplosion
CODE_0CCF90:
	LDX.b #$08
	LDA.b #$A8								;\ Optimization: Replace with BRL.w DrawCastleDestructionCastleDoor_Entry2
	STA.b !RAM_SMW_Misc_ScratchRAM00					;|
	STA.b !RAM_SMW_Misc_ScratchRAM02					;|
	LDA.b #$5F								;|
	STA.b !RAM_SMW_Misc_ScratchRAM01					;|
	BRL.w SMW_DrawCastleDestructionCastleDoor_Entry3			;/

TilesAndProp:
	db $60,$62,$64,$66

DrawDudTNTExplosion:
	LDY.w !RAM_SMW_Sprites_DudTNTSmokeAnimationIndex
	LDA.w TilesAndProp,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDY.b #$21								;\ Glitch: This LDY.b #$21 does nothing, so this sprite's tile property uses the tile number loaded.
	STA.w SMW_OAMBuffer[$00].Prop,x						;| To fix this, change it to LDA.b #$20.
										;/ Funnily enough, this bug is not visible in game normally, since the smoke tile doesn't use any palette specific colors.
	LDA.b #$AC
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.b #$63
	STA.w SMW_OAMBuffer[$00].YDisp,x
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessHammerDebris(Address)
namespace SMW_ProcessHammerDebris
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxCutsceneSpriteSlot
CODE_0CD3F6:
	LDA.w !RAM_SMW_CutsceneSpr_HammerDebris_CurrentStatus,x
	BEQ.b CODE_0CD41B
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
	BMI.b CODE_0CD404
	CMP.b #$40
	BCS.b CODE_0CD40B
CODE_0CD404:
	CLC
	ADC.w !RAM_SMW_CutsceneSpr_HammerDebris_YAcceleration,x
	STA.w !RAM_SMW_Sprites_CutsceneSpriteYSpeed,x
CODE_0CD40B:
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,x
	CMP.b #$80
	BCC.b CODE_0CD41B
	STZ.w !RAM_SMW_CutsceneSpr_HammerDebris_CurrentStatus,x
CODE_0CD41B:
	DEX
	CPX.b #!Define_SMW_MaxCutsceneSpriteSlot-$0B
	BNE.b CODE_0CD3F6
	BRL.w DrawSprite

DATA_0CD423:
	db $3C,$3D

DrawSprite:
	LDY.b #!Define_SMW_MaxCutsceneSpriteSlot
	LDX.b #$14
CODE_0CD429:
	LDA.w !RAM_SMW_CutsceneSpr_HammerDebris_CurrentStatus,y
	BEQ.b CODE_0CD45A
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteXPosLo,y
	CMP.b #$50
	BCC.b CODE_0CD45A
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w !RAM_SMW_Sprites_CutsceneSpriteYPosLo,y
	STA.w SMW_OAMBuffer[$00].YDisp,x
	PHY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$02
	LSR
	TAY
	LDA.w DATA_0CD423,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	PLY
	LDA.b #$22
	STA.w SMW_OAMBuffer[$00].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
CODE_0CD45A:
	INX
	INX
	INX
	INX
	DEY
	CPY.b #!Define_SMW_MaxCutsceneSpriteSlot-$0B
	BNE.b CODE_0CD429
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeCastleLiftoff(Address)
namespace SMW_InitializeCastleLiftoff
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$77
	STA.w !RAM_SMW_Sprites_CastleRocketFlameYPos
	STZ.w !RAM_SMW_Sprites_CastleLiftoffYSpeed
	JSR.w SMW_InitializeCastleDust_Main
	BRL.w SMW_HandleCastleLiftoff_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleCastleLiftoff(Address)
namespace SMW_HandleCastleLiftoff
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_0CCDB9
	LDA.w !RAM_SMW_Sprites_CastleLiftoffYSpeed
	CLC
	ADC.b #$02
	STA.w !RAM_SMW_Sprites_CastleLiftoffYSpeed
	CMP.b #$80
	BCC.b CODE_0CCDB9
	LDA.b #$7F
	STA.w !RAM_SMW_Sprites_CastleLiftoffYSpeed
CODE_0CCDB9:
	LDX.b #$00
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	LDA.w !RAM_SMW_Sprites_CastleLiftoffYSpeed
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	BEQ.b CODE_0CCDD7
	CMP.b #$20
	BCS.b CODE_0CCDDA
CODE_0CCDD7:
	JSR.w SMW_ShakeCutsceneCastle_Main
CODE_0CCDDA:
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	BEQ.b CODE_0CCDEF
	CMP.b #$20
	BCC.b CODE_0CCDEF
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_CastleDustYSpeed
CODE_0CCDEF:
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	BEQ.b CODE_0CCE02
	CMP.b #$A8
	BCC.b CODE_0CCE02
	LDA.b #$7F
	STA.w !RAM_SMW_Sprites_WaitBeforeCastleRocketAppearsInSky
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRA.b CODE_0CCE1E

CODE_0CCE02:
	SEP.b #$20
	LDX.b #$01
	LDA.w !RAM_SMW_Sprites_CastleDustYSpeed-$01,x
	BPL.b CODE_0CCE14
	LDA.w !RAM_SMW_Sprites_CastleDustYPos-$01,x
	CMP.b #$68
	BCS.b CODE_0CCE1B
	BRA.b CODE_0CCE1E

CODE_0CCE14:
	LDA.w !RAM_SMW_Sprites_CastleDustYPos-$01,x
	CMP.b #$78
	BCS.b CODE_0CCE1E
CODE_0CCE1B:
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
CODE_0CCE1E:
	LDA.b #$77
	SEC
	SBC.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo
	STA.w !RAM_SMW_Sprites_CastleRocketFlameYPos
	JSR.w DrawCastleRocketFlame
CODE_0CCE2A:
	JSR.w DrawCastleDust
	LDX.b #$14
	LDA.b #$A8
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$5F
	SEC
	SBC.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	BRL.w SMW_DrawCastleDestructionCastleDoor_Entry3

CastleDustTiles:
	db $80,$81,$82,$83,$83,$82,$81,$80

DrawCastleDust:
	DEC.w !RAM_SMW_Sprites_CastleDustAnimationTimer
	BPL.b CODE_0CCE5A
	LDA.b #$05
	STA.w !RAM_SMW_Sprites_CastleDustAnimationTimer
	LDA.w !RAM_SMW_Sprites_CastleDustFacingDirection
	EOR.b #$01
	STA.w !RAM_SMW_Sprites_CastleDustFacingDirection
CODE_0CCE5A:
	LDA.b #$98
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #$21
	LDA.w !RAM_SMW_Sprites_CastleDustFacingDirection
	BEQ.b CODE_0CCE67
	LDY.b #$61
CODE_0CCE67:
	STY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_Sprites_CastleDustFacingDirection
	ASL
	ASL
	TAY
	LDX.b #$00
CODE_0CCE71:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$01].XDisp,x
	LDA.w !RAM_SMW_Sprites_CastleDustYPos
	STA.w SMW_OAMBuffer[$01].YDisp,x
	LDA.w CastleDustTiles,y
	STA.w SMW_OAMBuffer[$01].Tile,x
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_OAMBuffer[$01].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,x
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	INX
	INX
	INX
	INX
	CPX.b #$10
	BNE.b CODE_0CCE71
	RTS

RocketFlameTiles:
	db $C6,$C8,$C6,$C8

RocketFlameProp:
	db $25,$25,$65,$65

DrawCastleRocketFlame:
	LDX.b #$30
	LDA.b #$B0
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w !RAM_SMW_Sprites_CastleRocketFlameYPos
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$06
	LSR
	TAY
	LDA.w RocketFlameTiles,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w RocketFlameProp,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	TXA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeFarawayCastleRocket(Address)
namespace SMW_InitializeFarawayCastleRocket
%InsertMacroAtXPosition(<Address>)

Main:
	DEC.w !RAM_SMW_Sprites_WaitBeforeCastleRocketAppearsInSky
	BMI.b CODE_0CD2EC
	RTS

CODE_0CD2EC:
	JSR.w SMW_ClearCutsceneSpritesSubpixelPosition_Main
	LDA.b #$0F
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketYPosLo
	STZ.w !RAM_SMW_Sprites_FarawayCastleRocketYPosHi
	LDA.b #$90
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketXPosLo
	STZ.w !RAM_SMW_Sprites_FarawayCastleRocketXPosHi
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketYSpeed
	LDA.b #$FF
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketXSpeed
	LDA.b #$02
	STA.w !RAM_SMW_Sprites_DestroyedCastleRocketAnimationTimer
	STZ.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
	STZ.w !RAM_SMW_Sprites_DestroyedCastleRocketSmokeIndex
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRL.w SMW_HandleFarawayCastleRocket_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_HandleFarawayCastleRocket(Address)
namespace SMW_HandleFarawayCastleRocket
%InsertMacroAtXPosition(<Address>)

DATA_0CCED4:
	db $02,$FF,$02,$03,$04,$05,$06

DATA_0CCEDB:
	db $03,$01,$07,$07,$07,$07,$07

Main:
	LDA.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
	CMP.b #$02
	BCS.b CODE_0CCF0F
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BEQ.b CODE_0CCEF7
	LDA.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
	EOR.b #$01
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
CODE_0CCEF7:
	LDX.b #$02
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X
	LDA.w !RAM_SMW_Sprites_FarawayCastleRocketYPosLo
	CMP.b #$5C
	BCC.b CODE_0CCF0D
	LDA.b #$02
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
	BRA.b CODE_0CCF0F

CODE_0CCF0D:
	BRA.b CODE_0CCF38

CODE_0CCF0F:
	DEC.w !RAM_SMW_Sprites_DestroyedCastleRocketAnimationTimer
	BPL.b CODE_0CCF38
	LDA.w !RAM_SMW_Sprites_DestroyedCastleRocketSmokeIndex
	INC
	STA.w !RAM_SMW_Sprites_DestroyedCastleRocketSmokeIndex
	TAX
	LDA.w DATA_0CCED4,x
	STA.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
	LDA.w DATA_0CCEDB,x
	STA.w !RAM_SMW_Sprites_DestroyedCastleRocketAnimationTimer
	CPX.b #$01
	BNE.b CODE_0CCF31
	LDA.b #!Define_SMW_Sound1DF9_SpinJumpKill
	STA.w !RAM_SMW_IO_SoundCh1
CODE_0CCF31:
	CPX.b #$06
	BNE.b CODE_0CCF38
	JSR.w SMW_InitializeCastleDestructionTextTimers_Main
CODE_0CCF38:
	BRL.w DrawSprite

Tiles:
	db $B7,$B8
	db $89,$99,$A9,$B9,$E8

Prop:
	db $25,$25
	db $23,$23,$23,$23,$23

DrawSprite:
	LDY.w !RAM_SMW_Sprites_FarawayCastleRocketAnimationIndex
	CPY.b #$FF
	BEQ.b Return0CCF71
	LDX.b #$04
	LDA.w !RAM_SMW_Sprites_FarawayCastleRocketXPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.w !RAM_SMW_Sprites_FarawayCastleRocketYPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w Prop,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
Return0CCF71:
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeCastleDestructionTextTimers(Address)
namespace SMW_InitializeCastleDestructionTextTimers
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
DontIncrementCutsceneProcess:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.b #$80
else
	LDA.b #$FF
endif
	STA.w !RAM_SMW_Timer_DisplayCastleDestructionText
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$A8
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	LDA.b #$01
else
	LDA.b #$D0
endif
	STA.w !RAM_SMW_Timer_WaitBeforeAllowingEndOfCastleDestructionCutscene
	LDA.b #!Define_SMW_LevelMusic_Welcome
	STA.w !RAM_SMW_IO_MusicCh1
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckIfPlayerCanEndCastleDestructionCutscene(Address)
namespace SMW_CheckIfPlayerCanEndCastleDestructionCutscene
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Timer_DisplayCastleDestructionText
	ORA.w !RAM_SMW_Timer_WaitBeforeAllowingEndOfCastleDestructionCutscene
	BNE.b Return0CCFF6
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	DEC.w !RAM_SMW_Overworld_EnterLevelFlag
	BEQ.b CODE_0CCFED
endif
	LDA.b !RAM_SMW_IO_ControllerPress1
	ORA.b !RAM_SMW_IO_ControllerPress2
if !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) == $00
	AND.b #!Joypad_X|(!Joypad_Y>>8)|!Joypad_A|(!Joypad_B>>8)
endif
	BEQ.b Return0CCFF6
CODE_0CCFED:
	STZ.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	LDA.b #!Define_SMW_GameMode0B_FadeOutToOverworld
	STA.w !RAM_SMW_Misc_GameMode
Return0CCFF6:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_WaitForCastleDestructionTextToFinishInRoyCutscene(Address)
namespace SMW_WaitForCastleDestructionTextToFinishInRoyCutscene
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Timer_DisplayCastleDestructionText
	BEQ.b Return0CD002
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	BRL.w SMW_CheckIfPlayerCanEndCastleDestructionCutscene_Main

Return0CD002:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClearCutsceneSpritesSubpixelPosition(Address)
namespace SMW_ClearCutsceneSpritesSubpixelPosition
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubXPos
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubYPos+$01
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubXPos+$01
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubXPos+$02				;\ Glitch: Seems like Nintendo accidentally forgot to clear the Y subpixels.
	STZ.w !RAM_SMW_Sprites_CutsceneSpriteSubXPos+$02				;/
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ShakeCutsceneCastle(Address)
namespace SMW_ShakeCutsceneCastle
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w #$0001
	BEQ.b CODE_0CD290
	INC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	BRA.b CODE_0CD292

CODE_0CD290:
	DEC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
CODE_0CD292:
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeCastleDust(Address)
namespace SMW_InitializeCastleDust
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$77
	STA.w !RAM_SMW_Sprites_CastleDustYPos
	LDA.b #$5F
	STA.w !RAM_SMW_Sprites_SmallCastleDoorXPosLo
	LDA.b #$F8
	STA.w !RAM_SMW_Sprites_CastleDustYSpeed
	STZ.w !RAM_SMW_Sprites_CastleDustFacingDirection
	LDA.b #$05
	STA.w !RAM_SMW_Sprites_CastleDustAnimationTimer
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	JSR.w SMW_ClearCutsceneSpritesSubpixelPosition_Main
	BRL.w SMW_DrawCastleDestructionCastleDoor_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_PlayerDropkicksAndStompsCastle(Address)
namespace SMW_PlayerDropkicksAndStompsCastle
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_DropkickCounter
	CMP.b #$01
	BEQ.b PrepareToStomp
	CMP.b #$02
	BEQ.b Dropkick
	CMP.b #$03
	BEQ.b Stomping
	LDA.b #$10
	STA.w !RAM_SMW_Sprites_DropkickContactAnimationTimer
	BRA.b CODE_0CD046

Dropkick:
	LDA.w !RAM_SMW_Sprites_DropkickContactAnimationTimer
	AND.b #$F8
	BEQ.b CODE_0CD023
	JSR.w SMW_DrawCutsceneContactEffect_Main
CODE_0CD023:
	JSR.w SMW_ShakeCutsceneCastle_Main
	DEC.w !RAM_SMW_Sprites_DropkickContactAnimationTimer
	BPL.b CODE_0CD046
	STZ.w !RAM_SMW_Flag_DropkickCounter
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BRA.b CODE_0CD046

PrepareToStomp:
	LDA.b #$3F
	STA.w !RAM_SMW_Sprites_WaitBeforeCastleCrumblesFromStompTimer
	LDA.b #$03
	STA.w !RAM_SMW_Flag_DropkickCounter
Stomping:
	DEC.w !RAM_SMW_Sprites_WaitBeforeCastleCrumblesFromStompTimer
	BPL.b CODE_0CD046
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
CODE_0CD046:
	LDX.b #$A8
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	BEQ.b CODE_0CD054
	BPL.b CODE_0CD052
	LDX.b #$A9
	BRA.b CODE_0CD054

CODE_0CD052:
	LDX.b #$A7
CODE_0CD054:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	STX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$5F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$08
	BRL.w SMW_DrawCastleDestructionCastleDoor_Entry3
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DrawCutsceneContactEffect(Address)
namespace SMW_DrawCutsceneContactEffect
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $7C,$7D,$7D,$7C

Prop:
	db $30,$30,$F0,$F0

Main:
	LDY.b #$00
	LDX.b #$04
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0CD07D:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,x
	LDA.w Tiles,y
	STA.w SMW_OAMBuffer[$00].Tile,x
	LDA.w Prop,y
	STA.w SMW_OAMBuffer[$00].Prop,x
	PHX
	TXA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	CPY.b #$02
	BNE.b CODE_0CD0B3
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0CD0B3:
	INX
	INX
	INX
	INX
	CPY.b #$04
	BNE.b CODE_0CD07D
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UprootCastleFromGround(Address)
namespace SMW_UprootCastleFromGround
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_PickedUpCastle
	CMP.b #$01
	BNE.b Return0CD107
	LDX.b #$00
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	BEQ.b CODE_0CD100
	CMP.b #$09
	BCC.b CODE_0CD100
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	LDA.b #$28
	STA.w !RAM_SMW_Sprites_KickedCastleYSpeed
	BRA.b Return0CD107

CODE_0CD100:
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
Return0CD107:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_KickCastleAway(Address)
namespace SMW_KickCastleAway
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_KickedCastle
	CMP.b #$02
	BNE.b Return0CD16E
	DEC.w !RAM_SMW_Sprites_KickedCastleYSpeed
	LDA.w !RAM_SMW_Sprites_KickedCastleYSpeed
	BMI.b CODE_0CD11E
	CMP.b #$24
	BCC.b CODE_0CD11E
	JSR.w SMW_DrawCutsceneContactEffect_Main
CODE_0CD11E:
	LDA.w !RAM_SMW_Sprites_KickedCastleYSpeed
	CMP.b #$C8
	BNE.b CODE_0CD133
	LDA.b #$40
	STA.w !RAM_SMW_Sprites_KickedCastleQuakeTimer
	LDA.b #!Define_SMW_Sound1DFC_Explosion
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
	RTS

CODE_0CD133:
	LDX.b #$00
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_Sprites_SmallCastleDoorXPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	STA.w !RAM_SMW_Sprites_SmallCastleDoorXPosHi,x
	LDA.w !RAM_SMW_Sprites_KickedCastleYSpeed
	STA.w !RAM_SMW_Sprites_SmallCastleDoorYSpeed,x
	LDA.b #$E8
	STA.w !RAM_SMW_Sprites_SmallCastleDoorXSpeed,x
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_Y
	JSR.w SMW_CopyOfUpdateCutsceneSpritePosition_X
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorYPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorXPosLo,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_Sprites_SmallCastleDoorXPosHi,x
	STA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
Return0CD16E:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_KickedCastleCreatesQuake(Address)
namespace SMW_KickedCastleCreatesQuake
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$02
	BEQ.b CODE_0CD183					;\ Optimization: Use a table to add #$0001/#$FFFF to !RAM_SMW_Mirror_CurrentLayer2YPosLo using the !RAM_SMW_Counter_GlobalFrames as the index
	REP.b #$20						;|
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo		;|
	SEC							;|
	SBC.w #$0001						;|
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo		;|
	SEP.b #$20						;|
	BRA.b CODE_0CD18F					;|
								;|
CODE_0CD183:							;|
	REP.b #$20						;|
	LDA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo		;|
	CLC							;|
	ADC.w #$0001						;|
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo		;|
	SEP.b #$20						;/
CODE_0CD18F:
	DEC.w !RAM_SMW_Sprites_KickedCastleQuakeTimer
	BPL.b Return0CD19B
	STZ.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer2YPosHi
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
Return0CD19B:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_WaitForPlayerVictoryPoseAfterCastleQuake(Address)
namespace SMW_WaitForPlayerVictoryPoseAfterCastleQuake
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_ShowVictoryPoseInLarryCutscene
	CMP.b #$03
	BNE.b Return0CD1A6
	JSR.w SMW_InitializeCastleDestructionTextTimers_Main
Return0CD1A6:
	RTS

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_WaitForWendysCastleToBeFullyMopped(Address)
namespace SMW_WaitForWendysCastleToBeFullyMopped
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_FullyMoppedCastle
	BEQ.b Return0CD0D1
	JSR.w SMW_InitializeCastleDestructionTextTimers_Main
Return0CD0D1:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_WaitBeforeMakingHammeredCastleCrumble(Address)
namespace SMW_WaitBeforeMakingHammeredCastleCrumble
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Flag_HammeredCastleShouldCrumble
	CMP.b #$01
	BNE.b CODE_0CD0C6
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
CODE_0CD0C6:
	BRL.w SMW_HandleDudTNTExplosion_CODE_0CCF90				; Optimization: Replace with BRL.w DrawCastleDestructionCastleDoor_Entry2
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_DelayTNTExplosionUntilPlayerComesBy(Address)
namespace SMW_DelayTNTExplosionUntilPlayerComesBy
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Sprites_QuestionMarkAnimationIndex
	CMP.b #$03
	BEQ.b CODE_0CCFD3
	LDA.b #$08
	STA.w !RAM_SMW_Sprites_DelayedTNTExplosionTimer
	BRA.b CODE_0CCFDB

CODE_0CCFD3:
	DEC.w !RAM_SMW_Sprites_DelayedTNTExplosionTimer
	BPL.b CODE_0CCFDB
	INC.w !RAM_SMW_Pointer_CurrentCutsceneProcess
CODE_0CCFDB:
	BRL.w SMW_HandleDudTNTExplosion_CODE_0CCF90				; Optimization: Replace with BRL.w DrawCastleDestructionCastleDoor_Entry2
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ProcessMop(Address)
namespace SMW_ProcessMop
%InsertMacroAtXPosition(<Address>)

DATA_0CD6C4:
	db $E7,$E6,$E6,$EA,$E6,$E7

DATA_0CD6CA:
	db $F6,$F1,$F3,$F3,$F3,$F4

DATA_0CD6D0:
	db $1B,$0E,$00

DATA_0CD6D3:
	db $15,$08,$00

Tiles:
	db $8E,$8E,$8C

DATA_0CD6D9:
	db $FC,$04,$FC,$04,$FC,$04,$FC

DATA_0CD6E0:
	db $34,$68,$34,$68,$34

DATA_0CD6E5:
	db $68,$34,$B0,$00,$C0,$00,$C0

Main:
	LDA.w !RAM_SMW_Flag_DisplayThankYouBubble
	LSR
	BEQ.b Return0CD751
	LDY.b #$04
	LDA.b #$02
CODE_0CD6F6:
	STA.w SMW_OAMTileSizeBuffer[$50].Slot,y
	DEY
	BPL.b CODE_0CD6F6
	LDA.w !RAM_SMW_Sprites_MopYPosLo
	BNE.b CODE_0CD752
	LDA.w !RAM_SMW_Player_WalkingFrame
	ASL
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_0CD70A
	INC
CODE_0CD70A:
	TAY
	LDA.w DATA_0CD6C4,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w DATA_0CD6CA,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Player_FacingDirection
	LSR
	ROR
	LSR
	EOR.b #$61
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$02
CODE_0CD720:
	TXA
	ASL
	ASL
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_0CD6D0,x
	BIT.b !RAM_SMW_Misc_ScratchRAM02
	BVC.b CODE_0CD731
	EOR.b #$FF
	INC
CODE_0CD731:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.w SMW_OAMBuffer[$50].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DATA_0CD6D3,x
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.w SMW_OAMBuffer[$50].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$50].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$50].Prop,y
	DEX
	BPL.b CODE_0CD720
Return0CD751:
	RTS

CODE_0CD752:
	AND.b #$07
	BNE.b CODE_0CD759
	JSR.w EraseColumn
CODE_0CD759:
	LDY.b #$25
	LDA.w !RAM_SMW_Sprites_MopYPosLo
	CMP.b #$4C
	BCC.b CODE_0CD764
	LDY.b #$38
CODE_0CD764:
	STY.w !RAM_SMW_Player_CurrentPose
	LDY.b #$00
	DEC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$AC
CODE_0CD76E:
	STA.w SMW_OAMBuffer[$50].Tile,y
	LDA.b #$21
	STA.w SMW_OAMBuffer[$50].Prop,y
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w SMW_OAMBuffer[$50].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$50].YDisp,y
	CLC
	ADC.b #$10
	CMP.b #$68
	BCC.b CODE_0CD789
	LDA.b #$68
CODE_0CD789:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INY
	INY
	INY
	INY
	LDA.b #$AE
	CPY.b #$14
	BCC.b CODE_0CD76E
	LDX.w !RAM_SMW_Sprites_MoppingMovementDirection
	LDA.w !RAM_SMW_Sprites_MopYPosLo
	CMP.w DATA_0CD6E0,x
	BNE.b CODE_0CD7DE
	LDA.w !RAM_SMW_Sprites_MopTimer
	BEQ.b CODE_0CD7A9
	DEC.w !RAM_SMW_Sprites_MopTimer
	RTS

CODE_0CD7A9:
	TXA
	BEQ.b CODE_0CD7C9
	LSR
	BCS.b CODE_0CD7C9
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$04
	BEQ.b CODE_0CD7BA
	LDA.b #$39
	STA.w !RAM_SMW_Player_CurrentPose
CODE_0CD7BA:
	LDA.b !RAM_SMW_Player_XPosLo
	CMP.w DATA_0CD6E5,x
	BEQ.b CODE_0CD7C9
	INC
	STA.b !RAM_SMW_Player_XPosLo
	AND.b #$0F
	BEQ.b CODE_0CD7E5
	RTS

CODE_0CD7C9:
	INC.w !RAM_SMW_Sprites_MoppingMovementDirection
	CPX.b #$06
	BCC.b CODE_0CD7D4
	STZ.w !RAM_SMW_Sprites_MopYPosLo
	RTS

CODE_0CD7D4:
	TXA
	LSR
	BCS.b Return0CD7DD
	LDA.b #!Define_SMW_Sound1DF9_HurtWhileFlying
	STA.w !RAM_SMW_IO_SoundCh1
Return0CD7DD:
	RTS

CODE_0CD7DE:
	CLC
	ADC.w DATA_0CD6D9,x
	STA.w !RAM_SMW_Sprites_MopYPosLo
CODE_0CD7E5:
	LDA.b #$10
	STA.w !RAM_SMW_Sprites_MopTimer
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_ProcessMop(Address)
namespace SMW_ProcessMop
%InsertMacroAtXPosition(<Address>)

DATA_0CD1F0:
	db $20,$F4,$40,$02
	db $F8,$00
	db $21,$14,$40,$02
	db $F8,$00
	db $FF

DATA_0CD1FD:
	db $20,$F4,$21,$14
	db $21,$34,$21,$54
	db $21,$74,$21,$94
	db $21,$B4,$21,$D4
	db $20,$F6,$21,$16
	db $21,$36,$21,$56
	db $21,$76,$21,$96
	db $21,$B6,$21,$D6
	db $20,$F8,$21,$18
	db $21,$38,$21,$58
	db $21,$78,$21,$98
	db $21,$B8,$21,$D8

EraseColumn:
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b #$0C
	TYA
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_0CD23C:
	LDA.w DATA_0CD1F0,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	DEX
	DEY
	BPL.b CODE_0CD23C
	LDA.b #$0C
	CLC
	ADC.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b #$A0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_MopYPosLo
	SEC
	SBC.b #$38
	LSR
	LSR
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.w DATA_0CD1FD,y
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	LDA.w DATA_0CD1FD+$02,y
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	SEP.b #$20
	CPY.b #$1C
	BNE.b Return0CD282
	LDA.b #$01
	STA.w !RAM_SMW_Flag_ShowWhiteFlag
Return0CD282:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_OverworldLayer2EventTilemap(Address)
namespace SMW_OverworldLayer2EventTilemap
%InsertMacroAtXPosition(<Address>)

Tiles:
.SixBySix
	incbin "overworld/layer2/events/6x6Tiles.bin"
.TwoByTwo
	incbin "overworld/layer2/events/2x2Tiles.bin"
Prop:
	incbin "overworld/layer2/events/properties.bin"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SetFacingDirectionBasedOnSpeed(Address)
namespace SMW_SetFacingDirectionBasedOnSpeed
%InsertMacroAtXPosition(<Address>)

Bank01:
	LDA.b #$00
	LDY.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b Return019A21
	BPL.b CODE_019A1E
	INC
CODE_019A1E:
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return019A21:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_GenericSpriteToSpawnTable(Address)
namespace SMW_GenericSpriteToSpawnTable
%InsertMacroAtXPosition(<Address>)

Main:
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr001_RedNakedKoopa
	db !Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	db !Define_SMW_SpriteID_NorSpr003_YellowNakedKoopa
	db !Define_SMW_SpriteID_NorSpr004_GreenKoopa
	db !Define_SMW_SpriteID_NorSpr005_RedKoopa
	db !Define_SMW_SpriteID_NorSpr006_BlueKoopa
	db !Define_SMW_SpriteID_NorSpr007_YellowKoopa
	db !Define_SMW_SpriteID_NorSpr004_GreenKoopa
	db !Define_SMW_SpriteID_NorSpr004_GreenKoopa
	db !Define_SMW_SpriteID_NorSpr005_RedKoopa
	db !Define_SMW_SpriteID_NorSpr005_RedKoopa
	db !Define_SMW_SpriteID_NorSpr007_YellowKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr00F_Goomba
	db !Define_SMW_SpriteID_NorSpr00F_Goomba
	db !Define_SMW_SpriteID_NorSpr00F_Goomba
	db !Define_SMW_SpriteID_NorSpr00D_BobOmb
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_StompSoundTable(Address)
namespace SMW_StompSoundTable
%InsertMacroAtXPosition(<Address>)

Bank01:
	%INLINEDATATABLE_SMW_StompSoundTable()
namespace off
endmacro

;---------------------------------------------------------------------------

macro INLINEDATATABLE_SMW_StompSoundTable()
	db !Define_SMW_Sound1DF9_Stomp1,!Define_SMW_Sound1DF9_Stomp2,!Define_SMW_Sound1DF9_Stomp3,!Define_SMW_Sound1DF9_Stomp4
	db !Define_SMW_Sound1DF9_Stomp5,!Define_SMW_Sound1DF9_Stomp6,!Define_SMW_Sound1DF9_Stomp7
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_SharedOverworldPathTables(Address)
namespace SMW_SharedOverworldPathTables
%InsertMacroAtXPosition(<Address>)

DATA_049058:
	dw $FFFF,$0001,$FFFF,$0001

DATA_049060:
	db $05,$03,$01,$00

DATA_049064:
	dw $0000,$0002,$0004,$0006

NoAutoMoveLevels:
;$04906C
	dw $0028,$0008,$0014,$0036
	dw $003F,$0045

HardCodedOWPaths_LevelNums:
;$049078
	db $09,$15			; DONUT PLAINS 2 <--> DONUT PLAINS 1
	db $23,$1B			; CHOCOLATE ISLAND 3 <--> CHOCOLATE FORTRESS
	db $43,$44			; FOREST OF ILLUSION 4 <--> FOREST OF ILLUSION 2
	db $24,$FF			; CHOCOLATE ISLAND 2 <--> Pipe
	db $30,$31			; STAR ROAD (10C) <--> FRONT DOOR

DATA_049082:
	dw $0178

DATA_049084:
	dw $0128

HardCodedOWPaths_Layer1Tiles:
;$049086
.Path00:
	db $10,$10,$1E,$19,$16,$66
	db $16,$19,$1E,$10,$10,$66
.Path01:
	db $04,$04,$04,$58
	db $04,$04,$04,$66
.Path02:
	db $04,$04,$04,$04,$04,$6A
	db $04,$04,$04,$04,$04,$66
.Path03:
	db $1E,$19,$06,$09,$0F,$20,$1A,$21
	db $1A,$14,$19,$18,$1F,$17,$82
	db $17,$1F,$18,$19,$14,$1A,$21,$1A
	db $20,$0F,$09,$06,$19,$1E,$66
.Path04:
	db $04,$04,$58
	db $04,$04,$5F

HardCodedOWPaths_MovementDirection:
;$0490CA
.Path00:
	db $02,$02,$02,$02,$06,$06
	db $04,$04,$00,$00,$00,$00
.Path01:
	db $04,$04,$04,$04
	db $06,$06,$06,$06
.Path02:
	db $06,$06,$06,$06,$06,$06
	db $04,$04,$04,$04,$04,$04
.Path03:
	db $02,$02,$06,$06,$00,$00,$00,$04
	db $00,$04,$04,$00,$04,$00,$04
	db $06,$02,$06,$02,$06,$06,$02,$06
	db $02,$02,$02,$04,$04,$00,$00
.Path04:
	db $06,$06,$06
	db $04,$04,$04

HardCodedOWPaths_Layer1AndMovementTableIndex:
;$04910E
	db $00,$06
	db $0C,$10
	db $14,$1A
	db $20,$2F
	db $3E,$41

UNK_049118:
	dw $0008,$0004,$0002,$0001
namespace off
endmacro

macro DATATABLE_RT01_SMW_SharedOverworldPathTables(Address)
namespace SMW_SharedOverworldPathTables
%InsertMacroAtXPosition(<Address>)

DATA_049EA7:
	db $10,$F8,$10,$00,$10,$FC,$10,$00
	db $10,$FC,$10,$00,$08,$FC,$0C,$F4
	db $FC,$04,$04,$FC,$F8,$10,$00,$10
	db $FC,$08,$FC,$08,$FC,$10,$00,$10
	db $F8,$04,$FC,$10,$00,$10,$10,$08
	db $10,$04,$10,$04,$08,$04,$0C,$0C
	db $04,$04,$04,$04,$08,$10,$FC,$F8
	db $FC,$F8,$04,$10,$F8,$FC,$04,$10
	db $F4,$F4,$0C,$F4,$10,$00,$00,$10
	db $00,$10,$10,$00,$10,$00,$FC,$08
	db $FC,$08,$00,$10,$10,$FC,$10,$FC
	db $FC,$04,$04,$FC,$F8,$10,$00,$10
	db $FC,$10,$10,$04,$10,$00,$04,$10
	db $04,$04,$FC,$F8,$04,$04,$10,$08
	db $0C,$F4,$00,$10,$FC,$10,$10,$00
	db $04,$10,$10,$F8,$00,$10,$00,$10
	db $FC,$10,$10,$00,$00,$10,$00,$10
	db $00,$10,$00,$10,$00,$10,$00,$10
	db $04,$FC,$04,$04,$04,$04,$00,$10
	db $00,$10,$10,$00,$10,$00,$FC,$10
	db $FC,$04

DATA_049F49:
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$00,$01,$00,$01
	db $00,$01,$00,$01,$01,$00,$01,$00
	db $00,$01,$01,$00,$01,$00,$01,$00
	db $00,$01,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$00,$01
	db $00,$01,$01,$00,$00,$01,$01,$00
	db $00,$01,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$00,$01
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $00,$01,$00,$01,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $01,$00,$00,$01,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $00,$01,$01,$00,$01,$00,$01,$00
	db $01,$00,$01,$00,$01,$00,$01,$00
	db $00,$01

DATA_049FEB:
	db $04,$04,$04,$04,$04,$04,$04,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $04,$00,$00,$04,$04,$04,$04,$00
	db $00,$00,$00,$00,$00,$00,$04,$00
	db $00,$00,$04,$00,$00,$04,$04,$08
	db $08,$08,$0C,$0C,$08,$08,$08,$08
	db $08,$0C,$0C,$08,$08,$08,$08,$0C
	db $08,$08,$08,$0C,$08,$0C,$14,$14
	db $14,$04,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$04,$04,$08
	db $00

DATA_04A03C:
	db $07,$09,$0A,$0D,$0E,$11,$17,$19
	db $1A,$1C,$1D,$1F,$28,$29,$2D,$2E
	db $35,$36,$37,$49,$4A,$4B,$4D,$51

DATA_04A054:
	db $08,$FC,$FC,$08,$FC,$08,$FC,$08
	db $FC,$08,$04,$00,$08,$04,$04,$08
	db $04,$08,$04,$00,$04,$08,$04,$00
	db $FC,$08,$00,$00,$FC,$08,$FC,$08
	db $04,$00,$04,$00,$00,$00,$08,$FC
	db $08,$04,$08,$04,$FC,$08,$08,$FC

DATA_04A084:
	dw $0004,$FFF8
	dw $0008,$FFFC
	dw $FFF8,$0004
	dw $FFF8,$0004
	dw $0008,$FFFC
	dw $0004,$0004
	dw $0004,$0008
	dw $0008,$0004
	dw $FFF8,$FFFC
	dw $0000,$0000
	dw $0008,$0004
	dw $0004,$0004
	dw $FFF8,$0004
	dw $0004,$0004
	dw $0008,$FFFC
	dw $FFF8,$0004
	dw $0004,$0004
	dw $0000,$0000
	dw $0004,$0004
	dw $0004,$FFF8
	dw $0004,$0008
	dw $FFFC,$FFF8
	dw $FFF8,$0004
	dw $FFFC,$0008

DATA_04A0E4:
	db $02,$02,$02,$02,$02,$00,$02,$02
	db $02,$00,$02,$00,$02,$00,$02,$02
	db $00,$00,$00,$02,$02,$02,$02,$02
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_LevelNames(Address)
namespace SMW_LevelNames
%InsertMacroAtXPosition(<Address>)

Main:
	incsrc "overworld/levelnames.asm"
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_LoadOverworldLayer2AndEventsTilemaps(Address)
namespace SMW_LoadOverworldLayer2AndEventsTilemaps
%InsertMacroAtXPosition(<Address>)

Main:
	PHP
	JSR.w Sub
	PLP
	RTL
namespace off
endmacro

macro ROUTINE_RT01_SMW_LoadOverworldLayer2AndEventsTilemaps(Address)
namespace SMW_LoadOverworldLayer2AndEventsTilemaps
%InsertMacroAtXPosition(<Address>)

OverworldLayer2Tilemap:
.Tiles:
	incbin "overworld/layer2/tiles.bin"

.Prop:
	incbin "overworld/layer2/properties.bin"
namespace off
endmacro

macro ROUTINE_RT02_SMW_LoadOverworldLayer2AndEventsTilemaps(Address)
namespace SMW_LoadOverworldLayer2AndEventsTilemaps
%InsertMacroAtXPosition(<Address>)

Sub:
	SEP.b #$30
	JSR.w CODE_04DD40
	REP.b #$20
	LDA.w #OverworldLayer2Tilemap_Tiles
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$30
	LDA.b #OverworldLayer2Tilemap_Tiles>>16
	STA.b !RAM_SMW_Misc_ScratchRAM02
	REP.b #$10
	LDY.w #$4000
	STY.b !RAM_SMW_Misc_ScratchRAM0E
	LDY.w #$0000
	TYX
	JSR.w SMW_BufferOverworldLayer2Tilemap_Main
	REP.b #$20
	LDA.w #OverworldLayer2Tilemap_Prop
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	LDX.w #$0001
	LDY.w #$0000
	JSR.w SMW_BufferOverworldLayer2Tilemap_Main
	SEP.b #$30
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0F
-:
	JSR.w CODE_04E453
	INC.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$6F
	BNE.b -
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_LoadOverworldLayer2AndEventsTilemaps(Address)
namespace SMW_LoadOverworldLayer2AndEventsTilemaps
%InsertMacroAtXPosition(<Address>)

CODE_04DD40:
	REP.b #$10
	SEP.b #$20
	LDY.w #SMW_OverworldLayer2EventTilemap_Prop
	STY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #SMW_OverworldLayer2EventTilemap_Prop>>16
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.w #$0000
	TXY
	JSR.w CODE_04DD57
	SEP.b #$30
	RTS

CODE_04DD57:
	SEP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
	INY
	STA.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$80
	BNE.b CODE_04DD71
CODE_04DD62:
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
	STA.l !RAM_SMW_Overworld_Layer2EventTiles,x
	INY
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM05
	BPL.b CODE_04DD62
	JMP.w CODE_04DD83

CODE_04DD71:
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$7F
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
CODE_04DD79:
	STA.l !RAM_SMW_Overworld_Layer2EventTiles,x
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM05
	BPL.b CODE_04DD79
	INY
CODE_04DD83:
	REP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM02],y
	CMP.w #$FFFF
	BNE.b CODE_04DD57
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_LoadOverworldLayer2AndEventsTilemaps(Address)
namespace SMW_LoadOverworldLayer2AndEventsTilemaps
%InsertMacroAtXPosition(<Address>)

CODE_04E453:
	SEP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	AND.b #$07
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_EventFlags,y
	AND.l SMW_BitTable_DATA_04E44B,x
	BNE.b CODE_04E46A
	RTS

CODE_04E46A:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	ASL
	TAX
	REP.b #$20
	LDA.l SMW_Layer2EventData_Ptrs,x
	STA.w !RAM_SMW_Overworld_StartingEventTileLo
	LDA.l SMW_Layer2EventData_Ptrs+$02,x
	STA.w !RAM_SMW_Overworld_FinalEventTileLo
	CMP.w !RAM_SMW_Overworld_StartingEventTileLo
	BEQ.b CODE_04E493
CODE_04E483:
	JSR.w SMW_BufferEventTileToLayer2Tilemap_Main
	REP.b #$20
	INC.w !RAM_SMW_Overworld_StartingEventTileLo
	LDA.w !RAM_SMW_Overworld_StartingEventTileLo
	CMP.w !RAM_SMW_Overworld_FinalEventTileLo
	BNE.b CODE_04E483
CODE_04E493:
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GetXAndYDispOfCurrentEventTileSprite(Address)
namespace SMW_GetXAndYDispOfCurrentEventTileSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Overworld_OnScreenXPosOfCurrentEventTile
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Overworld_OnScreenYPosOfCurrentEventTile
	CLC
	SBC.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BufferEventTileToLayer2Tilemap(Address)
namespace SMW_BufferEventTileToLayer2Tilemap
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$30
	LDA.w !RAM_SMW_Overworld_StartingEventTileLo
	ASL
	ASL
	TAX
	LDA.l SMW_Layer2EventData_TileEntries,x
	TAY
	LDA.l SMW_Layer2EventData_TileEntries+$02,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
Entry2:
	SEP.b #$20
	LDA.b #!RAM_SMW_Overworld_Layer2EventTiles>>16
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #SMW_OverworldLayer2EventTilemap_Tiles>>16
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	REP.b #$20
	LDA.w #!RAM_SMW_Overworld_Layer2EventTiles
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #SMW_OverworldLayer2EventTilemap_Tiles
	STA.b !RAM_SMW_Misc_ScratchRAM09
	CPY.w #SMW_OverworldLayer2EventTilemap_Tiles_TwoByTwo-SMW_OverworldLayer2EventTilemap_Tiles
	BCC.b CODE_04E4CA
	JSR.w Buffer2x2Tile
	JMP.w CODE_04E4CD

CODE_04E4CA:
	JSR.w Buffer6x6Tile
CODE_04E4CD:
	SEP.b #$30
	RTS

Buffer2x2Tile:
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_04E4D5:
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_04E4DC:
	SEP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM09],y
	STA.l !RAM_SMW_Overworld_Layer2Tiles,x
	INX
	LDA.b [!RAM_SMW_Misc_ScratchRAM06],y
	STA.l !RAM_SMW_Overworld_Layer2Tiles,x
	INY
	INX
	REP.b #$20
	TXA
	AND.w #$003F
	BNE.b CODE_04E4FF
	DEX
	TXA
	AND.w #$FFC0
	CLC
	ADC.w #$0800
	TAX
CODE_04E4FF:
	DEC.b !RAM_SMW_Misc_ScratchRAM0C
	BPL.b CODE_04E4DC
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	CLC
	ADC.w #$0040
	STA.b !RAM_SMW_Misc_ScratchRAM04
	AND.w #$07C0
	BNE.b CODE_04E51B
	TXA
	AND.w #$F83F
	CLC
	ADC.w #$1000
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_04E51B:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_04E4D5
	RTS

Buffer6x6Tile:
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_04E525:
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_04E52C:
	SEP.b #$20
	LDA.b [!RAM_SMW_Misc_ScratchRAM09],y
	STA.l !RAM_SMW_Overworld_Layer2Tiles,x
	INX
	LDA.b [!RAM_SMW_Misc_ScratchRAM06],y
	STA.l !RAM_SMW_Overworld_Layer2Tiles,x
	INY
	INX
	REP.b #$20
	TXA
	AND.w #$003F
	BNE.b CODE_04E54F
	DEX
	TXA
	AND.w #$FFC0
	CLC
	ADC.w #$0800
	TAX
CODE_04E54F:
	DEC.b !RAM_SMW_Misc_ScratchRAM0C
	BPL.b CODE_04E52C
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	CLC
	ADC.w #$0040
	STA.b !RAM_SMW_Misc_ScratchRAM04
	AND.w #$07C0
	BNE.b CODE_04E56B
	TXA
	AND.w #$F83F
	CLC
	ADC.w #$1000
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_04E56B:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_04E525
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BufferEventTileToStripeImageTable(Address)
namespace SMW_BufferEventTileToStripeImageTable
%InsertMacroAtXPosition(<Address>)

Buffer2x2Tile:
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_04E776:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	LDY.w #$0300
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	AND.w #$001F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w #$0020
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w #$0001
	BNE.b CODE_04E79B
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	ASL
	DEC
	XBA
	TAY
CODE_04E79B:
	TYA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	LDA.w #$0001
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.b !RAM_SMW_Misc_ScratchRAM00
CODE_04E7A9:
	LDA.b [!RAM_SMW_Misc_ScratchRAM0C],y
	AND.b !RAM_SMW_Misc_ScratchRAM0A
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	INY
	INY
	TYA
	AND.w #$003F
	BNE.b CODE_04E7E5
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BEQ.b CODE_04E7E5
	DEY
	TYA
	AND.w #$FFC0
	CLC
	ADC.w #$0800
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	XBA
	AND.w #$3BE0
	CLC
	ADC.w #$0400
	XBA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	ASL
	DEC
	XBA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
CODE_04E7E5:
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_04E7A9
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	XBA
	CLC
	ADC.w #$0020
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	CLC
	ADC.w #$0040
	STA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$07C0
	BNE.b CODE_04E81C
	TYA
	AND.w #$F83F
	CLC
	ADC.w #$1000
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	XBA
	SEC
	SBC.w #$0020
	AND.w #$341F
	CLC
	ADC.w #$0800
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_04E81C:
	DEC.b !RAM_SMW_Misc_ScratchRAM06
	BMI.b Return04E823
	JMP.w CODE_04E776

Return04E823:
	RTS

Buffer6x6Tile:
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
CODE_04E82E:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	LDY.w #$0B00
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	AND.w #$001F
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w #$0020
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w #$0006
	BCS.b CODE_04E85B
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	ASL
	DEC
	XBA
	TAY
	LDA.w #$0006
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM08
CODE_04E85B:
	TYA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	LDA.w #$0005
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.b !RAM_SMW_Misc_ScratchRAM00
CODE_04E869:
	LDA.b [!RAM_SMW_Misc_ScratchRAM0C],y
	AND.b !RAM_SMW_Misc_ScratchRAM0A
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	INY
	INY
	TYA
	AND.w #$003F
	BNE.b CODE_04E8A5
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BEQ.b CODE_04E8A5
	DEY
	TYA
	AND.w #$FFC0
	CLC
	ADC.w #$0800
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	XBA
	AND.w #$3BE0
	CLC
	ADC.w #$0400
	XBA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	ASL
	DEC
	XBA
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	INX
	INX
CODE_04E8A5:
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_04E869
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	XBA
	CLC
	ADC.w #$0020
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	CLC
	ADC.w #$0040
	STA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$07C0
	BNE.b CODE_04E8DC
	TYA
	AND.w #$F83F
	CLC
	ADC.w #$1000
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	XBA
	SEC
	SBC.w #$0020
	AND.w #$341F
	CLC
	ADC.w #$0800
	XBA
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_04E8DC:
	DEC.b !RAM_SMW_Misc_ScratchRAM06
	BMI.b Return04E8E3
	JMP.w CODE_04E82E

Return04E8E3:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_Layer2EventData(Address)
namespace SMW_Layer2EventData
%InsertMacroAtXPosition(<Address>)

TileEntries:
base $000000
.Event00
.Event01
	dw $0900,$23CC
	dw $0904,$238C
	dw $0908,$234E
	dw $090C,$230E
	dw $0910,$22D0
	dw $0914,$2290
	dw $018C,$2202
	dw $01B0,$2202
	dw $01D4,$2202
	dw $0A44,$21C6
	dw $0A48,$2044
	dw $0A4C,$2186
	dw $0A48,$2004
.Event02
.Event03
	dw $0900,$23E4
	dw $0938,$23A4
	dw $0928,$2324
.Event04
	dw $0918,$2326
	dw $091C,$2328
	dw $0920,$22EC
	dw $0924,$22AC
	dw $0B0C,$222C
.Event05
	dw $0B10,$21EC
	dw $0930,$216C
	dw $0934,$2168
.Event06
	dw $0938,$20E4
	dw $0938,$20A4
.Event07
	dw $093C,$1090
	dw $0940,$104C
	dw $0944,$100C
	dw $0938,$078C
	dw $0938,$070C
	dw $0928,$068C
.Event08
	dw $0948,$1014
	dw $094C,$0794
	dw $0950,$0754
.Event09
	dw $0938,$060C
	dw $0904,$058C
	dw $0954,$050E
.Event0A
	dw $09E8,$0648
	dw $09E8,$06C8
	dw $0998,$0688
.Event0B
	dw $09EC,$0512
	dw $09F0,$04D2
	dw $09F4,$0492
.Event0C
	dw $0000,$04D8
	dw $0024,$0498
	dw $0048,$03D8
	dw $006C,$0356
	dw $0090,$0356
	dw $00B4,$0356
	dw $0510,$0518
	dw $0928,$0524
	dw $0B38,$0714
.Event0D
	dw $0960,$0528
	dw $0964,$056A
	dw $0968,$05AC
	dw $096C,$062C
.Event0E
	dw $0970,$0630
.Event0F
	dw $0974,$05B2
	dw $0978,$0532
	dw $0168,$07FC
	dw $0A50,$0FC0
	dw $00D8,$077C
	dw $00FC,$077C
	dw $0120,$077C
	dw $0144,$077C
.Event10
	dw $0950,$06D4
	dw $094C,$0694
	dw $097C,$0614
	dw $0980,$0594
.Event11
	dw $0984,$0718
	dw $0988,$071A
	dw $0948,$079C
	dw $098C,$101C
.Event12
	dw $0990,$1060
	dw $0994,$1064
.Event13
	dw $0938,$10DC
.Event14
	dw $0998,$2884
.Event15
	dw $09A4,$3118
	dw $0984,$311C
	dw $09A8,$30E0
	dw $094C,$3060
.Event16
	dw $09A0,$30CA
	dw $09A0,$310E
	dw $09B0,$3110
	dw $09B4,$30CC
	dw $09B8,$308C
	dw $09BC,$300C
	dw $09BC,$278C
.Event17
	dw $09BC,$27A0
	dw $09BC,$2720
	dw $09AC,$26A0
	dw $0928,$2620
.Event18
	dw $0A00,$3064
	dw $0A04,$30A8
	dw $0A08,$3128
.Event19
	dw $0918,$2622
	dw $0998,$2626
	dw $09C0,$262A
	dw $09C4,$266C
	dw $09C8,$2670
	dw $09CC,$26B0
	dw $0928,$2730
.Event1A
	dw $09D0,$2770
	dw $0938,$27B0
	dw $0928,$3030
.Event1B
	dw $0938,$30B0
	dw $0938,$30F0
.Event1C
	dw $09D4,$31B0
	dw $09D8,$322E
	dw $0998,$322A
.Event1D
	dw $09E0,$26CC
	dw $09BC,$268C
	dw $09E4,$260C
.Event1E
	dw $09DC,$2704
	dw $09DC,$26C0
	dw $09DC,$2740
.Event1F
	dw $0998,$01B4
	dw $0B0C,$01B8
.Event20
.Event21
	dw $0B30,$0988
	dw $0B34,$09A0
	dw $0A10,$098A
	dw $0A10,$099E
	dw $0A0C,$098C
	dw $0A0C,$099C
	dw $0A10,$098E
	dw $0A10,$099A
	dw $0A0C,$0990
	dw $0A0C,$0998
	dw $0A10,$0992
	dw $0A10,$0996
.Event22
.Event23
	dw $0A14,$09A4
.Event24
	dw $03A8,$0830
	dw $0A18,$09AC
	dw $0A1C,$09F0
	dw $099C,$0A70
	dw $0A20,$0AF0
	dw $0A20,$0B70
	dw $0A20,$0BF0
	dw $0A24,$0C70
	dw $0938,$0CF0
	dw $0A28,$0D30
.Event25
	dw $0A2C,$0A98
	dw $0A30,$0A9C
.Event26
	dw $0B14,$0B10
	dw $0B18,$0B90
.Event27
	dw $0A34,$0B1C
	dw $0A38,$0B5E
	dw $0A3C,$0B62
	dw $0A40,$0B66
	dw $0A20,$0AE8
	dw $099C,$0A68
.Event28
.Event29
.Event2A
	dw $0A7C,$33A4
	dw $0A7C,$33E8
	dw $0A7C,$3468
	dw $0918,$33A2
	dw $09C0,$33A4
	dw $0930,$33E8
	dw $0A54,$3428
	dw $0938,$34A8
.Event2B
	dw $0A7C,$3398
	dw $0A7C,$339C
	dw $0A58,$339E
	dw $0998,$339C
	dw $0928,$3398
.Event2C
	dw $0A7C,$3626
	dw $0A7C,$3620
	dw $0A5C,$3568
	dw $0914,$35A8
	dw $09D8,$3626
	dw $091C,$3624
	dw $0928,$3620
.Event2D
	dw $0A7C,$352C
	dw $0A7C,$3530
	dw $0A60,$352A
	dw $0998,$352C
	dw $0998,$352E
	dw $0998,$3530
.Event2E
	dw $0A7C,$35DA
	dw $0A7C,$3498
	dw $0A7C,$3418
	dw $0A58,$361E
	dw $093C,$361C
	dw $0A64,$35D8
	dw $0944,$3598
	dw $0928,$3518
	dw $0938,$3498
	dw $0938,$3418
	dw $0928,$3398
.Event2F
	dw $0A7C,$36A0
	dw $0A7C,$3760
	dw $09D0,$3660
	dw $0938,$36E0
	dw $0938,$3760
.Event30
	dw $0A7C,$339C
	dw $0918,$339A
	dw $0998,$339C
.Event31
	dw $0A7C,$3510
	dw $0A58,$3396
	dw $0A6C,$3392
	dw $0A70,$33D0
	dw $0A74,$3410
	dw $0938,$3490
	dw $0928,$3510
.Event32
	dw $0A7C,$351C
	dw $0A7C,$3522
	dw $0998,$3514
	dw $0928,$3518
	dw $0998,$351C
	dw $0998,$3520
	dw $0998,$3524
.Event33
	dw $0A7C,$3610
	dw $09D0,$3550
	dw $0938,$3590
	dw $0928,$3610
.Event34
	dw $0A7C,$3690
	dw $0A7C,$370E
	dw $0A7C,$370A
	dw $0A7C,$3702
	dw $09D0,$3650
	dw $0A78,$36D0
	dw $091C,$370C
	dw $0998,$3708
	dw $0998,$3704
	dw $0998,$3700
.Event35
	dw $0A90,$1812
.Event36
.Event37
.Event38
	dw $0A94,$2BAA
	dw $0A98,$2BA8
	dw $0A9C,$2BA4
.Event39
	dw $0A94,$2BA2
	dw $0A98,$2BA0
.Event3A
	dw $0AA0,$2B64
.Event3B
	dw $0AA4,$2B9A
	dw $0A98,$2B98
	dw $0A98,$2B96
	dw $0A98,$2B94
	dw $0A9C,$2B90
.Event3C
	dw $0AA0,$2B5C
.Event3D
	dw $0AA0,$2B50
	dw $0AA8,$2B10
	dw $0A9C,$2A90
.Event3E
	dw $0AAC,$2A92
	dw $0A98,$2A94
	dw $0A98,$2A96
	dw $0A98,$2A98
.Event3F
	dw $0AA0,$2A50
	dw $0AA8,$2A10
	dw $0B3C,$2990
	dw $0B40,$2994
	dw $0B40,$2998
.Event40
	dw $0AA0,$2A5C
	dw $0AA8,$2A1C
	dw $0AA8,$29DC
.Event41
	dw $0AA0,$2A64
	dw $0AA8,$2A24
	dw $0AA8,$29E4
.Event42
.Event43
.Event44
.Event45
.Event46
	dw $0AB0,$1D90
	dw $09A0,$1D8C
.Event47
	dw $0AB0,$1E56
	dw $0AB4,$1E5A
	dw $0AB8,$1D5C
	dw $09A0,$1D18
	dw $0ABC,$1C90
	dw $0ABC,$1C0C
.Event48
	dw $09A0,$1E0C
	dw $0AC0,$1E8A
	dw $0AC0,$1E86
	dw $0ABC,$1E04
	dw $09A0,$1D84
	dw $0AB8,$1CC6
	dw $0AB0,$1D0C
.Event49
	dw $09A0,$1D88
	dw $09A0,$1D84
	dw $0AB4,$1D80
.Event4A
	dw $09A0,$163C
	dw $09A0,$16BC
.Event4B
	dw $09A0,$16B8
	dw $09A0,$16B4
.Event4C
	dw $09A0,$1630
.Event4D
	dw $0AA8,$1570
	dw $0AC4,$1530
	dw $0AD8,$13B8
	dw $094C,$14B0
	dw $0AC8,$1432
	dw $0ACC,$13F4
	dw $0AD0,$13B8
.Event4E
	dw $0AD4,$12B8
	dw $01F8,$11F4
	dw $021C,$11F4
	dw $0240,$11F4
	dw $0264,$11F4
	dw $0288,$11F4
	dw $02AC,$11F4
	dw $02D0,$11F4
	dw $02F4,$11F4
	dw $0318,$11F4
	dw $033C,$11B4
	dw $0360,$11B4
	dw $033C,$11B4
.Event4F
.Event50
.Event51
.Event52
	dw $0ADC,$3D10
	dw $0AE0,$3CCE
	dw $0AE4,$3C8C
	dw $0AE8,$3C48
.Event53
.Event54
.Event55
	dw $0AEC,$3C14
	dw $0AF0,$3BD6
	dw $0AF4,$3B98
	dw $0AF8,$3B5A
.Event56
.Event57
.Event58
	dw $0918,$3C26
	dw $0998,$3C28
	dw $0998,$3C2A
	dw $0998,$3C2C
.Event59
.Event5A
.Event5B
	dw $096C,$3D28
	dw $0AFC,$3D68
	dw $0B00,$3DAA
	dw $0AE4,$3DEC
	dw $0AE4,$3E2E
	dw $0ADC,$3EB0
	dw $0B3C,$2990
	dw $0B40,$2994
	dw $0B40,$2998
.Event5C
.Event5D
	dw $0B04,$3D9C
	dw $0B08,$3DD8
	dw $0B08,$3E14
	dw $0B08,$3E50
	dw $0B08,$3E8C
	dw $096C,$3E88
.Event5E
.Event5F
.Event60
	dw $0144,$077C
.Event61
	dw $0938,$19E0
	dw $0B1C,$1A20
	dw $03CC,$1ADC
	dw $03F0,$1ADC
	dw $0414,$1ADC
	dw $0438,$1B9C
	dw $045C,$1B9C
	dw $0480,$1B5C
	dw $04A4,$1B1C
	dw $04C8,$1ADC
	dw $04EC,$1A9C
.Event62
	dw $0A58,$1B1E
	dw $0B20,$1B1C
	dw $0B24,$1B1A
	dw $0B28,$1B18
.Event63
	dw $09A0,$1B94
	dw $09A0,$1C14
	dw $09A0,$1C94
	dw $0AC0,$1D14
	dw $0B2C,$1D56
	dw $09A0,$1DD4
.Event64
.Event65
	dw $0998,$3990
	dw $0998,$3994
	dw $0928,$3998
.Event66
	dw $0998,$399C
	dw $0998,$39A0
	dw $0928,$39A4
.Event67
	dw $0998,$39A8
	dw $0998,$39AC
	dw $0928,$39B0
.Event68
	dw $0998,$39B4
	dw $0998,$38B4
	dw $0928,$38B0
.Event69
	dw $0998,$38AC
	dw $0998,$38A8
	dw $0928,$38A4
.Event6A
	dw $0998,$38A0
	dw $0998,$389C
	dw $0928,$3898
.Event6B
	dw $0998,$3894
	dw $0998,$3890
	dw $0928,$388C
.Event6C
	dw $0998,$3888
	dw $0928,$3884
.Event6D
.Event6E
.Event6F
.Event70
.Event71
.Event72
.Event73
.Event74
.Event75
.Event76
.Event77
.Event78
base off

Ptrs:			; Crash: Event 78 will use a garbage value for the final tile index.
	dw TileEntries_Event00/$04,TileEntries_Event01/$04,TileEntries_Event02/$04,TileEntries_Event03/$04
	dw TileEntries_Event04/$04,TileEntries_Event05/$04,TileEntries_Event06/$04,TileEntries_Event07/$04
	dw TileEntries_Event08/$04,TileEntries_Event09/$04,TileEntries_Event0A/$04,TileEntries_Event0B/$04
	dw TileEntries_Event0C/$04,TileEntries_Event0D/$04,TileEntries_Event0E/$04,TileEntries_Event0F/$04
	dw TileEntries_Event10/$04,TileEntries_Event11/$04,TileEntries_Event12/$04,TileEntries_Event13/$04
	dw TileEntries_Event14/$04,TileEntries_Event15/$04,TileEntries_Event16/$04,TileEntries_Event17/$04
	dw TileEntries_Event18/$04,TileEntries_Event19/$04,TileEntries_Event1A/$04,TileEntries_Event1B/$04
	dw TileEntries_Event1C/$04,TileEntries_Event1D/$04,TileEntries_Event1E/$04,TileEntries_Event1F/$04
	dw TileEntries_Event20/$04,TileEntries_Event21/$04,TileEntries_Event22/$04,TileEntries_Event23/$04
	dw TileEntries_Event24/$04,TileEntries_Event25/$04,TileEntries_Event26/$04,TileEntries_Event27/$04
	dw TileEntries_Event28/$04,TileEntries_Event29/$04,TileEntries_Event2A/$04,TileEntries_Event2B/$04
	dw TileEntries_Event2C/$04,TileEntries_Event2D/$04,TileEntries_Event2E/$04,TileEntries_Event2F/$04
	dw TileEntries_Event30/$04,TileEntries_Event31/$04,TileEntries_Event32/$04,TileEntries_Event33/$04
	dw TileEntries_Event34/$04,TileEntries_Event35/$04,TileEntries_Event36/$04,TileEntries_Event37/$04
	dw TileEntries_Event38/$04,TileEntries_Event39/$04,TileEntries_Event3A/$04,TileEntries_Event3B/$04
	dw TileEntries_Event3C/$04,TileEntries_Event3D/$04,TileEntries_Event3E/$04,TileEntries_Event3F/$04
	dw TileEntries_Event40/$04,TileEntries_Event41/$04,TileEntries_Event42/$04,TileEntries_Event43/$04
	dw TileEntries_Event44/$04,TileEntries_Event45/$04,TileEntries_Event46/$04,TileEntries_Event47/$04
	dw TileEntries_Event48/$04,TileEntries_Event49/$04,TileEntries_Event4A/$04,TileEntries_Event4B/$04
	dw TileEntries_Event4C/$04,TileEntries_Event4D/$04,TileEntries_Event4E/$04,TileEntries_Event4F/$04
	dw TileEntries_Event50/$04,TileEntries_Event51/$04,TileEntries_Event52/$04,TileEntries_Event53/$04
	dw TileEntries_Event54/$04,TileEntries_Event55/$04,TileEntries_Event56/$04,TileEntries_Event57/$04
	dw TileEntries_Event58/$04,TileEntries_Event59/$04,TileEntries_Event5A/$04,TileEntries_Event5B/$04
	dw TileEntries_Event5C/$04,TileEntries_Event5D/$04,TileEntries_Event5E/$04,TileEntries_Event5F/$04
	dw TileEntries_Event60/$04,TileEntries_Event61/$04,TileEntries_Event62/$04,TileEntries_Event63/$04
	dw TileEntries_Event64/$04,TileEntries_Event65/$04,TileEntries_Event66/$04,TileEntries_Event67/$04
	dw TileEntries_Event68/$04,TileEntries_Event69/$04,TileEntries_Event6A/$04,TileEntries_Event6B/$04
	dw TileEntries_Event6C/$04,TileEntries_Event6D/$04,TileEntries_Event6E/$04,TileEntries_Event6F/$04
	dw TileEntries_Event70/$04,TileEntries_Event71/$04,TileEntries_Event72/$04,TileEntries_Event73/$04
	dw TileEntries_Event74/$04,TileEntries_Event75/$04,TileEntries_Event76/$04,TileEntries_Event77/$04
	dw TileEntries_Event78/$04
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_ChangingLayer1OverworldTiles(Address)
namespace SMW_ChangingLayer1OverworldTiles
%InsertMacroAtXPosition(<Address>)

Layer1TileLocation:							;\ Info: Events...
	dw $0000,$0000,$0000,$0469,$044B,$0429,$0409,$00D3		;| 00-07 
	dw $00E5,$00A5,$00D1,$0085,$00A9,$00CB,$00BD,$009D		;| 08-0F
	dw $00A5,$0207,$0000,$0227,$0512,$0608,$04E3,$04C8		;| 10-17
	dw $062A,$04EC,$060C,$061C,$064A,$0000,$04E0,$003E		;| 18-1F
	dw $0130,$0134,$0136,$013A,$0000,$0157,$0184,$013A		;| 20-27
	dw $0000,$0000,$06AA,$0676,$06C8,$06AC,$0676,$0000		;| 28-2F
	dw $0000,$06A4,$06AA,$06C4,$0000,$0304,$0000,$0000		;| 30-37
	dw $0579,$0577,$0559,$0574,$0000,$0554,$0000,$0534		;| 38-3F
	dw $0000,$0000,$0000,$0000,$0000,$0000,$03B3,$0000		;| 40-47
	dw $0000,$0000,$02DF,$02DC,$0000,$027E,$0000,$0000		;| 48-4F
	dw $0000,$04E0,$04E0,$0000,$0000,$0000,$0000,$0000		;| 50-57
	dw $0000,$0000,$0534,$0534,$0000,$0000,$0787,$0000		;| 58-5F
	dw $01F0,$0368,$0365,$03B5,$0000,$0736,$0739,$073C		;| 60-67
	dw $071C,$0719,$0716,$0713,$0711,$0000,$0000,$0000		;/ 68-6F
namespace off
endmacro

macro DATATABLE_RT01_SMW_ChangingLayer1OverworldTiles(Address)
namespace SMW_ChangingLayer1OverworldTiles
%InsertMacroAtXPosition(<Address>)

TilesThatChange:
	db $6E,$6F,$70,$71,$72,$73,$74,$75
	db $59,$53,$52,$83,$4D,$57,$5A,$76
	db $78,$7A,$7B,$7D,$7F,$54

TilesToBecome:
	db $66,$67,$68,$69,$6A,$6B,$6C,$6D
	db $58,$43,$44,$45,$25,$5E,$5F,$77
	db $79,$63,$7C,$7E,$80,$23
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MakeStunnedSpriteBounceOrSlowDownOnGround(Address)
namespace SMW_MakeStunnedSpriteBounceOrSlowDownOnGround
%InsertMacroAtXPosition(<Address>)

DATA_0197AF:
	db $00,$00,$00,$F8,$F8,$F8,$F8,$F8
	db $F8,$F7,$F6,$F5,$F4,$F3,$F2,$E8
	db $E8,$E8,$E8

	db $00,$00,$00,$00,$FE,$FC,$F8,$EC
	db $EC,$EC,$E8,$E4,$E0,$DC,$D8,$D4
	db $D0,$CC,$C8

Main:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHP
	BPL.b CODE_0197DD
	JSR.w SMW_UnnecessaryInvertARt_Bank01
CODE_0197DD:
	LSR
	PLP
	BPL.b CODE_0197E4
	JSR.w SMW_UnnecessaryInvertARt_Bank01
CODE_0197E4:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	PHA
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	PLA
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00F_Goomba
	BNE.b CODE_0197FB
	TYA
	CLC
	ADC.b #$13
	TAY
CODE_0197FB:
	LDA.w DATA_0197AF,y
	LDY.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BMI.b Return019805
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return019805:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CheckForTiltingPlatformCollision(Address)
namespace SMW_CheckForTiltingPlatformCollision
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetHi
	ORA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetHi
	BNE.b NoCollision
	JSR.w CODE_01CCC7
	JSR.w SMW_GetSineAndCosineOfTiltingPlatform_Main
	JSR.w SMW_CalculateCircleCoordinatesForTiltingPlaform_Main
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileYPosLo
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileXPosLo
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.w !RAM_SMW_Misc_IggyLarryPlatformInteraction,y
	CMP.b #$15
	RTL

NoCollision:
	CLC
	RTL

CODE_01CCC7:
	REP.b #$20
	LDA.b !RAM_SMW_Mirror_M7CenterXPosLo
	STA.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	LDA.b !RAM_SMW_Mirror_M7CenterYPosLo
	STA.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	LDA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	SEC
	SBC.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	STA.w !RAM_SMW_Misc_RotatingObjectXRadiusLo
	LDA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
	SEC
	SBC.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	STA.w !RAM_SMW_Misc_RotatingObjectYRadiusLo
	SEP.b #$20
	RTS

Return01CCEA:
	RTS ; Unused

Return01CCEB:
	RTS ; Unused
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CalculateCircleCoordinatesForTiltingPlaform(Address)
namespace SMW_CalculateCircleCoordinatesForTiltingPlaform
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformCosineLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Misc_RotatingObjectXRadiusLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	JSR.w CODE_01CC28
	LDA.w !RAM_SMW_Sprites_BrownRoatingPlatformAngleSign2
	LSR
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_01CB72
	EOR.w #$FFFF
	INC
CODE_01CB72:
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BCC.b CODE_01CB7C
	EOR.w #$FFFF
	INC
CODE_01CB7C:
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformSineLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Misc_RotatingObjectYRadiusLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	JSR.w CODE_01CC28
	LDA.w !RAM_SMW_Sprites_BrownRoatingPlatformAngleSign1
	LSR
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_01CB9B
	EOR.w #$FFFF
	INC
CODE_01CB9B:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BCC.b CODE_01CBA5
	EOR.w #$FFFF
	INC
CODE_01CBA5:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	ADC.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	STA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileXPosLo
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformCosineLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Misc_RotatingObjectYRadiusLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	JSR.w CODE_01CC28
	LDA.w !RAM_SMW_Sprites_BrownRoatingPlatformAngleSign2
	LSR
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_01CBDA
	EOR.w #$FFFF
	INC
CODE_01CBDA:
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BCC.b CODE_01CBE4
	EOR.w #$FFFF
	INC
CODE_01CBE4:
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Sprites_BrownRotatingPlatformSineLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Misc_RotatingObjectXRadiusLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	JSR.w CODE_01CC28
	LDA.w !RAM_SMW_Sprites_BrownRoatingPlatformAngleSign1
	LSR
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b CODE_01CC03
	EOR.w #$FFFF
	INC
CODE_01CC03:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BCC.b CODE_01CC0D
	EOR.w #$FFFF
	INC
CODE_01CC0D:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	SBC.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM05
	STA.w !RAM_SMW_Sprites_BrownRotatingPlatformFirstTileYPosLo
	SEP.b #$20
	RTS

CODE_01CC28:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !REGISTER_Multiplier
	JSR.w SMW_WasteTime_Main
	LDA.w !REGISTER_ProductOrRemainderLo
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !REGISTER_ProductOrRemainderHi
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !REGISTER_Multiplier
	JSR.w SMW_WasteTime_Main
	LDA.w !REGISTER_ProductOrRemainderLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !REGISTER_Multiplier
	JSR.w SMW_WasteTime_Main
	LDA.w !REGISTER_ProductOrRemainderLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !REGISTER_Multiplier
	JSR.w SMW_WasteTime_Main
	LDA.w !REGISTER_ProductOrRemainderLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM07
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GetSineAndCosineOfTiltingPlatform(Address)
namespace SMW_GetSineAndCosineOfTiltingPlatform
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_M7RotationHi
	STA.w !RAM_SMW_Sprites_BrownRoatingPlatformAngleSign1
	PHX
	REP.b #$30
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ASL
	AND.w #$01FF
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.w !RAM_SMW_Sprites_BrownRotatingPlatformSineLo
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.w #$0080
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	AND.w #$01FF
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.w !RAM_SMW_Sprites_BrownRotatingPlatformCosineLo
	SEP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_Sprites_BrownRoatingPlatformAngleSign2
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_GenericNormalSpriteAccelerationTable(Address)
namespace SMW_GenericNormalSpriteAccelerationTable
%InsertMacroAtXPosition(<Address>)

Main:
	db $01,$FF
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_SpawnBounceSprite(Address)
namespace SMW_SpawnBounceSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$07
	BNE.b NotBreakable
	LDA.w !RAM_SMW_Player_CurrentCharacter
	ASL
	ADC.w !RAM_SMW_Player_CurrentCharacter
	TAX
	LDA.w !RAM_SMW_Player_MarioScoreLo,x
	CLC
	ADC.b #$05
	STA.w !RAM_SMW_Player_MarioScoreLo,x
	BCC.b CODE_028773
	INC.w !RAM_SMW_Player_MarioScoreMid,x
	BNE.b CODE_028773
	INC.w !RAM_SMW_Player_MarioScoreHi,x
CODE_028773:
	LDA.b #$D0
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #$00
	JSL.l SMW_SpawnBrickPieces_Main
	JSR.w SMW_InitializeBlockPunchAttack_Main
	LDA.b #$02
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	RTL

BlockBounce:
	db $00,$03,$00,$00,$01,$07,$00,$04
	db $0A

NotBreakable:
	LDY.b #!Define_SMW_MaxBounceSpriteSlot
FindTurningBlkSlot:
	LDA.w !RAM_SMW_BounceSpr_SpriteID,y
	BEQ.b CODE_028807
	DEY
	BPL.b FindTurningBlkSlot
	DEC.w !RAM_SMW_BounceSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_0287A6
	LDA.b #!Define_SMW_MaxBounceSpriteSlot
	STA.w !RAM_SMW_BounceSpr_SlotToOverwriteWhenSlotsFull
CODE_0287A6:
	LDY.w !RAM_SMW_BounceSpr_SlotToOverwriteWhenSlotsFull
	LDA.w !RAM_SMW_BounceSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_BounceSpr07_SpinningTurnBlock
	BNE.b NoResetTurningBlk
	LDA.b !RAM_SMW_Blocks_XPosLo
	PHA
	LDA.b !RAM_SMW_Blocks_XPosHi
	PHA
	LDA.b !RAM_SMW_Blocks_YPosLo
	PHA
	LDA.b !RAM_SMW_Blocks_YPosHi
	PHA
	LDA.w !RAM_SMW_BounceSpr_XPosLo,y
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_BounceSpr_XPosHi,y
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.w !RAM_SMW_BounceSpr_YPosLo,y
	CLC
	ADC.b #$0C
	AND.b #$F0
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_BounceSpr_YPosHi,y
	ADC.b #$00
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_BounceSpr_Map16TileToSpawn,y
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	PHA
	JSL.l SMW_GenerateTile_Main
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM07
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM06
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM05
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM04
	PLA
	STA.b !RAM_SMW_Blocks_YPosHi
	PLA
	STA.b !RAM_SMW_Blocks_YPosLo
	PLA
	STA.b !RAM_SMW_Blocks_XPosHi
	PLA
	STA.b !RAM_SMW_Blocks_XPosLo
NoResetTurningBlk:
	LDY.w !RAM_SMW_BounceSpr_SlotToOverwriteWhenSlotsFull
CODE_028807:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$10
	BCC.b CODE_028818
	STZ.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	LDA.w BlockBounce-$09,x
	STA.w !RAM_SMW_BounceSpr_YXPPCCCT,y
	BRA.b CODE_02882A

CODE_028818:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$05
	BNE.b CODE_028823
	LDX.b #!Define_SMW_Sound1DF9_ONOFFSwitch
	STX.w !RAM_SMW_IO_SoundCh1
CODE_028823:
	TAX
	LDA.w BlockBounce,x
	STA.w !RAM_SMW_BounceSpr_YXPPCCCT,y
CODE_02882A:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	INC
	STA.w !RAM_SMW_BounceSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_BounceSpr_CurrentStatus,y
	LDA.b !RAM_SMW_Blocks_XPosLo
	STA.w !RAM_SMW_BounceSpr_XPosLo,y
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.w !RAM_SMW_BounceSpr_XPosHi,y
	LDA.b !RAM_SMW_Blocks_YPosLo
	STA.w !RAM_SMW_BounceSpr_YPosLo,y
	LDA.b !RAM_SMW_Blocks_YPosHi
	STA.w !RAM_SMW_BounceSpr_YPosHi,y
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	LSR
	ROR
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.b !RAM_SMW_Misc_ScratchRAM06
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BlockBounceYSpeed,x
else
	LDA.w BlockBounceYSpeed,x
endif
	STA.w !RAM_SMW_BounceSpr_YSpeed,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BlockBounceXSpeed,x
else
	LDA.w BlockBounceXSpeed,x
endif
	STA.w !RAM_SMW_BounceSpr_XSpeed,y
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w !RAM_SMW_BounceSpr_Properties,y
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	STA.w !RAM_SMW_BounceSpr_Map16TileToSpawn,y
	LDA.b #$08
	STA.w !RAM_SMW_BounceSpr_Timer,y
	LDA.w !RAM_SMW_BounceSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_BounceSpr07_SpinningTurnBlock
	BNE.b CODE_02887A
	LDA.b #$FF
	STA.w !RAM_SMW_BounceSpr07_SpinningTurnBlock_DespawnTimer,y
CODE_02887A:
	JSR.w SMW_InitializeBlockPunchAttack_Main
CODE_02887D:
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	BEQ.b Return0288A0
	CMP.b #$0A
	BNE.b CODE_028885
CODE_028885:
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CMP.b #$08
	BCS.b CODE_0288DC
	CMP.b #$06
	BCC.b CODE_0288DC
	CMP.b #$07
	BNE.b CODE_02889D
	LDA.w !RAM_SMW_Blocks_MultiCoinBlockTimer
	BNE.b CODE_02889D
	LDA.b #$FF
	STA.w !RAM_SMW_Blocks_MultiCoinBlockTimer
CODE_02889D:
	JSR.w SpawnSpinningCoins
Return0288A0:
	RTL

DATA_0288A1:
	db !Define_SMW_SpriteID_NorSpr035_Yoshi
	db !Define_SMW_SpriteID_NorSpr078_1upMushroom

SpriteInBlock:
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr076_Star
	db !Define_SMW_SpriteID_NorSpr077_Feather
	db !Define_SMW_SpriteID_NorSpr078_1upMushroom
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr079_VineHead
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr03E_PSwitch
	db !Define_SMW_SpriteID_NorSpr07D_PBalloon
	db !Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	db !Define_SMW_SpriteID_NorSpr004_GreenKoopa
	db !Define_SMW_SpriteID_NorSpr081_ChangingItem
	db !Define_SMW_SpriteID_NorSpr045_DirectionalCoins
	db !Define_SMW_SpriteID_NorSpr080_Key

UNK_SpriteInBlockPow:
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr076_Star
	db !Define_SMW_SpriteID_NorSpr077_Feather
	db !Define_SMW_SpriteID_NorSpr078_1upMushroom
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr079_VineHead
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr03E_PSwitch
	db !Define_SMW_SpriteID_NorSpr07D_PBalloon
	db !Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	db !Define_SMW_SpriteID_NorSpr004_GreenKoopa
	db !Define_SMW_SpriteID_NorSpr081_ChangingItem
	db !Define_SMW_SpriteID_NorSpr045_DirectionalCoins
	db !Define_SMW_SpriteID_NorSpr080_Key

StatusOfSprInBlk:
	db !Define_SMW_NorSprStatus00_EmptySlot
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus00_EmptySlot
	db !Define_SMW_NorSprStatus00_EmptySlot
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus00_EmptySlot
	db !Define_SMW_NorSprStatus09_Stunned
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus09_Stunned
	db !Define_SMW_NorSprStatus09_Stunned
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus09_Stunned

DATA_0288D6:
	db !Define_SMW_SpriteID_NorSpr080_Key
	db !Define_SMW_SpriteID_NorSpr07E_FlyingRedCoin
	db !Define_SMW_SpriteID_NorSpr07D_PBalloon

DATA_0288D9:
	db !Define_SMW_NorSprStatus09_Stunned
	db !Define_SMW_NorSprStatus08_Normal
	db !Define_SMW_NorSprStatus08_Normal

CODE_0288DC:
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	CPY.b #$0B
	BNE.b CODE_0288EA
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.b #$30
	CMP.b #$20
	BEQ.b GenSpriteFromBlk
CODE_0288EA:
	CPY.b #$10
	BEQ.b CODE_0288FD
	CPY.b #$08
	BNE.b CODE_0288F9
	LDA.w !RAM_SMW_Sprites_SpriteMemorySetting
	BEQ.b GenSpriteFromBlk
	BNE.b CODE_0288FD
CODE_0288F9:
	CPY.b #$0C
	BNE.b GenSpriteFromBlk
CODE_0288FD:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	TYX
	BPL.b CODE_028922
	RTL

GenSpriteFromBlk:
	LDX.b #!Define_SMW_MaxNormalSpriteSlot
CODE_028907:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b CODE_028922
	DEX
	CPX.b #$FF
	BNE.b CODE_028907
	DEC.w !RAM_SMW_NorSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_02891B
	LDA.b #!Define_SMW_MaxNormalSpriteSlot-$0A
	STA.w !RAM_SMW_NorSpr_SlotToOverwriteWhenSlotsFull
CODE_02891B:
	LDA.w !RAM_SMW_NorSpr_SlotToOverwriteWhenSlotsFull
	CLC
	ADC.b #!Define_SMW_MaxNormalSpriteSlot-$01
	TAX
CODE_028922:
	STX.w !RAM_SMW_Sprites_PowerUpFromBlockSpriteSlot
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w StatusOfSprInBlk,y
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w !RAM_SMW_Yoshi_StrayYoshiFlag
	BEQ.b CODE_028937
	TYA
	CLC
	ADC.b #$11
	TAY
CODE_028937:
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.w SpriteInBlock,y
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDY.b #!Define_SMW_Sound1DFC_HitItemBlock
	CMP.b #!Define_SMW_SpriteID_NorSpr081_ChangingItem
	BCS.b CODE_02894C
	CMP.b #!Define_SMW_SpriteID_NorSpr079_VineHead
	BCC.b CODE_02894C
	INY								; Note: !Define_SMW_Sound1DFC_HitVineBlock
CODE_02894C:
	STY.w !RAM_SMW_IO_SoundCh3
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	INC.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr045_DirectionalCoins
	BNE.b CODE_028972
	LDA.w !RAM_SMW_NorSpr045_DirectionalCoins_NoRespawnFlag
	BEQ.b CODE_028967
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	JMP.w CODE_02889D

CODE_028967:
	LDA.b #!Define_SMW_LevelMusic_DirectCoins
	STA.w !RAM_SMW_IO_MusicCh1
	INC.w !RAM_SMW_NorSpr045_DirectionalCoins_NoRespawnFlag
	STZ.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
CODE_028972:
	LDA.b !RAM_SMW_Blocks_XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Blocks_YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Blocks_YPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_0289A5
	LDA.b !RAM_SMW_Blocks_XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Blocks_XPosHi
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Blocks_YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Blocks_YPosHi
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
CODE_0289A5:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b CODE_0289D3
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$30
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_0288D9,y
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w DATA_0288D6,y
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	PHA
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b CODE_0289CD
	INC.w !RAM_SMW_NorSpr_Table7E157C,x
	RTL

CODE_0289CD:
	CMP.b #!Define_SMW_SpriteID_NorSpr07E_FlyingRedCoin
	BEQ.b CODE_028A03
	BRA.b CODE_028A01

CODE_0289D3:
	CMP.b #!Define_SMW_SpriteID_NorSpr004_GreenKoopa
	BEQ.b ADDR_028A08
	CMP.b #!Define_SMW_SpriteID_NorSpr03E_PSwitch
	BEQ.b CODE_028A2A
	CMP.b #!Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	BNE.b CODE_028A11
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_0289E1:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_0289F3
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BNE.b CODE_0289F3
CODE_0289EF:
	LDY.b #$01
	BRA.b CODE_0289FB

CODE_0289F3:
	DEY
	BPL.b CODE_0289E1
	LDY.w !RAM_SMW_Yoshi_StrayYoshiFlag
	BNE.b CODE_0289EF
CODE_0289FB:
	LDA.w DATA_0288A1,y
	STA.w !RAM_SMW_NorSpr02C_YoshiEgg_ContentsOfEgg,x
CODE_028A01:
	BRA.b CODE_028A0D

CODE_028A03:
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	RTL

ADDR_028A08:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_028A0D:
	LDA.b #$D0
	BRA.b CODE_028A18

CODE_028A11:
	LDA.b #$3E
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.b #$D0
CODE_028A18:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$2C
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x			;\ Note: !Define_SMW_NorSpr_190FProp_DontGetStuckInWallsWhenCarried
	BPL.b Return028A29						;/
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E15AC,x
Return028A29:
	RTL

CODE_028A2A:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
	TAY
	LDA.w DATA_028A42,y
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
	JSL.l SMW_SpawnSmokePuff_Main
	BRA.b CODE_028A0D

DATA_028A42:
	db $06,$02
namespace off
endmacro

macro ROUTINE_RT01_SMW_SpawnBounceSprite(Address)
namespace SMW_SpawnBounceSprite
%InsertMacroAtXPosition(<Address>)

BlockBounceYSpeed:
	db $C0,$00,$00,$40

BlockBounceXSpeed:
	db $00,$40,$C0,$00
namespace off
endmacro

macro ROUTINE_RT02_SMW_SpawnBounceSprite(Address)
namespace SMW_SpawnBounceSprite
%InsertMacroAtXPosition(<Address>)

SpawnSpinningCoins:
	LDX.b #!Define_SMW_MaxSpinningCoinSpriteSlot
CODE_028A68:
	LDA.w !RAM_SMW_BlockCoinSpr_SlotID,x
	BEQ.b CODE_028A7D
	DEX
	BPL.b CODE_028A68
	DEC.w !RAM_SMW_BlockCoinSpr_SlotToOverwriteWhenSlotsFull
	BPL.b ADDR_028A7A
	LDA.b #!Define_SMW_MaxSpinningCoinSpriteSlot
	STA.w !RAM_SMW_BlockCoinSpr_SlotToOverwriteWhenSlotsFull
ADDR_028A7A:
	LDX.w !RAM_SMW_BlockCoinSpr_SlotToOverwriteWhenSlotsFull
CODE_028A7D:
	JSL.l SMW_GiveCoins_OneCoin
	INC.w !RAM_SMW_BlockCoinSpr_SlotID,x
	LDA.b !RAM_SMW_Blocks_XPosLo
	STA.w !RAM_SMW_BlockCoinSpr_XPosLo,x
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.w !RAM_SMW_BlockCoinSpr_XPosHi,x
	LDA.b !RAM_SMW_Blocks_YPosLo
	SEC
	SBC.b #$10
	STA.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	LDA.b !RAM_SMW_Blocks_YPosHi
	SBC.b #$00
	STA.w !RAM_SMW_BlockCoinSpr_YPosHi,x
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	STA.w !RAM_SMW_BlockCoinSpr_LayerIndex,x
	LDA.b #$D0
	STA.w !RAM_SMW_BlockCoinSpr_YSpeed,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SpawnSmokePuff(Address)
namespace SMW_SpawnSmokePuff
%InsertMacroAtXPosition(<Address>)

Main:
	PHX
	LDX.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_028A47:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,x
	BEQ.b CODE_028A50
	DEX
	BPL.b CODE_028A47
	INX
CODE_028A50:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,x
	LDA.b !RAM_SMW_Blocks_YPosLo
	STA.w !RAM_SMW_SmokeSpr_YPosLo,x
	LDA.b !RAM_SMW_Blocks_XPosLo
	STA.w !RAM_SMW_SmokeSpr_XPosLo,x
	LDA.b #$1B
	STA.w !RAM_SMW_SmokeSpr_Timer,x
	PLX
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_InitializeBlockPunchAttack(Address)
namespace SMW_InitializeBlockPunchAttack
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxBounceSpriteSlot
CODE_0286EF:
	LDA.w !RAM_SMW_BounceSpr_Type,y
	BEQ.b CODE_0286F8
	DEY
	BPL.b CODE_0286EF
	INY
CODE_0286F8:
	LDA.b !RAM_SMW_Blocks_XPosLo
	STA.w !RAM_SMW_BounceSpr_HitboxXLo,y
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.w !RAM_SMW_BounceSpr_HitboxXHi,y
	LDA.b !RAM_SMW_Blocks_YPosLo
	STA.w !RAM_SMW_BounceSpr_HitboxYLo,y
	LDA.b !RAM_SMW_Blocks_YPosHi
	STA.w !RAM_SMW_BounceSpr_HitboxYHi,y
	LDA.w !RAM_SMW_Misc_CurrentLayerBeingProcessedLo
	BEQ.b CODE_02872F
	LDA.b !RAM_SMW_Blocks_XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
	STA.w !RAM_SMW_BounceSpr_HitboxXLo,y
	LDA.b !RAM_SMW_Blocks_XPosHi
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosHi
	STA.w !RAM_SMW_BounceSpr_HitboxXHi,y
	LDA.b !RAM_SMW_Blocks_YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
	STA.w !RAM_SMW_BounceSpr_HitboxYLo,y
	LDA.b !RAM_SMW_Blocks_YPosHi
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosHi
	STA.w !RAM_SMW_BounceSpr_HitboxYHi,y
CODE_02872F:
	LDA.b #$01
	STA.w !RAM_SMW_BounceSpr_Type,y
	LDA.b #$06
	STA.w !RAM_SMW_BounceSpr_InteractTimer,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_SMW_FileSelectText(Address)
namespace SMW_FileSelectText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
EraseFile:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%StripeImageHeader(.ClearLine1, $08, $11, 0, $001D, 3)
	db $FC,$38
.ClearLine1End:
	%StripeImageHeader(.ClearLine2, $08, $13, 0, $001D, 3)
	db $FC,$38
.ClearLine2End:

SelectFile:
	%InsertVersionExclusiveFile(incbin, ../SMW/strings/FileSelectText_, SMW_J.bin, )
SelectFileEnd:
	db $FF

elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	%StripeImageHeader(.ClearLine1, $05, $10, 0, $002F, 3)
	db $FC,$38
.ClearLine1End:
	%StripeImageHeader(.ClearLine2, $08, $11, 0, $001D, 3)
	db $FC,$38
.ClearLine2End:
	%StripeImageHeader(.ClearLine3, $05, $12, 0, $002F, 3)
	db $FC,$38
.ClearLine3End:
	%StripeImageHeader(.ClearLine4, $08, $13, 0, $001D, 3)
	db $FC,$38
.ClearLine4End:
	%StripeImageHeader(.ClearLine5, $05, $14, 0, $002F, 3)
	db $FC,$38
.ClearLine5End:
	%StripeImageHeader(.ClearLine6, $05, $16, 0, $001D, 3)
	db $FC,$38
.ClearLine6End:
	%StripeImageHeader(.MarioA, $0D, $10, 0, $0000, 3)
	;dw "MARIO A ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$71,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioAEnd:
	%StripeImageHeader(.MarioB, $0D, $12, 0, $0000, 3)
	;dw "MARIO B ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$2C,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioBEnd:
	%StripeImageHeader(.MarioC, $0D, $14, 0, $0000, 3)
	;dw "MARIO C ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$2D,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioCEnd:
	%StripeImageHeader(.EraseA, $07, $10, 0, $0000, 3)		;\ Note: Why not pair these up with the above 3 lines of text?
	;dw "ERASE "							;|
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38		;|
.EraseAEnd:								;|
	%StripeImageHeader(.EraseB, $07, $12, 0, $0000, 3)		;|
	;dw "ERASE "							;|
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38		;|
.EraseBEnd:								;|
	%StripeImageHeader(.EraseC, $07, $14, 0, $0000, 3)		;|
	;dw "ERASE "							;|
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38		;|
.EraseCEnd:								;/
	%StripeImageHeader(.End, $07, $16, 0, $0000, 3)
	;dw "END"
	db $73,$31,$79,$30,$7C,$30
.EndEnd:
	db $FF

SelectFile:
	%StripeImageHeader(.ClearLine1, $05, $10, 0, $002F, 3)
	db $FC,$38
.ClearLine1End:
	%StripeImageHeader(.ClearLine2, $08, $11, 0, $001D, 3)
	db $FC,$38
.ClearLine2End:
	%StripeImageHeader(.ClearLine3, $05, $12, 0, $002F, 3)
	db $FC,$38
.ClearLine3End:
	%StripeImageHeader(.ClearLine4, $08, $13, 0, $001D, 3)
	db $FC,$38
.ClearLine4End:
	%StripeImageHeader(.ClearLine5, $05, $14, 0, $002F, 3)
	db $FC,$38
.ClearLine5End:
	%StripeImageHeader(.ClearLine6, $05, $16, 0, $001D, 3)
	db $FC,$38
.ClearLine6End:
	%StripeImageHeader(.Row1, $08, $10, 0, $0000, 3)
	;dw "ZONE 1    ZONE 5"
	db $21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$6D,$31,$FC,$38,$FC,$38,$FC,$38,$FC,$38,$21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$51,$30
.Row1End:
	%StripeImageHeader(.Row2, $08, $12, 0, $0000, 3)
	;dw "ZONE 2    ZONE 6"
	db $21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$6E,$31,$FC,$38,$FC,$38,$FC,$38,$FC,$38,$21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$52,$30
.Row2End:
	%StripeImageHeader(.Row3, $08, $14, 0, $0000, 3)
	;dw "ZONE 3    ZONE 7"
	db $21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$4E,$30,$FC,$38,$FC,$38,$FC,$38,$FC,$38,$21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$53,$30
.Row3End:
	%StripeImageHeader(.Row4, $08, $16, 0, $0000, 3)
	;dw "ZONE 4"
	db $21,$31,$3E,$31,$30,$31,$73,$31,$FC,$38,$50,$30
.Row4End:
	db $FF

else
	%StripeImageHeader(.ClearLine1, $05, $0F, 0, $002F, 3)
	db $FC,$38
.ClearLine1End:
	%StripeImageHeader(.ClearLine2, $08, $10, 0, $001D, 3)
	db $FC,$38
.ClearLine2End:
	%StripeImageHeader(.ClearLine3, $05, $11, 0, $002F, 3)
	db $FC,$38
.ClearLine3End:
	%StripeImageHeader(.ClearLine4, $08, $12, 0, $001D, 3)
	db $FC,$38
.ClearLine4End:
	%StripeImageHeader(.ClearLine5, $05, $13, 0, $002F, 3)
	db $FC,$38
.ClearLine5End:
	%StripeImageHeader(.ClearLine6, $05, $15, 0, $001D, 3)
	db $FC,$38
.ClearLine6End:
	%StripeImageHeader(.MarioA, $0D, $0F, 0, $0000, 3)
	;dw "MARIO A ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$71,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioAEnd:
	%StripeImageHeader(.MarioB, $0D, $11, 0, $0000, 3)
	;dw "MARIO B ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$2C,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioBEnd:
	%StripeImageHeader(.MarioC, $0D, $13, 0, $0000, 3)
	;dw "MARIO C ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$2D,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioCEnd:
	%StripeImageHeader(.EraseA, $07, $0F, 0, $0000, 3)		;\ Note: Why not pair these up with the above 3 lines of text?
	;dw "ERASE "							;|
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38		;|
.EraseAEnd:								;|
	%StripeImageHeader(.EraseB, $07, $11, 0, $0000, 3)		;|
	;dw "ERASE "							;|
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38		;|
.EraseBEnd:								;|
	%StripeImageHeader(.EraseC, $07, $13, 0, $0000, 3)		;|
	;dw "ERASE "							;|
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38		;|
.EraseCEnd:								;/
	%StripeImageHeader(.End, $07, $15, 0, $0000, 3)
	;dw "END"
	db $73,$31,$79,$30,$7C,$30
.EndEnd:
	db $FF

SelectFile:
	%StripeImageHeader(.ClearLine1, $05, $0F, 0, $002F, 3)
	db $FC,$38
.ClearLine1End:
	%StripeImageHeader(.ClearLine2, $08, $10, 0, $001D, 3)
	db $FC,$38
.ClearLine2End:
	%StripeImageHeader(.ClearLine3, $05, $11, 0, $002F, 3)
	db $FC,$38
.ClearLine3End:
	%StripeImageHeader(.ClearLine4, $08, $12, 0, $001D, 3)
	db $FC,$38
.ClearLine4End:
	%StripeImageHeader(.ClearLine5, $05, $13, 0, $002F, 3)
	db $FC,$38
.ClearLine5End:
	%StripeImageHeader(.ClearLine6, $05, $15, 0, $001D, 3)
	db $FC,$38
.ClearLine6End:
	%StripeImageHeader(.MarioA, $0A, $0F, 0, $0000, 3)
	;dw "MARIO A ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$71,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioAEnd:
	%StripeImageHeader(.MarioB, $0A, $11, 0, $0000, 3)
	;dw "MARIO B ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$2C,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioBEnd:
	%StripeImageHeader(.MarioC, $0A, $13, 0, $0000, 3)
	;dw "MARIO C ...EMPTY"
	db $76,$31,$71,$31,$74,$31,$82,$30,$83,$30,$FC,$38,$2D,$31,$FC,$38,$24,$38,$24,$38,$24,$38,$73,$31,$76,$31,$6F,$31,$2F,$31,$72,$31
.MarioCEnd:
	%StripeImageHeader(.EraseData, $0A, $15, 0, $0000, 3)
	;dw "ERASE DATA"
	db $73,$31,$74,$31,$71,$31,$31,$31,$73,$31,$FC,$38,$7C,$30,$71,$31,$2F,$31,$71,$31
.EraseDataEnd:
	db $FF
endif
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_XPlayerGameText(Address)
namespace SMW_XPlayerGameText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%InsertVersionExclusiveFile(incbin, ../SMW/strings/XPlayerGame_, SMW_J.bin, )
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_ARCADE) != $00
	%StripeImageHeader(ClearLine1, $05, $10, 0, $0030, 3)
	db $FC,$38
ClearLine1End:
	%StripeImageHeader(ClearLine2, $05, $12, 0, $0030, 3)
	db $FC,$38
ClearLine2End:
	%StripeImageHeader(ClearLine3, $05, $14, 0, $0030, 3)
	db $FC,$38
ClearLine3End:
	%StripeImageHeader(ClearLine4, $05, $16, 0, $001D, 3)
	db $FC,$38
ClearLine4End:
	%StripeImageHeader(OnePlayer, $0A, $10, 0, $0000, 3)
	;dw "1 PLAYER GAME"
	db $6D,$31,$FC,$38,$6F,$31,$70,$31,$71,$31,$72,$31,$73,$31,$74,$31,$FC,$38,$75,$31,$71,$31,$76,$31,$73,$31
OnePlayerEnd:
	%StripeImageHeader(TwoPlayer, $0A, $12, 0, $0000, 3)
	;dw "2 PLAYER GAME"
	db $6E,$31,$FC,$38,$6F,$31,$70,$31,$71,$31,$72,$31,$73,$31,$74,$31,$FC,$38,$75,$31,$71,$31,$76,$31,$73,$31
TwoPlayerEnd:
	db $FF
else
	%StripeImageHeader(ClearLine1, $05, $0F, 0, $0030, 3)
	db $FC,$38
ClearLine1End:
	%StripeImageHeader(ClearLine2, $05, $11, 0, $0030, 3)
	db $FC,$38
ClearLine2End:
	%StripeImageHeader(ClearLine3, $05, $13, 0, $0030, 3)
	db $FC,$38
ClearLine3End:
	%StripeImageHeader(ClearLine4, $05, $15, 0, $001D, 3)
	db $FC,$38
ClearLine4End:
	%StripeImageHeader(OnePlayer, $0A, $10, 0, $0000, 3)
	;dw "1 PLAYER GAME"
	db $6D,$31,$FC,$38,$6F,$31,$70,$31,$71,$31,$72,$31,$73,$31,$74,$31,$FC,$38,$75,$31,$71,$31,$76,$31,$73,$31
OnePlayerEnd:
	%StripeImageHeader(TwoPlayer, $0A, $12, 0, $0000, 3)
	;dw "2 PLAYER GAME"
	db $6E,$31,$FC,$38,$6F,$31,$70,$31,$71,$31,$72,$31,$73,$31,$74,$31,$FC,$38,$75,$31,$71,$31,$76,$31,$73,$31
TwoPlayerEnd:
	db $FF
endif
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_SaveMenuText(Address)
namespace SMW_SaveMenuText
%InsertMacroAtXPosition(<Address>)

cleartable
Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%InsertVersionExclusiveFile(incbin, ../SMW/strings/SaveMenuText_, SMW_J.bin, )
else
	%StripeImageHeader(ContinueAndSave, $06, $0E, 0, $0000, 3)
	;dw "CONTINUE AND SAVE"
	db $2D,$39,$7A,$38,$79,$38,$2F,$39,$82,$38,$79,$38,$7B,$38,$73,$39,$FC,$38,$71,$39,$79,$38,$7C,$38,$FC,$38,$31,$39,$71,$39,$80,$38,$73,$39
ContinueAndSaveEnd:
	%StripeImageHeader(ContinueWithoutSave, $06, $10, 0, $0000, 3)
	;dw "CONTINUE WITHOUT SAVE"
	db $2D,$39,$7A,$38,$79,$38,$2F,$39,$82,$38,$79,$38,$7B,$38,$73,$39,$FC,$38,$81,$38,$82,$38,$2F,$39,$84,$38,$7A,$38,$7B,$38,$2F,$39,$FC,$38,$31,$39,$71,$39,$80,$38,$73,$39
ContinueWithoutSaveEnd:
	db $FF
endif
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_ContinueEndText(Address)
namespace SMW_ContinueEndText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	%InsertVersionExclusiveFile(incbin, ../SMW/strings/ContinueEndText_, SMW_J.bin, )
else
	%StripeImageHeader(Continue, $0D, $0E, 0, $0000, 3)
	;dw "CONTINUE"
	db $2D,$39,$7A,$38,$79,$38,$2F,$39,$82,$38,$79,$38,$7B,$38,$73,$39
ContinueEnd:
	%StripeImageHeader(End, $0D, $10, 0, $0000, 3)
	;dw "END"
	db $73,$39,$79,$38,$7C,$38
EndEnd:
	db $FF
endif
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_CourseClearText(Address)
namespace SMW_CourseClearText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
	%StripeImageHeader(Mario, $0D, $08, 0, $0000, 3)
	db $30,$28,$31,$28,$32,$28,$33,$28,$34,$28
MarioEnd:
	%StripeImageHeader(CourseClear, $09, $0A, 0, $0000, 3)
	db $0C,$38,$18,$38,$1E,$38,$1B,$38,$1C,$38,$0E,$38,$FC,$38,$0C,$38,$15,$38,$0E,$38,$0A,$38,$1B,$38,$28,$38
CourseClearEnd:
	%StripeImageHeader(TimeBonus, $09, $0D, 0, $0000, 3)
	db $76,$38,$FC,$38,$FC,$38,$FC,$38,$26,$38,$05,$38,$00,$38,$77,$38,$FC,$38,$FC,$38,$FC,$38,$FC,$38,$FC,$38
TimeBonusEnd:
	db $FF
Luigi:
;$05CC61
	db $40,$41,$42,$43,$44				; Note: Due to how Luigi's name is coded to appear, these tiles must have the same properties and position as the Mario tiles.
LuigiEnd:
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_CreditsEnemyNames(Address)
namespace SMW_CreditsEnemyNames
%InsertMacroAtXPosition(<Address>)

cleartable
table "tables/fonts/AllUppercase.txt"

Main:
Screen01:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	incbin "images/ending/1/layer3.bin"
	%StripeImageHeader(.FishinLakitu, $11, $03, 0, $0000, 3)
	dw "FISHING JUGEM"
.FishinLakituEnd:
	%StripeImageHeader(.ParaBomb, $02, $04, 0, $0000, 3)
	dw "PARA BOM"
.ParaBombEnd:
	%StripeImageHeader(.ParaGoomba, $07, $0B, 0, $0000, 3)
	dw "PARA KURI"
.ParaGoombaEnd:
	%StripeImageHeader(.Lakitu, $13, $0D, 0, $0000, 3)
	dw "JUGEM"
.LakituEnd:
	%StripeImageHeader(.Spiny, $07, $11, 0, $0000, 3)
	dw "TOGEZO"
.SpinyEnd:
	%StripeImageHeader(.Wiggler, $13, $14, 0, $0000, 3)
	dw "HANACHAN"
.WigglerEnd:
	%StripeImageHeader(.BobOmb, $0E, $19, 0, $0000, 3)
	dw "BOMHEI"
.BobOmbEnd:
	db $FF

Screen02:
	incbin "images/ending/2/layer3.bin"
	%StripeImageHeader(.HammerBrother, $05, $04, 0, $0000, 3)
	dw "APPARE"
.HammerBrotherEnd:
	%StripeImageHeader(.SuperKoopa, $15, $08, 0, $0000, 3)
	dw "MANTOGAME"
.SuperKoopaEnd:
	%StripeImageHeader(.Chuck, $18, $12, 0, $0000, 3)
	dw "BUL"
.ChuckEnd:
	%StripeImageHeader(.PirhanaPlant, $04, $16, 0, $0000, 3)
	dw "P-PAKKUN"
.PirhanaPlantEnd:
	%StripeImageHeader(.Lotus, $10, $19, 0, $0000, 3)
	dw "PONKEY"
.LotusEnd:
	db $FF

Screen03:
	incbin "images/ending/3/layer3.bin"
	%StripeImageHeader(.SumoBrother, $07, $04, 0, $0000, 3)
	dw "K"
	dw $2824		;\ Green "."
	dw "K"			;|
	dw $2824		;/
.SumoBrotherEnd:
	%StripeImageHeader(.MontyMole, $17, $07, 0, $0000, 3)
	dw "CHOROPOO"
.MontyMoleEnd:
	%StripeImageHeader(.Pokey, $0F, $0E, 0, $0000, 3)
	dw "SANBO"
.PokeyEnd:
	%StripeImageHeader(.BulletBill, $12, $19, 0, $0000, 3)
	dw "KILLER"
.BulletBillEnd:
	db $FF

Screen04:
	incbin "images/ending/4/layer3.bin"
	%StripeImageHeader(.Rex, $11, $08, 0, $0000, 3)
	dw "DORABON"
.RexEnd:
	%StripeImageHeader(.MegaMole, $03, $0F, 0, $0000, 3)
	dw "INDY"
.MegaMoleEnd:
	%StripeImageHeader(.BanzaiBill, $11, $18, 0, $0000, 3)
	dw "MAGNUM KILLER"
.BanzaiBillEnd:
	db $FF

Screen05:
	incbin "images/ending/5/layer3.bin"
	%StripeImageHeader(.DinoRhino, $05, $06, 0, $0000, 3)
	dw "RAITA"
.DinoRhinoEnd:
	%StripeImageHeader(.DinoTorch, $0E, $0C, 0, $0000, 3)
	dw "CHIBI RAITA"
.DinoTorchEnd:
	%StripeImageHeader(.Koopas, $0E, $13, 0, $0000, 3)
	dw "NOKO NOKO"
.KoopasEnd:
	db $FF

Screen06:
	incbin "images/ending/6/layer3.bin"
	%StripeImageHeader(.SpikeTop, $02, $05, 0, $0000, 3)
	dw "TOGEMET"
.SpikeTopEnd:
	%StripeImageHeader(.Swooper, $12, $05, 0, $0000, 3)
	dw "BASA BASA"
.SwooperEnd:
	%StripeImageHeader(.BuzzyBeetle, $07, $11, 0, $0000, 3)
	dw "MET"
.BuzzyBeetleEnd:
	%StripeImageHeader(.Blargg, $13, $13, 0, $0000, 3)
	dw "UNBABA"
.BlarggEnd:
	db $FF

Screen07:
	incbin "images/ending/7/layer3.bin"
	%StripeImageHeader(.Blurp, $03, $04, 0, $0000, 3)
	dw "BUKU BUKU"
.BlurpEnd:
	%StripeImageHeader(.Urchin, $17, $07, 0, $0000, 3)
	dw "UNIRA"
.UrchinEnd:
	%StripeImageHeader(.PorcuPuffer, $08, $0D, 0, $0000, 3)
	dw "FUGUMANNEN"
.PorcuPufferEnd:
	%StripeImageHeader(.TorpedoTed, $15, $13, 0, $0000, 3)
	dw "TORPEDO"
.TorpedoTedEnd:
	%StripeImageHeader(.RipVanFish, $02, $19, 0, $0000, 3)
	dw "  GOOSKA   "
.RipVanFishEnd:
	db $FF

Screen08:
	incbin "images/ending/8/layer3.bin"
	%StripeImageHeader(.FishinBoo, $14, $06, 0, $0000, 3)
	dw "SPOOK"
.FishinBooEnd:
	%StripeImageHeader(.BooBuddies, $03, $07, 0, $0000, 3)
	dw "TELESA"
.BooBuddiesEnd:
	%StripeImageHeader(.BigBoo, $02, $10, 0, $0000, 3)
	dw "ATOMIC TELESA"
.BigBooEnd:
	%StripeImageHeader(.Eeries, $14, $15, 0, $0000, 3)
	dw "TELESAULS"
.EeriesEnd:
	db $FF

Screen09:
	incbin "images/ending/9/layer3.bin"
	%StripeImageHeader(.Sparky, $0C, $03, 0, $0000, 3)
	dw "KESERAN"
.SparkyEnd:
	%StripeImageHeader(.BonyBeetle, $13, $07, 0, $0000, 3)
	dw "HONE MET"
.BonyBeetleEnd:
	%StripeImageHeader(.DryBones, $04, $09, 0, $0000, 3)
	dw "KARON"
.DryBonesEnd:
	%StripeImageHeader(.Thwomp, $0F, $12, 0, $0000, 3)
	dw "DOSUN"
.ThwompEnd:
	%StripeImageHeader(.Thwimp, $16, $15, 0, $0000, 3)
	dw "COTON"
.ThwimpEnd:
	%StripeImageHeader(.Hothead, $08, $17, 0, $0000, 3)
	dw "PASARAN"
.HotheadEnd:
	db $FF

Screen10:
	incbin "images/ending/10/layer3.bin"
	%StripeImageHeader(.Grinder, $10, $04, 0, $0000, 3)
	dw "GARI GARI"
.GrinderEnd:
	%StripeImageHeader(.BallNChain, $07, $0D, 0, $0000, 3)
	dw "GURU GURU"
.BallNChainEnd:
	%StripeImageHeader(.Fishbone, $0D, $12, 0, $0000, 3)
	dw "FISH BONE"
.FishboneEnd:
	db $FF

Screen11:
	incbin "images/ending/11/layer3.bin"
	%StripeImageHeader(.Reznor, $0D, $0C, 0, $0000, 3)
	dw "BUIBUI"
.ReznorEnd:
	db $FF

Screen12:
	incbin "images/ending/12/layer3.bin"
	%StripeImageHeader(.MechaKoopa, $0B, $0C, 0, $0000, 3)
	dw "MEKA KOOPA"
.MechaKoopaEnd:
	db $FF

Screen13:
	incbin "images/ending/13/layer3.bin"
	%StripeImageHeader(.Morton, $05, $09, 0, $0000, 3)
	dw "MORTON"
.MortonEnd:
	%StripeImageHeader(.Roy, $17, $09, 0, $0000, 3)
	dw "ROY"
.RoyEnd:
	%StripeImageHeader(.Bowser, $0E, $10, 0, $0000, 3)
	dw "KOOPA"
.BowserEnd:
	%StripeImageHeader(.Lemmy, $03, $12, 0, $0000, 3)
	dw "LEMMY"
.LemmyEnd:
	%StripeImageHeader(.Wendy, $19, $12, 0, $0000, 3)
	dw "WENDY"
.WendyEnd:
	%StripeImageHeader(.Iggy, $05, $18, 0, $0000, 3)
	dw "IGGY"
.IggyEnd:
	%StripeImageHeader(.Larry, $17, $18, 0, $0000, 3)
	dw "LARRY"
.LarryEnd:
	%StripeImageHeader(.Ludwig, $0E, $1A, 0, $0000, 3)
	dw "LUDWIG"
.LudwigEnd:
	db $FF

else
	incbin "images/ending/1/layer3.bin"
	%StripeImageHeader(.FishinLakitu, $12, $03, 0, $0000, 3)
	dw "FISHIN'LAKITU"
.FishinLakituEnd:
	%StripeImageHeader(.ParaBomb, $02, $04, 0, $0000, 3)
	dw "PARA-BOMB"
.ParaBombEnd:
	%StripeImageHeader(.ParaGoomba, $07, $0B, 0, $0000, 3)
	dw "PARA-GOOMBA"
.ParaGoombaEnd:
	%StripeImageHeader(.Lakitu, $12, $0D, 0, $0000, 3)
	dw "LAKITU"
.LakituEnd:
	%StripeImageHeader(.Spiny, $08, $11, 0, $0000, 3)
	dw "SPINY"
.SpinyEnd:
	%StripeImageHeader(.Wiggler, $17, $15, 0, $0000, 3)
	dw "WIGGLER"
.WigglerEnd:
	%StripeImageHeader(.BobOmb, $0E, $19, 0, $0000, 3)
	dw "BOB-OMB"
.BobOmbEnd:
	db $FF

Screen02:
	incbin "images/ending/2/layer3.bin"
	%StripeImageHeader(.AmazingFlying, $01, $04, 0, $0000, 3)
	dw "AMAZING FLYIN'"
.AmazingFlyingEnd:
	%StripeImageHeader(.HammerBrother, $01, $05, 0, $0000, 3)
	dw "HAMMER BROTHER"
.HammerBrotherEnd:
	%StripeImageHeader(.SuperKoopa, $12, $07, 0, $0000, 3)
	dw "SUPER KOOPA"
.SuperKoopaEnd:
	%StripeImageHeader(.Chargin, $17, $12, 0, $0000, 3)
	dw "CHARGIN'"
.CharginEnd:
	%StripeImageHeader(.Chuck, $18, $13, 0, $0000, 3)
	dw "CHUCK"
.ChuckEnd:
	%StripeImageHeader(.Jumping, $04, $15, 0, $0000, 3)
	dw "JUMPING"
.JumpingEnd:
	%StripeImageHeader(.PirhanaPlant, $01, $16, 0, $0000, 3)
	dw "PIRHANA PLANT"
.PirhanaPlantEnd:
	%StripeImageHeader(.Volcano, $10, $19, 0, $0000, 3)
	dw "VOLCANO"
.VolcanoEnd:
	%StripeImageHeader(.Lotus, $11, $1A, 0, $0000, 3)
	dw "LOTUS"
.LotusEnd:
	db $FF

Screen03:
	incbin "images/ending/3/layer3.bin"
	%StripeImageHeader(.SumoBrother, $01, $04, 0, $0000, 3)
	dw "SUMO BROTHER"
.SumoBrotherEnd:
	%StripeImageHeader(.MontyMole, $15, $07, 0, $0000, 3)
	dw "MONTY MOLE"
.MontyMoleEnd:
	%StripeImageHeader(.Pokey, $10, $0E, 0, $0000, 3)
	dw "POKEY"
.PokeyEnd:
	%StripeImageHeader(.BulletBill, $0D, $19, 0, $0000, 3)
	dw "BULLET BILL"
.BulletBillEnd:
	db $FF

Screen04:
	incbin "images/ending/4/layer3.bin"
	%StripeImageHeader(.Rex, $11, $08, 0, $0000, 3)
	dw "REX"
.RexEnd:
	%StripeImageHeader(.MegaMole, $03, $10, 0, $0000, 3)
	dw "MEGA MOLE"
.MegaMoleEnd:
	%StripeImageHeader(.BanzaiBill, $10, $19, 0, $0000, 3)
	dw "BANZAI BILL"
.BanzaiBillEnd:
	db $FF

Screen05:
	incbin "images/ending/5/layer3.bin"
	%StripeImageHeader(.DinoRhino, $02, $06, 0, $0000, 3)
	dw "DINO-RHINO"
.DinoRhinoEnd:
	%StripeImageHeader(.DinoTorch, $09, $0F, 0, $0000, 3)
	dw "DINO-TORCH"
.DinoTorchEnd:
	%StripeImageHeader(.Koopas, $10, $19, 0, $0000, 3)
	dw "KOOPAS"
.KoopasEnd:
	db $FF

Screen06:
	incbin "images/ending/6/layer3.bin"
	%StripeImageHeader(.SpikeTop, $02, $05, 0, $0000, 3)
	dw "SPIKE TOP"
.SpikeTopEnd:
	%StripeImageHeader(.Swooper, $11, $05, 0, $0000, 3)
	dw "SWOOPERS"
.SwooperEnd:
	%StripeImageHeader(.BuzzyBeetle, $03, $10, 0, $0000, 3)
	dw "BUZZY BEETLE"
.BuzzyBeetleEnd:
	%StripeImageHeader(.Blargg, $12, $13, 0, $0000, 3)
	dw "BLARGG"
.BlarggEnd:
	db $FF

Screen07:
	incbin "images/ending/7/layer3.bin"
	%StripeImageHeader(.Blurp, $04, $04, 0, $0000, 3)
	dw "BLURPS"
.BlurpEnd:
	%StripeImageHeader(.Urchin, $12, $05, 0, $0000, 3)
	dw "URCHIN"
.UrchinEnd:
	%StripeImageHeader(.PorcuPuffer, $07, $0D, 0, $0000, 3)
	dw "PORCU-PUFFER"
.PorcuPufferEnd:
	%StripeImageHeader(.TorpedoTed, $12, $12, 0, $0000, 3)
	dw "TORPEDO TED"
.TorpedoTedEnd:
	%StripeImageHeader(.RipVanFish, $02, $18, 0, $0000, 3)
	dw "RIP VAN FISH"
.RipVanFishEnd:
	db $FF

Screen08:
	incbin "images/ending/8/layer3.bin"
	%StripeImageHeader(.BooBuddies, $03, $05, 0, $0000, 3)
	dw $7886	;\ Hex values draw the left and right " marks
	dw "BOO"	;|
	dw $3886	;|
	dw " BUDDIES"	;/
.BooBuddiesEnd:
	%StripeImageHeader(.FishinBoo, $12, $06, 0, $0000, 3)
	dw "FISHIN'BOO"
.FishinBooEnd:
	%StripeImageHeader(.BigBoo, $02, $11, 0, $0000, 3)
	dw "THE BIG "
	dw $7886	;\ Hex values draw the left and right " marks
	dw "BOO"	;|
	dw $3886	;/
.BigBooEnd:
	%StripeImageHeader(.Eeries, $13, $15, 0, $0000, 3)
	dw "EERIES"
.EeriesEnd:
	db $FF

Screen09:
	incbin "images/ending/9/layer3.bin"
	%StripeImageHeader(.Sparky, $0B, $03, 0, $0000, 3)
	dw "LIL SPARKY"
.SparkyEnd:
	%StripeImageHeader(.BonyBeetle, $11, $07, 0, $0000, 3)
	dw "BONY BEETLE"
.BonyBeetleEnd:
	%StripeImageHeader(.DryBones, $02, $09, 0, $0000, 3)
	dw "DRY BONES"
.DryBonesEnd:
	%StripeImageHeader(.Thwomp, $0F, $12, 0, $0000, 3)
	dw "THWOMP"
.ThwompEnd:
	%StripeImageHeader(.Thwimp, $16, $15, 0, $0000, 3)
	dw "THWIMP"
.ThwimpEnd:
	%StripeImageHeader(.Hothead, $09, $17, 0, $0000, 3)
	dw "HOTHEAD"
.HotheadEnd:
	db $FF

Screen10:
	incbin "images/ending/10/layer3.bin"
	%StripeImageHeader(.Grinder, $10, $04, 0, $0000, 3)
	dw "GRINDER"
.GrinderEnd:
	%StripeImageHeader(.BallNChain, $07, $0D, 0, $0000, 3)
	dw "BALL"
	dw $7885		; Draws the backwards '
	dw "N'CHAIN"
.BallNChainEnd:
	%StripeImageHeader(.Fishbone, $0D, $12, 0, $0000, 3)
	dw "FISHBONE"
.FishboneEnd:
	db $FF

Screen11:
	incbin "images/ending/11/layer3.bin"
	%StripeImageHeader(.Reznor, $0D, $0C, 0, $0000, 3)
	dw "REZNOR"
.ReznorEnd:
	db $FF

Screen12:
	incbin "images/ending/12/layer3.bin"
	%StripeImageHeader(.MechaKoopa, $0B, $0C, 0, $0000, 3)
	dw "MECHAKOOPAS"
.MechaKoopaEnd:
	db $FF

Screen13:
	incbin "images/ending/13/layer3.bin"
	%StripeImageHeader(.Morton1, $05, $09, 0, $0000, 3)
	dw "MORTON"
.Morton1End:
	%StripeImageHeader(.Morton2, $04, $0A, 0, $0000, 3)
	dw "KOOPA JR."
.Morton2End:
	%StripeImageHeader(.Roy1, $17, $09, 0, $0000, 3)
	dw "ROY"
.Roy1End:
	%StripeImageHeader(.Roy2, $16, $0A, 0, $0000, 3)
	dw "KOOPA"
.Roy2End:
	%StripeImageHeader(.Bowser, $0D, $10, 0, $0000, 3)
	dw "BOWSER"
.BowserEnd:
	%StripeImageHeader(.Lemmy1, $03, $12, 0, $0000, 3)
	dw "LEMMY"
.Lemmy1End:
	%StripeImageHeader(.Lemmy2, $03, $13, 0, $0000, 3)
	dw "KOOPA"
.Lemmy2End:
	%StripeImageHeader(.Wendy1, $19, $12, 0, $0000, 3)
	dw "WENDY"
.Wendy1End:
	%StripeImageHeader(.Wendy2, $18, $13, 0, $0000, 3)
	dw "O.KOOPA"
.Wendy2End:
	%StripeImageHeader(.Iggy1, $06, $18, 0, $0000, 3)
	dw "IGGY"
.Iggy1End:
	%StripeImageHeader(.Iggy2, $06, $19, 0, $0000, 3)
	dw "KOOPA"
.Iggy2End:
	%StripeImageHeader(.Larry1, $17, $18, 0, $0000, 3)
	dw "LARRY"
.Larry1End:
	%StripeImageHeader(.Larry2, $17, $19, 0, $0000, 3)
	dw "KOOPA"
.Larry2End:
	%StripeImageHeader(.Ludwig1, $0E, $19, 0, $0000, 3)
	dw "LUDWIG"
.Ludwig1End:
	%StripeImageHeader(.Ludwig2, $0D, $1A, 0, $0000, 3)
	dw "VON KOOPA"
.Ludwig2End:
	db $FF

SpecialWorld:
.Unused1:
	dw $FFFF
	%StripeImageHeader(.Pumpkin, $01, $16, 0, $0000, 3)
	dw "PUMPKIN"
.PumpkinEnd:
	dw $FFFF
	%StripeImageHeader(.Pidget, $0D, $19, 0, $0000, 3)
	dw "PIDGIT"
.PidgetEnd:
	dw $FFFF
.Unused2:
	dw $FFFF
	%StripeImageHeader(.MaskKoopa, $0E, $19, 0, $0000, 3)
	dw "MASK KOOPAS"
.MaskKoopaEnd:
	dw $FFFF

.Unused3:
	dw $FFFF
.Unused4:
	dw $FFFF
.Unused5:
	dw $FFFF
.Unused6:
	dw $FFFF
.Unused7:
	dw $FFFF
.Unused8:
	dw $FFFF
.Unused9:
	dw $FFFF
.Unused10:
	dw $FFFF
endif
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_CastleDestructionText(Address)
namespace SMW_CastleDestructionText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
Iggy:
.Line1:
db $52,$50,$00,$01
db $59,$39
db $52,$5A,$00,$01
db $5B,$39
db $52,$64,$00,$2F
db $47,$39,$5A,$39,$4A,$39,$4B,$39,$5A,$39,$11,$39,$02,$39,$14,$39,$5D,$39,$50,$39,$09,$39,$5C,$39,$10,$39,$5D,$39,$08,$39,$01,$39,$09,$39,$84,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$77,$39
.Line1End:
	db $FF
.Line2:
db $52,$92,$00,$01
db $5B,$39
db $52,$97,$00,$01
db $59,$39
db $52,$9B,$00,$01
db $59,$39
db $52,$A4,$00,$2F
db $0D,$39,$50,$39,$09,$39,$0D,$39,$5D,$39,$67,$39,$60,$39,$6A,$39,$0D,$39,$0E,$39,$15,$39,$5D,$39,$5F,$39,$65,$39,$61,$39,$14,$39,$19,$39,$54,$39,$02,$39,$10,$39,$5D,$39,$0D,$39,$19,$39,$07,$39
.Line2End:
	db $FF
.Line3:
db $52,$D0,$00,$01
db $59,$39
db $52,$D3,$00,$01
db $59,$39
db $52,$E4,$00,$2D
db $12,$39,$08,$39,$57,$39,$0D,$39,$5D,$39,$52,$39,$04,$39,$19,$39,$77,$39,$0D,$39,$0A,$39,$06,$39,$0D,$39,$09,$39,$5D,$39,$64,$39,$5A,$39,$46,$39,$41,$39,$18,$39,$01,$39,$1E,$39,$18,$39
.Line3End:
	db $FF
.Line4:
db $53,$05,$00,$01
db $59,$39
db $53,$06,$00,$01
db $59,$39
db $53,$09,$00,$01
db $59,$39
db $53,$24,$00,$17
db $0D,$39,$16,$39,$0D,$39,$0F,$39,$14,$39,$10,$39,$00,$39,$55,$39,$19,$39,$09,$39,$0D,$39,$78,$39
.Line4End:
	db $FF

Morton:
.Line1:
db $52,$4C,$00,$01
db $59,$39
db $52,$53,$00,$01
db $5B,$39
db $52,$64,$00,$2F
db $67,$39,$60,$39,$6A,$39,$0D,$39,$0E,$39,$15,$39,$5D,$39,$12,$39,$15,$39,$21,$39,$1C,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$1D,$39,$5D,$39,$1E,$39,$7C,$39,$0F,$39,$06,$39,$10,$39,$5D,$39
.Line1End:
	db $FF
.Line2:
db $52,$84,$00,$01
db $59,$39
db $52,$96,$00,$01
db $59,$39
db $52,$99,$00,$01
db $59,$39
db $52,$A4,$00,$2F
db $64,$39,$5A,$39,$46,$39,$41,$39,$18,$39,$01,$39,$1E,$39,$04,$39,$20,$39,$5D,$39,$0E,$39,$04,$39,$14,$39,$0B,$39,$04,$39,$01,$39,$14,$39,$5D,$39,$61,$39,$40,$39,$63,$39,$64,$39,$5A,$39,$43,$39
.Line2End:
	db $FF
.Line3:
db $52,$C9,$00,$01
db $59,$39
db $52,$D2,$00,$01
db $59,$39
db $52,$D7,$00,$01
db $59,$39
db $52,$E4,$00,$2F
db $18,$39,$11,$39,$0A,$39,$0A,$39,$21,$39,$10,$39,$01,$39,$05,$39,$3F,$39,$07,$39,$14,$39,$08,$39,$51,$39,$5D,$39,$11,$39,$21,$39,$52,$39,$A7,$39,$46,$39,$04,$39,$19,$39,$0E,$39,$04,$39,$19,$39
.Line3End:
	db $FF
.Line4:
db $53,$0B,$00,$01
db $5B,$39
db $53,$24,$00,$2F
db $03,$39,$10,$39,$01,$39,$56,$39,$04,$39,$3D,$39,$5D,$39,$79,$39,$5A,$39,$7B,$39,$16,$39,$1C,$39,$14,$39,$02,$39,$21,$39,$1C,$39,$01,$39,$1E,$39,$5D,$39,$01,$39,$04,$39,$12,$39,$3F,$39,$3D,$39
.Line4End:
	db $FF

Lemmy:
.Line1:
db $52,$4D,$00,$01
db $59,$39
db $52,$54,$00,$01
db $5B,$39
db $52,$64,$00,$2F
db $67,$39,$60,$39,$6A,$39,$0D,$39,$0E,$39,$15,$39,$5D,$39,$08,$39,$21,$39,$15,$39,$21,$39,$1C,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$1D,$39,$5D,$39,$1E,$39,$7C,$39,$0F,$39,$06,$39,$10,$39
.Line1End:
	db $FF
.Line2:
db $52,$A4,$00,$2F
db $54,$39,$7C,$39,$11,$39,$5D,$39,$16,$39,$11,$39,$01,$39,$51,$39,$78,$39,$5D,$39,$09,$39,$04,$39,$09,$39,$6C,$39,$5A,$39,$4A,$39,$15,$39,$5D,$39,$06,$39,$58,$39,$09,$39,$05,$39,$52,$39,$56,$39
.Line2End:
	db $FF
.Line3:
db $52,$C9,$00,$01
db $59,$39
db $52,$E4,$00,$2F
db $1D,$39,$09,$39,$1D,$39,$5D,$39,$1A,$39,$11,$39,$55,$39,$1E,$39,$00,$39,$04,$39,$14,$39,$4A,$39,$48,$39,$65,$39,$7B,$39,$77,$39,$5D,$39,$11,$39,$7C,$39,$10,$39,$01,$39,$52,$39,$01,$39,$11,$39
.Line3End:
	db $FF
.Line4:
db $53,$08,$00,$01
db $59,$39
db $53,$0C,$00,$01
db $59,$39
db $53,$12,$00,$01
db $59,$39
db $53,$24,$00,$27
db $09,$39,$0D,$39,$20,$39,$5D,$39,$11,$39,$21,$39,$52,$39,$0D,$39,$16,$39,$12,$39,$5D,$39,$52,$39,$56,$39,$14,$39,$10,$39,$00,$39,$5C,$39,$02,$39,$04,$39,$3F,$39
.Line4End:
	db $FF

Ludwig:
.Line1:
db $52,$46,$00,$01
db $59,$39
db $52,$4D,$00,$01
db $5B,$39
db $52,$64,$00,$2F
db $1F,$39,$21,$39,$15,$39,$21,$39,$1C,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$1D,$39,$5D,$39,$52,$39,$21,$39,$11,$39,$04,$39,$5F,$39,$60,$39,$62,$39,$5A,$39,$5D,$39,$67,$39,$60,$39,$6A,$39
.Line1End:
	db $FF
.Line2:
db $52,$A4,$00,$2F
db $0D,$39,$0E,$39,$15,$39,$5D,$39,$07,$39,$57,$39,$04,$39,$20,$39,$5D,$39,$19,$39,$1F,$39,$01,$39,$14,$39,$1D,$39,$55,$39,$12,$39,$15,$39,$01,$39,$7C,$39,$10,$39,$01,$39,$05,$39,$3F,$39,$3D,$39
.Line2End:
	db $FF
.Line3:
db $52,$C5,$00,$01
db $59,$39
db $52,$CD,$00,$01
db $59,$39
db $52,$D1,$00,$01
db $59,$39
db $52,$D2,$00,$01
db $59,$39
db $52,$E4,$00,$2F
db $52,$39,$0C,$39,$77,$39,$11,$39,$04,$39,$52,$39,$01,$39,$11,$39,$5D,$39,$10,$39,$56,$39,$07,$39,$11,$39,$04,$39,$10,$39,$51,$39,$52,$39,$01,$39,$11,$39,$01,$39,$02,$39,$5D,$39,$17,$39,$09,$39
.Line3End:
	db $FF
.Line4:
db $53,$04,$00,$01
db $59,$39
db $53,$15,$00,$01
db $59,$39
db $53,$16,$00,$01
db $59,$39
db $53,$24,$00,$2F
db $51,$39,$14,$39,$1D,$39,$55,$39,$3F,$39,$15,$39,$0D,$39,$09,$39,$10,$39,$1D,$39,$55,$39,$77,$39,$53,$39,$06,$39,$56,$39,$07,$39,$11,$39,$04,$39,$10,$39,$51,$39,$56,$39,$14,$39,$04,$39,$3D,$39
.Line4End:
	db $FF

Roy:
.Line1:
db $52,$4B,$00,$01
db $59,$39
db $52,$4C,$00,$01
db $59,$39
db $52,$53,$00,$01
db $5B,$39
db $52,$64,$00,$2F
db $67,$39,$60,$39,$6A,$39,$0D,$39,$0E,$39,$15,$39,$5D,$39,$07,$39,$15,$39,$21,$39,$1C,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$77,$39,$1E,$39,$7C,$39,$0F,$39,$06,$39,$5D,$39,$1E,$39,$7C,$39
.Line1End:
	db $FF
.Line2:
db $52,$8E,$00,$01
db $59,$39
db $52,$8F,$00,$01
db $59,$39
db $52,$94,$00,$01
db $59,$39
db $52,$95,$00,$01
db $59,$39
db $52,$A4,$00,$2F
db $11,$39,$5D,$39,$1D,$39,$55,$39,$77,$39,$53,$39,$06,$39,$56,$39,$07,$39,$11,$39,$04,$39,$10,$39,$51,$39,$0D,$39,$78,$39,$5D,$39,$0D,$39,$04,$39,$5D,$39,$07,$39,$14,$39,$08,$39,$51,$39,$14,$39
.Line2End:
	db $FF
.Line3:
db $52,$CE,$00,$01
db $59,$39
db $52,$D5,$00,$01
db $59,$39
db $52,$D7,$00,$01
db $59,$39
db $52,$D9,$00,$01
db $59,$39
db $52,$E4,$00,$2F
db $7B,$39,$44,$39,$6C,$39,$4E,$39,$5A,$39,$11,$39,$02,$39,$15,$39,$5D,$39,$52,$39,$0C,$39,$14,$39,$6C,$39,$5A,$39,$4A,$39,$11,$39,$5D,$39,$64,$39,$63,$39,$6C,$39,$4C,$39,$10,$39,$01,$39,$7C,$39
.Line3End:
	db $FF
.Line4:
db $53,$04,$00,$01
db $5B,$39
db $53,$09,$00,$01
db $59,$39
db $53,$13,$00,$01
db $59,$39
db $53,$17,$00,$01
db $59,$39
db $53,$24,$00,$2F
db $15,$39,$01,$39,$78,$39,$5D,$39,$0F,$39,$51,$39,$52,$39,$56,$39,$0D,$39,$0D,$39,$04,$39,$01,$39,$14,$39,$5D,$39,$15,$39,$09,$39,$19,$39,$55,$39,$15,$39,$09,$39,$19,$39,$55,$39,$5A,$39,$3F,$39
.Line4End:
	db $FF

Wendy:
.Line1:
db $52,$47,$00,$01
db $59,$39
db $52,$4E,$00,$01
db $5B,$39
db $52,$64,$00,$2B
db $5D,$39,$5C,$39,$05,$39,$15,$39,$21,$39,$1C,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$77,$39,$0D,$39,$50,$39,$09,$39,$0D,$39,$67,$39,$60,$39,$6A,$39,$0D,$39,$0E,$39,$3F,$39
.Line1End:
	db $FF
.Line2:
db $52,$8D,$00,$01
db $59,$39
db $52,$96,$00,$01
db $5B,$39
db $52,$A4,$00,$2D
db $5D,$39,$07,$39,$14,$39,$08,$39,$51,$39,$14,$39,$5D,$39,$0E,$39,$21,$39,$54,$39,$0F,$39,$0B,$39,$21,$39,$12,$39,$15,$39,$5D,$39,$5F,$39,$65,$39,$61,$39,$14,$39,$0D,$39,$12,$39,$14,$39
.Line2End:
	db $FF
.Line3:
db $52,$C7,$00,$01
db $59,$39
db $52,$D2,$00,$01
db $59,$39
db $52,$D3,$00,$01
db $59,$39
db $52,$E4,$00,$2B
db $5D,$39,$01,$39,$55,$39,$05,$39,$0E,$39,$77,$39,$16,$39,$20,$39,$05,$39,$0D,$39,$1C,$39,$14,$39,$5D,$39,$D0,$39,$4D,$39,$04,$39,$00,$39,$56,$39,$20,$39,$09,$39,$01,$39,$78,$39
.Line3End:
	db $FF
.Line4:
db $53,$07,$00,$01
db $59,$39
db $53,$0E,$00,$01
db $59,$39
db $53,$10,$00,$01
db $59,$39
db $53,$15,$00,$01
db $59,$39
db $53,$24,$00,$25
db $5D,$39,$01,$39,$0C,$39,$06,$39,$5D,$39,$67,$39,$60,$39,$6A,$39,$3F,$39,$5D,$39,$04,$39,$21,$39,$15,$39,$57,$39,$5D,$39,$FF,$39,$48,$39,$6B,$39,$3F,$39
.Line4End:
	db $FF

Larry:
.Line1:
db $52,$4A,$00,$01
db $59,$39
db $52,$4F,$00,$01
db $5B,$39
db $52,$64,$00,$2D
db $0F,$39,$01,$39,$12,$39,$5D,$39,$08,$39,$01,$39,$07,$39,$14,$39,$6C,$39,$5F,$39,$65,$39,$61,$39,$77,$39,$0D,$39,$50,$39,$09,$39,$0D,$39,$3F,$39,$5D,$39,$14,$39,$07,$39,$0A,$39,$15,$39
.Line1End:
	db $FF
.Line2:
db $52,$84,$00,$01
db $5B,$39
db $52,$89,$00,$01
db $59,$39
db $52,$95,$00,$01
db $5B,$39
db $52,$96,$00,$01
db $59,$39
db $52,$A4,$00,$2D
db $79,$39,$5A,$39,$7B,$39,$16,$39,$1C,$39,$04,$39,$5D,$39,$11,$39,$20,$39,$58,$39,$57,$39,$10,$39,$01,$39,$56,$39,$5D,$39,$5F,$39,$65,$39,$61,$39,$09,$39,$84,$39,$02,$39,$14,$39,$1A,$39
.Line2End:
	db $FF
.Line3:
db $52,$C4,$00,$01
db $59,$39
db $52,$C5,$00,$01
db $59,$39
db $52,$C7,$00,$01
db $5B,$39
db $52,$D0,$00,$01
db $59,$39
db $52,$E4,$00,$2D
db $17,$39,$09,$39,$12,$39,$79,$39,$5A,$39,$7B,$39,$16,$39,$1C,$39,$77,$39,$0D,$39,$0A,$39,$06,$39,$0D,$39,$09,$39,$5D,$39,$07,$39,$14,$39,$51,$39,$84,$39,$02,$39,$55,$39,$EF,$39,$02,$39
.Line3End:
	db $FF
.Line4:
db $53,$06,$00,$01
db $59,$39
db $53,$0F,$00,$01
db $59,$39
db $53,$13,$00,$01
db $59,$39
db $53,$14,$00,$01
db $59,$39
db $53,$24,$00,$2B
db $63,$39,$4C,$39,$64,$39,$12,$39,$18,$39,$01,$39,$58,$39,$77,$39,$11,$39,$55,$39,$1D,$39,$11,$39,$0A,$39,$07,$39,$11,$39,$04,$39,$10,$39,$51,$39,$56,$39,$14,$39,$04,$39,$3D,$39
.Line4End:
	db $FF
else
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Mario  has  defeated the demented  Iggy Koopa  in castle  #1  and  rescued Yoshi's  friend  who  is still trapped in an egg. Together,    they    now travel to Donut Land.")
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Morton   Koopa   Jr.  of castle  #2 is now just a memory. The next area is the  underground Vanilla Dome.   What traps await Mario in this new world? What   will   become  of  Princess Toadstool?")
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Mario has triumphed over Lemmy  Koopa  of  castle #3.  Mario's  quest   is starting  to  get   much more difficult.     Have you  found  the Red  and Green Switches yet?")
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Ludwig von  Koopa's days of    composing    Koopa symphonies in castle  #4 are over.  The Forest of Illusion   lies   ahead. Mario must use his brain to solve  the puzzle  of this perplexing forest.")
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Mario   found   his  way through  the  Forest  of Illusion and  has put an end  to   Roy  Koopa  of castle  #5.   Onward  to the    dangerous    (but tasty) Chocolate Island!")
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Wendy O. Koopa in castle #6  has  sung  her  last song.  Mario  must  meet the  challenge  that  is now before him.    There is a  sunken  ship  that appears to be  a gateway to the Valley of Bowser.")
			;                        |                        |                        |                        |                        |                        |                        |                        ;
;%InsertCastleDestructionText("Mario has defeated Larry Koopa in castle #7.  All that is left is Bowser's Castle  where   Princess Toadstool is being held. Can Mario rescue her and restore     peace     to Dinosaur Land?")
			;                        |                        |                        |                        |                        |                        |                        |                        ;

Iggy:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Mario  has  defeated the"
db $0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$1F,$39,$47,$39,$40,$39,$52,$39,$1F,$39,$1F,$39,$43,$39,$44,$39,$45,$39,$44,$39,$40,$39,$53,$39,$44,$39,$43,$39,$1F,$39,$53,$39,$47,$39,$44,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "demented  Iggy Koopa  in" 
db $43,$39,$44,$39,$4C,$39,$44,$39,$4D,$39,$53,$39,$44,$39,$43,$39,$1F,$39,$1F,$39,$08,$39,$46,$39,$46,$39,$58,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$1F,$39,$1F,$39,$48,$39,$4D,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "castle  #1  and  rescued"
db $42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39,$1F,$39,$1F,$39,$5A,$39,$64,$39,$1F,$39,$1F,$39,$40,$39,$4D,$39,$43,$39,$1F,$39,$1F,$39,$51,$39,$44,$39,$52,$39,$42,$39,$54,$39,$44,$39,$43,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "Yoshi's  friend  who  is"
db $18,$39,$4E,$39,$52,$39,$47,$39,$48,$39,$5D,$39,$52,$39,$1F,$39,$1F,$39,$45,$39,$51,$39,$48,$39,$44,$39,$4D,$39,$43,$39,$1F,$39,$1F,$39,$56,$39,$47,$39,$4E,$39,$1F,$39,$1F,$39,$48,$39,$52,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "still trapped in an egg."
db $52,$39,$53,$39,$48,$39,$4B,$39,$4B,$39,$1F,$39,$53,$39,$51,$39,$40,$39,$4F,$39,$4F,$39,$44,$39,$43,$39,$1F,$39,$48,$39,$4D,$39,$1F,$39,$40,$39,$4D,$39,$1F,$39,$44,$39,$46,$39,$46,$39,$1B,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "Together,    they    now"
db $13,$39,$4E,$39,$46,$39,$44,$39,$53,$39,$47,$39,$44,$39,$51,$39,$1D,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$53,$39,$47,$39,$44,$39,$58,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$4D,$39,$4E,$39,$56,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "travel to Donut Land."
db $53,$39,$51,$39,$40,$39,$55,$39,$44,$39,$4B,$39,$1F,$39,$53,$39,$4E,$39,$1F,$39,$03,$39,$4E,$39,$4D,$39,$54,$39,$53,$39,$1F,$39,$0B,$39,$40,$39,$4D,$39,$43,$39,$1B,$39
.Line7End:
BlankLine:
	db $FF

Morton:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Morton   Koopa   Jr.  of"
db $0C,$39,$4E,$39,$51,$39,$53,$39,$4E,$39,$4D,$39,$1F,$39,$1F,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$1F,$39,$1F,$39,$1F,$39,$09,$39,$51,$39,$1B,$39,$1F,$39,$1F,$39,$4E,$39,$45,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "castle  #2 is now just a" 
db $42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39,$1F,$39,$1F,$39,$5A,$39,$65,$39,$1F,$39,$48,$39,$52,$39,$1F,$39,$4D,$39,$4E,$39,$56,$39,$1F,$39,$49,$39,$54,$39,$52,$39,$53,$39,$1F,$39,$40,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "memory. The next area is"
db $4C,$39,$44,$39,$4C,$39,$4E,$39,$51,$39,$58,$39,$1B,$39,$1F,$39,$13,$39,$47,$39,$44,$39,$1F,$39,$4D,$39,$44,$39,$57,$39,$53,$39,$1F,$39,$40,$39,$51,$39,$44,$39,$40,$39,$1F,$39,$48,$39,$52,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "the  underground Vanilla"
db $53,$39,$47,$39,$44,$39,$1F,$39,$1F,$39,$54,$39,$4D,$39,$43,$39,$44,$39,$51,$39,$46,$39,$51,$39,$4E,$39,$54,$39,$4D,$39,$43,$39,$1F,$39,$15,$39,$40,$39,$4D,$39,$48,$39,$4B,$39,$4B,$39,$40,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "Dome.   What traps await"
db $03,$39,$4E,$39,$4C,$39,$44,$39,$1B,$39,$1F,$39,$1F,$39,$1F,$39,$16,$39,$47,$39,$40,$39,$53,$39,$1F,$39,$53,$39,$51,$39,$40,$39,$4F,$39,$52,$39,$1F,$39,$40,$39,$56,$39,$40,$39,$48,$39,$53,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "Mario in this new world?"
db $0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$48,$39,$4D,$39,$1F,$39,$53,$39,$47,$39,$48,$39,$52,$39,$1F,$39,$4D,$39,$44,$39,$56,$39,$1F,$39,$56,$39,$4E,$39,$51,$39,$4B,$39,$43,$39,$1E,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "What   will   become  of"
db $16,$39,$47,$39,$40,$39,$53,$39,$1F,$39,$1F,$39,$1F,$39,$56,$39,$48,$39,$4B,$39,$4B,$39,$1F,$39,$1F,$39,$1F,$39,$41,$39,$44,$39,$42,$39,$4E,$39,$4C,$39,$44,$39,$1F,$39,$1F,$39,$4E,$39,$45,$39
.Line7End:
	db $FF
	%StripeImageHeader(.Line8, $04, $1A, 0, $0000, 3)
	;dw "Princess Toadstool?"
db $0F,$39,$51,$39,$48,$39,$4D,$39,$42,$39,$44,$39,$52,$39,$52,$39,$1F,$39,$13,$39,$4E,$39,$40,$39,$43,$39,$52,$39,$53,$39,$4E,$39,$4E,$39,$4B,$39,$1E,$39
.Line8End:
	db $FF

Lemmy:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Mario has triumphed over"
db $0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$47,$39,$40,$39,$52,$39,$1F,$39,$53,$39,$51,$39,$48,$39,$54,$39,$4C,$39,$4F,$39,$47,$39,$44,$39,$43,$39,$1F,$39,$4E,$39,$55,$39,$44,$39,$51,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "Lemmy  Koopa  of  castle" 
db $0B,$39,$44,$39,$4C,$39,$4C,$39,$58,$39,$1F,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$1F,$39,$1F,$39,$4E,$39,$45,$39,$1F,$39,$1F,$39,$42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "#3.  Mario's  quest   is"
db $5A,$39,$66,$39,$1B,$39,$1F,$39,$1F,$39,$0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$5D,$39,$52,$39,$1F,$39,$1F,$39,$50,$39,$54,$39,$44,$39,$52,$39,$53,$39,$1F,$39,$1F,$39,$1F,$39,$48,$39,$52,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "starting  to  get   much"
db $52,$39,$53,$39,$40,$39,$51,$39,$53,$39,$48,$39,$4D,$39,$46,$39,$1F,$39,$1F,$39,$53,$39,$4E,$39,$1F,$39,$1F,$39,$46,$39,$44,$39,$53,$39,$1F,$39,$1F,$39,$1F,$39,$4C,$39,$54,$39,$42,$39,$47,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "more difficult.     Have"
db $4C,$39,$4E,$39,$51,$39,$44,$39,$1F,$39,$43,$39,$48,$39,$45,$39,$45,$39,$48,$39,$42,$39,$54,$39,$4B,$39,$53,$39,$1B,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$07,$39,$40,$39,$55,$39,$44,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "you  found  the Red  and"
db $58,$39,$4E,$39,$54,$39,$1F,$39,$1F,$39,$45,$39,$4E,$39,$54,$39,$4D,$39,$43,$39,$1F,$39,$1F,$39,$53,$39,$47,$39,$44,$39,$1F,$39,$11,$39,$44,$39,$43,$39,$1F,$39,$1F,$39,$40,$39,$4D,$39,$43,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "Green Switches yet?"
db $06,$39,$51,$39,$44,$39,$44,$39,$4D,$39,$1F,$39,$12,$39,$56,$39,$48,$39,$53,$39,$42,$39,$47,$39,$44,$39,$52,$39,$1F,$39,$58,$39,$44,$39,$53,$39,$1E,$39
.Line7End:
	db $FF

Ludwig:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Ludwig von  Koopa's days"
db $0B,$39,$54,$39,$43,$39,$56,$39,$48,$39,$46,$39,$1F,$39,$55,$39,$4E,$39,$4D,$39,$1F,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$5D,$39,$52,$39,$1F,$39,$43,$39,$40,$39,$58,$39,$52,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "of    composing    Koopa" 
db $4E,$39,$45,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$42,$39,$4E,$39,$4C,$39,$4F,$39,$4E,$39,$52,$39,$48,$39,$4D,$39,$46,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "symphonies in castle  #4"
db $52,$39,$58,$39,$4C,$39,$4F,$39,$47,$39,$4E,$39,$4D,$39,$48,$39,$44,$39,$52,$39,$1F,$39,$48,$39,$4D,$39,$1F,$39,$42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39,$1F,$39,$1F,$39,$5A,$39,$67,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "are over.  The Forest of"
db $40,$39,$51,$39,$44,$39,$1F,$39,$4E,$39,$55,$39,$44,$39,$51,$39,$1B,$39,$1F,$39,$1F,$39,$13,$39,$47,$39,$44,$39,$1F,$39,$05,$39,$4E,$39,$51,$39,$44,$39,$52,$39,$53,$39,$1F,$39,$4E,$39,$45,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "Illusion   lies   ahead."
db $08,$39,$4B,$39,$4B,$39,$54,$39,$52,$39,$48,$39,$4E,$39,$4D,$39,$1F,$39,$1F,$39,$1F,$39,$4B,$39,$48,$39,$44,$39,$52,$39,$1F,$39,$1F,$39,$1F,$39,$40,$39,$47,$39,$44,$39,$40,$39,$43,$39,$1B,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "Mario must use his brain"
db $0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$4C,$39,$54,$39,$52,$39,$53,$39,$1F,$39,$54,$39,$52,$39,$44,$39,$1F,$39,$47,$39,$48,$39,$52,$39,$1F,$39,$41,$39,$51,$39,$40,$39,$48,$39,$4D,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "to solve  the puzzle  of"
db $53,$39,$4E,$39,$1F,$39,$52,$39,$4E,$39,$4B,$39,$55,$39,$44,$39,$1F,$39,$1F,$39,$53,$39,$47,$39,$44,$39,$1F,$39,$4F,$39,$54,$39,$59,$39,$59,$39,$4B,$39,$44,$39,$1F,$39,$1F,$39,$4E,$39,$45,$39
.Line7End:
	db $FF
	%StripeImageHeader(.Line8, $04, $1A, 0, $0000, 3)
	;dw "this perplexing forest."
db $53,$39,$47,$39,$48,$39,$52,$39,$1F,$39,$4F,$39,$44,$39,$51,$39,$4F,$39,$4B,$39,$44,$39,$57,$39,$48,$39,$4D,$39,$46,$39,$1F,$39,$45,$39,$4E,$39,$51,$39,$44,$39,$52,$39,$53,$39,$1B,$39
.Line8End:
	db $FF

Roy:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Mario   found   his  way"
db $0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$1F,$39,$1F,$39,$45,$39,$4E,$39,$54,$39,$4D,$39,$43,$39,$1F,$39,$1F,$39,$1F,$39,$47,$39,$48,$39,$52,$39,$1F,$39,$1F,$39,$56,$39,$40,$39,$58,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "through  the  Forest  of" 
db $53,$39,$47,$39,$51,$39,$4E,$39,$54,$39,$46,$39,$47,$39,$1F,$39,$1F,$39,$53,$39,$47,$39,$44,$39,$1F,$39,$1F,$39,$05,$39,$4E,$39,$51,$39,$44,$39,$52,$39,$53,$39,$1F,$39,$1F,$39,$4E,$39,$45,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "Illusion and  has put an"
db $08,$39,$4B,$39,$4B,$39,$54,$39,$52,$39,$48,$39,$4E,$39,$4D,$39,$1F,$39,$40,$39,$4D,$39,$43,$39,$1F,$39,$1F,$39,$47,$39,$40,$39,$52,$39,$1F,$39,$4F,$39,$54,$39,$53,$39,$1F,$39,$40,$39,$4D,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "end  to   Roy  Koopa  of"
db $44,$39,$4D,$39,$43,$39,$1F,$39,$1F,$39,$53,$39,$4E,$39,$1F,$39,$1F,$39,$1F,$39,$11,$39,$4E,$39,$58,$39,$1F,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$1F,$39,$1F,$39,$4E,$39,$45,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "castle  #5.   Onward  to"
db $42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39,$1F,$39,$1F,$39,$5A,$39,$68,$39,$1B,$39,$1F,$39,$1F,$39,$1F,$39,$0E,$39,$4D,$39,$56,$39,$40,$39,$51,$39,$43,$39,$1F,$39,$1F,$39,$53,$39,$4E,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "the    dangerous    (but"
db $53,$39,$47,$39,$44,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$43,$39,$40,$39,$4D,$39,$46,$39,$44,$39,$51,$39,$4E,$39,$54,$39,$52,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$5B,$39,$41,$39,$54,$39,$53,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "tasty) Chocolate Island!"
db $53,$39,$40,$39,$52,$39,$53,$39,$58,$39,$5C,$39,$1F,$39,$02,$39,$47,$39,$4E,$39,$42,$39,$4E,$39,$4B,$39,$40,$39,$53,$39,$44,$39,$1F,$39,$08,$39,$52,$39,$4B,$39,$40,$39,$4D,$39,$43,$39,$1A,$39
.Line7End:
	db $FF

Wendy:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Wendy O. Koopa in castle"
db $16,$39,$44,$39,$4D,$39,$43,$39,$58,$39,$1F,$39,$0E,$39,$1B,$39,$1F,$39,$0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$1F,$39,$48,$39,$4D,$39,$1F,$39,$42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "#6  has  sung  her  last" 
db $5A,$39,$69,$39,$1F,$39,$1F,$39,$47,$39,$40,$39,$52,$39,$1F,$39,$1F,$39,$52,$39,$54,$39,$4D,$39,$46,$39,$1F,$39,$1F,$39,$47,$39,$44,$39,$51,$39,$1F,$39,$1F,$39,$4B,$39,$40,$39,$52,$39,$53,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "song.  Mario  must  meet"
db $52,$39,$4E,$39,$4D,$39,$46,$39,$1B,$39,$1F,$39,$1F,$39,$0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$1F,$39,$4C,$39,$54,$39,$52,$39,$53,$39,$1F,$39,$1F,$39,$4C,$39,$44,$39,$44,$39,$53,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "the  challenge  that  is"
db $53,$39,$47,$39,$44,$39,$1F,$39,$1F,$39,$42,$39,$47,$39,$40,$39,$4B,$39,$4B,$39,$44,$39,$4D,$39,$46,$39,$44,$39,$1F,$39,$1F,$39,$53,$39,$47,$39,$40,$39,$53,$39,$1F,$39,$1F,$39,$48,$39,$52,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "now before him.    There"
db $4D,$39,$4E,$39,$56,$39,$1F,$39,$41,$39,$44,$39,$45,$39,$4E,$39,$51,$39,$44,$39,$1F,$39,$47,$39,$48,$39,$4C,$39,$1B,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$13,$39,$47,$39,$44,$39,$51,$39,$44,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "is a  sunken  ship  that"
db $48,$39,$52,$39,$1F,$39,$40,$39,$1F,$39,$1F,$39,$52,$39,$54,$39,$4D,$39,$4A,$39,$44,$39,$4D,$39,$1F,$39,$1F,$39,$52,$39,$47,$39,$48,$39,$4F,$39,$1F,$39,$1F,$39,$53,$39,$47,$39,$40,$39,$53,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "appears to be  a gateway"
db $40,$39,$4F,$39,$4F,$39,$44,$39,$40,$39,$51,$39,$52,$39,$1F,$39,$53,$39,$4E,$39,$1F,$39,$41,$39,$44,$39,$1F,$39,$1F,$39,$40,$39,$1F,$39,$46,$39,$40,$39,$53,$39,$44,$39,$56,$39,$40,$39,$58,$39
.Line7End:
	db $FF
	%StripeImageHeader(.Line8, $04, $1A, 0, $0000, 3)
	;dw "to the Valley of Bowser."
db $53,$39,$4E,$39,$1F,$39,$53,$39,$47,$39,$44,$39,$1F,$39,$15,$39,$40,$39,$4B,$39,$4B,$39,$44,$39,$58,$39,$1F,$39,$4E,$39,$45,$39,$1F,$39,$01,$39,$4E,$39,$56,$39,$52,$39,$44,$39,$51,$39,$1B,$39
.Line8End:
	db $FF

Larry:
	%StripeImageHeader(.Line1, $04, $13, 0, $0000, 3)
	;dw "Mario has defeated Larry"
db $0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$47,$39,$40,$39,$52,$39,$1F,$39,$43,$39,$44,$39,$45,$39,$44,$39,$40,$39,$53,$39,$44,$39,$43,$39,$1F,$39,$0B,$39,$40,$39,$51,$39,$51,$39,$58,$39
.Line1End:
	db $FF
	%StripeImageHeader(.Line2, $04, $14, 0, $0000, 3)
	;dw "Koopa in castle #7.  All"
db $0A,$39,$4E,$39,$4E,$39,$4F,$39,$40,$39,$1F,$39,$48,$39,$4D,$39,$1F,$39,$42,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39,$1F,$39,$5A,$39,$6A,$39,$1B,$39,$1F,$39,$1F,$39,$00,$39,$4B,$39,$4B,$39
.Line2End:
	db $FF
	%StripeImageHeader(.Line3, $04, $15, 0, $0000, 3)
	;dw "that is left is Bowser's"
db $53,$39,$47,$39,$40,$39,$53,$39,$1F,$39,$48,$39,$52,$39,$1F,$39,$4B,$39,$44,$39,$45,$39,$53,$39,$1F,$39,$48,$39,$52,$39,$1F,$39,$01,$39,$4E,$39,$56,$39,$52,$39,$44,$39,$51,$39,$5D,$39,$52,$39
.Line3End:
	db $FF
	%StripeImageHeader(.Line4, $04, $16, 0, $0000, 3)
	;dw "Castle  where   Princess"
db $02,$39,$40,$39,$52,$39,$53,$39,$4B,$39,$44,$39,$1F,$39,$1F,$39,$56,$39,$47,$39,$44,$39,$51,$39,$44,$39,$1F,$39,$1F,$39,$1F,$39,$0F,$39,$51,$39,$48,$39,$4D,$39,$42,$39,$44,$39,$52,$39,$52,$39
.Line4End:
	db $FF
	%StripeImageHeader(.Line5, $04, $17, 0, $0000, 3)
	;dw "Toadstool is being held."
db $13,$39,$4E,$39,$40,$39,$43,$39,$52,$39,$53,$39,$4E,$39,$4E,$39,$4B,$39,$1F,$39,$48,$39,$52,$39,$1F,$39,$41,$39,$44,$39,$48,$39,$4D,$39,$46,$39,$1F,$39,$47,$39,$44,$39,$4B,$39,$43,$39,$1B,$39
.Line5End:
	db $FF
	%StripeImageHeader(.Line6, $04, $18, 0, $0000, 3)
	;dw "Can Mario rescue her and"
db $02,$39,$40,$39,$4D,$39,$1F,$39,$0C,$39,$40,$39,$51,$39,$48,$39,$4E,$39,$1F,$39,$51,$39,$44,$39,$52,$39,$42,$39,$54,$39,$44,$39,$1F,$39,$47,$39,$44,$39,$51,$39,$1F,$39,$40,$39,$4D,$39,$43,$39
.Line6End:
	db $FF
	%StripeImageHeader(.Line7, $04, $19, 0, $0000, 3)
	;dw "restore     peace     to"
db $51,$39,$44,$39,$52,$39,$53,$39,$4E,$39,$51,$39,$44,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$4F,$39,$44,$39,$40,$39,$42,$39,$44,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$1F,$39,$53,$39,$4E,$39
.Line7End:
	db $FF
	%StripeImageHeader(.Line8, $04, $1A, 0, $0000, 3)
	;dw "Dinosaur Land?"
db $03,$39,$48,$39,$4D,$39,$4E,$39,$52,$39,$40,$39,$54,$39,$51,$39,$1F,$39,$0B,$39,$40,$39,$4D,$39,$43,$39,$1E,$39
.Line8End:
	db $FF
endif
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_GotBonusStarsText(Address)
namespace SMW_GotBonusStarsText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
	%StripeImageHeader(Bonus, $0A, $10, 0, $0000, 3)
db $0B,$38,$18,$38,$17,$38,$1E,$38,$1C,$38,$28,$38,$FC,$38,$64,$28,$26,$38,$FC,$38,$FC,$38
BonusEnd:
	%StripeImageHeader(TopHalf, $13, $0F, 0, $0000, 3)
db $FC,$38,$FC,$38
TopHalfEnd:
	db $FF
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_NoBonusStarsText(Address)
namespace SMW_NoBonusStarsText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
	%StripeImageHeader(Stars, $11, $0D, 0, $0000, 3)
db $FC,$38,$FC,$38,$FC,$38,$FC,$38,$00,$38
StarsEnd:
	%StripeImageHeader(TopHalf, $13, $0F, 0, $0000, 3)
db $FC,$38,$FC,$38
TopHalfEnd:
	%StripeImageHeader(BottomHalf, $13, $10, 0, $0000, 3)
db $FC,$38,$FC,$38
BottomHalfEnd:
	db $FF
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_TheEndScreenText(Address)
namespace SMW_TheEndScreenText
%InsertMacroAtXPosition(<Address>)

cleartable
Main:
	%StripeImageHeader(TopHalf, $0A, $07, 0, $0000, 3)
	;dw "T H E  E N D"
db $E3,$20,$FC,$20,$C7,$20,$FC,$20,$C4,$20,$FC,$20,$FC,$20,$C4,$20,$FC,$20,$CD,$20,$FC,$20,$C3,$20
TopHalfEnd:
	%StripeImageHeader(BottomHalf, $0A, $08, 0, $0000, 3)
	;dw "T H E  E N D"
db $F3,$20,$FC,$20,$D7,$20,$FC,$20,$D4,$20,$FC,$20,$FC,$20,$D4,$20,$FC,$20,$DD,$20,$FC,$20,$D3,$20
BottomHalfEnd:
	db $FF
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_LifeExchangeText(Address)
namespace SMW_LifeExchangeText
%InsertMacroAtXPosition(<Address>)

cleartable
Main:
	%StripeImageHeader(Mario, $09, $12, 0, $0000, 3)
	;dw "MARIO"
db $16,$28,$0A,$28,$1B,$28,$12,$28,$18,$28
MarioEnd:
	%StripeImageHeader(Luigi, $12, $12, 0, $0000, 3)
	;dw "LUIGI"
db $15,$28,$1E,$28,$12,$28,$10,$28,$12,$28
LuigiEnd:
	%StripeImageHeader(MarioLives, $0B, $10, 0, $0000, 3)
	dw $2826	; Small x
	;dw "00"
db $00,$28,$00,$28
MarioLivesEnd:
	%StripeImageHeader(LuigiLives, $14, $10, 0, $0000, 3)
	dw $2826	; Small x
	;dw "00"
db $00,$28,$00,$28
LuigiLivesEnd:
	%StripeImageHeader(ArrowTopHalf, $0F, $10, 0, $0000, 3)
	db $FC,$38,$FC,$38
ArrowTopHalfEnd:
	%StripeImageHeader(ArrowBottomHalf, $0F, $11, 0, $0000, 3)
	db $FC,$38,$FC,$38
ArrowBottomHalfEnd:
	%StripeImageHeader(MarioHalo, $09, $0E, 0, $0000, 3)
	dw $2985,$6985
MarioHaloEnd:
	%StripeImageHeader(LuigiHalo, $12, $0E, 0, $0000, 3)
	dw $2985,$6985
LuigiHaloEnd:
End:
	db $FF
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_QuitToTitleScreenText(Address)			; Note: This is a SMAS exclusive routine macro
namespace SMW_QuitToTitleScreenText
%InsertMacroAtXPosition(<Address>)

cleartable

Main:
	%StripeImageHeader(Continue, $06, $0E, 0, $0000, 3)
	;dw "CONTINUE WITHOUT SAVE"
	db $2D,$39,$7A,$38,$79,$38,$2F,$39,$82,$38,$79,$38,$7B,$38,$73,$39,$FC,$38,$81,$38,$82,$38,$2F,$39,$84,$38,$7A,$38,$7B,$38,$2F,$39,$FC,$38,$31,$39,$71,$39,$80,$38,$73,$39
ContinueEnd:
	%StripeImageHeader(End, $06, $10, 0, $0000, 3)
	;dw "END WITHOUT SAVE"
	db $73,$39,$79,$38,$7C,$38,$FC,$38,$81,$38,$82,$38,$2F,$39,$84,$38,$7A,$38,$7B,$38,$2F,$39,$FC,$38,$31,$39,$71,$39,$80,$38,$73,$39
EndEnd:
	db $FF
cleartable
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_StatusBarTilemap(Address)
namespace SMW_StatusBarTilemap
%InsertMacroAtXPosition(<Address>)

; Info: |             "/~~\"		   |
;       | "MARIO       |  | TIME   @x  0"  |
;       |  "x 0   *x   |  |  ##0       0"  |
;       |             "\~~/"               |

Main:
TopRow:
	dw $383A,$383B,$383B,$783A			; Info: "/~~\"
TopRowEnd:

SecondRow:						; Info: "MARIO       |  | TIME   @x  0"
.Mario:
	dw $2830,$2831,$2832,$2833
	dw $2834
.Blank1:
	dw $38FC
.YoshiCoins:
	dw $3CFC,$3CFC,$3CFC,$3CFC
.BonusStarNumbers:
	dw $38FC,$38FC
.ItemBox:
	dw $384A,$38FC,$38FC,$784A
.Blank2:
	dw $38FC
.Time:
	dw $3C3D,$3C3E,$3C3F
.Blank3:
	dw $38FC,$38FC,$38FC
.Coins:
	dw $3C2E,$3826,$38FC,$38FC
	dw $3800
SecondRowEnd:

ThirdRow:						; Info: "x 0   *x   |  |  ##0       0"
.Lives:
	dw $3826,$38FC,$3800
.Blank1:
	dw $38FC,$38FC,$38FC
.Stars:
	dw $2864,$3826
.Blank2:
	dw $38FC
.BonusStarNumbers:
	dw $38FC,$38FC
.ItemBox:
	dw $384A,$38FC,$38FC,$784A
.Blank3:
	dw $38FC
.Time:
	dw $3CFE,$3CFE,$3C00
.Blank4:
	dw $38FC
.Score:
	dw $38FC,$38FC,$38FC,$38FC
	dw $38FC,$38FC,$3800
ThirdRowEnd:

BottomRow:						; Info: "\~~/"
	dw $B83A,$B83B,$B83B,$F83A
BottomRowEnd:
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_UnusedScrollSpriteRoutine(Address)
namespace SMW_UnusedScrollSpriteRoutine
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_Timer,x
	BMI.b ADDR_05C1D4
	DEC.w !RAM_SMW_L1ScrollSpr_Timer,x
	LDA.w !RAM_SMW_L1ScrollSpr_Timer,x
	CMP.b #$20
	BCC.b ADDR_05C1D1
	REP.b #$20
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w !RAM_SMW_Misc_Layer1YPosLo,x
	EOR.w #$0001
	STA.w !RAM_SMW_Misc_Layer1YPosLo,x
ADDR_05C1D1:
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B				; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.

ADDR_05C1D4:
	REP.b #$30
	LDY.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,y
	TAX
	LDA.w !RAM_SMW_Misc_Layer1YPosLo,y
	CMP.w !RAM_SMW_L1ScrollSpr_SubXPosLo,y
	BCC.b ADDR_05C1EB
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STX.b !RAM_SMW_Misc_ScratchRAM02
	BRA.b ADDR_05C1EF

ADDR_05C1EB:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM04
ADDR_05C1EF:
	SEP.b #$10
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BCC.b ADDR_05C24D
	SEP.b #$20
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.b #$FF
	LSR
	LSR
	TAX
	LDA.b #$30
	STA.w !RAM_SMW_L1ScrollSpr_Timer,x
	REP.b #$20
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b ADDR_05C21F
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05C21F:
	LDA.w SMW_SharedScrollSpriteTables_UNK_05CBC7,y
	AND.w #$00FF
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TXA
	LSR
	LSR
	TAX
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	EOR.w #$0001
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	AND.w #$00FF
	BNE.b ADDR_05C241
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
ADDR_05C241:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	STA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
ADDR_05C24D:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_L1ScrollSpr_CurrentState,y
	TAX
	LDA.w SMW_SharedScrollSpriteTables_UNK_05CBC7+$01,x
	AND.w #$00FF
	CPX.b #$01
	BEQ.b ADDR_05C268
	EOR.w #$FFFF
	INC
ADDR_05C268:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDY.b #$00
	CMP.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	BEQ.b ADDR_05C280
	BPL.b ADDR_05C276
	LDY.b #$02
ADDR_05C276:
	LDA.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	CLC
	ADC.w DATA_05CB7B,y
	STA.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
ADDR_05C280:
	JMP.w SMW_Layer2SpecialScrolling04_Unused_ADDR_05C31D
namespace off
endmacro

macro ROUTINE_RT01_SMW_UnusedScrollSpriteRoutine(Address)
namespace SMW_UnusedScrollSpriteRoutine
%InsertMacroAtXPosition(<Address>)

DATA_05CB7B:
	dw $0001,$FFFF,$0001,$FFFF
	dw $0001,$FFFF,$0001,$FFFF
	dw $0001,$FFFF,$0001,$FFFF
	dw $0001,$FFFF,$0004,$FFFC
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UpdateLayerPositionWithScrollSprite(Address)
namespace SMW_UpdateLayerPositionWithScrollSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	AND.w #$00FF
	CLC
	ADC.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	STA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	AND.w #$FF00
	BPL.b +
	ORA.w #$00FF
+:
	XBA
	CLC
	ADC.w !RAM_SMW_Misc_Layer1XPosLo,x
	STA.w !RAM_SMW_Misc_Layer1XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	EOR.w #$FFFF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM08
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_MostlyUnusedScrollSpriteRoutine(Address)
namespace SMW_MostlyUnusedScrollSpriteRoutine
%InsertMacroAtXPosition(<Address>)

Main: ; unreachable
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w UNK_05C9E5,y
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	LDA.w UNK_05C9E7,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	REP.b #$20
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b ADDR_05BD9E
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05BD9E:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w UNK_05C9E9,y
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	LDA.w SMW_SharedScrollSpriteTables_UNK_05CBC7,y
	AND.w #$00FF
	BEQ.b ADDR_05BDB9
	EOR.w #$FFFF
	INC
ADDR_05BDB9:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	CLC
	ADC.w !RAM_SMW_Misc_Layer1YPosLo,x
	AND.w #$00FF
	STA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
CODE_05BDC9:
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
CODE_05BDCF:
	SEP.b #$20
	TXA
	LSR
	LSR
	AND.b #$FF
	TAX
	LDA.b #$FF
	STA.w !RAM_SMW_L1ScrollSpr_Timer,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_MostlyUnusedScrollSpriteRoutine(Address)
namespace SMW_MostlyUnusedScrollSpriteRoutine
%InsertMacroAtXPosition(<Address>)

UNK_05C9E5:
	db $00,$01

UNK_05C9E7:
	db $00,$00

UNK_05C9E9:
	db $00,$00,$02,$02,$02,$00,$02,$05
	db $02,$02,$05,$00,$00,$02,$01,$00
	db $03,$02,$03,$04,$03,$01,$00,$01
	db $00,$00,$03,$00,$00,$00,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_SharedScrollSpriteTables(Address)
namespace SMW_SharedScrollSpriteTables
%InsertMacroAtXPosition(<Address>)

DATA_05CBC3:
	dw $0001,$FFFF

UNK_05CBC7:
	db $30,$70,$80,$10,$28,$30,$30,$30
	db $30,$14,$02,$30,$30,$30,$30,$70
	db $80,$70,$80,$70,$80,$70,$80,$70
	db $80,$70,$80,$18
namespace off
endmacro

macro DATATABLE_RT01_SMW_SharedScrollSpriteTables(Address)
namespace SMW_SharedScrollSpriteTables
%InsertMacroAtXPosition(<Address>)

DATA_05CBED:
	db $60,$42,$D0,$B2

DATA_05CBF1:
	db $80,$80,$80,$80

DATA_05CBF5:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $90,$72,$60,$42,$22,$02,$40,$22
	db $20,$10
else
	db $90,$72,$60,$42,$20,$10,$40,$22
	db $20,$10
endif
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_GenericEnemies_Status01(Address)
namespace SMW_NorSprXXX_GenericEnemies_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$10
	STA.w !RAM_SMW_NorSprXXX_GenericEnemies_BounceHeight,x
StandardSpritesInit:
	JSL.l SMW_GetRand_Main
	STA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
MakeSpriteFacePlayer:
.Main:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_Main, SMW_NorSpr009_BouncingGreenParaKoopa_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr000_GreenNakedKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr001_RedNakedKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr002_BlueNakedKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr003_YellowNakedKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr004_GreenKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr005_RedKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr006_BlueKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr007_YellowKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr008_LeftFlyingGreenParaKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr00A_VerticalRedParaKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr00B_HorizontalRedParaKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr00C_YellowParaKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr00F_Goomba_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr010_ParaGoomba_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr011_BuzzyBeetle_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr013_Spiny_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr014_SpinyEgg_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_StandardSpritesInit, SMW_NorSpr01D_HoppingFlame_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_Return, SMW_NorSpr020_Magic_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_Return, SMW_NorSpr079_VineHead_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_Return, SMW_NorSpr07A_Fireworks_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr021_MovingCoin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr030_ThrowingDryBones_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr031_BonyBeetle_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr032_LedgeDryBones_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr051_Ninji_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr090_GreenGasBubble_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr0AB_Rex_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr0B4_NonLineGuideGrinder_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr0BF_MegaMole_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr0C2_Blurp_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr0C3_PorcuPuffer_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer, SMW_NorSpr0C5_BigBooBoss_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSprXXX_GenericEnemies_Status08(Address)
namespace SMW_NorSprXXX_GenericEnemies_Status08
%InsertMacroAtXPosition(<Address>)

JumpOverKickedObject:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return0188AB
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
JumpLoopStart:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b HandleJumpOver
JumpLoopNext:
	DEY
	BPL.b JumpLoopStart
Return0188AB:
	RTS

HandleJumpOver:
	LDA.w !RAM_SMW_NorSpr_XPosLo,y
	SEC
	SBC.b #$1A
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,y
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$44
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_YPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM03
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b JumpLoopNext
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b JumpLoopNext
	LDA.w !RAM_SMW_NorSpr_FacingDirection,y
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b Return0188EB
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
Return0188EB:
	RTS

Spr0to13SpeedX:
	db $08,$F8,$0C,$F4

Spr0to13Prop:
	db $00,$02,$03,$0D,$40,$42,$43,$45
	db $50,$50,$50,$5C,$DD,$05,$00,$20
	db $20,$00,$00,$00

NakedKoopaEntry:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_018952
CODE_018908:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	CMP.b #$80
	BCC.b CODE_01891F
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01891F
CODE_018913:
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CLC
	ADC.b #$05
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01891F:
	JSR.w CODE_018931
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01892E
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01892E:
	JMP.w CODE_018B03

CODE_018931:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BNE.b CODE_01893C
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BRA.b Return018951

CODE_01893C:
	ASL.w !RAM_SMW_NorSpr_PropertyBits167A,x			;\ Optimization: I don't see the point of this.
	SEC							;| All this does is clear, then set !Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction
	ROR.w !RAM_SMW_NorSpr_PropertyBits167A,x			;/
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b CODE_01894B
	JSR.w SMW_KickHelplessSprite_Main
CODE_01894B:
	ASL.w !RAM_SMW_NorSpr_PropertyBits167A,x			;\ Note: !Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction
	LSR.w !RAM_SMW_NorSpr_PropertyBits167A,x			;/
Return018951:
	RTS

CODE_018952:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	BEQ.b CODE_0189B4
	CMP.b #$80
	BNE.b CODE_01896B
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BEQ.b CODE_018968
	LDA.b #$E0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018968:
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
CODE_01896B:
	CMP.b #$01
	BNE.b CODE_018908
	LDY.w !RAM_SMW_NorSpr_Table7E160E,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BNE.b CODE_018908
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.w !RAM_SMW_NorSpr_XPosLo,y
	CLC
	ADC.b #$12
	CMP.b #$24
	BCS.b CODE_018908
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_PlayKickSfx
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_CODE_01A755
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w SMW_CheckForNormalSpriteToNormalSpriteCollision_DATA_01A6D7,y
	LDY.w !RAM_SMW_NorSpr_Table7E160E,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #!Define_SMW_NorSprStatus0A_Kicked
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,y
	STA.w !RAM_SMW_NorSpr_Table7E00C2,y
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,y
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,y
	AND.b #!Define_SMW_NorSpr_167AProp_CantBeKickedLikeShell
	BEQ.b CODE_0189B4
	LDA.b #$E0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
CODE_0189B4:
	LDA.w !RAM_SMW_NorSpr_Table7E1528,x
	BEQ.b CODE_018A15
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_0189C0
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0189C0:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_0189E6
	LDA.b !RAM_SMW_Flag_IceLevel
	CMP.b #$01
	LDA.b #$02
	BCC.b CODE_0189CE
	LSR
CODE_0189CE:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.b #$02
	BCC.b CODE_0189FD
	BPL.b CODE_0189DE
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0189DE:
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_SpawnNormalSpriteTurnAroundSmoke_Main
CODE_0189E6:
	STZ.w !RAM_SMW_NorSpr_Table7E1570,x
	JSR.w CODE_018B43
	LDA.b #$E6
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BEQ.b CODE_0189F6
	LDA.b #$86
CODE_0189F6:
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	RTS

CODE_0189FD:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018A0F
	LDA.b #$FF
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BNE.b CODE_018A0C
	LDA.b #$A0
CODE_018A0C:
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
CODE_018A0F:
	STZ.w !RAM_SMW_NorSpr_Table7E1528,x
	JMP.w CODE_018913

CODE_018A15:
	LDA.w !RAM_SMW_NorSpr_Table7E1534,x
	BEQ.b CODE_018A88
	LDY.w !RAM_SMW_NorSpr_Table7E160E,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b CODE_018A29
	STZ.w !RAM_SMW_NorSpr_Table7E1534,x
	BRA.b CODE_018A62

CODE_018A29:
	STA.w !RAM_SMW_NorSpr_Table7E1528,y
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_018A38
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_018A38:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018A62
	LDA.b !RAM_SMW_Flag_IceLevel
	CMP.b #$01
	LDA.b #$02
	BCC.b CODE_018A46
	LSR
CODE_018A46:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XSpeed,y
	CMP.b #$02
	BCC.b CODE_018A69
	BPL.b CODE_018A57
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
CODE_018A57:
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_SpawnNormalSpriteTurnAroundSmoke_Main
CODE_018A62:
	STZ.w !RAM_SMW_NorSpr_Table7E1570,x
	JSR.w CODE_018B43
	RTS

CODE_018A69:
	LDA.b #$00
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	STZ.w !RAM_SMW_NorSpr_Table7E1534,x
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	PHX
	TYX
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01AA0B
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BEQ.b CODE_018A87
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_018A87:
	PLX
CODE_018A88:
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	BEQ.b CODE_018A9B
	DEC.b !RAM_SMW_NorSpr_Table7E00C2,x
	CMP.b #$08
	LDA.b #$04
	BCS.b CODE_018A96
	LDA.b #$00
CODE_018A96:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	BRA.b CODE_018B00

CODE_018A9B:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	CMP.b #$01
	BNE.b Spr0to13Main
	LDY.w !RAM_SMW_NorSpr_Table7E1594,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b Return018AD9
	LDA.w !RAM_SMW_NorSpr_YSpeed,y
	BMI.b Return018AD9
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	BEQ.b Return018AD9
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return018AD9
	JSR.w SMW_SubOffscreen_Bank01_EraseSprite
	LDY.w !RAM_SMW_NorSpr_Table7E1594,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,y
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	STA.w !RAM_SMW_NorSpr_Table7E160E,y
Return018AD9:
	RTS

ExplodeBomb:
	PHB
	LDA.b #SMW_BobOmbExplosion_Main>>16
	PHA
	PLB
	JSL.l SMW_BobOmbExplosion_Main
	PLB
	RTS

BobOmbEntry:
	LDA.w !RAM_SMW_NorSpr00D_BobOmb_IsExploding,x
	BNE.b ExplodeBomb
	LDA.w !RAM_SMW_NorSpr00D_BobOmb_WaitBeforeExplosion,x
	BNE.b RegularKoopaEntry
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr00D_BobOmb_WaitBeforeExplosion,x
	JMP.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1

RegularKoopaEntry:
SpinyEntry:
BuzzyBeetleEntry:
GoombaEntry:
YellowParaKoopaEntry:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b Spr0to13Main
CODE_018B00:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
CODE_018B03:
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	JSR.w Spr0to13Gfx
	RTS

Spr0to13Main:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018B2E
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w Spr0to13Prop,y
	LSR
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	BCC.b CODE_018B1C
	INY
	INY
CODE_018B1C:
	LDA.w Spr0to13SpeedX,y
	EOR.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	ASL
	LDA.w Spr0to13SpeedX,y
	BCC.b CODE_018B2C
	CLC
	ADC.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
CODE_018B2C:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_018B2E:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	TYA
	INC
	AND.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_018B3C
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_018B3C:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_018B43
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018B43:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b SpriteInAir
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	STZ.w !RAM_SMW_NorSpr_Table7E151C,x
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w Spr0to13Prop,y
	PHA
	AND.b #$04
	BEQ.b DontFollowMario
	LDA.w !RAM_SMW_NorSpr_Table7E1570,x
	AND.b #$7F
	BNE.b DontFollowMario
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	PLA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b DontFollowMario
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
DontFollowMario:
	PLA
	AND.b #$08
	BEQ.b CODE_018B82
	JSR.w JumpOverKickedObject
CODE_018B82:
	BRA.b CODE_018BB0

SpriteInAir:
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w Spr0to13Prop,y
	BPL.b CODE_018B90
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	BRA.b CODE_018B93

CODE_018B90:
	STZ.w !RAM_SMW_NorSpr_Table7E1570,x
CODE_018B93:
	LDA.w Spr0to13Prop,y
	AND.b #$02
	BEQ.b CODE_018BB0
	LDA.w !RAM_SMW_NorSpr_Table7E151C,x
	ORA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	ORA.w !RAM_SMW_NorSpr_Table7E1528,x
	ORA.w !RAM_SMW_NorSpr_Table7E1534,x
	BNE.b CODE_018BB0
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
CODE_018BB0:
	LDA.w !RAM_SMW_NorSpr_Table7E1528,x
	BEQ.b CODE_018BBA
	JSR.w CODE_018931
	BRA.b CODE_018BBD

CODE_018BBA:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
CODE_018BBD:
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	JSR.w SMW_ChangeNormalSpriteDirection_CheckIfTouchingWall
Spr0to13Gfx:
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_018BDE
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b #$00
	CPY.b #$05
	BCC.b CODE_018BD8
	INC
CODE_018BD8:
	EOR.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_018BDE:
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.w Spr0to13Prop,y
	AND.b #$40
	BNE.b CODE_018BEC
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	BRA.b DoneWithSprite

CODE_018BEC:
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LSR
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SBC.b #$0F
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr008_LeftFlyingGreenParaKoopa
	BCC.b DoneWithSprite
	JSR.w SMW_DrawWingTiles_ParaKoopaEntry
DoneWithSprite:
	PLA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_NakedKoopaEntry, SMW_NorSpr000_GreenNakedKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_NakedKoopaEntry, SMW_NorSpr001_RedNakedKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_NakedKoopaEntry, SMW_NorSpr002_BlueNakedKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_NakedKoopaEntry, SMW_NorSpr003_YellowNakedKoopa_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_BobOmbEntry, SMW_NorSpr00D_BobOmb_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_RegularKoopaEntry, SMW_NorSpr004_GreenKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_RegularKoopaEntry, SMW_NorSpr005_RedKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_RegularKoopaEntry, SMW_NorSpr006_BlueKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_RegularKoopaEntry, SMW_NorSpr007_YellowKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_YellowParaKoopaEntry, SMW_NorSpr00C_YellowParaKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_GoombaEntry, SMW_NorSpr00F_Goomba_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_BuzzyBeetleEntry, SMW_NorSpr011_BuzzyBeetle_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_SpinyEntry, SMW_NorSpr013_Spiny_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_GenericEnemies_Status08(Address)
namespace SMW_NorSprXXX_GenericEnemies_Status08
%InsertMacroAtXPosition(<Address>)

GreenParaKoopaEntry:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_018CB7
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w Spr0to13SpeedX,y
	EOR.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	ASL
	LDA.w Spr0to13SpeedX,y
	BCC.b CODE_018C64
	CLC
	ADC.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
CODE_018C64:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	TYA
	INC
	AND.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_018C71
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_018C71:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr008_LeftFlyingGreenParaKoopa
	BNE.b CODE_018C8C
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDY.b #$FC
	LDA.w !RAM_SMW_NorSpr_Table7E1570,x
	AND.b #$20
	BEQ.b CODE_018C85
	LDY.b #$04
CODE_018C85:
	STY.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	BRA.b CODE_018C91

CODE_018C8C:
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018C91:
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_018C9B
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018C9B:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018CAE
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.b #$D0
	LDY.w !RAM_SMW_NorSpr_Table7E160E,x
	BNE.b CODE_018CAC
	LDA.b #$B0
CODE_018CAC:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018CAE:
	JSR.w SMW_ChangeNormalSpriteDirection_CheckIfTouchingWall
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_SubOffscreen_Bank01_Entry1
CODE_018CB7:
	JMP.w Spr0to13Gfx

DATA_018CBA:
	db $FF,$01

DATA_018CBC:
	db $F0,$10

HorizontalRedParaKoopaEntry:
	JSR.w SMW_SubOffscreen_Bank01_Entry2
	BRA.b CODE_018CC6

VerticalRedParaKoopaEntry:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
CODE_018CC6:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_018D2A
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	PLA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b CODE_018CDC
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_018CDC:
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00A_VerticalRedParaKoopa
	BNE.b CODE_018CEA
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	BRA.b CODE_018CFD

CODE_018CEA:
	LDY.b #$FC
	LDA.w !RAM_SMW_NorSpr_Table7E1570,x
	AND.b #$20
	BEQ.b CODE_018CF5
	LDY.b #$04
CODE_018CF5:
	STY.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
CODE_018CFD:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BNE.b CODE_018D27
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	AND.b #$03
	BNE.b CODE_018D27
	LDA.w !RAM_SMW_NorSpr_Table7E151C,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w DATA_018CBA,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w DATA_018CBC,y
	BNE.b CODE_018D27
	INC.w !RAM_SMW_NorSpr_Table7E151C,x
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_018D27:
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
CODE_018D2A:
	JSR.w CODE_018CB7
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_GreenParaKoopaEntry, SMW_NorSpr008_LeftFlyingGreenParaKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_GreenParaKoopaEntry, SMW_NorSpr009_BouncingGreenParaKoopa_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_HorizontalRedParaKoopaEntry, SMW_NorSpr00B_HorizontalRedParaKoopa_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_GenericEnemies_Status08_VerticalRedParaKoopaEntry, SMW_NorSpr00A_VerticalRedParaKoopa_Status08_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_BobOmbExplosion(Address)
namespace SMW_BobOmbExplosion
%InsertMacroAtXPosition(<Address>)

BombExplosionX:
	db $00,$08,$06,$FA,$F8,$06,$08,$00
	db $F8,$FA

BombExplosionY:
	db $F8,$FE,$06,$06,$FE,$FA,$02,$08
	db $02,$FA

Main:
	JSR.w Sub
	RTL

Sub:
	STZ.w !RAM_SMW_NorSpr_PropertyBits1656,x
	LDA.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping11
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02809C
	INC.w !RAM_SMW_NorSpr_Table7E1570,x
CODE_02809C:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BNE.b ExplodeBombGfx
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

ExplodeBombGfx:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LSR
	AND.b #$03
	CMP.b #$03
	BNE.b CODE_0280C0
	JSR.w ExplodeSprites
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	SEC
	SBC.b #$10
	CMP.b #$20
	BCS.b CODE_0280C0
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
CODE_0280C0:
	LDY.b #$04
	STY.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0280C4:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LSR
	PHA
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	PLA
	AND.b #$04
	BEQ.b CODE_0280ED
	TYA
	CLC
	ADC.b #$05
	TAY
CODE_0280ED:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w BombExplosionX,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w BombExplosionY,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0280ED
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	ASL
	ASL
	ADC.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$BC
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	LSR
	AND.b #$03
	SEC
	ROL
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b CODE_0280C4
	LDY.b #$00
	LDA.b #$04
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

ExplodeSprites:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
ExplodeLoopStart:
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_02814C
	PHY
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_02814B
	JSR.w ExplodeKillSpr
CODE_02814B:
	PLY
CODE_02814C:
	DEY
	BPL.b ExplodeLoopStart
	RTS

ExplodeKillSpr:
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return028177
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,y
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	BNE.b Return028177
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$C0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XSpeed,y
Return028177:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr00E_Keyhole_Status01(Address)
namespace SMW_NorSpr00E_Keyhole_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr00E_Keyhole_Status08(Address)
namespace SMW_NorSpr00E_Keyhole_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_01E1CA:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_01E1D8
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BEQ.b CODE_01E1DB
CODE_01E1D8:
	DEY
	BPL.b CODE_01E1CA
CODE_01E1DB:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01E1E5
	LDA.w !RAM_SMW_Yoshi_KeyInMouthFlag
	BNE.b CODE_01E1ED
CODE_01E1E5:
	TYA
	STA.w !RAM_SMW_NorSpr00E_Keyhole_HighestSlotWithKey,x
	BMI.b CODE_01E23A
	BRA.b CODE_01E1F3

CODE_01E1ED:
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	BRA.b CODE_01E201

CODE_01E1F3:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BNE.b CODE_01E23A
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
CODE_01E201:
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_01E23A
	LDA.w !RAM_SMW_NorSpr00E_Keyhole_ActivateKeyholeFlag,x
	BNE.b CODE_01E23A
	LDA.b #$30
	STA.w !RAM_SMW_Timer_EndLevelViaKeyhole
	LDA.b #!Define_SMW_LevelMusic_IntoKeyhole2
	STA.w !RAM_SMW_IO_MusicCh1
	INC.w !RAM_SMW_Player_FreezePlayerFlag
	INC.b !RAM_SMW_Flag_SpritesLocked
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr00E_Keyhole_XPosHi
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr00E_Keyhole_XPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr00E_Keyhole_YPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr00E_Keyhole_YPosLo
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr00E_Keyhole_ActivateKeyholeFlag,x
CODE_01E23A:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b #$EB
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$FB
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$30
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	LDY.b #$00
	LDA.b #$01
	JSR.w SMW_FinishOAMWrite_Sub
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr010_ParaGoomba_Status08(Address)
namespace SMW_NorSpr010_ParaGoomba_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_018D39
	JSR.w CODE_018DAC
	RTS

CODE_018D39:
	JSR.w SMW_SetXSpeedBasedOnNormalSpriteFacingDirection_Main
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr010_ParaGoomba_FacePlayerTimer,x
	LSR
	LSR
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w CODE_018DAC
	INC.b !RAM_SMW_NorSpr010_ParaGoomba_FacePlayerTimer,x
	LDA.w !RAM_SMW_NorSpr010_ParaGoomba_HopCounter,x
	BNE.b CODE_018D5F
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_018D5F
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_018D5F:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_018D69
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018D69:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018DA5
	LDA.b !RAM_SMW_NorSpr010_ParaGoomba_FacePlayerTimer,x
	AND.b #$3F
	BNE.b CODE_018D77
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
CODE_018D77:
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.w !RAM_SMW_NorSpr010_ParaGoomba_HopCounter,x
	BNE.b CODE_018D82
	STZ.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_018D82:
	LDA.w !RAM_SMW_NorSpr010_ParaGoomba_WaitBeforeHoppingAfterBigHop,x
	BNE.b CODE_018DA5
	INC.w !RAM_SMW_NorSpr010_ParaGoomba_HopCounter,x
	LDY.b #$F0
	LDA.w !RAM_SMW_NorSpr010_ParaGoomba_HopCounter,x
	CMP.b #$04
	BNE.b CODE_018DA3
	STZ.w !RAM_SMW_NorSpr010_ParaGoomba_HopCounter,x
	JSL.l SMW_GetRand_Main
	AND.b #$3F
	ORA.b #$50
	STA.w !RAM_SMW_NorSpr010_ParaGoomba_WaitBeforeHoppingAfterBigHop,x
	LDY.b #$D0
CODE_018DA3:
	STY.b !RAM_SMW_NorSpr_YSpeed,x
CODE_018DA5:
	JSR.w SMW_ChangeNormalSpriteDirection_CheckIfTouchingWall
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	RTS

CODE_018DAC:
	JSR.w GoombaWingGFXRt
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JMP.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr010_ParaGoomba_Status08(Address)
namespace SMW_NorSpr010_ParaGoomba_Status08
%InsertMacroAtXPosition(<Address>)

WingXDisp:
	db $F7,$0B
	db $F6,$0D
	db $FD,$0C
	db $FC,$0D
	db $0B,$F5
	db $0A,$F3
	db $0B,$FC
	db $0C,$FB

WingYDisp:
	db $F7,$F7
	db $F8,$F8
	db $01,$01
	db $02,$02

WingProp:
	db $46,$06

WingTiles:
	db $C6,$C6
	db $5D,$5D

WingTileSize:
	db $02,$02
	db $00,$00

GoombaWingGFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	AND.b #$02
	CLC
	ADC.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDX.b #$01
CODE_018E07:
	STX.b !RAM_SMW_Misc_ScratchRAM03
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	PHA
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_018E15
	CLC
	ADC.b #$08
CODE_018E15:
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w WingXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w WingYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w WingTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w WingTileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	LSR
	LDA.w WingProp,x
	BCS.b CODE_018E49
	EOR.b #$40
CODE_018E49:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	CLC
	ADC.b #$08
	TAY
	DEX
	BPL.b CODE_018E07
	PLX
	LDY.b #$FF
	LDA.b #$02
	JSR.w SMW_FinishOAMWrite_Sub
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr012_UnusedSprite_Status01(Address)
namespace SMW_NorSpr012_Unused_Status01
%InsertMacroAtXPosition(<Address>)

UNK_01F873:
	db $08,$F8

Main:
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	STA.w !RAM_SMW_NorSpr012_UnusedSprite_UnknownRAM,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr012_Unused_Status01_Return, SMW_NorSpr012_Unused_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr014_SpinyEgg_Status08(Address)
namespace SMW_NorSpr014_SpinyEgg_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_018C44
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_018C44
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018C3E
	LDA.b #!Define_SMW_SpriteID_NorSpr013_Spiny
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	JSR.w SMW_MakeStunnedSpriteBounceOrSlowDownOnGround_Main
CODE_018C3E:
	JSR.w SMW_ChangeNormalSpriteDirection_CheckIfTouchingWall
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
CODE_018C44:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b #$02
	JSR.w SMW_GenericGFXRtDraw4Tiles8x8Square_Sub
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_FixedMovementCheepCheep_Status01(Address)
namespace SMW_NorSprXXX_FixedMovementCheepCheep_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	INC.w !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_MovementFlag,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FixedMovementCheepCheep_Status01_Main, SMW_NorSpr016_VerticalCheepCheep_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FixedMovementCheepCheep_Status01_Return, SMW_NorSpr015_HorizontalCheepCheep_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSprXXX_FixedMovementCheepCheep_Status08(Address)
namespace SMW_NorSprXXX_FixedMovementCheepCheep_Status08
%InsertMacroAtXPosition(<Address>)

SwimmingXSpeed:
	db $08,$F8

SwimmingYSpeed:
	db $00,$00,$08,$F8

KickedXSpeed:
	db $F0,$10

FloppingYSpeed:
	db $E0,$E8,$D0,$D8

FloppingXSpeed:
	db $08,$F8,$10,$F0,$04,$FC,$14,$EC

DATA_01B031:
	db $03,$0C

Main:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01B03E
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01B041
CODE_01B03E:
	JMP.w CODE_01B10A

CODE_01B041:
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BNE.b CODE_01B0A7
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_01B054
	JSR.w SMW_ChangeNormalSpriteDirection_Main
CODE_01B054:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01B09C
	LDA.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	BEQ.b CODE_01B062
	JSL.l SMW_SpawnWaterSplash_VerticalCheepCheepEntry
CODE_01B062:
	JSL.l SMW_GetRand_Main
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	TAY
	LDA.w FloppingXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_GetRand_Main
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$03
	TAY
	LDA.w FloppingYSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_Misc_RandomByte1
	AND.b #$40
	BNE.b CODE_01B08E
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	EOR.b #$80
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
CODE_01B08E:
	JSL.l SMW_GetRand_Main
	LDA.w !RAM_SMW_Misc_RandomByte1
	AND.b #$80
	BNE.b CODE_01B09C
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
CODE_01B09C:
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CLC
	ADC.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	BRA.b CODE_01B0EA

CODE_01B0A7:
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	ASL.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LSR.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	LDY.w !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_MovementFlag,x
	AND.w DATA_01B031,y
	BNE.b CODE_01B0C3
	LDA.w !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_TurnAroundTimer,x
	BNE.b CODE_01B0CA
CODE_01B0C3:
	LDA.b #$80
	STA.w !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_TurnAroundTimer,x
	INC.b !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_MovementDirection,x
CODE_01B0CA:
	LDA.b !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_MovementDirection,x
	AND.b #$01
	TAY
	LDA.w !RAM_SMW_NorSprXXX_FixedMovementCheepCheep_MovementFlag,x
	BEQ.b CODE_01B0D6
	INY
	INY
CODE_01B0D6:
	LDA.w SwimmingXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w SwimmingYSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	AND.b #$0C
	BNE.b CODE_01B0EA
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01B0EA:
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b CODE_01B10A
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_01B107
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b CODE_01B107
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01B10A
	JSL.l SMW_DamagePlayer_Hurt
	BRA.b CODE_01B10A

CODE_01B107:
	JSR.w SMW_KickHelplessSprite_Main
CODE_01B10A:
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LSR
	EOR.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$FE
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LSR.w !RAM_SMW_NorSpr_YXPPCCCT,x
	SEC
	ROL.w !RAM_SMW_NorSpr_YXPPCCCT,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FixedMovementCheepCheep_Status08_Main, SMW_NorSpr015_HorizontalCheepCheep_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FixedMovementCheepCheep_Status08_Main, SMW_NorSpr016_VerticalCheepCheep_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr017_GeneratorCheepCheep_Status01(Address)
namespace SMW_NorSpr017_GeneratorCheepCheep_Status01
%InsertMacroAtXPosition(<Address>)

InitXSpeed:
	db $10,$F0

Main:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w InitXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr017_GeneratorCheepCheep_Status01_Main, SMW_NorSpr018_SurfaceJumpingCheepCheep_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr017_GeneratorCheepCheep_Status08(Address)
namespace SMW_NorSpr017_GeneratorCheepCheep_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_NorSpr018_SurfaceJumpingCheepCheep_Status08_CODE_01B209
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01B1B0
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$20
	BPL.b CODE_01B1AE
	CLC
	ADC.b #$01
CODE_01B1AE:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return01B1B0:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr018_SurfaceJumpingCheepCheep_Status08(Address)
namespace SMW_NorSpr018_SurfaceJumpingCheepCheep_Status08
%InsertMacroAtXPosition(<Address>)

YSpeed:
	db $D0,$D0,$B0

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01B209
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_01B1EA
	LDA.b !RAM_SMW_NorSpr018_SurfaceJumpingCheepCheep_HopCounter,x
	CMP.b #$03
	BEQ.b CODE_01B1DE
	INC.b !RAM_SMW_NorSpr018_SurfaceJumpingCheepCheep_HopCounter,x
	TAY
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	STZ.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BRA.b CODE_01B206

CODE_01B1DE:
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_01B1E8
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B1E8:
	BRA.b CODE_01B206

CODE_01B1EA:
	INC.w !RAM_SMW_NorSpr_Table7E1570,x
	INC.w !RAM_SMW_NorSpr_Table7E1570,x
	CMP.w !RAM_SMW_NorSpr_Table7E151C,x
	BEQ.b CODE_01B206
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.b !RAM_SMW_NorSpr018_SurfaceJumpingCheepCheep_HopCounter,x
	CMP.b #$03
	BNE.b CODE_01B206
	STZ.b !RAM_SMW_NorSpr018_SurfaceJumpingCheepCheep_HopCounter,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B206:
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
CODE_01B209:
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	JMP.w SMW_NorSprXXX_FixedMovementCheepCheep_Status08_CODE_01B10A
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr019_DisplayMessage_Status01(Address)
namespace SMW_NorSpr019_DisplayMessage_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$28
	STA.w !RAM_SMW_NorSpr019_DisplayMessage_WaitBeforeDisplayMessage,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr019_DisplayMessage_Status01_Main, SMW_NorSpr08C_SideExitAndFireplace_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr019_DisplayMessage_Status08(Address)
namespace SMW_NorSpr019_DisplayMessage_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_NorSpr019_DisplayMessage_WaitBeforeDisplayMessage,x
	CMP.b #$01
	BNE.b Return
	STA.w !RAM_SMW_Overworld_MarioMap				;\ LM: Shift+F8 will NOP these lines out so that this sprite no longer affects your overworld position.
	STA.w !RAM_SMW_Overworld_SaveBuffer+$6F				;/ Note: !Define_SMW_Overworld_YoshisIsland
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	INC.w !RAM_SMW_Misc_DisplayMessage
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr019_DisplayMessage_Status08_Main, SMW_NorSpr03E_PSwitch_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr01B_Football_Status08(Address)
namespace SMW_NorSpr01B_Football_Status08
%InsertMacroAtXPosition(<Address>)

DATA_038007:								;\ Glitch: This table needs to be 2 bytes larger. Otherwise, the football will read a value from the below table and from the above Rex stomp sound table when landing on very steep slopes.
	db $F0,$F8,$FC,$00,$04,$08,$10					;/

DATA_03800E:
	db $A0,$D0,$C0,$D0

Bank03:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038086
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	LDA.w !RAM_SMW_NorSpr01B_Football_WaitBeforeBeingKicked,x
	BEQ.b CODE_03802D
	DEC
	BNE.b CODE_038031
	JSL.l SMW_SpawnContactEffectFromSide_Main
CODE_03802D:
	JSL.l SMW_HandleNormalSpriteGravity_Main
CODE_038031:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_03803F
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_03803F:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$08
	BEQ.b CODE_038048
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_038048:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return038086
	LDA.w !RAM_SMW_NorSpr01B_Football_WaitBeforeBeingKicked,x
	BNE.b Return038086
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	EOR.b #$40
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSL.l SMW_GetRand_Main
	AND.b #$03
	TAY
	LDA.w DATA_03800E,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDY.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	INY
	INY
	INY
	LDA.w DATA_038007,y
	CLC
	ADC.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_03807E
	CMP.b #$E0
	BCS.b CODE_038084
	LDA.b #$E0
	BRA.b CODE_038084

CODE_03807E:
	CMP.b #$20
	BCC.b CODE_038084
	LDA.b #$20
CODE_038084:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
Return038086:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

;Glitch: Beating Funky will cause only the standard horizontal bullet bills to change into pidgets.

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr01C_BulletBill_Status01(Address)
namespace SMW_NorSpr01C_BulletBill_Status01
%InsertMacroAtXPosition(<Address>)

Main:								; Glitch: Placing this sprite directly causes it to not play its usual sound.
								; Optimization: Setting this routine to handle playing the bullet bill sound will remove the need to make it play in the bullet spawners.
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.b !RAM_SMW_NorSpr01C_BulletBill_FiringDirection,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr01C_BulletBill_AppearBehindLayer1Timer,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr01C_BulletBill_Status08(Address)
namespace SMW_NorSpr01C_BulletBill_Status08
%InsertMacroAtXPosition(<Address>)

Prop:
	db $42		; Left
	db $02		; Right
	db $03		; Up
	db $83		; Down
	db $03		; Up-Right
	db $43		; Down-Right
	db $03		; Down-Left
	db $43		; Up-Left

AnimationFrame:
	db $00		; Left
	db $00		; Right
	db $01		; Up
	db $01		; Down
	db $02		; Up-Right
	db $03		; Down-Right
	db $03		; Down-Left
	db $02		; Up-Left

XSpeed:
	db $20		; Left
	db $E0		; Right
	db $00		; Up
	db $00		; Down
	db $18		; Up-Right
	db $18		; Down-Right
	db $E8		; Down-Left
	db $E8		; Up-Left

YSpeed:
	db $00		; Left
	db $00		; Right
	db $E0		; Up
	db $20		; Down
	db $E8		; Up-Right
	db $18		; Down-Right
	db $18		; Down-Left
	db $E8		; Up-Left

Main:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_019014
	LDY.b !RAM_SMW_NorSpr01C_BulletBill_FiringDirection,x
	LDA.w Prop,y
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.w AnimationFrame,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub			; Note: Bullet Bills only use this to generate water splashes. They otherwise don't interact with terrain.
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
CODE_019014:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCC.b CODE_019023
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_019023:
	LDA.w !RAM_SMW_NorSpr01C_BulletBill_AppearBehindLayer1Timer,x
	BEQ.b CODE_01902B
	JMP.w SMW_NorSprStatus09_Stunned_BulletBillEntry

CODE_01902B:
	JMP.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr01D_HoppingFlame_Status08(Address)
namespace SMW_NorSpr01D_HoppingFlame_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_018F49
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_SetXSpeedBasedOnNormalSpriteFacingDirection_Main
	ASL.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_018F43
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.w !RAM_SMW_NorSpr01D_HoppingFlame_WaitBeforeHopping,x
	BEQ.b CODE_018F38
	DEC
	BNE.b CODE_018F43
	JSR.w CODE_018F50
	BRA.b CODE_018F43

CODE_018F38:
	JSL.l SMW_GetRand_Main
	AND.b #$1F
	ORA.b #$20
	STA.w !RAM_SMW_NorSpr01D_HoppingFlame_WaitBeforeHopping,x
CODE_018F43:
	JSR.w SMW_ChangeNormalSpriteDirection_CheckIfTouchingWall
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
CODE_018F49:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	RTS

CODE_018F50:
	JSL.l SMW_GetRand_Main
	AND.b #$0F
	ORA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_Misc_RandomByte1
	AND.b #$03
	BNE.b CODE_018F64
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
CODE_018F64:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return018F96
	JSR.w SMW_CheckForAvailableExtendedSpriteSlot_Main
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #!Define_SMW_SpriteID_ExtSpr03_FlameRemnant
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b #$FF
	STA.w !RAM_SMW_ExtSpr03_FlameRemnant_DespawnTimer,y
Return018F96:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr01E_Lakitu_Status01(Address)
namespace SMW_NorSpr01E_Lakitu_Status01
%InsertMacroAtXPosition(<Address>)

ADDR_018468:
	JMP.w SMW_SubOffscreen_Bank01_EraseSprite

Main:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01846D:
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_018484
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_018484
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr087_LakituCloud
	BEQ.b ADDR_018468
	CMP.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	BEQ.b ADDR_018468
CODE_018484:
	DEY
	BPL.b CODE_01846D
	STZ.w !RAM_SMW_Timer_RespawnSprite
	STZ.w !RAM_SMW_Timer_DisappearingSprite
	STZ.w !RAM_SMW_GenSpr_SpriteID
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_Sprites_YPosOfRespawningSpriteLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_Sprites_YPosOfRespawningSpriteHi
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b SetLakituType
	STY.w !RAM_SMW_Sprites_LakituCloudSlotIndex
	LDA.b #!Define_SMW_SpriteID_NorSpr087_LakituCloud
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	STZ.w !RAM_SMW_Timer_DespawnLakituCloud
SetLakituType:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	STA.w !RAM_SMW_NorSpr01E_Lakitu_FishingFlag,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr01E_Lakitu_Status01_SetLakituType, SMW_NorSpr04D_GroundMontyMole_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr01E_Lakitu_Status01_SetLakituType, SMW_NorSpr04E_LedgeMontyMole_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr01E_Lakitu_Status01_SetLakituType, SMW_NorSpr0C1_WingedPlatform_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr01E_Lakitu_Status08(Address)
namespace SMW_NorSpr01E_Lakitu_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr01E_Lakitu_ThrowingAnimationTimer,x
	BEQ.b CODE_018FA0
	LDY.b #$02
CODE_018FA0:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	LDA.w !RAM_SMW_NorSpr01E_Lakitu_ThrowingAnimationTimer,x
	BEQ.b CODE_018FB8
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$41].YDisp,y
	SEC
	SBC.b #$03
	STA.w SMW_OAMBuffer[$41].YDisp,y
CODE_018FB8:
	LDA.w !RAM_SMW_NorSpr01E_Lakitu_FishingFlag,x
	BEQ.b CheckForPlayerAndNormalSpriteCollisions_Sub
	JSL.l LakituFishingLineGFXRt
CheckForPlayerAndNormalSpriteCollisions:
.Sub
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	JMP.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr01E_Lakitu_Status08(Address)
namespace SMW_NorSpr01E_Lakitu_Status08
%InsertMacroAtXPosition(<Address>)

LakituFishingLineGFXRt:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w SMW_GetDrawInfo_Bank02
	TYA
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$0D
	STA.w SMW_OAMBuffer[$40].XDisp,y
	SEC
	SBC.b #$08
	STA.w !RAM_SMW_NorSpr01E_Lakitu_FishingLineXDisp
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$02
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w !RAM_SMW_NorSpr01E_Lakitu_FishingLineYDisp
	CLC
	ADC.b #$40
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b #$AA
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$24
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$35
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b #$3A
	STA.w SMW_OAMBuffer[$41].Prop,y
	LDA.b #$01
	LDY.b #$02
	JSR.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_02E6EB
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	SEC
	SBC.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.b #$0C
	CMP.b #$18
	BCS.b CODE_02E6EB
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	SEC
	SBC.w SMW_OAMBuffer[$41].YDisp,y
	CLC
	ADC.b #$0C
	CMP.b #$18
	BCS.b CODE_02E6EB
	STZ.w !RAM_SMW_NorSpr01E_Lakitu_FishingFlag,x
	JSL.l SMW_SpawnScoreSpriteAtPlayerPosition_LakituEntry
CODE_02E6EB:
	PHX
	LDA.b #$38
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	LDX.b #$07
CODE_02E6F4:
	LDA.w !RAM_SMW_NorSpr01E_Lakitu_FishingLineXDisp
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_NorSpr01E_Lakitu_FishingLineYDisp
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_NorSpr01E_Lakitu_FishingLineYDisp
	LDA.b #$89
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$35
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02E6F4
	PLX
	LDA.b #$07
	LDY.b #$00
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CheckForPlayerAndNormalSpriteCollisions(Address)
namespace SMW_CheckForPlayerAndNormalSpriteCollisions
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	PLB
	RTL

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr01F_Magikoopa_Status01(Address)
namespace SMW_NorSpr01F_MagiKoopa_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01BDBA:
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_01BDCF
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_01BDCF
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr01F_MagiKoopa
	BNE.b CODE_01BDCF
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

CODE_01BDCF:
	DEY
	BPL.b CODE_01BDBA
	STZ.w !RAM_SMW_Timer_DisappearingSprite
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr01F_Magikoopa_Status08(Address)
namespace SMW_NorSpr01F_MagiKoopa_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr01F_MagiKoopa_DisableInteraction,x
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BEQ.b CODE_01BDE2
	STZ.b !RAM_SMW_NorSpr01F_MagiKoopa_CurrentState,x
CODE_01BDE2:
	LDA.b !RAM_SMW_NorSpr01F_MagiKoopa_CurrentState,x
	AND.b #$03
	JSL.l SMW_ExecutePtr_Absolute

MagiKoopaPtrs:
	dw State00_FindOpenSpace
	dw State01_FadeIn
	dw State02_Shoot
	dw State03_FadeOut

State00_FindOpenSpace:
	LDA.w !RAM_SMW_Timer_DisappearingSprite
	BEQ.b CODE_01BDFB
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

CODE_01BDFB:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01BE5E
	LDY.b #$24
	STY.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	BNE.b Return01BE5E
	JSL.l SMW_GetRand_Main
	CMP.b #$D1
	BCS.b Return01BE5E
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_GetRand_Main
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$20
	CMP.b #$40
	BCC.b Return01BE5E
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$01
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b Return01BE5E
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyHi
	BNE.b Return01BE5E
	INC.b !RAM_SMW_NorSpr01F_MagiKoopa_CurrentState,x
	STZ.w !RAM_SMW_NorSpr01F_MagiKoopa_FadePaletteIndex,x
	JSR.w CODE_01BE82
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return01BE5E:
	RTS

State01_FadeIn:
	JSR.w CODE_01C004
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	RTS

DATA_01BE69:
	db $04,$02,$00

WandXDisp:
	db $10,$F8

State02_Shoot:
	STZ.w !RAM_SMW_NorSpr01F_MagiKoopa_DisableInteraction,x
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	BNE.b CODE_01BE86
	INC.b !RAM_SMW_NorSpr01F_MagiKoopa_CurrentState,x
CODE_01BE82:
	LDY.b #$34
	STY.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
CODE_01BE86:
	CMP.b #$40
	BNE.b CODE_01BE96
	PHA
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_01BE95
	JSR.w CODE_01BF1D
CODE_01BE95:
	PLA
CODE_01BE96:
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	TAY
	PHY
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	LSR
	LSR
	LSR
	AND.b #$01
	ORA.w DATA_01BE69,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	SEC
	SBC.b #$02
	CMP.b #$02
	BCC.b CODE_01BEC6
	LSR
	BCC.b CODE_01BEC6
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAX
	INC.w SMW_OAMBuffer[$40].YDisp,x
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
CODE_01BEC6:
	PLY
	CPY.b #$01
	BNE.b CODE_01BECE
	JSR.w SMW_SpawnSparkles_NormalSpriteEntry
CODE_01BECE:
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$04
	BCC.b Return01BF15
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w WandXDisp,y
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$42].YDisp,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	LDA.b #$00
	BCS.b CODE_01BEFC
	ORA.b #$40
CODE_01BEFC:
	ORA.b !RAM_SMW_Sprites_TilePriority
	ORA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.w SMW_OAMBuffer[$42].Prop,y
	LDA.b #$99
	STA.w SMW_OAMBuffer[$42].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	STA.w SMW_OAMTileSizeBuffer[$42].Slot,y
Return01BF15:
	RTS

State03_FadeOut:
	JSR.w CODE_01BFE3
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	RTS

CODE_01BF1D:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01BF1F:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_01BF28
	DEY
	BPL.b CODE_01BF1F
	RTS

CODE_01BF28:
	LDA.b #!Define_SMW_Sound1DF9_MagicShoot
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr020_Magic
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$0A
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$20
	JSR.w SMW_AimTowardsPlayer_Bank01
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr01F_Magikoopa_Status08(Address)
namespace SMW_NorSpr01F_MagiKoopa_Status08
%InsertMacroAtXPosition(<Address>)

CODE_01BFE3:
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	BNE.b Return01C000
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	DEC.w !RAM_SMW_NorSpr01F_MagiKoopa_FadePaletteIndex,x
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadePaletteIndex,x
	CMP.b #$00
	BNE.b CODE_01C001
	INC.b !RAM_SMW_NorSpr01F_MagiKoopa_CurrentState,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	PLA
	PLA
Return01C000:
	RTS

CODE_01C001:
	JMP.w CODE_01C028

CODE_01C004:
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	BNE.b CODE_01C05E
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	INC.w !RAM_SMW_NorSpr01F_MagiKoopa_FadePaletteIndex,x
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadePaletteIndex,x
	CMP.b #$09
	BNE.b CODE_01C01C
	LDY.b #$24
	STY.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
CODE_01C01C:
	CMP.b #$09
	BNE.b CODE_01C028
	INC.b !RAM_SMW_NorSpr01F_MagiKoopa_CurrentState,x
	LDA.b #$70
	STA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadeTimer,x
	RTS

CODE_01C028:
	LDA.w !RAM_SMW_NorSpr01F_MagiKoopa_FadePaletteIndex,x
	DEC
	ASL
	ASL
	ASL
	ASL
	TAX
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
CODE_01C036:
	LDA.l MagiKoopaFadePalettes,x
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,y
	INY
	INX
	INC.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$10
	BNE.b CODE_01C036
	LDX.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	LDA.b #$10
	STA.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload,x
	LDA.b #$F0
	STA.w !RAM_SMW_Palettes_DynamicPaletteCGRAMAddress,x
	STZ.w !RAM_SMW_Palettes_DynamicPaletteColors+$10,x
	TXA
	CLC
	ADC.b #$12
	STA.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
CODE_01C05E:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr01F_Magikoopa_Status08(Address)
namespace SMW_NorSpr01F_MagiKoopa_Status08
%InsertMacroAtXPosition(<Address>)

MagiKoopaFadePalettes:
.Fade07:						;\ Note: For some reason, the lightest blue color is inverted from what it should be in each palette row.
	incbin "palettes/MagiKoopa.tpl":6-16		;|
.Fade06:						;|
	incbin "palettes/MagiKoopa.tpl":26-36		;|
.Fade05:						;|
	incbin "palettes/MagiKoopa.tpl":46-56		;|
.Fade04:						;|
	incbin "palettes/MagiKoopa.tpl":66-76		;|
.Fade03:						;|
	incbin "palettes/MagiKoopa.tpl":86-96		;|
.Fade02:						;|
	incbin "palettes/MagiKoopa.tpl":A6-B6		;|
.Fade01:						;|
	incbin "palettes/MagiKoopa.tpl":C6-D6		;|
.Normal:						;|
	incbin "palettes/MagiKoopa.tpl":E6-F6		;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr020_Magic_Status08(Address)
namespace SMW_NorSpr020_Magic_Status08
%InsertMacroAtXPosition(<Address>)

Palettes:
	db $05,$07,$09,$0B

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01BC3F
	JMP.w CODE_01BCBD

CODE_01BC3F:
	JSR.w SMW_SpawnSparkles_NormalSpriteEntry
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	PHA
	LDA.b #$FF
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	PLA
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_01BCBD
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_01BCBD
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedVerticallyLo
	SEC
	SBC.b #$11
	CMP.b #$1D
	BCS.b CODE_01BCB9
	JSL.l SMW_GetRand_Main
	ADC.w !RAM_SMW_Misc_RandomByte2
	ADC.b !RAM_SMW_Player_XSpeed
	ADC.b !RAM_SMW_Counter_GlobalFrames
	LDY.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom
	CMP.b #$35
	BEQ.b StoreSpriteNum
	LDY.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	CMP.b #$08
	BCC.b StoreSpriteNum
	LDY.b #!Define_SMW_SpriteID_NorSpr027_Thwimp
	CMP.b #$F7
	BCS.b StoreSpriteNum
	LDY.b #!Define_SMW_SpriteID_NorSpr007_YellowKoopa
StoreSpriteNum:
	STY.b !RAM_SMW_NorSpr_SpriteID,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b !RAM_SMW_Blocks_XPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Blocks_XPosLo
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Blocks_YPosHi
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Blocks_YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$02
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
CODE_01BCB9:
	JSR.w CODE_01BD98
	RTS

CODE_01BCBD:
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w Palettes,y
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSR.w GFXRt
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$E0
	BCC.b Return01BCDF
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return01BCDF:
	RTS

Disp:
	db $00,$01,$02,$05,$08,$0B,$0E,$0F
	db $10,$0F,$0E,$0B,$08,$05,$02,$01

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b #$0C
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l Disp,x
else
	ADC.w Disp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l Disp,x
else
	ADC.w Disp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$05
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l Disp,x
else
	ADC.w Disp,x
endif
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b #$05
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l Disp,x
else
	ADC.w Disp,x
endif
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$05
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l Disp,x
else
	ADC.w Disp,x
endif
	STA.w SMW_OAMBuffer[$42].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b #$05
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l Disp,x
else
	ADC.w Disp,x
endif
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	LDA.b #$88
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$89
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$98
	STA.w SMW_OAMBuffer[$42].Tile,y
	LDY.b #$00
	LDA.b #$02
	JMP.w SMW_FinishOAMWrite_Sub

CODE_01BD98:
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_01BD9A:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_01BDA3
	DEY
	BPL.b CODE_01BD9A
	RTS

CODE_01BDA3:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$1B
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_NetKoopas_Status01(Address)
namespace SMW_NorSprXXX_NetKoopas_Status01
%InsertMacroAtXPosition(<Address>)

InitXSpeed:
	db $08,$F8

HorizontalNetKoopaEntry:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w InitXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b CODE_01B950

VerticalNetKoopaEntry:
	INC.b !RAM_SMW_NorSprXXX_NetKoopas_MovementDirectionFlag,x
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$F8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B950:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.b #$00
	AND.b #$10
	BNE.b CODE_01B959
	INY
CODE_01B959:
	TYA
	STA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$02
	BNE.b Return01B968
	ASL.b !RAM_SMW_NorSpr_XSpeed,x
	ASL.b !RAM_SMW_NorSpr_YSpeed,x
Return01B968:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status01_HorizontalNetKoopaEntry, SMW_NorSpr024_GreenHorizontalNetKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status01_HorizontalNetKoopaEntry, SMW_NorSpr025_RedHorizontalNetKoopa_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status01_VerticalNetKoopaEntry, SMW_NorSpr022_GreenVerticalNetKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status01_VerticalNetKoopaEntry, SMW_NorSpr023_RedVerticalNetKoopa_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSprXXX_NetKoopas_Status08(Address)
namespace SMW_NorSprXXX_NetKoopas_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01B969:
	db $02,$02,$03,$04,$03,$02,$02,$02
	db $01,$02

DATA_01B973:
	db $01,$01,$00,$00,$00,$01,$01,$01
	db $01,$01

DATA_01B97D:
	db $03,$0C

Main:
	LDA.w !RAM_SMW_NorSprXXX_NetKoopas_TurnAroundToOtherSideTimer,x
	BEQ.b CODE_01B9FB
	CMP.b #$30
	BCC.b CODE_01B9A0
	CMP.b #$40
	BCC.b CODE_01B9A3
	BNE.b CODE_01B9A0
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01B9A0
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	JSR.w CODE_01BA7F
CODE_01B9A0:
	JMP.w CODE_01BA37

CODE_01B9A3:
	LDY.b !RAM_SMW_NorSpr_YPosLo,x
	PHY
	LDY.w !RAM_SMW_NorSpr_YPosHi,x
	PHY
	LDY.b #$00
	CMP.b #$38
	BCC.b CODE_01B9B1
	INY
CODE_01B9B1:
	LDA.b !RAM_SMW_NorSprXXX_NetKoopas_MovementDirectionFlag,x
	BEQ.b CODE_01B9CC
	INY
	INY
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$0C
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	BEQ.b CODE_01B9CC
	INY
CODE_01B9CC:
	LDA.w !RAM_SMW_Overworld_LevelTileSettings+!Define_SMW_LevelID_ChangeSP2GFX
	BPL.b CODE_01B9D6
	INY
	INY
	INY
	INY
	INY
CODE_01B9D6:
	LDA.w DATA_01B969,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w DATA_01B973,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	PHA
	AND.b #$FE
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	PLA
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	RTS

CODE_01B9FB:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01BA53
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDY.b !RAM_SMW_NorSprXXX_NetKoopas_MovementDirectionFlag,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.w DATA_01B97D,y
	BEQ.b CODE_01BA14
CODE_01BA0C:
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	JSR.w CODE_01BA7F
	BRA.b CODE_01BA37

CODE_01BA14:
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedVerticallyLo
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_01BA27
	BPL.b CODE_01BA1F
	BMI.b CODE_01BA2A
CODE_01BA1F:
	CMP.b #$07
	BCC.b CODE_01BA0C
	CMP.b #$1D
	BCS.b CODE_01BA0C
CODE_01BA27:
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyLo
CODE_01BA2A:
	CMP.b #$07
	BCC.b CODE_01BA32
	CMP.b #$1D
	BCC.b CODE_01BA37
CODE_01BA32:
	LDA.b #$50
	STA.w !RAM_SMW_NorSprXXX_NetKoopas_TurnAroundToOtherSideTimer,x
CODE_01BA37:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01BA53
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	LDA.b !RAM_SMW_NorSprXXX_NetKoopas_MovementDirectionFlag,x
	BNE.b CODE_01BA4A
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	BRA.b CODE_01BA4D

CODE_01BA4A:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01BA4D:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	JSR.w SMW_SubOffscreen_Bank01_Entry1
CODE_01BA53:
	LDA.w !RAM_SMW_NorSprXXX_NetKoopas_MovementDirection,x
	PHA
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$08
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_NorSprXXX_NetKoopas_MovementDirection,x
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	BEQ.b CODE_01BA74
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_01BA74:
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	PLA
	STA.w !RAM_SMW_NorSprXXX_NetKoopas_MovementDirection,x
	RTS

CODE_01BA7F:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status08_Main, SMW_NorSpr022_GreenVerticalNetKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status08_Main, SMW_NorSpr023_RedVerticalNetKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status08_Main, SMW_NorSpr024_GreenHorizontalNetKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NetKoopas_Status08_Main, SMW_NorSpr025_RedHorizontalNetKoopa_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr026_Thwomp_Status01(Address)
namespace SMW_NorSpr026_Thwomp_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x					;\ Glitch: If a thwomp falls far enough, it won't be able to go back up to its original height.
	STA.w !RAM_SMW_NorSpr026_Thwomp_InitialYPosLo,x			;/
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr026_Thwomp_Status01_Return, SMW_NorSpr027_Thwimp_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr026_Thwomp_Status08(Address)
namespace SMW_NorSpr026_Thwomp_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b SMW_NorSpr026_Thwomp_Status01_Return
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b SMW_NorSpr026_Thwomp_Status01_Return
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	LDA.b !RAM_SMW_NorSpr026_Thwomp_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

ThwompPtrs:
	dw Waiting
	dw Falling
	dw Rising

Waiting:
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b CODE_01AEEE
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b Return01AEF9
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA									;\ Optimization: This is not used.
	STA.w !RAM_SMW_NorSpr026_Thwomp_SidePlayerIsOn,x			;/	
	STZ.w !RAM_SMW_NorSpr026_Thwomp_FaceFrame,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0F					;\ Glitch: The thwomp will act like you're close to it if you're one screen away horizontally
	CLC									;| This should be 16-bit and CheckPlayerPositionRelativeToSprite_Bank01_X needs to check Mario's 16-bit position instead of 8-bit.
	ADC.b #$40								;|
	CMP.b #$80								;|
	BCS.b CODE_01AEE5							;/
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr026_Thwomp_FaceFrame,x
CODE_01AEE5:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$24
	CMP.b #$50
	BCS.b Return01AEF9
CODE_01AEEE:
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr026_Thwomp_FaceFrame,x
	INC.b !RAM_SMW_NorSpr026_Thwomp_CurrentState,x
	LDA.b #$00
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return01AEF9:
	RTS

Falling:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$3E
	BCS.b CODE_01AF07
	ADC.b #$04
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01AF07:
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b Return01AF23
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.b #$18
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr026_Thwomp_WaitBeforeRising,x
	INC.b !RAM_SMW_NorSpr026_Thwomp_CurrentState,x
Return01AF23:
	RTS

Rising:
	LDA.w !RAM_SMW_NorSpr026_Thwomp_WaitBeforeRising,x
	BNE.b Return01AF3F
	STZ.w !RAM_SMW_NorSpr026_Thwomp_FaceFrame,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.w !RAM_SMW_NorSpr026_Thwomp_InitialYPosLo,x
	BNE.b CODE_01AF38
	LDA.b #$00
	STA.b !RAM_SMW_NorSpr026_Thwomp_CurrentState,x
	RTS

CODE_01AF38:
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
Return01AF3F:
	RTS

XDisp:
	db $FC,$04,$FC,$04,$00

YDisp:
	db $00,$00,$10,$10,$08

Tiles:
	db $8E,$8E,$AE,$AE,$C8

Prop:
	db $03,$43,$03,$43,$03

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr026_Thwomp_FaceFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$03
	CMP.b #$00
	BEQ.b CODE_01AF64
	INX
CODE_01AF64:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.w Tiles,x
	CPX.b #$04
	BNE.b CODE_01AF8F
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	CPX.b #$02
	BNE.b CODE_01AF8E
	LDA.b #$CA
CODE_01AF8E:
	PLX
CODE_01AF8F:
	STA.w SMW_OAMBuffer[$40].Tile,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_01AF64
	PLX
	LDA.b #$04
	JMP.w SMW_NormalSpritePlatformGFXRt_CODE_01B37E
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr027_Thwimp_Status08(Address)
namespace SMW_NorSpr027_Thwimp_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01B006
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01B006
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01AFC3
	CMP.b #$40
	BCS.b CODE_01AFC8
	ADC.b #$05
CODE_01AFC3:
	CLC
	ADC.b #$03
	BRA.b CODE_01AFCA

CODE_01AFC8:
	LDA.b #$40
CODE_01AFCA:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_01AFD5
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01AFD5:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01B006
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr027_Thwimp_WaitBeforeNextHop,x
	BEQ.b CODE_01AFFC
	DEC
	BNE.b CODE_01B006
	LDA.b #$A0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr027_Thwimp_HoppingDirection,x
	LDA.b !RAM_SMW_NorSpr027_Thwimp_HoppingDirection,x
	LSR
	LDA.b #$10
	BCC.b CODE_01AFF8
	LDA.b #$F0
CODE_01AFF8:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b CODE_01B006

CODE_01AFFC:
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr027_Thwimp_WaitBeforeNextHop,x
CODE_01B006:
	LDA.b #$01
	JMP.w SMW_GenericGFXRtDraw4Tiles8x8Square_Sub
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr029_KoopaKid_Status01(Address)
namespace SMW_NorSpr029_KoopaKids_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	CMP.b #$05
	BCC.b CODE_01CD4E
	LDA.b #$78
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b #$40
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	RTS

CODE_01CD4E:
	LDY.b #$90
	STY.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$03
	BCC.b CODE_01CD5E
	JSL.l SetPlatformKoopaKidsInitialPosition
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	RTS

CODE_01CD5E:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	LDA.b #$20
	STA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_M7AngleHi
	JSL.l SMW_InitializeMode7TilemapsAndPalettes_Main
	LDY.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	LDA.w DATA_01CD92,y
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_Mode7RoomToLoad,x
	CMP.b #$01
	BEQ.b CODE_01CD87
	CMP.b #$00
	BNE.b CODE_01CD81
	LDA.b #$70
	STA.b !RAM_SMW_NorSpr_XPosLo,x
CODE_01CD81:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	RTS

CODE_01CD87:
	LDA.b #$26
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_LeftWallXPos,x
	LDA.b #$D8
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_RightWallXPos,x
	RTS

DATA_01CD92:
	db $01,$01,$00

UNK_01CD95:
	db $02,$02,$03,$03
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr029_KoopaKid_Status01(Address)
namespace SMW_NorSpr029_KoopaKids_Status01
%InsertMacroAtXPosition(<Address>)

SetPlatformKoopaKidsInitialPosition:
	LDA.b #$A0
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$00
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr029_KoopaKid_Status08(Address)
namespace SMW_NorSpr029_KoopaKids_Status08
%InsertMacroAtXPosition(<Address>)

UNK_01FAB4:
	db $FF,$01,$00,$80,$60,$A0,$40,$D0
	db $D8,$C0,$C8,$0C,$F4

Main:
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	JSL.l SMW_ExecutePtr_Absolute

KoopaKidPtrs:
	dw SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig_Main	; Morton 
	dw SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig_Main	; Roy
	dw SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig_Main	; Ludwig
	dw SMW_NorSpr029_KoopaKid_Status08_IggyLarry_Main	; Iggy
	dw SMW_NorSpr029_KoopaKid_Status08_IggyLarry_Main	; Larry
	dw SMW_NorSpr029_KoopaKid_Status08_WendyLemmy_Main	; Lemmy
	dw SMW_NorSpr029_KoopaKid_Status08_WendyLemmy_Main	; Wendy
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr029_KoopaKid_Status08_WendyLemmy(Address)		; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's horizontally offscreen
									; Glitch: This sprite does not call FinishOAMWrite, which means its tiles can wrap around the screen
namespace SMW_NorSpr029_KoopaKid_Status08_WendyLemmy
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank03
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr029_KoopaKid_Status08_WendyLemmy(Address)
namespace SMW_NorSpr029_KoopaKid_Status08_WendyLemmy
%InsertMacroAtXPosition(<Address>)

Bank03:
	PHB
	PHK
	PLB
	STZ.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return03CC37
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03CC37
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

WendyLemmyPtrs:
	dw State00_InPipe
	dw State01_Rising
	dw State02_OutOfPipe
	dw State03_Descending
	dw State04_Hurt
	dw State05_Falling
	dw State06_SinkingInLava

Return03CC37:
	RTS

SpawningXPos:
	db $18,$38,$58,$78,$98,$B8,$D8,$78

LemmySpawningYPos:
	db $40,$50,$50,$40,$30,$40,$50,$40

DATA_03CC48:
	db $50,$4A,$50,$4A,$4A,$40,$4A,$48
	db $4A

DATA_03CC51:
	db $02,$04,$06,$08,$0B,$0C,$0E,$10
	db $13

SpawningPositionIndexes:
.Real:
	db $00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01
.Dummy1:
	db $02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03
.Dummy2:
	db $04,$05,$06,$00,$01,$02,$03,$04,$05,$06,$00,$01,$02,$03,$04,$05

State00_InPipe:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	BNE.b Return03CCDF
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	BNE.b CODE_03CC9D
	JSL.l SMW_GetRand_Main
	AND.b #$0F
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_SpawnPositionIndex,x
CODE_03CC9D:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_SpawnPositionIndex,x
	ORA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	TAY
	LDA.w SpawningPositionIndexes,y
	TAY
	LDA.w SpawningXPos,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	CMP.b #$06
	LDA.w LemmySpawningYPos,y
	BCC.b CODE_03CCB8
	LDA.b #$50
CODE_03CCB8:
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$08
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	BNE.b CODE_03CCCC
	JSR.w CODE_03CCE2
	JSL.l SMW_GetRand_Main
	LSR
	LSR
	AND.b #$07
CODE_03CCCC:
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_AnimationPointer,x
	TAY
	LDA.w DATA_03CC48,y
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	INC.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	LDA.w DATA_03CC51,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
Return03CCDF:
	RTS

DummyIDs:
	db $10,$20

CODE_03CCE2:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
	JSR.w CODE_03CCE8
	DEY
CODE_03CCE8:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr029_KoopaKids
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	LDA.w DummyIDs,y
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,y
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	STA.w !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,y
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_SpawnPositionIndex,x
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_SpawnPositionIndex,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	RTS

State01_Rising:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	BNE.b CODE_03CD2E
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	INC.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
CODE_03CD2E:
	LDA.b #$F8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	RTS

LemmyAndWendyAnimationFrames:
.LookAtCamera:
	db $02,$02,$02,$02,$03,$03,$03,$03
	db $03,$03,$03,$03,$02,$02,$02,$02
.WavingHands1:
	db $04,$04,$04,$04,$05,$05,$04,$05
	db $05,$04,$05,$05,$04,$04,$04,$04
.OpenMouth:
	db $06,$06,$06,$06,$07,$07,$07,$07
	db $07,$07,$07,$07,$06,$06,$06,$06
..LookSideToSide:
	db $08,$08,$08,$08,$08,$09,$09,$08
	db $08,$09,$09,$08,$08,$08,$08,$08
.WeirdFace1:
	db $0B,$0B,$0B,$0B,$0B,$0A,$0B,$0A
	db $0B,$0A,$0B,$0A,$0B,$0B,$0B,$0B
.Legs:
	db $0C,$0C,$0C,$0C,$0D,$0C,$0D,$0C
	db $0D,$0C,$0D,$0C,$0D,$0D,$0D,$0D
.WeirdFace2:
	db $0E,$0E,$0E,$0E,$0E,$0F,$0E,$0F
	db $0E,$0F,$0E,$0F,$0E,$0E,$0E,$0E
.WavingHands2:
	db $10,$10,$10,$10,$11,$12,$11,$10
	db $11,$12,$11,$10,$11,$11,$11,$11
.Dummy:
	db $13,$13,$13,$13,$13,$13,$13,$13
	db $13,$13,$13,$13,$13,$13,$13,$13

State02_OutOfPipe:
	JSR.w CheckForMarioStomp
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	BNE.b CODE_03CDDA
CODE_03CDCF:
	LDA.b #$24
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	RTS

CODE_03CDDA:
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_AnimationPointer,x
	ASL
	ASL
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.w LemmyAndWendyAnimationFrames,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

State03_Descending:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	BNE.b CODE_03CE05
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	BEQ.b CODE_03CDFD
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

CODE_03CDFD:
	STZ.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
CODE_03CE05:
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	RTS

State04_Hurt:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	BNE.b CODE_03CE2A
	INC.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_HitCounter,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_HitCounter,x
	CMP.b #$03
	BNE.b CODE_03CDCF
	LDA.b #$05
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_Sound1DF9_LemmyWendyFall
	STA.w !RAM_SMW_IO_SoundCh1
	RTS

CODE_03CE2A:
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	BNE.b CODE_03CE42
CODE_03CE2F:
	CMP.b #$24
	BNE.b CODE_03CE38
	LDY.b #!Define_SMW_Sound1DFC_Correct
	STY.w !RAM_SMW_IO_SoundCh3
CODE_03CE38:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_03CE42:
	CMP.b #$10
	BNE.b CODE_03CE4B
	LDY.b #!Define_SMW_Sound1DFC_Wrong
	STY.w !RAM_SMW_IO_SoundCh3
CODE_03CE4B:
	LSR
	LSR
	LSR
	TAY
	LDA.w DummyHurtFrames,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

DummyHurtFrames:
	db $16,$16,$15,$14

State05_Falling:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_03CE69
	CLC
	ADC.b #$03
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03CE69:
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BEQ.b CODE_03CE87
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$85
	BCC.b CODE_03CE87
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	LDA.b #!Define_SMW_Sound1DFC_LemmyWendyLandInLava
	STA.w !RAM_SMW_IO_SoundCh3
	JSL.l SMW_SpawnLavaSplash_Main
CODE_03CE87:
	BRA.b CODE_03CE2F

State06_SinkingInLava:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	BNE.b CODE_03CE9E
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	INC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
	LDA.b #!Define_SMW_LevelMusic_PassedBoss
	STA.w !RAM_SMW_IO_MusicCh1
CODE_03CE9E:
	LDA.b #$04
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	RTS

CheckForMarioStomp:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return03CEF1
	LDA.b !RAM_SMW_Player_YSpeed
	CMP.b #$10
	BMI.b CODE_03CEED
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	LDA.b #$02
	JSL.l SMW_GivePoints_Main
	JSL.l SMW_BoostMarioSpeed_Main
	LDA.b #!Define_SMW_Sound1DF9_Contact
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	BNE.b CODE_03CEDB
	LDA.b #!Define_SMW_Sound1DFC_StunEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_HitCounter,x
	CMP.b #$02
	BNE.b CODE_03CEDB
	JSL.l SMW_DespawnNonBossSprites_Main
CODE_03CEDB:
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_CurrentState,x
	LDA.b #$50
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_DummyFlag,x
	BEQ.b CODE_03CEE9
	LDA.b #$1F
CODE_03CEE9:
	STA.w !RAM_SMW_NorSpr029_KoopaKid_WendyLemmy_PhaseTimer,x
	RTS

CODE_03CEED:
	JSL.l SMW_DamagePlayer_Hurt
Return03CEF1:
	RTS

LemmyXDisp:
	db $F8,$08,$F8,$08,$00,$00
	db $F8,$08,$F8,$08,$00,$00
	db $F8,$00,$00,$00,$00,$00
	db $FB,$00,$FB,$03,$00,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$00,$00,$00,$00,$00
	db $F8,$00,$08,$00,$00,$00
	db $F8,$08,$00,$06,$00,$00
	db $F8,$08,$00,$02,$00,$00
	db $F8,$08,$00,$04,$00,$08
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00

WendyXDisp:
	db $F8,$08,$F8,$08,$00,$00
	db $F8,$08,$F8,$08,$00,$00
	db $F8,$00,$08,$00,$00,$00
	db $FB,$00,$FB,$03,$00,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$00,$08,$00,$00,$00
	db $F8,$00,$08,$00,$00,$00
	db $F8,$08,$00,$06,$00,$08
	db $F8,$08,$00,$02,$00,$08
	db $F8,$08,$00,$04,$00,$08
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$08,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00
	db $F8,$08,$00,$00,$00,$00

LemmyYDisp:
	db $04,$04,$14,$14,$00,$00
	db $04,$04,$14,$14,$00,$00
	db $00,$08,$F8,$00,$00,$00
	db $00,$08,$F8,$F8,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$00,$00,$00
	db $00,$08,$F8,$00,$00,$00
	db $00,$08,$00,$00,$00,$00
	db $05,$05,$00,$F8,$00,$00
	db $05,$05,$00,$F8,$00,$00
	db $05,$05,$00,$0F,$F8,$F8
	db $05,$05,$00,$F8,$F8,$00
	db $00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$F8,$F8,$00
	db $04,$04,$02,$00,$00,$00
	db $04,$04,$01,$00,$00,$00
	db $04,$04,$00,$00,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$00,$00,$00
	db $05,$05,$03,$00,$00,$00
	db $05,$05,$04,$00,$00,$00

WendyYDisp:
	db $04,$04,$14,$14,$00,$00
	db $04,$04,$14,$14,$00,$00
	db $00,$08,$00,$00,$00,$00
	db $00,$08,$F8,$F8,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$00,$00,$00
	db $00,$08,$00,$00,$00,$00
	db $00,$08,$08,$00,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$0F,$F8,$F8
	db $05,$05,$00,$F8,$F8,$00
	db $00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$F8,$F8,$00
	db $04,$04,$02,$00,$00,$00
	db $04,$04,$01,$00,$00,$00
	db $04,$04,$00,$00,$00,$00
	db $05,$05,$00,$F8,$F8,$00
	db $05,$05,$00,$00,$00,$00
	db $05,$05,$03,$00,$00,$00
	db $05,$05,$04,$00,$00,$00

LemmyTiles:
	db $20,$20,$26,$26,$08,$00
	db $2E,$2E,$24,$24,$08,$00
	db $00,$28,$02,$00,$00,$00
	db $04,$28,$12,$12,$00,$00
	db $22,$22,$04,$12,$12,$00
	db $20,$20,$08,$00,$00,$00
	db $00,$28,$02,$00,$00,$00
	db $0A,$28,$13,$00,$00,$00
	db $20,$20,$0C,$02,$00,$00
	db $20,$20,$0C,$02,$00,$00
	db $22,$22,$06,$03,$12,$12
	db $20,$20,$06,$12,$12,$00
	db $2A,$2A,$00,$00,$00,$00
	db $2C,$2C,$00,$00,$00,$00
	db $20,$20,$06,$12,$12,$00
	db $20,$20,$06,$12,$12,$00
	db $22,$22,$08,$00,$00,$00
	db $20,$20,$08,$00,$00,$00
	db $2E,$2E,$08,$00,$00,$00
	db $4E,$4E,$60,$43,$43,$00
	db $4E,$4E,$64,$00,$00,$00
	db $62,$62,$64,$00,$00,$00
	db $62,$62,$64,$00,$00,$00

WendyTiles:
	db $20,$20,$26,$26,$48,$00
	db $2E,$2E,$24,$24,$48,$00
	db $40,$28,$42,$00,$00,$00
	db $44,$28,$52,$52,$00,$00
	db $22,$22,$44,$52,$52,$00
	db $20,$20,$48,$00,$00,$00
	db $40,$28,$42,$00,$00,$00
	db $4A,$28,$53,$00,$00,$00
	db $20,$20,$4C,$1E,$1F,$00
	db $20,$20,$4C,$1F,$1E,$00
	db $22,$22,$44,$03,$52,$52
	db $20,$20,$44,$52,$52,$00
	db $2A,$2A,$00,$00,$00,$00
	db $2C,$2C,$00,$00,$00,$00
	db $20,$20,$46,$52,$52,$00
	db $20,$20,$46,$52,$52,$00
	db $22,$22,$48,$00,$00,$00
	db $20,$20,$48,$00,$00,$00
	db $2E,$2E,$48,$00,$00,$00
	db $4E,$4E,$66,$68,$68,$00
	db $4E,$4E,$6A,$00,$00,$00
	db $62,$62,$6A,$00,$00,$00
	db $62,$62,$6A,$00,$00,$00

LemmyProp:
	db $05,$45,$05,$45,$05,$00
	db $05,$45,$05,$45,$05,$00
	db $05,$05,$05,$00,$00,$00
	db $05,$05,$05,$45,$00,$00
	db $05,$45,$05,$05,$45,$00
	db $05,$45,$05,$00,$00,$00
	db $05,$05,$05,$00,$00,$00
	db $05,$05,$05,$00,$00,$00
	db $05,$45,$05,$05,$00,$00
	db $05,$45,$45,$45,$00,$00
	db $05,$45,$05,$05,$05,$45
	db $05,$45,$45,$05,$45,$00
	db $05,$45,$00,$00,$00,$00
	db $05,$45,$00,$00,$00,$00
	db $05,$45,$45,$05,$45,$00
	db $05,$45,$05,$05,$45,$00
	db $05,$45,$05,$00,$00,$00
	db $05,$45,$05,$00,$00,$00
	db $05,$45,$05,$00,$00,$00
	db $07,$47,$07,$07,$47,$00
	db $07,$47,$07,$00,$00,$00
	db $07,$47,$07,$00,$00,$00
	db $07,$47,$07,$00,$00,$00

WendyProp:
	db $09,$49,$09,$49,$09,$00
	db $09,$49,$09,$49,$09,$00
	db $09,$09,$09,$00,$00,$00
	db $09,$09,$09,$49,$00,$00
	db $09,$49,$09,$09,$49,$00
	db $09,$49,$09,$00,$00,$00
	db $09,$09,$09,$00,$00,$00
	db $09,$09,$09,$00,$00,$00
	db $09,$49,$09,$09,$09,$00
	db $09,$49,$49,$49,$49,$00
	db $09,$49,$09,$09,$09,$49
	db $09,$49,$49,$09,$49,$00
	db $09,$49,$00,$00,$00,$00
	db $09,$49,$00,$00,$00,$00
	db $09,$49,$49,$09,$49,$00
	db $09,$49,$09,$09,$49,$00
	db $09,$49,$09,$00,$00,$00
	db $09,$49,$09,$00,$00,$00
	db $09,$49,$09,$00,$00,$00
	db $05,$45,$05,$05,$45,$00
	db $05,$45,$05,$00,$00,$00
	db $05,$45,$05,$00,$00,$00
	db $05,$45,$05,$00,$00,$00

LemmyTileSize:
	db $02,$02,$02,$02,$02,$04
	db $02,$02,$02,$02,$02,$04
	db $02,$02,$00,$04,$04,$04
	db $02,$02,$00,$00,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$00,$04,$04,$04
	db $02,$02,$00,$04,$04,$04
	db $02,$02,$02,$00,$04,$04
	db $02,$02,$02,$00,$04,$04
	db $02,$02,$02,$00,$00,$00
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$04,$04,$04,$04
	db $02,$02,$04,$04,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04

WendyTileSize:
	db $02,$02,$02,$02,$02,$04
	db $02,$02,$02,$02,$02,$04
	db $02,$02,$00,$04,$04,$04
	db $02,$02,$00,$00,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$00,$04,$04,$04
	db $02,$02,$00,$04,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$00,$00,$00
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$04,$04,$04,$04
	db $02,$02,$04,$04,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$00,$00,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04
	db $02,$02,$02,$04,$04,$04

NumberOfTilesToDrawForLemmy:
	db $04,$04,$02,$03,$04,$02,$02,$02
	db $03,$03,$05,$04,$01,$01,$04,$04
	db $02,$02,$02,$04,$02,$02,$02

NumberOfTilesToDrawForWendy:
	db $04,$04,$02,$03,$04,$02,$02,$02
	db $04,$04,$05,$04,$01,$01,$04,$04
	db $02,$02,$02,$04,$02,$02,$02

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	ASL
	ADC.w !RAM_SMW_NorSpr_AnimationFrame,x
	ADC.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	CMP.b #$06
	BEQ.b WendyGFXRt
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l NumberOfTilesToDrawForLemmy,x
else
	LDA.w NumberOfTilesToDrawForLemmy,x
endif
	TAX
CODE_03D4A3:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w LemmyXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w LemmyYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w LemmyTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w LemmyProp,x
	ORA.b #$10
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w LemmyTileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	PLX
	DEX
	BPL.b CODE_03D4A3
CODE_03D4DD:
	PLX
	RTS

WendyGFXRt:
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l NumberOfTilesToDrawForWendy,x
else
	LDA.w NumberOfTilesToDrawForWendy,x
endif
	TAX
CODE_03D4E8:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w WendyXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w WendyYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w WendyTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w WendyProp,x
	ORA.b #$10
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w WendyTileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	PLX
	DEX
	BPL.b CODE_03D4E8
	BRA.b CODE_03D4DD
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr029_KoopaKid_Status08_IggyLarry(Address)
namespace SMW_NorSpr029_KoopaKid_Status08_IggyLarry
%InsertMacroAtXPosition(<Address>)

HurtXSpeed:
	db $00,$FC,$F8,$F8,$F8,$F8,$F8,$F8
	db $F8,$F8,$F8,$F4,$F0,$F0,$EC,$EC

WalkingAnimationFrames:
	db $00,$01,$02,$00,$01,$02,$00,$01
	db $02,$00,$01,$02,$00,$01,$02,$01

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_HurtAnimationTimer,x
	BNE.b CODE_01FB1A
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ASL
	ROL
	AND.b #$01
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_01FB1A
	INC.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_WaitBeforeNextBallThrow,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_WaitBeforeNextBallThrow,x
	AND.b #$7F
	BNE.b CODE_01FB1A
	LDA.b #$7F
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_BallThrowAnimationTimer,x
CODE_01FB1A:
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_SinkingInLavaTimer,x
	BEQ.b CODE_01FB36
	DEC
	BNE.b Return01FB35
	INC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
	LDA.b #!Define_SMW_LevelMusic_PassedBoss
	STA.w !RAM_SMW_IO_MusicCh1
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return01FB35:
	RTS

CODE_01FB36:
	JSL.l SMW_InitializeNormalSpriteRAMTables_PropertyTables
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01FB41
	JMP.w CODE_01FC08

CODE_01FB41:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_FellOffPlatformFlag,x
	BEQ.b CODE_01FB7B
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_01FB56
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01FB56:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$58
	BCC.b CODE_01FB6E
	CMP.b #$80
	BCS.b CODE_01FB6E
	LDA.b #!Define_SMW_Sound1DFC_LemmyWendyLandInLava
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_SinkingInLavaTimer,x
	JSL.l SMW_DespawnNonBossSprites_Main
CODE_01FB6E:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	JMP.w CODE_01FC0E

CODE_01FB7B:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$1F
	ORA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_BallThrowAnimationTimer,x
	BNE.b CODE_01FB99
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	PLA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b CODE_01FB99
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_01FB99:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_Misc_M7RotationLo
	BPL.b CODE_01FBA4
	CLC
	ADC.b #$08
CODE_01FBA4:
	LSR
	LSR
	LSR
	LSR
	TAY
	STY.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b #$FF
	INC
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_HurtAnimationTimer,x
	BNE.b CODE_01FBD9
	LDA.b !RAM_SMW_Misc_M7RotationHi
	BNE.b CODE_01FBC9
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b #$78
	BCC.b CODE_01FBC5
	LDA.b #$FF
	BRA.b CODE_01FBEE

CODE_01FBC5:
	LDA.b #$01
	BRA.b CODE_01FBEE

CODE_01FBC9:
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b #$78
	BCS.b CODE_01FBD5
	LDA.b #$01
	BRA.b CODE_01FBEE

CODE_01FBD5:
	LDA.b #$FF
	BRA.b CODE_01FBEE

CODE_01FBD9:
	LDA.b !RAM_SMW_Misc_M7RotationHi
	BNE.b CODE_01FBE7
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w HurtXSpeed+$08,y
	EOR.b #$FF
	INC
	BRA.b CODE_01FBEC

CODE_01FBE7:
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w HurtXSpeed+$08,y
CODE_01FBEC:
	ASL
	ASL
CODE_01FBEE:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_01FBFA
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_01FBFA:
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	AND.b #$0F
	TAY
	LDA.w WalkingAnimationFrames,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01FC08:
	JSR.w CODE_01FD50
	JSR.w CODE_01FC62
CODE_01FC0E:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_HurtAnimationTimer,x
	BNE.b CODE_01FC4E
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_01FC2A
	CPY.b #$08
	BCC.b CODE_01FC25
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_01FC25:
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01FC2A:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_BallThrowAnimationTimer,x
	BEQ.b CODE_01FC46
	PHA
	LSR
	LSR
	LSR
	TAY
	LDA.w ThrowingAnimationFrames,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	PLA
	CMP.b #$28
	BNE.b CODE_01FC46
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01FC46
	JSR.w ThrowBall
CODE_01FC46:
	JSR.w GFXRt
	PLA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	RTS

CODE_01FC4E:
	CMP.b #$10
	BCC.b CODE_01FC5A
CODE_01FC52:
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JMP.w GFXRt

CODE_01FC5A:
	CMP.b #$08
	BCC.b CODE_01FC52
	JSR.w InShellGFXRt
Return01FC61:
	RTS

CODE_01FC62:
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCS.b Return01FC61
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_FellOffPlatformFlag,x
	BNE.b Return01FC61
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b #$20
	BCC.b CODE_01FC77
	CMP.b #$D8
	BCC.b CODE_01FC84
CODE_01FC77:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	INC.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_FellOffPlatformFlag,x
CODE_01FC84:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	CLC
	ADC.b #$60
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STZ.b !RAM_SMW_Misc_ScratchRAM08
	STZ.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b #$0E
	STA.b !RAM_SMW_Misc_ScratchRAM07
	STZ.b !RAM_SMW_Misc_ScratchRAM0A
	STZ.b !RAM_SMW_Misc_ScratchRAM0B
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_01FD0A
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_DisablePlayerInteractionTimer,x
	BNE.b Return01FD09
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_DisablePlayerInteractionTimer,x
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_01FD05
	LDA.b #!Define_SMW_Sound1DFC_StunEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	JSL.l SMW_BoostMarioSpeed_Main
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_HurtAnimationTimer,x
	BNE.b Return01FD09
	LDA.b #$18
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_HurtAnimationTimer,x
	RTS

CODE_01FD05:
	JSL.l SMW_DamagePlayer_Hurt
Return01FD09:
	RTS

CODE_01FD0A:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot+$01			; Glitch: Another instance of an extended sprite slot check loop starting at 0A 
CODE_01FD0C:
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_ExtSpr05_MarioFireball
	BNE.b CODE_01FD4A
	LDA.w !RAM_SMW_ExtSpr_XPosLo,y
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STZ.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_ExtSpr_YPosLo,y
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STZ.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM07
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_01FD4A
	LDA.b #!Define_SMW_SpriteID_ExtSpr01_SmokePuff
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b #$0F
	STA.w !RAM_SMW_ExtSpr01_SmokePuff_DespawnTimer,y
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_HurtAnimationTimer,x
CODE_01FD4A:
	DEY
	CPY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
	BNE.b CODE_01FD0C
	RTS

CODE_01FD50:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$2F
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetHi
	REP.b #$20
	LDA.b !RAM_SMW_Misc_M7RotationLo
	EOR.w #$01FF
	INC
	AND.w #$01FF
	STA.b !RAM_SMW_Misc_M7RotationLo
	SEP.b #$20
	PHX
	JSL.l SMW_CheckForTiltingPlatformCollision_Main
	PLX
	REP.b #$20
	LDA.b !RAM_SMW_Misc_M7RotationLo
	EOR.w #$01FF
	INC
	AND.w #$01FF
	STA.b !RAM_SMW_Misc_M7RotationLo
	SEP.b #$20
	RTS

ThrowingAnimationFrames:
	db $04,$0B,$0B,$0B,$0B,$0A,$0A,$09
	db $09,$08,$08,$07,$04,$05,$05,$05

BallXDisp:
	db $08,$F8

ThrowBall:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$06
CODE_01FDA9:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b GenerateBall
	DEY
	BPL.b CODE_01FDA9
	RTS

GenerateBall:
	LDA.b #!Define_SMW_Sound1DF9_YoshiSpit
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr0A7_IggyBall
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.w !RAM_SMW_NorSpr0A7_IggyBall_HorizontalMovementDirection,y
	TAX
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	SEC
	SBC.b #$08
	ADC.w BallXDisp,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	SEC
	SBC.b #$18
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.b #$00
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PLX
	RTS

XDisp:
	db $F7,$FF,$00,$F8
	db $F7,$FF,$00,$F8
	db $F8,$00,$00,$F8
	db $FB,$03,$00,$F8
	db $F8,$00,$00,$F8
	db $FA,$02,$00,$F8
	db $00,$00,$F8,$00
	db $00,$F8,$00,$F8
	db $00,$00,$00,$00
	db $FB,$F8,$00,$F8
	db $F4,$F8,$00,$F8
	db $00,$F8,$00,$F8

	db $09,$09,$00,$10
	db $09,$09,$00,$10
	db $08,$08,$00,$10
	db $05,$05,$00,$10
	db $08,$08,$00,$10
	db $06,$06,$00,$10
	db $00,$08,$08,$08
	db $00,$10,$00,$10
	db $00,$08,$00,$08
	db $05,$10,$00,$10
	db $0C,$10,$00,$10
	db $00,$10,$00,$10

YDisp:
	db $FA,$F2,$00,$09
	db $F9,$F1,$00,$08
	db $F8,$F0,$00,$08
	db $FE,$F6,$00,$08
	db $FC,$F4,$00,$08
	db $FF,$F7,$00,$08
	db $00,$F0,$F8,$F0
	db $00,$00,$00,$00
	db $00,$00,$00,$00
	db $FC,$00,$00,$00
	db $F9,$00,$00,$00
	db $00,$08,$00,$08

Tiles:
	db $00,$0C,$02,$0A
	db $00,$0C,$22,$0A
	db $00,$0C,$20,$0A
	db $00,$0C,$20,$0A
	db $00,$0C,$20,$0A
	db $00,$0C,$20,$0A
	db $24,$1C,$04,$1C
	db $0E,$0D,$0E,$0D
	db $0E,$1D,$0E,$1D
	db $4A,$0D,$0E,$0D
	db $4A,$0D,$0E,$0D
	db $20,$0A,$20,$0A

IggyTiles:
	db $06,$02,$08

TileSize:
	db $02,$00,$02,$00

Prop:
	db $37,$3B

GFXRt:
	LDY.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	LDA.w Prop-$03,y
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	STY.b !RAM_SMW_Misc_ScratchRAM05
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	ROR
	LSR
	AND.b #$40
	EOR.b #$40
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDX.b #$03
CODE_01FEDE:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_01FEEE
	TXA
	CLC
	ADC.b #$30
	TAX
CODE_01FEEE:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	SEC
	SBC.b #$08
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	CLC
	ADC.b #$60
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM05
	CPX.b #$03
	BNE.b CODE_01FF22
	CMP.b #$05					;\ Note: If the current sprite is Iggy, then this will set the head graphic to Iggy's.
	BCS.b CODE_01FF22				;| However, it won't change his hair to how you see it in the ending
	LSR						;| To fix that, you'd have to rearrange some of the tiles in GFX 25 so that the Larry's hair tiles are 02 and 03, remove this LSR and use the free byte for IggyTiles.
	TAX						;|
	LDA.w IggyTiles,x				;|
	STA.w SMW_OAMBuffer[$40].Tile,y			;/
CODE_01FF22:
	LDA.w SMW_OAMBuffer[$40].Tile,y
	CMP.b #$4A
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	BCC.b CODE_01FF2D
	LDA.b #$35
CODE_01FF2D:
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	AND.b #$03
	TAX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	PLX
	DEX
	BPL.b CODE_01FEDE
	PLX
	LDY.b #$FF
	LDA.b #$03
	JSR.w SMW_FinishOAMWrite_Sub
	RTS

InShellTiles:
	db $2C,$2E,$2C,$2E

InShellProp:
	db $00,$00,$40,$00

InShellGFXRt:
	PHX
	LDY.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	LDA.w Prop-$03,y
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDY.b #$70
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfXPosLo
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_IggyLarry_CopyOfYPosLo
	CLC
	ADC.b #$60
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$03
	TAX
	LDA.w InShellTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$30
	ORA.w InShellProp,x
	ORA.b !RAM_SMW_Misc_ScratchRAM0D
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLX
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig(Address)
namespace SMW_NorSpr029_KoopaKid_Status08_MortonRoyLudwig
%InsertMacroAtXPosition(<Address>)

DATA_01CD99:
	db (SMW_InitializeMode7TilemapsAndPalettes_TilemapData_Morton-SMW_InitializeMode7TilemapsAndPalettes_TilemapData)/$10
	db (SMW_InitializeMode7TilemapsAndPalettes_TilemapData_Roy-SMW_InitializeMode7TilemapsAndPalettes_TilemapData)/$10
	db (SMW_InitializeMode7TilemapsAndPalettes_TilemapData_Ludwig-SMW_InitializeMode7TilemapsAndPalettes_TilemapData)/$10

DATA_01CD9C:
	db $00
	db $01
	db $02
	db $03
	db $04
	db $05
	db $06
	db $07
	db $08

DATA_01CDA5:
	db $00,$80

GetDrawInfo:
	JSR.w SMW_GetDrawInfo_Bank01
	RTS

Main:
	STZ.w !RAM_SMW_Player_FreezePlayerFlag
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$1B
	BCS.b CODE_01CDD5
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	CMP.b #$08
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	LDA.w DATA_01CDA5,y
	BCS.b CODE_01CDC4
	EOR.b #$80
CODE_01CDC4:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	LDA.w DATA_01CD99,y
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	CLC
	ADC.w DATA_01CD9C,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
CODE_01CDD5:
	STA.w !RAM_SMW_Misc_Mode7TilemapIndex
	JSL.l SMW_UpdateMode7SpriteAnimations_Main
	JSR.w GetDrawInfo
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01CE3D
	JSR.w CODE_01D2A8
	JSR.w CODE_01D3B1
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_Mode7RoomToLoad,x
	CMP.b #$01
	BEQ.b CODE_01CE0B
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_Ludwig_WaitBeforeShootingFire,x
	BNE.b CODE_01CE0B
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	PHA
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	PLA
	CMP.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	BEQ.b CODE_01CE0B
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_01CE0B:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

StatePtrs:
	dw CODE_01CE1E
	dw CODE_01CE3E
	dw State02_Normal
	dw State03_Hurt
	dw State04_Dying
	dw State05_ActivateLevelEnd

CODE_01CE1E:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_Mode7RoomToLoad,x
	CMP.b #$01
	BNE.b CODE_01CE34
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	INC.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarStatus
	STZ.w !RAM_SMW_Sprites_MortonAndRoyLeftPillarYPosition
	INC.b !RAM_SMW_Flag_SpritesLocked
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	RTS

CODE_01CE34:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$7E
	BCC.b Return01CE3D
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
Return01CE3D:
	RTS

CODE_01CE3E:
	STZ.b !RAM_SMW_Player_XSpeed
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_01CE4C
	CLC
	ADC.b #$03
CODE_01CE4C:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w CODE_01D0C0
	BCC.b Return01CE3D
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	CMP.b #$02
	BCC.b Return01CE3D
	JMP.w CODE_01CEA8

State02_Normal:
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	JSL.l SMW_ExecutePtr_Absolute

AttackRoutinePtrs:
	dw ProcessMortonsAttacks
	dw ProcessRoysAttacks
	dw ProcessLudwigsAttacks

ProcessLudwigsAttacks:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
	JSL.l SMW_ExecutePtr_Absolute

Ptrs01CE72:
	dw LudwigAttack00_ShootFire
	dw LudwigAttack01_InShell
	dw LudwigAttack02_Jump

LudwigAttack00_ShootFire:
	STZ.b !RAM_SMW_Misc_M7RotationLo
	STZ.b !RAM_SMW_Misc_M7RotationHi
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BEQ.b CODE_01CEA5
	LDY.b #$03
	AND.b #$30
	BNE.b CODE_01CE88
	INY
CODE_01CE88:
	TYA
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_01CE90
	LDA.b #$05
CODE_01CE90:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	AND.b #$3F
	CMP.b #$2E
	BNE.b Return01CEA4
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr029_KoopaKid_Ludwig_WaitBeforeShootingFire,x
	JSR.w CODE_01D059
Return01CEA4:
	RTS

CODE_01CEA5:
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
CODE_01CEA8:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	RTS

LudwigMaxXSpeed:
	db $30,$D0

DATA_01CEB0:
	db $1B,$1C,$1D,$1B

DATA_01CEB4:
	db $14,$EC

LudwigAttack01_InShell:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BNE.b CODE_01CEDC
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	CMP.w !RAM_SMW_NorSpr_XPosHi,x
	BNE.b CODE_01CEDC
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
	LDA.w DATA_01CEB4,y
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_RightWallXPos,x
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	LDA.b #$60
	STA.w !RAM_SMW_NorSpr029_KoopaKid_Ludwig_JumpRotationTimer,x
	LDA.b #$D8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

CODE_01CEDC:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w LudwigMaxXSpeed,y
	BEQ.b CODE_01CEEC
	CLC
	ADC.w SMW_NorSprXXX_ParachutingEnemy_Status08_DATA_01D4E7,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01CEEC:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_01CEB0,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

LudwigAttack02_Jump:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BEQ.b CODE_01CF1C
	DEC
	BNE.b CODE_01CF0F
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_Ludwig_JumpingXSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
CODE_01CF0F:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b Return01CF1B
	BPL.b CODE_01CF19
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	INC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01CF19:
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
Return01CF1B:
	RTS

CODE_01CF1C:
	JSR.w CODE_01D0C0
	BCC.b CODE_01CF2F
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01CF2F
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
	JMP.w CODE_01CEA8

CODE_01CF2F:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b CODE_01CF44
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01CF42
	CMP.b #$70
	BCS.b CODE_01CF44
CODE_01CF42:
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01CF44:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_Ludwig_JumpRotationTimer,x
	BNE.b CODE_01CF4F
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ORA.b !RAM_SMW_Misc_M7RotationHi
	BEQ.b CODE_01CF67
CODE_01CF4F:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	ASL
	LDA.b #$04
	LDY.b #$00
	BCC.b CODE_01CF5B
	LDA.b #$FC
	DEY
CODE_01CF5B:
	CLC
	ADC.b !RAM_SMW_Misc_M7RotationLo
	STA.b !RAM_SMW_Misc_M7RotationLo
	TYA
	ADC.b !RAM_SMW_Misc_M7RotationHi
	AND.b #$01
	STA.b !RAM_SMW_Misc_M7RotationHi
CODE_01CF67:
	LDA.b #$06
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01CF79
	CPY.b #$08
	BCC.b CODE_01CF79
	LDA.b #$05
	CPY.b #$10
	BCC.b CODE_01CF79
	LDA.b #$02
CODE_01CF79:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

State03_Hurt:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w CODE_01D0C0
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BEQ.b CODE_01CFB7
	CMP.b #$40
	BCC.b CODE_01CF9E
	BEQ.b CODE_01CFC6
	LDY.b #$06
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	BEQ.b CODE_01CF99
	INY
CODE_01CF99:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_01CF9E:
	LDY.w !RAM_SMW_UnusedRAM_7E18A6			; Optimization: This is not used
	LDA.b !RAM_SMW_Misc_M7AngleLo
	CMP.b #$20
	BEQ.b CODE_01CFA9
	INC.b !RAM_SMW_Misc_M7AngleLo
CODE_01CFA9:
	LDA.b !RAM_SMW_Misc_M7AngleHi
	CMP.b #$20
	BEQ.b CODE_01CFB1
	DEC.b !RAM_SMW_Misc_M7AngleHi
CODE_01CFB1:
	LDA.b #$07
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_01CFB7:
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	LDA.b !RAM_SMW_NorSpr029_KoopaKid_KoopaKidType,x
	BEQ.b Return01CFC5
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_MoveWallsInwardTimer,x
Return01CFC5:
	RTS

CODE_01CFC6:
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_HitCounter,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_HitCounter,x
	CMP.b #$03
	BCC.b Return01CFDF
CODE_01CFD0:
	LDA.b #!Define_SMW_Sound1DF9_KoopalingDead
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	LDA.b #$13
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
Return01CFDF:
	RTS

State04_Dying:
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BEQ.b CODE_01CFFC
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$01
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	BCS.b CODE_01CFF1
	DEC.w !RAM_SMW_NorSpr_YPosHi,x
CODE_01CFF1:
	DEC.b !RAM_SMW_Misc_M7AngleHi
	TYA
	AND.b #$03
	BEQ.b CODE_01CFFA
	DEC.b !RAM_SMW_Misc_M7AngleLo
CODE_01CFFA:
	BRA.b CODE_01D00F

CODE_01CFFC:
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.b #$06
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.b #$00
	AND.b #$01
	STA.b !RAM_SMW_Misc_M7RotationHi
	INC.b !RAM_SMW_Misc_M7AngleLo
	INC.b !RAM_SMW_Misc_M7AngleHi
CODE_01D00F:
	LDA.b !RAM_SMW_Misc_M7AngleHi
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$80
else
	CMP.b #$A0
endif
	BCC.b Return01D042
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_01D032
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SBC.b #$08
	STA.w !RAM_SMW_SmokeSpr_XPosLo
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	ADC.b #$08
	STA.w !RAM_SMW_SmokeSpr_YPosLo
	LDA.b #$1B
	STA.w !RAM_SMW_SmokeSpr_Timer
CODE_01D032:
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	JSL.l SMW_UpdateMode7SpriteAnimations_Main
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
Return01D042:
	RTS

State05_ActivateLevelEnd:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BNE.b Return01D056
	INC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	DEC.w !RAM_SMW_Timer_EndLevel
	LDA.b #!Define_SMW_LevelMusic_PassedBoss
	STA.w !RAM_SMW_IO_MusicCh1
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return01D056:
	RTS

DATA_01D057:
	db $FF,$F1

CODE_01D059:
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$07
CODE_01D060:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_01D069
	DEY
	BPL.b CODE_01D060
	RTS

CODE_01D069:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr034_LudwigFireball
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$03
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	PHX
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_01D057,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.b #$FF
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	PLX
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	PHX
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	STA.w !RAM_SMW_NorSpr_FacingDirection,y
	TAX
	LDA.w DATA_01D0BE,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,y
	PLX
	RTS

DATA_01D0BE:
	db $20,$E0

CODE_01D0C0:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01D0DC
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BNE.b CODE_01D0DC
	LDA.b !RAM_SMW_Misc_M7AngleHi
	LSR
	TAY
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.w DATA_01D0DE-$08,y
	BCC.b CODE_01D0DC
	LDA.w DATA_01D0DE-$08,y
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

CODE_01D0DC:
	CLC
	RTS

DATA_01D0DE:
	db $80,$83,$85,$88,$8A,$8B,$8D,$8F
	db $90,$91,$91,$92,$92,$93,$93,$94
	db $94,$95,$95,$96,$96,$97,$97,$98
	db $98,$98,$99,$99,$9A,$9A,$9B,$9B
	db $9C,$9C,$9C,$9C,$9D,$9D,$9D,$9D
	db $9E,$9E,$9E,$9E,$9E,$9F,$9F,$9F
	db $9F,$9F,$9F,$9F,$9F,$9F,$9F,$9F

ProcessMortonsAttacks:
ProcessRoysAttacks:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
	JSL.l SMW_ExecutePtr_Absolute

MortonRoyAttackPtrs:
	dw MortonRoyAttack00_Walk
	dw MortonRoyAttack01_Drop

Return01D121:
	RTS ; Unused

DATA_01D122:
	db $F0,$00,$10,$00,$F0,$00,$10,$00
	db $E8,$00,$18,$00

DATA_01D12E:
	db $00,$F0,$00,$10,$00,$F0,$00,$10
	db $00,$E8,$00,$18,$26,$26,$D8,$D8

DATA_01D13E:
	db $90,$30,$30,$90

DATA_01D142:
	db $00,$01,$02,$01

MortonRoyAttack00_Walk:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_HitCounter,x
	CPY.b #$02
	BCS.b CODE_01D151
	LSR
CODE_01D151:
	AND.b #$03
	TAY
	LDA.w DATA_01D142,y
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_01D15E
	LDA.b #$05
CODE_01D15E:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_MoveWallsInwardTimer,x
	BEQ.b CODE_01D17C
	LDY.b !RAM_SMW_NorSpr_XPosLo,x
	CPY.b #$50
	BCC.b CODE_01D17C
	CPY.b #$80
	BCS.b CODE_01D17C
	DEC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_MoveWallsInwardTimer,x
	LSR
	BCS.b CODE_01D17C
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_LeftWallXPos,x
	DEC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_RightWallXPos,x
CODE_01D17C:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_LeftWallXPos,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_RightWallXPos,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	STA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_Misc_ScratchRAM09
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ASL
	BEQ.b CODE_01D19A
	JMP.w CODE_01D224

CODE_01D19A:
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	TYA
	LSR
	BCS.b CODE_01D1B5
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CPY.b #$00
	BNE.b CODE_01D1AE
	CMP.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_LeftWallXPos,x
	BCC.b CODE_01D215
	BRA.b CODE_01D1D8

CODE_01D1AE:
	CMP.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_RightWallXPos,x
	BCS.b CODE_01D215
	BRA.b CODE_01D1D8

CODE_01D1B5:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	BNE.b CODE_01D1BE
	INY
	INY
	INY
	INY
CODE_01D1BE:
	LDA.w !RAM_SMW_Misc_ScratchRAM05,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CPY.b #$03
	BEQ.b ADDR_01D1D3
	CMP.w DATA_01D13E,y
	BCC.b CODE_01D215
	BRA.b CODE_01D1D8

ADDR_01D1D3:
	CMP.w DATA_01D13E,y
	BCS.b CODE_01D215
CODE_01D1D8:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_HitCounter,x
	CMP.b #$02
	BCC.b CODE_01D1E1
	LDA.b #$02
CODE_01D1E1:
	ASL
	ASL
	ADC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	TAY
	LDA.w DATA_01D122,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w DATA_01D12E,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	BNE.b CODE_01D201
	EOR.b #$02
CODE_01D201:
	CMP.b #$02
	BNE.b Return01D214
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$10
	CMP.b #$20
	BCS.b Return01D214
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
Return01D214:
	RTS

CODE_01D215:
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	CLC
	ADC.w DATA_01D23D,y
	AND.b #$03
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
CODE_01D224:
	LDY.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.w DATA_01D239,y
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.w DATA_01D23B,y
	AND.b #$01
	STA.b !RAM_SMW_Misc_M7RotationHi
	RTS

DATA_01D239:
	db $FC,$04

DATA_01D23B:
	db $FF,$00

DATA_01D23D:
	db $FF,$01

MortonRoyAttack01_Drop:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	BEQ.b CODE_01D25E
	CMP.b #$01
	BNE.b Return01D2A7
	STZ.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_RotationDirection,x
	ASL
	EOR.b #$02
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	RTS

CODE_01D25E:
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$70
	BCS.b CODE_01D271
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01D271:
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ORA.b !RAM_SMW_Misc_M7RotationHi
	BEQ.b CODE_01D286
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.b #$00
	AND.b #$01
	STA.b !RAM_SMW_Misc_M7RotationHi
CODE_01D286:
	JSR.w CODE_01D0C0
	BCC.b Return01D2A7
	LDA.b #$20
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_01D299
	LDA.b #$28
	STA.w !RAM_SMW_Timer_StunPlayer
CODE_01D299:
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$28
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	STZ.b !RAM_SMW_Misc_M7RotationLo
	STZ.b !RAM_SMW_Misc_M7RotationHi
Return01D2A7:
	RTS

CODE_01D2A8:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	CMP.b #$03
	BCS.b Return01D318
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_Mode7RoomToLoad,x			;\ Note: This RAM address is either 00 or 01, so this will never branch.
	CMP.b #$03									;| Although, given some unused data in the init routine, perhaps this was a leftover for Wendy/Lemmy?
	BNE.b CODE_01D2BD								;/
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_AttackPointer,x			;\ Note: Morton/Roy/Ludwig don't have an attack state 03.
	CMP.b #$03									;| Change this to CMP.b #$02 to fix the oddity where you can jump on Ludwig's head while he is jumping and cause him to not enter his shell after his hurt animation ends.
	BCS.b Return01D318								;/
CODE_01D2BD:
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSR.w CODE_01D40B
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return01D318
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_DisableMarioContactTimer,x
	BNE.b Return01D318
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_DisableMarioContactTimer,x
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_01D319
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$10
	BCS.b CODE_01D2E3
	CMP.b #$06
	BCS.b ADDR_01D31E
CODE_01D2E3:
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$08
	CMP.b !RAM_SMW_NorSpr_YPosLo,x
	BCS.b ADDR_01D31E
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoy_MovementDirection,x
	LSR
	BCS.b CODE_01D334
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return01D31D
	JSR.w CODE_01D351
	LDA.b #$D0
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DF9_Contact
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$1B
	BCC.b CODE_01D379
ADDR_01D309:
	LDY.b #$20
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$08
	CMP.b !RAM_SMW_Player_XPosLo
	BMI.b ADDR_01D316
	LDY.b #$E0
ADDR_01D316:
	STY.b !RAM_SMW_Player_XSpeed
Return01D318:
	RTS

CODE_01D319:
	JSL.l SMW_DamagePlayer_Hurt
Return01D31D:
	RTS

ADDR_01D31E:
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b ADDR_01D32C
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
	RTS

ADDR_01D32C:
	JSR.w ADDR_01D309
	LDA.b #$D0
	STA.b !RAM_SMW_Player_YSpeed
	RTS

CODE_01D334:
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_01D342
	LDA.b #$20
	STA.b !RAM_SMW_Player_YSpeed
	RTS

CODE_01D342:
	LDY.b #$20
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	BPL.b CODE_01D34A
	LDY.b #$E0
CODE_01D34A:
	STY.b !RAM_SMW_Player_XSpeed
	LDA.b #$B0
	STA.b !RAM_SMW_Player_YSpeed
	RTS

CODE_01D351:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	RTS

CODE_01D379:
	LDA.b #$18
	STA.b !RAM_SMW_Misc_M7AngleLo
	PHX
	LDA.b !RAM_SMW_Misc_M7AngleHi
	LSR
	TAX
	LDA.b #$28
	STA.b !RAM_SMW_Misc_M7AngleHi
	LSR
	TAY
	LDA.w DATA_01D0DE-$08,y
	SEC
	SBC.w DATA_01D0DE-$08,x
	PLX
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_PhaseTimer,x
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	LDA.b #!Define_SMW_Sound1DFC_StunEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	RTS

CODE_01D3B1:
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_CurrentState,x
	CMP.b #$03
	BCS.b Return01D40A
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot+$01			; Glitch: $0A? Don't the extended sprite slots go from $00-$09?
CODE_01D3BA:
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_ExtSpr05_MarioFireball
	BNE.b CODE_01D405
	LDA.w !RAM_SMW_ExtSpr_XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !RAM_SMW_ExtSpr_YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_YPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHY
	JSR.w CODE_01D40B
	PLY
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_01D405
	LDA.b #!Define_SMW_SpriteID_ExtSpr01_SmokePuff
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b #$0F
	STA.w !RAM_SMW_ExtSpr01_SmokePuff_DespawnTimer,y
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	INC.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_HitCounter,x
	LDA.w !RAM_SMW_NorSpr029_KoopaKid_MortonRoyLudwig_HitCounter,x
	CMP.b #$0C
	BCC.b CODE_01D405
	JSR.w CODE_01CFD0
CODE_01D405:
	DEY
	CPY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
	BNE.b CODE_01D3BA
Return01D40A:
	RTS

CODE_01D40B:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$69
	LDA.b #$08
	BCC.b CODE_01D42C
	ADC.b #$0A
CODE_01D42C:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_RegularPiranhaPlant_Status01(Address)
namespace SMW_NorSprXXX_RegularPiranhaPlant_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	ASL.w !RAM_SMW_NorSpr_YXPPCCCT,x
	SEC
	ROR.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
ShiftSpriteDown:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	DEC.b !RAM_SMW_NorSpr_YPosLo,x				; LM: Sprite 52's (Moving ledge hole in ghost house) init routine is moved to here to fix a bug when placing it at the top of a subscreen (2.53+)
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$FF
	BNE.b Return
	DEC.w !RAM_SMW_NorSpr_YPosHi,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Main, SMW_NorSpr02A_UpsideDownPiranhaPlant_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_ShiftSpriteDown, SMW_NorSpr01A_ClassicPiranhaPlant_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_ShiftSpriteDown, SMW_NorSpr04B_PipeLakitu_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_ShiftSpriteDown, SMW_NorSpr04F_JumpingPiranhaPlant_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_ShiftSpriteDown, SMW_NorSpr050_FireSpittingJumpingPiranhaPlant_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSprStatus08_Return)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr01B_Football_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr02B_SumoLightning_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr02F_PortableSpringboard_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr034_LudwigFireball_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr036_Unused_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr03F_ParachuteGoomba_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr040_ParachuteBobOmb_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr045_DirectionalCoins_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr053_ThrowBlock_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr06A_CoinGameCloud_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr06D_InvisibleBlock_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr07C_PrincessPeach_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr07D_PBalloon_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr07E_FlyingRedCoin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr07F_Flying1up_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr085_Unused_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr087_LakituCloud_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr08A_Bird_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr08B_FireplaceSmoke_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr08D_GhostHouseDoor_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr08E_WarpHole_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr09C_HammerBroPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0A1_BowserBowlingBall_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0A2_MechaKoopa_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0A7_IggyBall_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0A8_Blargg_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0AE_FishinBoo_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0AF_BooBlock_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0B2_FallingSpike_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0B5_SinkingFireball_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0B8_CarrotTopLiftUpperLeft_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0B9_MessageBox_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0BB_MovingCastleStone_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0BE_Swooper_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0C4_GreyFallingPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0C7_InvisibleMushroom_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr0C8_LightSwitch_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr02D_BabyYoshi_Status08_Main)			; Note: The Baby Yoshi's "Main" state is status 09 (Stunned), so the main routine will never execute.
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status01_Return, SMW_NorSpr053_ThrowBlock_Status08_Main) 			; Note: The Throw Block's "Main" state is status 09 (Stunned), so the main routine will never execute.
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSprXXX_RegularPiranhaPlant_Status08(Address)
namespace SMW_NorSprXXX_RegularPiranhaPlant_Status08
%InsertMacroAtXPosition(<Address>)

YSpeed:
	db $00,$F0,$00,$10

PhaseTimers:
	db $20,$30,$20,$30

Main:
	LDA.w !RAM_SMW_NorSprXXX_RegularPiranhaPlant_PlayerIsCloseFlag,x
	BNE.b CODE_018E9A
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b CODE_018E87
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_018E87:
	JSR.w SMW_GenericGFXRtDraw2Tiles16x16sStacked_Sub
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$42].Prop,y
	AND.b #$F1
	ORA.b #$0B
	STA.w SMW_OAMBuffer[$42].Prop,y
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_018E9A:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return018EC7
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.w !RAM_SMW_NorSprXXX_RegularPiranhaPlant_PlayerIsCloseFlag,x
	BNE.b CODE_018EAC
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
CODE_018EAC:
	LDA.b !RAM_SMW_NorSprXXX_RegularPiranhaPlant_CurrentState,x
	AND.b #$03
	TAY
	LDA.w !RAM_SMW_NorSprXXX_RegularPiranhaPlant_PhaseTimer,x
	BEQ.b ChangePiranhaState
	LDA.w YSpeed,y
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr02A_UpsideDownPiranhaPlant
	BNE.b CODE_018EC2
	EOR.b #$FF
	INC
CODE_018EC2:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
Return018EC7:
	RTS

ChangePiranhaState:
	LDA.b !RAM_SMW_NorSprXXX_RegularPiranhaPlant_CurrentState,x
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_018EE1
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$1B
	CMP.b #$37
	LDA.b #$01
	STA.w !RAM_SMW_NorSprXXX_RegularPiranhaPlant_PlayerIsCloseFlag,x
	BCC.b Return018EEE
CODE_018EE1:
	STZ.w !RAM_SMW_NorSprXXX_RegularPiranhaPlant_PlayerIsCloseFlag,x
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w PhaseTimers,y
	STA.w !RAM_SMW_NorSprXXX_RegularPiranhaPlant_PhaseTimer,x
	INC.b !RAM_SMW_NorSprXXX_RegularPiranhaPlant_CurrentState,x
Return018EEE:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status08_Main, SMW_NorSpr01A_ClassicPiranhaPlant_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_RegularPiranhaPlant_Status08_Main, SMW_NorSpr02A_UpsideDownPiranhaPlant_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr02B_SumoLightning_Status08(Address)
namespace SMW_NorSpr02B_SumoLightning_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr02B_SumoLightning_Status08(Address)
namespace SMW_NorSpr02B_SumoLightning_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.w !RAM_SMW_NorSpr02B_SumoLightning_SpawnFireTimer,x
	BNE.b CODE_02DEFC
	LDA.b #$30
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.w !RAM_SMW_NorSpr02B_SumoLightning_DisableBlockCollisionTimer,x
	BNE.b CODE_02DEEA
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02DEEA
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$22
	STA.w !RAM_SMW_NorSpr02B_SumoLightning_SpawnFireTimer,x
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b CODE_02DEEA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	JSL.l SMW_SpawnSmokePuff_Main
CODE_02DEEA:
	LDA.b #$00
	JSL.l SMW_GenericGFXRtDraw4Tiles8x8Square_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$41].Prop,y
	EOR.b #$C0
	STA.w SMW_OAMBuffer[$41].Prop,y
	RTS

CODE_02DEFC:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b #$01
	BNE.b CODE_02DF05
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_02DF05:
	AND.b #$0F
	CMP.b #$01
	BNE.b Return02DF21
	STA.w !RAM_SMW_Flag_RunClusterSprites
	JSR.w CODE_02DF2C
	INC.w !RAM_SMW_NorSpr02B_SumoLightning_NumberOfFlamesSpawned,x
	LDA.w !RAM_SMW_NorSpr02B_SumoLightning_NumberOfFlamesSpawned,x
	CMP.b #$01
	BEQ.b Return02DF21
	JSR.w CODE_02DF2C
	INC.w !RAM_SMW_NorSpr02B_SumoLightning_NumberOfFlamesSpawned,x
Return02DF21:
	RTS

FireInitialXPosLo:
	db $FC,$0C,$EC,$1C,$DC

FireInitialXPosHi:
	db $FF,$00,$FF,$00,$FF

CODE_02DF2C:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b #!Define_SMW_MaxClusterSpriteSlot-$0A
CODE_02DF37:
	LDA.w !RAM_SMW_ClusterSpr_SpriteID,y
	BEQ.b CODE_02DF4C
	DEY
	BPL.b CODE_02DF37
	DEC.w !RAM_SMW_ClusterSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_02DF49
	LDA.b #!Define_SMW_MaxClusterSpriteSlot-$0A
	STA.w !RAM_SMW_ClusterSpr_SlotToOverwriteWhenSlotsFull
CODE_02DF49:
	LDY.w !RAM_SMW_ClusterSpr_SlotToOverwriteWhenSlotsFull
CODE_02DF4C:
	PHX
	LDA.w !RAM_SMW_NorSpr02B_SumoLightning_NumberOfFlamesSpawned,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w FireInitialXPosLo,x
	STA.w !RAM_SMW_ClusterSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w FireInitialXPosHi,x
	STA.w !RAM_SMW_ClusterSpr_XPosHi,y
	PLX
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$10
	STA.w !RAM_SMW_ClusterSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SEC
	SBC.b #$00
	STA.w !RAM_SMW_ClusterSpr_YPosHi,y
	LDA.b #$7F
	STA.w !RAM_SMW_ClusterSpr06_SumoBroFlame_DespawnTimer,y
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,y
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,y
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b Return02DF8A
	LDA.b #!Define_SMW_SpriteID_ClusterSpr06_SumoBroFlame
	STA.w !RAM_SMW_ClusterSpr_SpriteID,y
Return02DF8A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr02C_YoshiEgg_Status01(Address)
namespace SMW_NorSpr02C_YoshiEgg_Status01
%InsertMacroAtXPosition(<Address>)

EggPalette:
	db $09,$07,$05,$07

Main:
;$018339
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w EggPalette,y
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	INC.w !RAM_SMW_NorSpr02C_YoshiEgg_DontHatchYetFlag,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr02C_YoshiEgg_Status08(Address)
namespace SMW_NorSpr02C_YoshiEgg_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01F75C:
	db $00,$01,$01,$01

YoshiEggTiles:
	db $62,$02,$02,$00

Main:
	LDA.w !RAM_SMW_NorSpr02C_YoshiEgg_DontHatchYetFlag,x
	BEQ.b CODE_01F799
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b CODE_01F78D
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$20
	CMP.b #$40
	BCS.b CODE_01F78D
	STZ.w !RAM_SMW_NorSpr02C_YoshiEgg_DontHatchYetFlag,x
	JSL.l SMW_PrepareToHatchNormalSpriteYoshiEgg_Main
	LDA.b #$2D
	LDY.w !RAM_SMW_Yoshi_StrayYoshiFlag
	BEQ.b CODE_01F78A
	LDA.b #$78
CODE_01F78A:
	STA.w !RAM_SMW_NorSpr02C_YoshiEgg_ContentsOfEgg,x
CODE_01F78D:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$00
	STA.w SMW_OAMBuffer[$40].Tile,y
	RTS

CODE_01F799:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BEQ.b CODE_01F7C2
	LSR
	LSR
	LSR
	TAY
	LDA.w YoshiEggTiles,y
	PHA
	LDA.w DATA_01F75C,y
	PHA
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$FE
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	STA.w SMW_OAMBuffer[$40].Tile,y
	RTS

CODE_01F7C2:
	JSR.w CODE_01F7C8
	JMP.w CODE_01F83D

CODE_01F7C8:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return01F82C
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDY.b #$03
	LDX.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_01F7DF:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,x
	BEQ.b CODE_01F7F4
CODE_01F7E4:
	DEX
	BPL.b CODE_01F7DF
	DEC.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_01F7F1
	LDA.b #!Define_SMW_MaxMinorExtendedSpriteSlot
	STA.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_01F7F1:
	LDX.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_01F7F4:
	LDA.b #!Define_SMW_SpriteID_MExtSpr03_EggShell
	STA.w !RAM_SMW_MExtSpr_SpriteID,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w EggShellInitialXPosLo,y
	STA.w !RAM_SMW_MExtSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w EggShellInitialYPosLo,y
	STA.w !RAM_SMW_MExtSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_MExtSpr_YPosHi,x
	LDA.w EggShellInitialYSpeed,y
	STA.w !RAM_SMW_MExtSpr_YSpeed,x
	LDA.w EggShellInitialXSpeed,y
	STA.w !RAM_SMW_MExtSpr_XSpeed,x
	TYA
	ASL
	ASL
	ASL
	ASL
	ASL
	ASL
	ORA.b #$28
	STA.w !RAM_SMW_MExtSpr_Timer,x
	DEY
	BPL.b CODE_01F7E4
	PLX
Return01F82C:
	RTS

EggShellInitialYPosLo:
	db $00,$00,$08,$08

EggShellInitialXPosLo:
	db $00,$08,$00,$08

EggShellInitialYSpeed:
	db $E8,$E8,$F4,$F4

EggShellInitialXSpeed:
	db $FA,$06,$FD,$03

CODE_01F83D:
	LDA.w !RAM_SMW_NorSpr02C_YoshiEgg_ContentsOfEgg,x
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	BEQ.b CODE_01F86C
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BNE.b CODE_01F867
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$0E
	PHA
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$F1
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	RTS

CODE_01F867:
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	RTS

CODE_01F86C:
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JMP.w SMW_ProcessStunnedNormalSprite_StunnedBabyYoshi_CODE_01A2B5
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_PrepareToHatchNormalSpriteYoshiEgg(Address)
namespace SMW_PrepareToHatchNormalSpriteYoshiEgg
%InsertMacroAtXPosition(<Address>)

Entry2:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
Main:
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.b #!Define_SMW_Sound1DFC_EggHatch
	STA.w !RAM_SMW_IO_SoundCh3
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr02D_BabyYoshi_Status01(Address)
namespace SMW_NorSpr02D_BabyYoshi_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr02D_BabyYoshi_Status01_Main, SMW_NorSpr080_Key_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_CheckIfBabyYoshiCanEatNormalSprite(Address)
namespace SMW_CheckIfBabyYoshiCanEatNormalSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_02EA50:
	TYA
	CMP.w !RAM_SMW_NorSpr_Table7E160E,x
	BEQ.b CODE_02EA86
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b CODE_02EA86
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_02EA86
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_02EA86
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr070_Pokey
	BEQ.b CODE_02EA86
	CMP.b #!Define_SMW_SpriteID_NorSpr00E_Keyhole
	BEQ.b CODE_02EA86
	CMP.b #!Define_SMW_SpriteID_NorSpr01D_HoppingFlame
	BCC.b CODE_02EA83
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	AND.b #!Define_SMW_NorSpr_1686Prop_Inedible|!Define_SMW_NorSpr_1686Prop_StayInYoshisMouth
	ORA.w !RAM_SMW_GrowingYoshiTimer
	BNE.b CODE_02EA86
CODE_02EA83:
	JSR.w CODE_02EA8A
CODE_02EA86:
	DEY
	BPL.b CODE_02EA50
	RTL

CODE_02EA8A:
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return02EACD
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	BEQ.b CODE_02EAA9
	JSL.l BabyYoshiCanEatSprite
	LDA.w !RAM_SMW_GrowingYoshiTimer
	BNE.b ADDR_02EACE
CODE_02EAA9:
	LDA.b #$37
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	LDY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	STA.w !RAM_SMW_NorSpr_CurrentLayerPriority,y
	LDA.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	STA.w !RAM_SMW_NorSpr_Table7E160E,x
	STZ.w !RAM_SMW_NorSpr_Table7E157C,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.w !RAM_SMW_NorSpr_XPosHi,y
	BCC.b Return02EACD
	INC.w !RAM_SMW_NorSpr_Table7E157C,x
Return02EACD:
	RTS

ADDR_02EACE:
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E163E,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_CheckIfBabyYoshiCanEatNormalSprite(Address)
namespace SMW_CheckIfBabyYoshiCanEatNormalSprite
%InsertMacroAtXPosition(<Address>)

BabyYoshiCanEatSprite:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

ChangingItemSpriteType:
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr077_Feather
	db !Define_SMW_SpriteID_NorSpr076_Star

Sub:
	LDY.w !RAM_SMW_NorSpr02D_BabyYoshi_SlotOfSpriteBeingEaten,x
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_Sound1DF9_YoshiGulp
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SlotOfSpriteBeingEaten,y
	BNE.b CODE_03C09B
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr081_ChangingItem
	BNE.b CODE_03C054
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w ChangingItemSpriteType,y
CODE_03C054:
	CMP.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	BCC.b CODE_03C09B
	CMP.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom
	BCS.b CODE_03C09B
ADDR_03C05C:
	STZ.w !RAM_SMW_Yoshi_SwallowTimer
	STZ.w !RAM_SMW_Yoshi_YoshiHasWings
	LDA.b #!Define_SMW_SpriteID_NorSpr035_Yoshi
	STA.w !RAM_SMW_NorSpr_SpriteID,x
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_Sound1DFC_MountYoshi
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SBC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	PHA
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	AND.b #$FE
	STA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	DEC.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.b #$40
	STA.w !RAM_SMW_GrowingYoshiTimer
	RTS

CODE_03C09B:
	INC.w !RAM_SMW_NorSpr02D_BabyYoshi_SpritesEatenCounter,x
	LDA.w !RAM_SMW_NorSpr02D_BabyYoshi_SpritesEatenCounter,x
	CMP.b #$05
	BNE.b CODE_03C0A7
	BRA.b ADDR_03C05C

CODE_03C0A7:
	JSL.l SMW_GiveCoins_OneCoin
	LDA.b #$01
	JSL.l SMW_GivePoints_Main
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SetBabyYoshiDynamicGraphicsPointer(Address)
namespace SMW_SetBabyYoshiDynamicGraphicsPointer
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].Tile,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$06
	STA.w SMW_OAMBuffer[$40].Tile,y
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX33+!Define_SMW_Graphics_StartOfDynamicSpriteTiles
	STA.w SMW_DynamicSpritePointersTop[$03].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$03].LowByte
	SEP.b #$20
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_WallFollowers_Status01(Address)
namespace SMW_NorSprXXX_WallFollowers_Status01
%InsertMacroAtXPosition(<Address>)

DATA_0183EF:
	db $08,$00,$08

SpikeTopEntry:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	EOR.b #$01
	ASL
	ASL
	ASL
	ASL
	JSR.w CODE_01841D
	STZ.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BRA.b CODE_01840E

WallFollowUrchinEntry:
	INC.b !RAM_SMW_NorSpr_YPosLo,x
	BNE.b InitFuzzBallSpark
	INC.w !RAM_SMW_NorSpr_YPosHi,x
InitFuzzBallSpark:
SparkyEntry:
HotheadEntry:
	JSR.w CODE_01841B
CODE_01840E:
	LDA.w !RAM_SMW_NorSprXXX_WallFollowers_RotationDirection,x
	EOR.b #$10
	STA.w !RAM_SMW_NorSprXXX_WallFollowers_RotationDirection,x
	LSR
	LSR
	STA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	RTS

FixedUrchinEntry:
WallDetectUrchinEntry:
CODE_01841B:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
CODE_01841D:
	LDY.b #$00
	AND.b #$10
	STA.w !RAM_SMW_NorSprXXX_WallFollowers_RotationDirection,x
	BNE.b CODE_018427
	INY
CODE_018427:
	LDA.w DATA_0183EF,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w DATA_0183EF+$01,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
RipVanFishEntry:
	INC.w !RAM_SMW_NorSpr_InLiquidFlag,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_SpikeTopEntry, SMW_NorSpr02E_SpikeTop_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_FixedUrchinEntry, SMW_NorSpr03A_FixedUrchin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_WallDetectUrchinEntry, SMW_NorSpr03B_WallDetectUrchin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_WallFollowUrchinEntry, SMW_NorSpr03C_WallFollowUrchin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_RipVanFishEntry, SMW_NorSpr03D_RipVanFish_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_SparkyEntry, SMW_NorSpr0A5_Sparky_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status01_HotheadEntry, SMW_NorSpr0A6_Hothead_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSprXXX_WallFollowers_Status08(Address)
namespace SMW_NorSprXXX_WallFollowers_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #Bank02>>16
	PHA
	PLB
	JSL.l Bank02
	PLB
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status08_Main, SMW_NorSpr02E_SpikeTop_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status08_Main, SMW_NorSpr03A_FixedUrchin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status08_Main, SMW_NorSpr03B_WallDetectUrchin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status08_Main, SMW_NorSpr03C_WallFollowUrchin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status08_Main, SMW_NorSpr0A5_Sparky_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallFollowers_Status08_Main, SMW_NorSpr0A6_Hothead_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_WallFollowers_Status08(Address)
namespace SMW_NorSprXXX_WallFollowers_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $08,$00,$F8,$00
	db $F8,$00,$08,$00

YSpeed:
	db $00,$08,$00,$F8
	db $00,$08,$00,$F8

DATA_02BC9F:
	db $01,$FF,$FF,$01
	db $FF,$01,$01,$FF

DATA_02BCA7:
	db $01,$01,$FF,$FF
	db $01,$01,$FF,$FF

DATA_02BCAF:
	db $01,$04,$02,$08
	db $02,$04,$01,$08

SpikeTopAnimationFramesOffset:
	db $00,$02,$00,$02
	db $00,$02,$00,$02
	db $05,$04,$05,$04
	db $05,$04,$05,$04

SpikeTopDirection:
	db $00,$C0,$C0,$00
	db $40,$80,$80,$40
	db $80,$C0,$40,$00
	db $C0,$80,$00,$40

UrchinAnimationFrames:
	db $00,$01,$02,$01

Bank02:
	JSL.l SMW_CheckForNormalSpriteToNormalSpriteCollision_Main
	JSL.l SMW_GetRand_Main
	AND.b #$FF
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02BCEE
	LDA.b #$0C
	STA.w !RAM_SMW_NorSprXXX_WallFollowers_BlinkingAnimationTimer,x
CODE_02BCEE:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr02E_SpikeTop
	BNE.b CODE_02BD23
	LDY.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	LDA.w !RAM_SMW_NorSpr02E_SpikeTop_DiagonalAnimationFrameTimer,x
	BEQ.b CODE_02BD04
	TYA
	CLC
	ADC.b #$08
	TAY
	LDA.b #$00
	BRA.b CODE_02BD0B

CODE_02BD04:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$01
CODE_02BD0B:
	CLC
	ADC.w SpikeTopAnimationFramesOffset,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$3F
	ORA.w SpikeTopDirection,y
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	BRA.b CODE_02BD2F

CODE_02BD23:
	CMP.b #!Define_SMW_SpriteID_NorSpr0A5_Sparky
	BCC.b CODE_02BD2C
	JSR.w SparkyGFXRt
	BRA.b CODE_02BD2F

CODE_02BD2C:
	JSR.w UrchinGFXRt
CODE_02BD2F:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_02BD3F
	STZ.w !RAM_SMW_NorSprXXX_Urchins_AnimationFrameCounter,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSprXXX_WallFollowers_BlinkingAnimationTimer,x
	RTL

CODE_02BD3F:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02BD74
	JSR.w SMW_SubOffscreen_Bank02_Entry4
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr02E_SpikeTop
	BEQ.b CODE_02BDA7
	CMP.b #!Define_SMW_SpriteID_NorSpr03C_WallFollowUrchin
	BEQ.b CODE_02BDB3
	CMP.b #!Define_SMW_SpriteID_NorSpr0A5_Sparky
	BEQ.b CODE_02BDB3
	CMP.b #!Define_SMW_SpriteID_NorSpr0A6_Hothead
	BEQ.b CODE_02BDB3
	LDA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	AND.b #$01
	JSL.l SMW_ExecutePtr_Absolute

UrchinPtrs:
	dw CODE_02BD68
	dw CODE_02BD75

CODE_02BD68:
	LDA.w !RAM_SMW_NorSpr03A_FixedUrchin_PhaseTimer,x
	BNE.b Return02BD74
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr03A_FixedUrchin_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr03A_FixedUrchin_CurrentState,x
Return02BD74:
	RTL

CODE_02BD75:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr03B_WallDetectUrchin
	BEQ.b CODE_02BD80
	LDA.w !RAM_SMW_NorSpr03A_FixedUrchin_PhaseTimer,x
	BEQ.b CODE_02BD91
CODE_02BD80:
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$0F
	BEQ.b Return02BDA6
CODE_02BD91:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr03A_FixedUrchin_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr03A_FixedUrchin_CurrentState,x
Return02BDA6:
	RTL

CODE_02BDA7:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$E0
	BCC.b CODE_02BDB3
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_02BDB3:
	LDA.w !RAM_SMW_NorSprXXX_WallFollowers_TurnOnCornerTimer,x
	BNE.b CODE_02BDE7
	LDY.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	LDA.w DATA_02BCA7,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w DATA_02BC9F,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$0F
	BNE.b CODE_02BDE7
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr02E_SpikeTop_DiagonalAnimationFrameTimer,x
	LDA.b #$38
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr03C_WallFollowUrchin
	BEQ.b CODE_02BDE4
	LDA.b #$1A
	CPY.b #!Define_SMW_SpriteID_NorSpr0A5_Sparky
	BNE.b CODE_02BDE4
	LSR
	NOP
CODE_02BDE4:
	STA.w !RAM_SMW_NorSprXXX_WallFollowers_TurnOnCornerTimer,x
CODE_02BDE7:
	LDA.b #$20
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr03C_WallFollowUrchin
	BEQ.b CODE_02BDF7
	LDA.b #$10
	CPY.b #!Define_SMW_SpriteID_NorSpr0A5_Sparky
	BNE.b CODE_02BDF7
	LSR
	NOP
CODE_02BDF7:
	CMP.w !RAM_SMW_NorSprXXX_WallFollowers_TurnOnCornerTimer,x
	BNE.b CODE_02BE0E
	INC.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	LDA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	CMP.b #$04
	BNE.b CODE_02BE06
	STZ.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
CODE_02BE06:
	CMP.b #$08
	BNE.b CODE_02BE0E
	LDA.b #$04
	STA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
CODE_02BE0E:
	LDY.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.w DATA_02BCAF,y
	BEQ.b CODE_02BE2F
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr02E_SpikeTop_DiagonalAnimationFrameTimer,x
	DEC.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	LDA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	BPL.b CODE_02BE27
	LDA.b #$03
	BRA.b CODE_02BE2D

CODE_02BE27:
	CMP.b #$03
	BNE.b CODE_02BE2F
	LDA.b #$07
CODE_02BE2D:
	STA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
CODE_02BE2F:
	LDY.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A5_Sparky
	BNE.b CODE_02BE45
	ASL.b !RAM_SMW_NorSpr_XSpeed,x
	ASL.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02BE45:
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	RTL

FuzzyProp:
	db $05,$45

SparkyGFXRt:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A5_Sparky
	BNE.b HotheadGFXRt
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_Graphics_LevelSpriteGraphicsSetting
	CMP.b #$02
	BNE.b CODE_02BE79
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$01
	TAX
	LDA.b #$C8
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w FuzzyProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	RTS

CODE_02BE79:
	LDA.b #$0A
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$0C
	ASL
	ASL
	ASL
	ASL
	EOR.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$40].Prop,y
	RTS

HotheadXDisp:
	db $F8,$08,$F8,$08

HotheadYDisp:
	db $F8,$F8,$08,$08

HotheadTiles:
	db $0C,$0E,$0E
	db $0C,$0E,$0C,$0C,$0E

HotheadProp:
	db $05,$05,$C5,$C5
	db $45,$45,$85,$85

HotheadEyesXDisp:
	db $07,$07,$01,$01
	db $01,$01,$07,$07

HotheadEyesYDisp:
	db $00,$08,$08,$00
	db $00,$08,$08,$00

HotheadGFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	TYA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDX.b #$03
CODE_02BEC9:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w HotheadXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w HotheadYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w HotheadTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w HotheadProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02BEC9
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	PHA
	LDY.b #$02
	LDA.b #$03
	JSR.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$09
	LDY.w !RAM_SMW_NorSprXXX_WallFollowers_BlinkingAnimationTimer,x
	BEQ.b CODE_02BF13
	LDA.b #$19
CODE_02BF13:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	SEC
	SBC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	PHX
	LDA.b !RAM_SMW_NorSprXXX_WallFollowers_SideOfBlockSpriteIsOn,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w HotheadEyesXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w HotheadEyesYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$05
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	LDY.b #$00
	LDA.b #$00
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

UrchinXDisp:
	db $08,$00,$10,$00,$10

UrchinYDisp:
	db $08,$00,$00,$10,$10

UrchinProp:
	db $37,$37,$77,$B7,$F7

UrchinTiles:
	db $C4,$C6,$C8,$C6

UrchinGFXRt:
	LDA.w !RAM_SMW_NorSprXXX_Urchins_AnimationTimer,x
	BNE.b CODE_02BF69
	INC.w !RAM_SMW_NorSprXXX_Urchins_AnimationFrameCounter,x
	LDA.b #$0C
	STA.w !RAM_SMW_NorSprXXX_Urchins_AnimationTimer,x
CODE_02BF69:
	LDA.w !RAM_SMW_NorSprXXX_Urchins_AnimationFrameCounter,x
	AND.b #$03
	TAY
	LDA.w UrchinAnimationFrames,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_GetDrawInfo_Bank02
	STZ.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSprXXX_WallFollowers_BlinkingAnimationTimer,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_02BF84:
	LDX.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l UrchinXDisp,x
else
	ADC.w UrchinXDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l UrchinYDisp,x
else
	ADC.w UrchinYDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l UrchinProp,x
else
	LDA.w UrchinProp,x
endif
	STA.w SMW_OAMBuffer[$40].Prop,y
	CPX.b #$00
	BNE.b CODE_02BFAC
	LDA.b #$CA
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	BEQ.b CODE_02BFAA
	LDA.b #$CC
CODE_02BFAA:
	BRA.b CODE_02BFB1

CODE_02BFAC:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l UrchinTiles,x
else
	LDA.w UrchinTiles,x
endif
CODE_02BFB1:
	STA.w SMW_OAMBuffer[$40].Tile,y
	INY
	INY
	INY
	INY
	INC.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CMP.b #$05
	BNE.b CODE_02BF84
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDY.b #$02
	JMP.w SMW_NorSpr091_CharginChuck_Status08_CODE_02C82B
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr02F_PortableSpringboard_Status08(Address)
namespace SMW_NorSpr02F_PortableSpringboard_Status08
%InsertMacroAtXPosition(<Address>)

AnimationFrames:
	db $00,$01,$02,$02,$02,$01,$01,$00
	db $00

PlayerYDisp:
	db $1E,$1B,$18,$18,$18,$1A,$1C,$1D
	db $1E

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01E62A
	JMP.w CODE_01E6F0

CODE_01E62A:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01E638
	JSR.w SMW_MakeStunnedSpriteBounceOrSlowDownOnGround_Main
CODE_01E638:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_01E649
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	ASL
	PHP
	ROR.b !RAM_SMW_NorSpr_XSpeed,x
	PLP
	ROR.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01E649:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_01E650
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01E650:
	LDA.w !RAM_SMW_NorSpr02F_PortableSpringboard_AnimationFrameTimer,x
	BEQ.b CODE_01E6B0
	LSR
	TAY
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	CMP.b #$01
	LDA.w PlayerYDisp,y
	BCC.b CODE_01E664
	CLC
	ADC.b #$12
CODE_01E664:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w AnimationFrames,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	STZ.b !RAM_SMW_Player_InAirFlag
	STZ.b !RAM_SMW_Player_XSpeed
	LDA.b #$02
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.w !RAM_SMW_NorSpr02F_PortableSpringboard_AnimationFrameTimer,x
	CMP.b #$07
	BCS.b CODE_01E6AE
	STZ.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDY.b #$B0
	LDA.b !RAM_SMW_IO_ControllerHold2
	BPL.b CODE_01E69A
	LDA.b #$01
	STA.w !RAM_SMW_Player_SpinJumpFlag
	BRA.b CODE_01E69E

CODE_01E69A:
	LDA.b !RAM_SMW_IO_ControllerHold1
	BPL.b CODE_01E6A7
CODE_01E69E:
	LDA.b #$0B
	STA.b !RAM_SMW_Player_InAirFlag
	LDY.b #$80
	STY.w !RAM_SMW_Camera_BounceOffSpringFlag
CODE_01E6A7:
	STY.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
CODE_01E6AE:
	BRA.b CODE_01E6F0

CODE_01E6B0:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_ProcessInteract
	BCC.b CODE_01E6F0
	STZ.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$04
	CMP.b #$1C
	BCC.b CODE_01E6CE
	BPL.b CODE_01E6E7
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_01E6F0
	STZ.b !RAM_SMW_Player_YSpeed
	BRA.b CODE_01E6F0

CODE_01E6CE:
	BIT.b !RAM_SMW_IO_ControllerHold1
	BVC.b CODE_01E6E2
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag1
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01E6E2
	LDA.b #!Define_SMW_NorSprStatus0B_Carried
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01E6E2:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01AB31
	BRA.b CODE_01E6F0

CODE_01E6E7:
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01E6F0
	LDA.b #$11
	STA.w !RAM_SMW_NorSpr02F_PortableSpringboard_AnimationFrameTimer,x
CODE_01E6F0:
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w YDispOffset,y
	TAY
	LDA.b #$02
	JSR.w SMW_GenericGFXRtDraw4Tiles8x8Square_Entry1
	RTS

YDispOffset:
	db $00,$02,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr030_ThrowingDryBones_Status08(Address)
namespace SMW_NorSpr030_ThrowingDryBones_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $08,$F8

UNK_01E421:
	db $02,$03,$04,$04,$04,$04,$04,$04
	db $04,$04

Main:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01E43E
	ASL.w !RAM_SMW_NorSpr_YXPPCCCT,x
	SEC
	ROR.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JMP.w CODE_01E5BF

DATA_01E43C:
	db $08,$F8

CODE_01E43E:
	LDA.w !RAM_SMW_NorSpr030_ThrowingDryBones_HasCollapsedFlag,x
	BEQ.b CODE_01E4C0
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr030_ThrowingDryBones_CollapsedTimer,x
	BNE.b CODE_01E453
	STZ.w !RAM_SMW_NorSpr030_ThrowingDryBones_HasCollapsedFlag,x
	PHY
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	PLY
CODE_01E453:
	LDA.b #$48
	CPY.b #$10
	BCC.b CODE_01E45F
	CPY.b #$F0
	BCS.b CODE_01E45F
	LDA.b #$2E
CODE_01E45F:
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	TYA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.w DATA_01E43C,x
	PLX
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	LDA.w SMW_OAMBuffer[$40].Tile,y
	DEC
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w !RAM_SMW_NorSpr030_ThrowingDryBones_CollapsedTimer,x
	BEQ.b CODE_01E4AC
	CMP.b #$40
	BCS.b CODE_01E4AC
	LSR
	LSR
	PHP
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	ADC.b #$00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLP
	LDA.w SMW_OAMBuffer[$41].XDisp,y
	ADC.b #$00
	STA.w SMW_OAMBuffer[$41].XDisp,y
CODE_01E4AC:
	LDY.b #$02
	LDA.b #$01
	JSR.w SMW_FinishOAMWrite_Sub
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b Return01E4BF
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
Return01E4BF:
	RTS

CODE_01E4C0:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr030_ThrowingDryBones_UnusedFreezeTimer,x
	BEQ.b CODE_01E4CA
	JMP.w CODE_01E5B6

CODE_01E4CA:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	EOR.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	ASL
	LDA.w XSpeed,y
	BCC.b CODE_01E4DD
	CLC
	ADC.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
CODE_01E4DD:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr030_ThrowingDryBones_ThrowBonesTimer,x
	BNE.b CODE_01E4ED
	TYA
	INC
	AND.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_01E4EF
CODE_01E4ED:
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01E4EF:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_01E4F6
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01E4F6:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr031_BonyBeetle
	BNE.b CODE_01E51E
	LDA.w !RAM_SMW_NorSpr031_BonyBeetle_HideInShellTimer,x
	BEQ.b CODE_01E542
	LDY.b #$00
	CMP.b #$70
	BCS.b CODE_01E518
	INY
	INY
	CMP.b #$08
	BCC.b CODE_01E518
	CMP.b #$68
	BCS.b CODE_01E518
	INY
CODE_01E518:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	BRA.b CODE_01E563

CODE_01E51E:
	CMP.b #!Define_SMW_SpriteID_NorSpr030_ThrowingDryBones
	BEQ.b CODE_01E52D
	CMP.b #!Define_SMW_SpriteID_NorSpr032_LedgeDryBones
	BNE.b CODE_01E542
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	CMP.b #!Define_SMW_LevelID_NorSpr032_LedgeDryBones_ThrowsBones
	BNE.b CODE_01E542
CODE_01E52D:
	LDA.w !RAM_SMW_NorSpr030_ThrowingDryBones_ThrowBonesTimer,x
	BEQ.b CODE_01E542
	CMP.b #$01
	BNE.b CODE_01E53A
	JSL.l SpawnDryBonesBone
CODE_01E53A:
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JMP.w CODE_01E5B6

CODE_01E542:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01E563
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr032_LedgeDryBones
	BNE.b CODE_01E557
	STZ.b !RAM_SMW_NorSpr032_LedgeDryBones_WalkedOffLedgeFlag,x
	BRA.b CODE_01E561

CODE_01E557:
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$7F
	BNE.b CODE_01E561
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
CODE_01E561:
	BRA.b CODE_01E57B

CODE_01E563:
	STZ.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr032_LedgeDryBones
	BNE.b CODE_01E57B
	LDA.b !RAM_SMW_NorSpr032_LedgeDryBones_WalkedOffLedgeFlag,x
	BNE.b CODE_01E57B
	INC.b !RAM_SMW_NorSpr032_LedgeDryBones_WalkedOffLedgeFlag,x
	JSR.w SMW_ChangeNormalSpriteDirection_Main
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
CODE_01E57B:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr031_BonyBeetle
	BNE.b CODE_01E598
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_01E589
	INC.w !RAM_SMW_NorSpr031_BonyBeetle_WaitBeforeGoingIntoShell,x
CODE_01E589:
	LDA.w !RAM_SMW_NorSpr031_BonyBeetle_WaitBeforeGoingIntoShell,x
	BNE.b CODE_01E5B6
	INC.w !RAM_SMW_NorSpr031_BonyBeetle_WaitBeforeGoingIntoShell,x
	LDA.b #$A0
	STA.w !RAM_SMW_NorSpr031_BonyBeetle_HideInShellTimer,x
	BRA.b CODE_01E5B6

CODE_01E598:
	CMP.b #!Define_SMW_SpriteID_NorSpr030_ThrowingDryBones
	BEQ.b CODE_01E5A7
	CMP.b #!Define_SMW_SpriteID_NorSpr032_LedgeDryBones
	BNE.b CODE_01E5B6
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	CMP.b #!Define_SMW_LevelID_NorSpr032_LedgeDryBones_ThrowsBones
	BNE.b CODE_01E5B6
CODE_01E5A7:
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	CLC
	ADC.b #$40
	AND.b #$7F
	BNE.b CODE_01E5B6
	LDA.b #$3F
	STA.w !RAM_SMW_NorSpr030_ThrowingDryBones_ThrowBonesTimer,x
CODE_01E5B6:
	JSR.w CODE_01E5C4
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	JSR.w SMW_ChangeNormalSpriteDirection_CheckIfTouchingWall
CODE_01E5BF:
	JSL.l DryBonesAndBonyBeetleGFXRt
	RTS

CODE_01E5C4:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b Return01E610
	LDA.b !RAM_SMW_Player_CurrentYPosLo
	CLC
	ADC.b #$14
	CMP.b !RAM_SMW_NorSpr_YPosLo,x
	BPL.b CODE_01E604
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	BNE.b CODE_01E5DB
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01E604
CODE_01E5DB:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr031_BonyBeetle
	BNE.b CODE_01E5EB
	LDA.w !RAM_SMW_NorSpr031_BonyBeetle_HideInShellTimer,x
	SEC
	SBC.b #$08
	CMP.b #$60
	BCC.b CODE_01E604
CODE_01E5EB:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01AB46
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	LDA.b #!Define_SMW_Sound1DF9_DryBonesCollapse
	STA.w !RAM_SMW_IO_SoundCh1
	JSL.l SMW_BoostMarioSpeed_Main
	INC.w !RAM_SMW_NorSpr030_ThrowingDryBones_HasCollapsedFlag,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr030_ThrowingDryBones_CollapsedTimer,x
	RTS

CODE_01E604:
	JSL.l SMW_DamagePlayer_Hurt
	LDA.w !RAM_SMW_Timer_PlayerHurt
	BNE.b Return01E610
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
Return01E610:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr030_ThrowingDryBones_Status08_Main, SMW_NorSpr031_BonyBeetle_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr030_ThrowingDryBones_Status08_Main, SMW_NorSpr032_LedgeDryBones_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSpr030_ThrowingDryBones_Status08_XSpeed, SMW_NorSpr036_Unused_Status08_Main)		; Crash: Loading this sprite will cause the universe to implode.
endmacro

macro ROUTINE_RT01_SMW_NorSpr030_ThrowingDryBones_Status08(Address)
namespace SMW_NorSpr030_ThrowingDryBones_Status08
%InsertMacroAtXPosition(<Address>)

DryBonesAndBonyBeetleGFXRt:
	PHB
	PHK
	PLB
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_03C3A5
	CPY.b #$05
	BCC.b CODE_03C3A5
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_03C3A5:
	JSR.w CODE_03C3DA
	PLA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	PLB
	RTL

CODE_03C3AE:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	RTS

DryBonesTileXDisp:
	db $00,$08,$00,$00,$F8,$00,$00,$04
	db $00,$00,$FC,$00

DryBonesGfxProp:
	db $43,$43,$43,$03,$03,$03

DryBonesTileYDisp:
	db $F4,$F0,$00,$F4,$F1,$00,$F4,$F0
	db $00

DryBonesTiles:
	db $00,$64,$66,$00,$64,$68,$82,$64
	db $E6

DATA_03C3D7:
	db $00,$00,$FF

CODE_03C3DA:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr031_BonyBeetle
	BEQ.b CODE_03C3AE
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	ADC.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	PHA
	ASL
	ADC.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PLX
	LDA.w DATA_03C3D7,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.b #$02
CODE_03C404:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	BEQ.b CODE_03C414
	TXA
	CLC
	ADC.b #$06
	TAX
CODE_03C414:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DryBonesTileXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.w DryBonesGfxProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	PHA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DryBonesTileYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w DryBonesTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	CPX.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_03C404
	PLX
	LDY.b #$02
	TYA
	JSL.l SMW_FinishOAMWrite_Main
	RTS

SpawnDryBonesBone:
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return03C460
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_03C458:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_03C461
	DEY
	BPL.b CODE_03C458
Return03C460:
	RTL

CODE_03C461:
	LDA.b #!Define_SMW_SpriteID_ExtSpr06_ThrownBone
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$10
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	LDA.b #$18
	BCC.b CODE_03C48B
	LDA.b #$E8
CODE_03C48B:
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr033_Podoboo_Status01(Address)
namespace SMW_NorSpr033_Podoboo_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr033_Podoboo_InitialYPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr033_Podoboo_InitialYPosHi,x
CODE_01E05B:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x				;\ Crash: If sprite buoyancy is not set, then this will always branch, resulting in the game freezing.
	BEQ.b CODE_01E05B						;/
	JSR.w SMW_NorSpr033_Podoboo_Status08_CODE_01E0E2
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr033_Podoboo_WaitBeforeNextJump,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr033_Podoboo_Status08(Address)
namespace SMW_NorSpr033_Podoboo_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01E07B:
	db $F0,$DC,$D0,$C8,$C0,$B8,$B2,$AC
	db $A6,$A0,$9A,$96,$92,$8C,$88,$84
	db $80,$04,$08,$0C,$10,$14

DATA_01E091:
	db $70,$20

Main:
	STZ.w !RAM_SMW_NorSpr033_Podoboo_CopyOfWaitBeforeNextJump,x
	LDA.w !RAM_SMW_NorSpr033_Podoboo_WaitBeforeNextJump,x
	BEQ.b CODE_01E0A7
	STA.w !RAM_SMW_NorSpr033_Podoboo_CopyOfWaitBeforeNextJump,x
	DEC
	BNE.b Return01E0A6
	LDA.b #!Define_SMW_Sound1DFC_Podoboo
	STA.w !RAM_SMW_IO_SoundCh3
Return01E0A6:
	RTS

CODE_01E0A7:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01E0AE
	JMP.w CODE_01E12D

CODE_01E0AE:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$7F
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01E0C8
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
	ORA.b #$80
CODE_01E0C8:
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_01E106
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01E106
	JSL.l SMW_GetRand_Main
	AND.b #$3F
	ADC.b #$60
	STA.w !RAM_SMW_NorSpr033_Podoboo_WaitBeforeNextJump,x
CODE_01E0E2:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.w !RAM_SMW_NorSpr033_Podoboo_InitialYPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.w !RAM_SMW_NorSpr033_Podoboo_InitialYPosHi,x
	LSR
	ROR.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_01E07B,y
	BMI.b CODE_01E103
	STA.w !RAM_SMW_NorSpr033_Podoboo_KeepYSpeedFailsafeTimer,x
	LDA.b #$80
CODE_01E103:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

CODE_01E106:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	ORA.b !RAM_SMW_NorSpr033_Podoboo_FireballType,x
	BNE.b CODE_01E115
	JSL.l SpawnPodobooFire
CODE_01E115:
	LDA.w !RAM_SMW_NorSpr033_Podoboo_KeepYSpeedFailsafeTimer,x
	BNE.b CODE_01E12A
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_01E125
	LDY.b !RAM_SMW_NorSpr033_Podoboo_FireballType,x
	CMP.w DATA_01E091,y
	BCS.b CODE_01E12A
CODE_01E125:
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01E12A:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
CODE_01E12D:
	LDA.b !RAM_SMW_NorSpr033_Podoboo_FireballType,x
	BEQ.b CODE_01E198
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01E164
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_01E151
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr033_Podoboo_BowserFireDespawnTimer,x
	BEQ.b CODE_01E14A
	CMP.b #$01
	BNE.b CODE_01E14F
	JMP.w SMW_NorSprStatus02_Dead_SetNorSprStatus04_Main

CODE_01E14A:
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr033_Podoboo_BowserFireDespawnTimer,x
CODE_01E14F:
	BRA.b CODE_01E164

CODE_01E151:
	TXA
	ASL
	ASL
	CLC
	ADC.b !RAM_SMW_Counter_GlobalFrames
	LDY.b #$F0
	AND.b #$04
	BEQ.b CODE_01E15F
	LDY.b #$10
CODE_01E15F:
	STY.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
CODE_01E164:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$F0
	BCC.b CODE_01E16D
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_01E16D:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$0C
	LSR
	ADC.w !RAM_SMW_NorSpr_CurrentSlotID
	LSR
	AND.b #$03
	TAX
	LDA.w BowserFlameTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w BowserFlameProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	RTS

BowserFlameTiles:
	db $2A,$2C,$2A,$2C

BowserFlameProp:
	db $05,$05,$45,$45

CODE_01E198:
	LDA.b #$01
	JSR.w SMW_GenericGFXRtDraw4Tiles8x8Square_Sub
	REP.b #$20
	LDA.w #$0008
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX33+!Define_SMW_Graphics_StartOfDynamicSpriteTiles
	STA.w SMW_DynamicSpritePointersTop[$03].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$03].LowByte
	SEP.b #$20
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr033_Podoboo_Status08_Main, SMW_NorSpr0B5_SinkingFireball_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSpr033_Podoboo_Status08(Address)
namespace SMW_NorSpr033_Podoboo_Status08
%InsertMacroAtXPosition(<Address>)

SpawnPodobooFire:
	JSR.w SMW_CheckIfNormalSpriteOffScreen_CopyOfBank02
	BNE.b Return0285EE
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_0285E6:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_0285EF
	DEY
	BPL.b CODE_0285E6
Return0285EE:
	RTL

CODE_0285EF:
	JSL.l SMW_GetRand_Main
	LDA.b #!Define_SMW_SpriteID_MExtSpr04_PodobooFire
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_MExtSpr_YSpeed,y
	LDA.w !RAM_SMW_Misc_RandomByte1
	AND.b #$0F
	SEC
	SBC.b #$03
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$07
	CLC
	ADC.b #$07
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_YPosHi,y
	LDA.b #$17
	STA.w !RAM_SMW_MExtSpr_Timer,y
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not move if placed directly into a level
; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's horizontally offscreen (when placed in level)
; Note: This sprite uses its own set of hardcoded OAM indexes separate from the ones Normal sprites usually use.

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr034_LudwigFireball_Status08(Address)
namespace SMW_NorSpr034_LudwigFireball_Status08
%InsertMacroAtXPosition(<Address>)

OAMIndexes:
	db $A8,$B0,$B8,$C0,$C8

UnusedRoutine_01D43E:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

XDisp:
	db $00,$F0
	db $00,$10

Tiles:
	db $4A,$4C
	db $6A,$6C

Prop:
	db $45,$45
	db $05,$05

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_Player_FreezePlayerFlag
	BNE.b CODE_01D487
	LDA.w !RAM_SMW_NorSpr034_LudwigFireball_WaitBeforeMoving,x
	CMP.b #$10
	BCS.b CODE_01D487
	TAY
	BNE.b CODE_01D468
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
CODE_01D468:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w #$0230
	SEP.b #$20
	BCC.b CODE_01D487
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_01D487:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l OAMIndexes,x
else
	LDA.w OAMIndexes,x
endif
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	PHX
	LDA.w !RAM_SMW_NorSpr034_LudwigFireball_WaitBeforeMoving,x
	LDX.b #$01
	CMP.b #$08
	BCC.b CODE_01D4A8
	DEX
CODE_01D4A8:
	PHX
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	ROR
	AND.b #$80
	ORA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	INC
	INC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_01D4A8
	PLX
	LDY.b #$02
	LDA.b #$01
	JMP.w SMW_FinishOAMWrite_Sub
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr035_Yoshi_Status01(Address)
namespace SMW_NorSpr035_Yoshi_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	DEC.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	INC.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	BEQ.b Return
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr035_Yoshi_Status01_Return, SMW_NorSpr04A_GoalSphere_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr035_Yoshi_Status01_Return, SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr035_Yoshi_Status01_Return, SMW_NorSpr048_DigginChuckRock_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr035_Yoshi_Status01_Return, SMW_NorSpr099_VolcanoLotus_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr035_Yoshi_Status08(Address)
namespace SMW_NorSpr035_Yoshi_Status08
%InsertMacroAtXPosition(<Address>)

UNK_01EBB6:
	db $01,$00,$FF,$00,$20,$E0,$0A,$0E

PanicXSpeed:
	db $E8,$18

DismountXSpeed:
	db $10,$F0

GrowingAniSequence:
	db $0C,$0B,$0C,$0B,$0A,$0B,$0A,$0B

Main:
	STZ.w !RAM_SMW_Player_FreezePlayerFlag
	LDA.w !RAM_SMW_Yoshi_YoshiHasWings
	STA.w !RAM_SMW_Flag_DisplayYoshisWings
	STZ.w !RAM_SMW_Yoshi_YoshiHasWings
	STZ.w !RAM_SMW_Yoshi_StompGroundFlag
	STZ.w !RAM_SMW_UnusedRAM_7E191B						; Optimization: Unused
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01EBE9
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	JMP.w HandleOffYoshi

CODE_01EBE9:
	TXA
	INC
	STA.w !RAM_SMW_Sprites_YoshiSlotIndex
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01EC04
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BNE.b CODE_01EC04
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BNE.b Return01EC03
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
Return01EC03:
	RTS

CODE_01EC04:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01EC0E
	LDA.w !RAM_SMW_Yoshi_InPipe
	BNE.b CODE_01EC61
CODE_01EC0E:
	LDA.w !RAM_SMW_Yoshi_EggLayTimer
	BNE.b CODE_01EC61
	LDA.w !RAM_SMW_GrowingYoshiTimer
	BEQ.b CODE_01EC4C
	DEC.w !RAM_SMW_GrowingYoshiTimer
	STA.b !RAM_SMW_Flag_SpritesLocked
	STA.w !RAM_SMW_Player_FreezePlayerFlag
	CMP.b #$01
	BNE.b CODE_01EC40
	STZ.b !RAM_SMW_Flag_SpritesLocked
	STZ.w !RAM_SMW_Player_FreezePlayerFlag
	LDY.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	DEC
	ORA.w !RAM_SMW_Flag_YoshiSaved
	ORA.w !RAM_SMW_Misc_IntroLevelFlag
	BNE.b CODE_01EC40
	INC.w !RAM_SMW_Flag_YoshiSaved
	LDA.b #$03
	STA.w !RAM_SMW_Misc_DisplayMessage
CODE_01EC40:
	DEC
	LSR
	LSR
	LSR
	TAY
	LDA.w GrowingAniSequence,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_01EC4C:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01EC61
CODE_01EC50:
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b Return01EC5A
	LDY.b #$06
	STY.w !RAM_SMW_Player_RelativeYPositionDuringScreenShake
Return01EC5A:
	RTS

YoshiEggInitialXSpeed:
	db $F0,$10

YoshiEggInitialXOffsetLo:
	db $FA,$06

YoshiEggInitialXOffsetHi:
	db $FF,$00

CODE_01EC61:
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_01EC6A
	LDA.w !RAM_SMW_Yoshi_EggLayTimer
	BNE.b CODE_01EC6D
CODE_01EC6A:
	JMP.w CODE_01ECE1

CODE_01EC6D:
	DEC.w !RAM_SMW_Yoshi_EggLayTimer
	CMP.b #$01
	BNE.b CODE_01EC78
	STZ.b !RAM_SMW_Flag_SpritesLocked
	BRA.b CODE_01EC6A

CODE_01EC78:
	INC.w !RAM_SMW_Player_FreezePlayerFlag
	JSR.w CODE_01EC50
	STY.b !RAM_SMW_Flag_SpritesLocked
	CMP.b #$02
	BNE.b Return01EC8A
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BPL.b CODE_01EC8B
Return01EC8A:
	RTS

CODE_01EC8B:
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr02C_YoshiEgg
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	PHY
	PHY
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	STY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w YoshiEggInitialXOffsetLo,y
	PLY
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w YoshiEggInitialXOffsetHi,y
	PLY
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w YoshiEggInitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.w !RAM_SMW_Yoshi_LaidEggContents
	STA.w !RAM_SMW_NorSpr02C_YoshiEgg_ContentsOfEgg,x
	PLX
	RTS

CODE_01ECE1:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$01
	BNE.b CODE_01ECEA
	JMP.w CODE_01ED70

CODE_01ECEA:
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01ED01
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$02
	BCS.b CODE_01ED01
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01ED01:
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_01ED0C
	JSR.w SMW_ChangeNormalSpriteDirection_FlipXSpeedAndDirection
CODE_01ED0C:
	LDA.b #$04
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b #$13
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM07
	STA.b !RAM_SMW_Misc_ScratchRAM06
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_01ED70
	LDA.b !RAM_SMW_Player_InAirFlag
	BEQ.b CODE_01ED70
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag1
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01ED70
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01ED70
	LDY.b #$01
	JSR.w CODE_01EDCE
	STZ.b !RAM_SMW_Player_XSpeed
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b #$0C
	STA.w !RAM_SMW_Timer_YoshiSquatting
	LDA.b #$01
	STA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	LDA.b #!Define_SMW_Sound1DFA_TurnOnYoshiDrum
	STA.w !RAM_SMW_IO_SoundCh2
	LDA.b #!Define_SMW_Sound1DFC_MountYoshi
	STA.w !RAM_SMW_IO_SoundCh3
	JSL.l SpawnUnusedYoshiSmoke
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr035_Yoshi_DisableSpriteInteraction,x
	INC.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped			; Note: This is an odd thing to put here, considering that the player normally only mounts Yoshi while he is on the ground.
CODE_01ED70:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$01
	BNE.b Return01EDCB
	JSR.w CODE_01F622
	LDA.b !RAM_SMW_IO_ControllerHold1					;\ Glitch: Holding left+right will cause Yoshi to constantly turn around.
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)				;|
	BEQ.b CODE_01ED95							;|
	DEC									;|
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x					;|
	BEQ.b CODE_01ED95							;/
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	ORA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	ORA.w !RAM_SMW_Yoshi_DuckingFlag
	BNE.b CODE_01ED95
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_01ED95:
	LDA.w !RAM_SMW_Timer_InflateFromPBalloon
	BNE.b CODE_01ED9E
	BIT.b !RAM_SMW_IO_ControllerPress2
	BPL.b Return01EDCB
CODE_01ED9E:
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr035_Yoshi_DisableWaterSplashTimer,x
	STZ.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	LDA.b #!Define_SMW_Sound1DFA_TurnOffYoshiDrum
	STA.w !RAM_SMW_IO_SoundCh2
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	LDA.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$A0
	LDY.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_01EDC1
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w DismountXSpeed,y
	STA.b !RAM_SMW_Player_XSpeed
	LDA.b #$C0							; Glitch: Setting !RAM_SMW_Player_InAirFlag to #$0B here would fix the zip bug while in the Iggy/Larry boss fight
CODE_01EDC1:
	STA.b !RAM_SMW_Player_YSpeed
	STZ.w !RAM_SMW_Player_RidingYoshiFlag
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w CODE_01EDCC
Return01EDCB:
	RTS

CODE_01EDCC:
	LDY.b #$00
CODE_01EDCE:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.w DATA_01EDE2,y
	STA.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Player_CurrentYPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	STA.b !RAM_SMW_Player_CurrentYPosHi
	RTS

DATA_01EDE2:
	db $04,$10

DATA_01EDE4:							;\ Note: Not used by Yoshi directly
	db $06,$05,$05,$05,$0A,$05,$05,$0A			;|
	db $0A,$0B						;|
								;|
YoshiWalkFrames:						;|
	db $02,$01,$00						;|
								;|
YoshiPositionX:							;|
	db $02,$FE						;|
								;|
DATA_01EDF3:							;|
	db $00,$FF						;|
								;|
DATA_01EDF5:							;|
	db $03,$02,$01,$00					;/

YoshiHeadTiles:
	db $00,$01,$02,$03,$02,$10,$04,$05
	db $00,$00,$FF,$FF,$00

YoshiBodyTiles:
	db $06,$07,$08,$09,$0A,$0B,$06,$0C
	db $0A,$0D,$0E,$0F,$0C

YoshiHeadXDisp:
	db $0A,$09,$0A,$06,$0A,$0A,$0A,$10
	db $0A,$0A,$00,$00,$0A,$F6,$F7,$F6
	db $FA,$F6,$F6,$F6,$F0,$F6,$F6,$00
	db $00,$F6

DATA_01EE2D:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$FF,$FF,$FF
	db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$00
	db $00,$FF

YoshiPositionY:
	db $00,$01,$01,$00,$04,$00,$00,$04
	db $03,$03,$00,$00,$04

YoshiHeadYDisp:
	db $00,$00,$01,$00,$00,$00,$00,$08
	db $00,$00,$00,$00,$05

HandleOffYoshi:
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	PHA
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	CPY.b #$08
	BNE.b CODE_01EE7D
	LDA.w !RAM_SMW_Yoshi_InPipe
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01EE7D
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Player_FacingDirection
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_01EE7D:
	LDA.w !RAM_SMW_Yoshi_InPipe
	BMI.b CODE_01EE8A
	CMP.b #$02
	BNE.b CODE_01EE8A
	INC
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01EE8A:
	JSR.w CODE_01EF18
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w SMW_OAMBuffer[$40].Tile,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$06
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].Tile,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$08
	STA.w SMW_OAMBuffer[$40].Tile,y
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX33+!Define_SMW_Graphics_StartOfDynamicSpriteTiles
	STA.w SMW_DynamicSpritePointersTop[$03].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$03].LowByte
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w #!RAM_SMW_Graphics_DecompressedGFX33+!Define_SMW_Graphics_StartOfDynamicSpriteTiles
	STA.w SMW_DynamicSpritePointersTop[$04].LowByte
	CLC
	ADC.w #$0200
	STA.w SMW_DynamicSpritePointersBottom[$04].LowByte
	SEP.b #$20
	PLA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w CODE_01F0A2
	LDA.w !RAM_SMW_Flag_DisplayYoshisWings
	CMP.b #$02
	BCC.b Return01EF17
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01EF13
	LDA.b !RAM_SMW_Player_InAirFlag
	BNE.b CODE_01EF00
	LDA.b !RAM_SMW_Player_XSpeed
	BPL.b CODE_01EEF6
	EOR.b #$FF
	INC
CODE_01EEF6:
	CMP.b #$28
	LDA.b #$01
	BCS.b CODE_01EF13
	LDA.b #$00
	BRA.b CODE_01EF13

CODE_01EF00:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LDY.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01EF0A
	LSR
	LSR
CODE_01EF0A:
	AND.b #$01
	BNE.b CODE_01EF13
	LDY.b #!Define_SMW_Sound1DFC_YoshiTongue
	STY.w !RAM_SMW_IO_SoundCh3
CODE_01EF13:
	JSL.l DrawYoshisWings
Return01EF17:
	RTS

CODE_01EF18:
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	STY.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	LDA.w YoshiHeadTiles,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	CLC
	ADC.w YoshiPositionY,y
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	TYA
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b CODE_01EF41
	CLC
	ADC.b #$0D
CODE_01EF41:
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	CLC
	ADC.w YoshiHeadXDisp,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	ADC.w DATA_01EE2D,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	PHA
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	ORA.w !RAM_SMW_Yoshi_InPipe
	BEQ.b CODE_01EF66
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
CODE_01EF66:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	PHX
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDX.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l YoshiHeadYDisp,x
else
	ADC.w YoshiHeadYDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLX
	PLA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	LDA.w YoshiBodyTiles,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	BCC.b CODE_01EFA3
	INC.w !RAM_SMW_NorSpr_YPosHi,x
CODE_01EFA3:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b CODE_01EFB8
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_01EFB8:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	BNE.b CODE_01EFC6
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$30
	BNE.b CODE_01EFDB
	LDA.b #$2A
	BRA.b CODE_01EFFA

CODE_01EFC6:
	CMP.b #$02
	BNE.b CODE_01EFDB
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	ORA.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	BNE.b CODE_01EFDB
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$10
	BEQ.b CODE_01EFFD
	BRA.b CODE_01EFF8

Return01EFDA:
	RTS

CODE_01EFDB:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	CMP.b #$03
	BEQ.b CODE_01EFEE
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	BEQ.b CODE_01EFF3
	LDA.w SMW_OAMBuffer[$40].Tile,y
	CMP.b #$24
	BEQ.b CODE_01EFF3
CODE_01EFEE:
	LDA.b #$2A
	STA.w SMW_OAMBuffer[$40].Tile,y
CODE_01EFF3:
	LDA.w !RAM_SMW_Timer_YoshiTongueInit
	BEQ.b CODE_01EFFD
CODE_01EFF8:
	LDA.b #$0C
CODE_01EFFA:
	STA.w SMW_OAMBuffer[$40].Tile,y
CODE_01EFFD:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
	LDY.w !RAM_SMW_Yoshi_SwallowTimer
	BEQ.b CODE_01F00F
	CPY.b #$26
	BCS.b CODE_01F038
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$18
	BNE.b CODE_01F038
CODE_01F00F:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
	CMP.b #$00
	BEQ.b Return01EFDA
	LDY.b #$00
	CMP.b #$0F
	BCC.b CODE_01F03A
	CMP.b #$1C
	BCC.b CODE_01F038
	BNE.b CODE_01F02F
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	PHA
	JSL.l ChangeBerryIntoBushTile
	JSR.w HandleYoshiSwallowingSomething
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_01F02F:
	INC.w !RAM_SMW_Player_FreezePlayerFlag
	LDA.b #$00
	LDY.b #$2A
	BRA.b CODE_01F03A

CODE_01F038:
	LDY.b #$04
CODE_01F03A:
	PHA
	TYA
	LDY.b !RAM_SMW_Misc_ScratchRAM0E
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLA
	CMP.b #$0F
	BCS.b Return01F0A0
	CMP.b #$05
	BCC.b Return01F0A0
	SBC.b #$05
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b CODE_01F054
	CLC
	ADC.b #$0A
CODE_01F054:
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	CPY.b #$0A
	BNE.b CODE_01F05E
	CLC
	ADC.b #$14
CODE_01F05E:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b Return01F0A0
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.l YoshiThroatXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.l YoshiThroatYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp
	LDA.b #$3F
	STA.w SMW_OAMBuffer[$40].Tile
	PLX
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$01
	STA.w SMW_OAMBuffer[$40].Prop
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot
Return01F0A0:
	RTS

Return01F0A1:
	RTS

CODE_01F0A2:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$01
	BNE.b CODE_01F0AC
	JSL.l CheckForBerryTileCollisionWithAdultYoshiMouth
CODE_01F0AC:
	LDA.w !RAM_SMW_Flag_DisplayYoshisWings
	CMP.b #$01
	BEQ.b Return01F0A1
	LDA.w !RAM_SMW_Timer_YoshiTongueIsOut
	CMP.b #$10
	BNE.b CODE_01F0C4
	LDA.w !RAM_SMW_Timer_YoshiTongueInit			; Glitch: Change this LDA.w !RAM_SMW_Timer_YoshiTongueInit to LDA.b !RAM_SMW_Flag_SpritesLocked : NOP to fix the double tongue glitch
	BNE.b CODE_01F0C4
	LDA.b #$06
	STA.w !RAM_SMW_Timer_YoshiTongueInit
CODE_01F0C4:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	JSL.l SMW_ExecutePtr_Absolute

Ptrs01F0CB:
	dw MouthState00_Normal
	dw MouthState01_ExtendTongue
	dw MouthState02_RetractTongue
	dw MouthState03_Spitting

HandleYoshiSwallowingSomething:
	LDA.b #!Define_SMW_Sound1DF9_YoshiGulp
	STA.w !RAM_SMW_IO_SoundCh1
	JSL.l SMW_GiveCoins_OneCoin
	LDA.w !RAM_SMW_Yoshi_BerryBeingEaten
	BEQ.b Return01F12D
	STZ.w !RAM_SMW_Yoshi_BerryBeingEaten
	CMP.b #$01
	BNE.b CODE_01F0F9
	INC.w !RAM_SMW_Counter_EatenRedBerries
	LDA.w !RAM_SMW_Counter_EatenRedBerries
	CMP.b #$0A
	BNE.b Return01F12D
	STZ.w !RAM_SMW_Counter_EatenRedBerries
	LDA.b #$74
	BRA.b CODE_01F125

CODE_01F0F9:
	CMP.b #$03
	BNE.b CODE_01F116
	LDA.b #!Define_SMW_Sound1DFC_Correct
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.w !RAM_SMW_Counter_TimerTens
	CLC
	ADC.b #$02
	CMP.b #$0A
	BCC.b CODE_01F111
	SBC.b #$0A
	INC.w !RAM_SMW_Counter_TimerHundreds
CODE_01F111:
	STA.w !RAM_SMW_Counter_TimerTens
	BRA.b Return01F12D

CODE_01F116:
	INC.w !RAM_SMW_Counter_EatenPinkBerries
	LDA.w !RAM_SMW_Counter_EatenPinkBerries
	CMP.b #$02
	BNE.b Return01F12D
	STZ.w !RAM_SMW_Counter_EatenPinkBerries
	LDA.b #$6A
CODE_01F125:
	STA.w !RAM_SMW_Yoshi_LaidEggContents
	LDY.b #$20
	STY.w !RAM_SMW_Yoshi_EggLayTimer
Return01F12D:
	RTS

MouthState03_Spitting:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BNE.b Return01F136
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
Return01F136:
	RTS

YoshiShellAbility:
	db $00,$00,$01,$02,$00,$00,$01,$02
	db $01,$01,$01,$03,$02,$02

YoshiAbilityIndex:
	db $03,$02,$02,$03,$01,$00

MouthState00_Normal:
	LDA.w !RAM_SMW_InYoshiWingsBonusArea
	BEQ.b CODE_01F155
	LDA.b #$02
	STA.w !RAM_SMW_Yoshi_YoshiHasWings
CODE_01F155:
	LDA.w !RAM_SMW_Yoshi_SwallowTimer
	BEQ.b CODE_01F1A2
	LDY.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BNE.b CODE_01F167
	INC.w !RAM_SMW_Yoshi_KeyInMouthFlag
CODE_01F167:
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BCS.b CODE_01F1A2
	PHY
	LDA.w !RAM_SMW_NorSpr_Table7E187B,y
	CMP.b #$01
	LDA.b #$03
	BCS.b CODE_01F195
	LDA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	LSR
	AND.b #$07
	TAY
	LDA.w YoshiAbilityIndex,y
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PLY
	PHY
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,y
	LSR
	AND.b #$07
	TAY
	LDA.w YoshiAbilityIndex,y
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	TAY
	LDA.w YoshiShellAbility,y
CODE_01F195:
	PHA
	AND.b #$02
	STA.w !RAM_SMW_Yoshi_YoshiHasWings
	PLA
	AND.b #$01
	STA.w !RAM_SMW_Yoshi_StompGroundFlag
	PLY
CODE_01F1A2:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_01F1C6
	LDA.w !RAM_SMW_Yoshi_SwallowTimer
	BEQ.b CODE_01F1C6
	DEC.w !RAM_SMW_Yoshi_SwallowTimer
	BNE.b CODE_01F1C6
	LDY.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	DEC
	STA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.b #$1B
	STA.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
	JMP.w HandleYoshiSwallowingSomething

CODE_01F1C6:
	LDA.w !RAM_SMW_Timer_YoshiTongueInit
	BEQ.b CODE_01F1DF
	DEC.w !RAM_SMW_Timer_YoshiTongueInit
	BNE.b Return01F1DE
	INC.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
Return01F1DE:
	RTS

CODE_01F1DF:
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	CMP.b #$01
	BNE.b Return01F1DE
	BIT.b !RAM_SMW_IO_ControllerPress1
	BVC.b Return01F1DE
	LDA.w !RAM_SMW_Yoshi_SwallowTimer
	BNE.b CODE_01F1F1
	JMP.w CODE_01F309

CODE_01F1F1:
	STZ.w !RAM_SMW_Yoshi_SwallowTimer
	LDY.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	PHY
	PHY
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_01F305,y
	PLY
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_01F307,y
	PLY
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_Table7E00C2,y
	STA.w !RAM_SMW_NorSpr_OnYoshisTongue,y
	STA.w !RAM_SMW_NorSpr_Table7E1626,y
	LDA.w !RAM_SMW_Yoshi_DuckingFlag
	CMP.b #$01
	LDA.b #!Define_SMW_NorSprStatus0A_Kicked
	BCC.b CODE_01F234
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
CODE_01F234:
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.w !RAM_SMW_NorSpr_FacingDirection,y
	TAX
	BCC.b CODE_01F243
	INX
	INX
CODE_01F243:
	LDA.w SpatOutSpriteXSpeed,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	PLX
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BCS.b CODE_01F2DF
	LDA.w !RAM_SMW_NorSpr_Table7E187B,y
	BNE.b CODE_01F27C
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,y
	AND.b #$0E
	CMP.b #$08
	BEQ.b CODE_01F27C
	LDA.w !RAM_SMW_NorSpr035_Yoshi_YoshiColor,x
	AND.b #$0E
	CMP.b #$08
	BNE.b CODE_01F2DF
CODE_01F27C:
	PHX
	TYX
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w CODE_01F295
	JSR.w CODE_01F295
	JSR.w CODE_01F295
	PLX
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	RTS

CODE_01F295:
	JSR.w SMW_CheckForAvailableExtendedSpriteSlot_Main
	LDA.b #!Define_SMW_SpriteID_ExtSpr11_YoshiFireball
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_ExtSpr11_YoshiFireball_CurrentLayerPriority,y
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w YoshiFireballInitialXSpeed,x
	BCC.b CODE_01F2C7
	EOR.b #$FF
	INC
CODE_01F2C7:
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	LDA.w YoshiFireballInitialYSpeed,x
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b #$A0
	STA.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,y
	PLX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	RTS

YoshiFireballInitialXSpeed:
	db $28,$24,$24

YoshiFireballInitialYSpeed:
	db $00,$F8,$08

CODE_01F2DF:
	LDA.b #!Define_SMW_Sound1DF9_YoshiSpit
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	AND.b #!Define_SMW_NorSpr_1686Prop_SpawnsNewSprite
	BEQ.b Return01F2FE
	PHX
	LDX.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.l SMW_GenericSpriteToSpawnTable_Main,x
	PLX
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	PLX
Return01F2FE:
	RTS

UNK_01F2FF:
	db $20,$E0

SpatOutSpriteXSpeed:
	db $30,$D0,$10,$F0

DATA_01F305:
	db $10,$F0

DATA_01F307:
	db $00,$FF

CODE_01F309:
	LDA.b #$12
	STA.w !RAM_SMW_Timer_YoshiTongueIsOut
	LDA.b #!Define_SMW_Sound1DFC_YoshiTongue
	STA.w !RAM_SMW_IO_SoundCh3
	RTS

MouthState01_ExtendTongue:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	CLC
	ADC.b #$03
	STA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	CMP.b #$20
	BCS.b CODE_01F328
CODE_01F321:
	JSR.w CODE_01F3FE
	JSR.w CODE_01F4B2
	RTS

CODE_01F328:
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	INC.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	BRA.b CODE_01F321

MouthState02_RetractTongue:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BNE.b CODE_01F321
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	SEC
	SBC.b #$04
	BMI.b CODE_01F344
	STA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	BRA.b CODE_01F321

CODE_01F344:
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	LDY.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	BMI.b CODE_01F370
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	AND.b #!Define_SMW_NorSpr_1686Prop_StayInYoshisMouth
	BEQ.b CODE_01F373
	LDA.b #!Define_SMW_NorSprStatus07_InLimbo
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$FF
	STA.w !RAM_SMW_Yoshi_SwallowTimer
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BCS.b CODE_01F370
	PHX
	TAX
	LDA.w SMW_GenericSpriteToSpawnTable_Main,x
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	PLX
CODE_01F370:
	JMP.w CODE_01F3FA

CODE_01F373:
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$1B
	STA.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr09D_BubbleWithSprite
	BNE.b CODE_01F39F
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_Contents,y
	CMP.b #$03
	BNE.b CODE_01F39F
	LDA.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,y
	ORA.b #!Define_SMW_NorSpr_167AProp_GivePowerupWhenEaten
	STA.w !RAM_SMW_NorSpr_PropertyBits167A,y
CODE_01F39F:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr081_ChangingItem
	BNE.b CODE_01F3BA
	LDA.w !RAM_SMW_NorSpr081_ChangingItem_SpriteChangeCounter,y
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w SMW_NorSprXXX_PowerUps_Status08_ChangingItemSprite,y
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_SpriteID,y
CODE_01F3BA:
	PHA
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,y				; Note: !Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	ASL
	ASL
	PLA
	BCC.b CODE_01F3DB
	PHX
	TYX
	STZ.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	JSR.w SMW_NorSprXXX_PowerUps_Status08_CODE_01C4BF
	PLX
	LDY.w !RAM_SMW_Yoshi_DuckingFlag
	LDA.w DATA_01F3D9,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JMP.w CODE_01F321

DATA_01F3D9:
	db $00,$04

CODE_01F3DB:
	CMP.b #!Define_SMW_SpriteID_NorSpr07E_FlyingRedCoin
	BNE.b CODE_01F3F7
	LDA.w !RAM_SMW_NorSpr_Table7E00C2,y
	BEQ.b CODE_01F3F7
	CMP.b #$02
	BNE.b ADDR_01F3F1
	LDA.b #!Define_SMW_PlayerState08_WarpToYoshiWingsBonus
	STA.b !RAM_SMW_Player_CurrentState
	LDA.b #!Define_SMW_Sound1DFC_HitVineBlock
	STA.w !RAM_SMW_IO_SoundCh3
ADDR_01F3F1:
	JSR.w CODE_01F6CD
	JMP.w CODE_01F321

CODE_01F3F7:
	JSR.w HandleYoshiSwallowingSomething
CODE_01F3FA:
	JMP.w CODE_01F321

Return01F3FD:
	RTS

CODE_01F3FE:
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	ORA.w !RAM_SMW_Yoshi_InPipe
	BNE.b Return01F3FD
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w DATA_01F61A,y
	STA.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_01F424
	TYA
	CLC
	ADC.b #$08
	TAY
CODE_01F424:
	LDA.w DATA_01F60A,y
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0D
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_01F43C
	BCS.b Return01F3FD
	BRA.b CODE_01F43E

CODE_01F43C:
	BCC.b Return01F3FD
CODE_01F43E:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	STA.w !REGISTER_DividendHi
	STZ.w !REGISTER_DividendLo
	LDA.b #$04
	STA.w !REGISTER_Divisor
	NOP #8
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LSR
	LDA.w !REGISTER_QuotientHi
	BCC.b CODE_01F462
	EOR.b #$FF
	INC
CODE_01F462:
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDY.b #$0C
CODE_01F46A:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	BPL.b CODE_01F47C
	BCC.b Return01F4B1
	BRA.b CODE_01F47E

CODE_01F47C:
	BCS.b Return01F4B1
CODE_01F47E:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CMP.b #$01
	LDA.b #$76
	BCS.b CODE_01F48D
	LDA.b #$66
CODE_01F48D:
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	LSR
	LDA.b #$09
	BCS.b CODE_01F499
	ORA.b #$40
CODE_01F499:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM06
	BPL.b CODE_01F46A
Return01F4B1:
	RTS

CODE_01F4B2:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	BMI.b CODE_01F524
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	BMI.b CODE_01F4C3
	CLC
	ADC.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	BRA.b CODE_01F4CC

CODE_01F4C3:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	EOR.b #$FF
	INC
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0D
CODE_01F4CC:
	SEC
	SBC.b #$04
	BPL.b CODE_01F4D2
	DEY
CODE_01F4D2:
	PHY
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	PLY
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	LDY.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b #$FC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,y
	AND.b #!Define_SMW_NorSpr_1662Prop_UseShellAsDeathFrame
	BNE.b CODE_01F4FD
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,y
	AND.b #!Define_SMW_NorSpr_190FProp_2TileTallDeathFrame
	BEQ.b CODE_01F4FD
	LDA.b #$F8
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_01F4FD:
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	BPL.b CODE_01F509
	DEC.b !RAM_SMW_Misc_ScratchRAM01
CODE_01F509:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	INC
	STA.w !RAM_SMW_NorSpr_OnYoshisTongue,y
	RTS

CODE_01F524:
	PHY
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	BMI.b CODE_01F531
	CLC
	ADC.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	BRA.b CODE_01F53A

CODE_01F531:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	EOR.b #$FF
	INC
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0D
CODE_01F53A:
	CLC
	ADC.b #$00
	BPL.b CODE_01F540
	DEY
CODE_01F540:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	PLY
	LDA.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	CLC
	ADC.b #$02
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_01F568:
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_01F586
	LDA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	BPL.b CODE_01F586
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_01F586
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,y
	BNE.b CODE_01F586
	PHY
	JSR.w TryEatSprite
	PLY
CODE_01F586:
	DEY
	BPL.b CODE_01F568
	JSL.l SMW_CheckForBerryTileCollisionWithYoshiTongue_Main
	RTS

TryEatSprite:
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return01F609
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,y			;\ Note: !Define_SMW_NorSpr_1686Prop_Inedible
	LSR								;|
	BCC.b EatSprite							;/
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	RTS

EatSprite:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr070_Pokey
	BNE.b CODE_01F5FB
	STY.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.w !RAM_SMW_NorSpr_YPosLo,y
	CLC
	ADC.b #$00
	PHX
	TYX
	JSL.l SMW_NorSpr070_Pokey_Status08_RemovePokeySegment
	PLX
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return01F609
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr070_Pokey
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDX.w !RAM_SMW_NorSpr035_Yoshi_UnknownRAM
	LDA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	AND.b !RAM_SMW_Misc_ScratchRAM0D
	STA.w !RAM_SMW_NorSpr_Table7E00C2,y
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_Table7E1534,y
	PLX
CODE_01F5FB:
	TYA
	STA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
Return01F609:
	RTS

DATA_01F60A:
	db $F5,$F5,$F5,$F5,$F5,$F5,$F5,$F0
	db $13,$13,$13,$13,$13,$13,$13,$18

DATA_01F61A:
	db $08,$08,$08,$08,$08,$08,$08,$13

CODE_01F622:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_DisableSpriteInteraction,x
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01F667
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_01F62B:
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	TYA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_01F661
	TYA
	CMP.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	BEQ.b CODE_01F661
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_01F661
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_01F661
	LDA.w !RAM_SMW_NorSpr_SpriteID,y ; fix, overwrite accumulator nintendo?
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #$09
	BEQ.b CODE_01F661
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,y
	AND.b #!Define_SMW_NorSpr_167AProp_InvincibleToMostThings
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,y
	ORA.w !RAM_SMW_NorSpr_CurrentLayerPriority,y
	BNE.b CODE_01F661
	JSR.w CODE_01F668
CODE_01F661:
	LDY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	DEY
	BPL.b CODE_01F62B
Return01F667:
	RTS

CODE_01F668:
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return01F667
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr09D_BubbleWithSprite
	BEQ.b Return01F667
	CMP.b #!Define_SMW_SpriteID_NorSpr015_HorizontalCheepCheep
	BEQ.b CODE_01F69E
	CMP.b #!Define_SMW_SpriteID_NorSpr016_VerticalCheepCheep
	BEQ.b CODE_01F69E
	CMP.b #!Define_SMW_SpriteID_NorSpr004_GreenKoopa
	BCS.b CODE_01F6A3
	CMP.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	BEQ.b CODE_01F6A3
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E163E,y
	BPL.b CODE_01F6A3
CODE_01F695:
	PHY
	PHX
	TYX
	JSR.w SMW_KickHelplessSprite_Main
	PLX
	PLY
	RTS

CODE_01F69E:
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,y
	BEQ.b CODE_01F695
CODE_01F6A3:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr0BF_MegaMole
	BNE.b CODE_01F6B4
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.w !RAM_SMW_NorSpr_YPosLo,y
	CMP.b #$E8
	BMI.b Return01F6DC
CODE_01F6B4:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr07E_FlyingRedCoin
	BNE.b CODE_01F6DD
	LDA.w !RAM_SMW_NorSprXXX_FlyingItems_ItemToDraw,y
	BEQ.b Return01F6DC
	CMP.b #$02
	BNE.b CODE_01F6CD
	LDA.b #!Define_SMW_PlayerState08_WarpToYoshiWingsBonus
	STA.b !RAM_SMW_Player_CurrentState
	LDA.b #!Define_SMW_Sound1DFC_HitVineBlock
	STA.w !RAM_SMW_IO_SoundCh3
CODE_01F6CD:
	LDA.b #$40							;\ Optimization: Unused
	STA.w !RAM_SMW_UnusedRAM_7E14AA					;/
	LDA.b #$02
	STA.w !RAM_SMW_Yoshi_YoshiHasWings
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
Return01F6DC:
	RTS

CODE_01F6DD:
	CMP.b #!Define_SMW_SpriteID_NorSpr04E_LedgeMontyMole
	BEQ.b CODE_01F6E5
	CMP.b #!Define_SMW_SpriteID_NorSpr04D_GroundMontyMole
	BNE.b CODE_01F6EC
CODE_01F6E5:
	LDA.w !RAM_SMW_NorSprXXX_SmallMontyMole_CurrentState,y
	CMP.b #$02
	BCC.b Return01F6DC
CODE_01F6EC:
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.b #$0D
	CMP.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b Return01F74B
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BNE.b CODE_01F70E
	PHX
	TYX
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PLX
	ASL
	ROL
	AND.b #$01
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b Return01F74B
CODE_01F70E:
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b Return01F74B
	LDA.b #$10							; Glitch: Setting !RAM_SMW_Player_InAirFlag to #$24 here would fix the zip bug while in the Iggy/Larry boss fight
	STA.w !RAM_SMW_NorSpr035_Yoshi_DisableSpriteInteraction,x
	LDA.b #!Define_SMW_Sound1DFA_TurnOffYoshiDrum
	STA.w !RAM_SMW_IO_SoundCh2
	LDA.b #!Define_SMW_Sound1DFC_LoseYoshi
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$02
	STA.b !RAM_SMW_NorSpr035_Yoshi_CurrentState,x
	STZ.w !RAM_SMW_Player_RidingYoshiFlag
	LDA.b #$C0
	STA.b !RAM_SMW_Player_YSpeed
	STZ.b !RAM_SMW_Player_XSpeed
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w PanicXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentMouthState,x
	STZ.w !RAM_SMW_NorSpr035_Yoshi_CurrentTongueLength,x
	STZ.w !RAM_SMW_Timer_YoshiTongueInit
	STZ.w !RAM_SMW_Yoshi_CarryOverLevelsFlag
	LDA.b #$30
	STA.w !RAM_SMW_Timer_PlayerHurt
	JSR.w CODE_01EDCC
Return01F74B:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr035_Yoshi_Status08(Address)
namespace SMW_NorSpr035_Yoshi_Status08
%InsertMacroAtXPosition(<Address>)

SpawnUnusedYoshiSmoke:
	PHB
	PHK
	PLB
	JSR.w .Return
	PLB
	RTL

.Return:
	RTS

Sub:
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w ADDR_028BC0
	INC.b !RAM_SMW_Misc_ScratchRAM00
ADDR_028BC0:
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
ADDR_028BC2:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b ADDR_028BCB
	DEY
	BPL.b ADDR_028BC2
	RTS

ADDR_028BCB:
	LDA.b #!Define_SMW_SpriteID_MExtSpr0B_UnusedYoshiSmoke
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_MExtSpr_Timer,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$1C
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_YPosHi,y
	LDA.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w DATA_028C09,x
	STA.w !RAM_SMW_MExtSpr_XSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w DATA_028C0B,x
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	ADC.w DATA_028C0D,x
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	PLX
	RTS

DATA_028C09:
	db $40,$C0

DATA_028C0B:
	db $0C,$FC

DATA_028C0D:
	db $00,$FF
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr035_Yoshi_Status08(Address)
namespace SMW_NorSpr035_Yoshi_Status08
%InsertMacroAtXPosition(<Address>)

DATA_02BB0B:
	db $02,$FA,$06,$06

DATA_02BB0F:
	db $00,$FF,$00,$00

DATA_02BB13:
	db $10,$08,$10,$08

Tiles:
	db $5D,$C6,$5D,$C6

Prop:
	db $46,$46,$06,$06

TileSize:
	db $00,$02,$00,$02

DrawYoshisWings:
;$02BB23
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank02
	BNE.b Return02BB87
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.b #$F8
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.l DATA_02BB0B,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ADC.l DATA_02BB0F,x
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,y
	PLA
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b CODE_02BB86
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.l DATA_02BB13,x
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.l Tiles,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.l Prop,x
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.l TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
CODE_02BB86:
	PLX
Return02BB87:
	RTL
namespace off
endmacro

macro ROUTINE_RT03_SMW_NorSpr035_Yoshi_Status08(Address)
namespace SMW_NorSpr035_Yoshi_Status08
%InsertMacroAtXPosition(<Address>)

DATA_02D0D0:
	db $14,$FC

DATA_02D0D2:
	db $00,$FF

CheckForBerryTileCollisionWithAdultYoshiMouth:
	LDA.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
	BNE.b Return02D0E5
	LDA.w !RAM_SMW_NorSpr035_Yoshi_SlotOfSpriteBeingEaten,x
	BPL.b Return02D0E5
	PHB
	PHK
	PLB
	JSR.w CODE_02D0E6
	PLB
Return02D0E5:
	RTL

CODE_02D0E6:
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	BRA.b CODE_02D149

ADDR_02D0EA:								;\ Note: This routine doesn't appear to be used.
	LDA.b !RAM_SMW_NorSpr_YPosLo,x					;| It seems to be a vertical level version of the below routine, but it doesn't quite work correctly.
	CLC								;| Glitch: Speaking of which, Yoshi's berry interaction is buggy in vertical levels.
	ADC.b #$08							;|
	AND.b #$F0							;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	LDA.w !RAM_SMW_NorSpr_YPosHi,x					;|
	ADC.b #$00							;|
	CMP.b !RAM_SMW_Misc_ScreensInLvl				;|
	BCS.b Return02D148						;|
	STA.b !RAM_SMW_Misc_ScratchRAM03				;|
	AND.b #$10							;|
	STA.b !RAM_SMW_Misc_ScratchRAM08				;|
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x				;|
	LDA.b !RAM_SMW_NorSpr_XPosLo,x					;|
	CLC								;|
	ADC.w DATA_02D0D0,y						;|
	STA.b !RAM_SMW_Misc_ScratchRAM01				;|
	LDA.w !RAM_SMW_NorSpr_XPosHi,x					;|
	ADC.w DATA_02D0D2,y						;|
	CMP.b #$02							;|
	BCS.b Return02D148						;|
	STA.b !RAM_SMW_Misc_ScratchRAM02				;|
	LDA.b !RAM_SMW_Misc_ScratchRAM01				;|
	LSR								;|
	LSR								;|
	LSR								;|
	LSR								;|
	ORA.b !RAM_SMW_Misc_ScratchRAM00				;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	LDX.b !RAM_SMW_Misc_ScratchRAM03				;|
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x	;|
	LDY.b !RAM_SMW_Misc_ScratchRAM0F				;|
	BEQ.b ADDR_02D131						;|
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x	;|
ADDR_02D131:								;|
	CLC								;|
	ADC.b !RAM_SMW_Misc_ScratchRAM00				;|
	STA.b !RAM_SMW_Misc_ScratchRAM05				;|
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x	;|
	LDY.b !RAM_SMW_Misc_ScratchRAM0F				;|
	BEQ.b ADDR_02D142						;|
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x	;|
ADDR_02D142:								;|
	ADC.b !RAM_SMW_Misc_ScratchRAM02				;|
	STA.b !RAM_SMW_Misc_ScratchRAM06				;|
	BRA.b CODE_02D1AD						;/

Return02D148:
	RTS

CODE_02D149:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_Yoshi_YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	CMP.b #$02
	BCS.b Return02D148
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_Yoshi_YPosHi
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_02D0D0,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_Yoshi_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_02D0D2,y
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b Return02D148
	STA.w !RAM_SMW_Yoshi_XPosHi
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02D198
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
CODE_02D198:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02D1A9
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
CODE_02D1A9:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02D1AD:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	BNE.b Return02D1F0
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$45
	BCC.b Return02D1F0
	CMP.b #$48
	BCS.b Return02D1F0
	SEC
	SBC.b #$44
	STA.w !RAM_SMW_Yoshi_BerryBeingEaten
	STZ.w !RAM_SMW_Timer_YoshiTongueIsOut
	LDY.w !RAM_SMW_Yoshi_DuckingFlag
	LDA.w DATA_02D1F1,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b #$22
	STA.w !RAM_SMW_NorSpr035_Yoshi_SwallowAnimationTimer,x
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$08
	AND.b #$F0
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
Return02D1F0:
	RTS

DATA_02D1F1:
	db $00,$04

ChangeBerryIntoBushTile:
	LDA.w !RAM_SMW_Yoshi_XPosLo
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_Yoshi_XPosHi
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.w !RAM_SMW_Yoshi_YPosLo
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_Yoshi_YPosHi
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.b #$04
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	RTL
namespace off
endmacro

macro ROUTINE_RT04_SMW_NorSpr035_Yoshi_Status08(Address)
namespace SMW_NorSpr035_Yoshi_Status08
%InsertMacroAtXPosition(<Address>)

YoshiThroatXDisp:
	db $0C,$0C,$0C,$0C,$0C,$0C,$0D,$0D
	db $0D,$0D,$FC,$FC,$FC,$FC,$FC,$FC
	db $FB,$FB,$FB,$FB,$0C,$0C,$0C,$0C
	db $0C,$0C,$0D,$0D,$0D,$0D,$FC,$FC
	db $FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB

YoshiThroatYDisp:
	db $0E,$0E,$0E,$0D,$0D,$0D,$0C,$0C
	db $0B,$0B,$0E,$0E,$0E,$0D,$0D,$0D
	db $0C,$0C,$0B,$0B,$12,$12,$12,$11
	db $11,$11,$10,$10,$0F,$0F,$12,$12
	db $12,$11,$11,$11,$10,$10,$0F,$0F
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_CheckForBerryTileCollisionWithYoshiTongue(Address)
namespace SMW_CheckForBerryTileCollisionWithYoshiTongue
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	BRA.b CODE_02BA48

ADDR_02B9FE:								;\ Note: This routine doesn't appear to be used.
	LDA.b !RAM_SMW_Misc_ScratchRAM01				;|
	AND.b #$F0							;|
	STA.b !RAM_SMW_Misc_ScratchRAM04				;|
	LDA.b !RAM_SMW_Misc_ScratchRAM09				;|
	CMP.b !RAM_SMW_Misc_ScreensInLvl				;|
	BCS.b Return02BA47						;|
	STA.b !RAM_SMW_Misc_ScratchRAM05				;|
	LDA.b !RAM_SMW_Misc_ScratchRAM00				;|
	STA.b !RAM_SMW_Misc_ScratchRAM07				;|
	LDA.b !RAM_SMW_Misc_ScratchRAM08				;|
	CMP.b #$02							;|
	BCS.b Return02BA47						;|
	STA.b !RAM_SMW_Misc_ScratchRAM0A				;|
	LDA.b !RAM_SMW_Misc_ScratchRAM07				;|
	LSR								;|
	LSR								;|
	LSR								;|
	LSR								;|
	ORA.b !RAM_SMW_Misc_ScratchRAM04				;|
	STA.b !RAM_SMW_Misc_ScratchRAM04				;|
	LDX.b !RAM_SMW_Misc_ScratchRAM05				;|
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x	;|
	LDY.b !RAM_SMW_Misc_ScratchRAM0F				;|
	BEQ.b ADDR_02BA30						;|
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x	;|
ADDR_02BA30:								;|
	CLC								;|
	ADC.b !RAM_SMW_Misc_ScratchRAM04				;|
	STA.b !RAM_SMW_Misc_ScratchRAM05				;|
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x	;|
	LDY.b !RAM_SMW_Misc_ScratchRAM0F				;|
	BEQ.b ADDR_02BA41						;|
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x	;|
ADDR_02BA41:								;|
	ADC.b !RAM_SMW_Misc_ScratchRAM0A				;|
	STA.b !RAM_SMW_Misc_ScratchRAM06				;|
	BRA.b CODE_02BA92						;/

Return02BA47:
	RTL

CODE_02BA48:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	CMP.b #$02
	BCS.b Return02BA47
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	STA.w !RAM_SMW_Yoshi_YPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b Return02BA47
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.b !RAM_SMW_Misc_ScratchRAM07
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02BA7D
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
CODE_02BA7D:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02BA8E
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
CODE_02BA8E:
	ADC.b !RAM_SMW_Misc_ScratchRAM0D
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02BA92:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	BNE.b Return02BABF
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$45
	BCC.b Return02BABF
	CMP.b #$48
	BCS.b Return02BABF
	SEC
	SBC.b #$44
	STA.w !RAM_SMW_Yoshi_BerryBeingEaten
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_02BAB7:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_02BAC0
	DEY
	BPL.b CODE_02BAB7
Return02BABF:
	RTL

CODE_02BAC0:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	STA.b !RAM_SMW_Blocks_YPosHi
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	INC.w !RAM_SMW_NorSprXXX_PowerUps_IsBerryFlag,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	AND.b #$F0
	ORA.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping0C
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_GivePowerupWhenEaten^$FF
	STA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	PLX
	LDA.b #$04
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_NonBossBoos_Status08(Address)
namespace SMW_NorSprXXX_NonBossBoos_Status08
%InsertMacroAtXPosition(<Address>)

MaxSpeed:
	db $08,$F8

DATA_01F8D1:
	db $01,$02,$02,$01

BigBooEntry:
	JSR.w SMW_SubOffscreen_Bank01_Entry2
	LDA.b #$20
	BRA.b CODE_01F8E1

BooEntry:
BooBlockEntry:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b #$10
CODE_01F8E1:
	STA.w !RAM_SMW_Misc_ScratchRAM7E18B6
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01F8EF
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01F8F2
CODE_01F8EF:
	JMP.w CODE_01F9CE

CODE_01F8F2:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w !RAM_SMW_NorSprXXX_NonBossBoos_WaitBeforeNextFollowCheck,x
	BNE.b CODE_01F914
	LDA.b #$20
	STA.w !RAM_SMW_NorSprXXX_NonBossBoos_WaitBeforeNextFollowCheck,x
	LDA.b !RAM_SMW_NorSprXXX_NonBossBoos_FollowingMarioFlag,x
	BEQ.b CODE_01F90C
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$0A
	CMP.b #$14
	BCC.b CODE_01F92F
CODE_01F90C:
	STZ.b !RAM_SMW_NorSprXXX_NonBossBoos_FollowingMarioFlag,x
	CPY.b !RAM_SMW_Player_FacingDirection
	BNE.b CODE_01F914
	INC.b !RAM_SMW_NorSprXXX_NonBossBoos_FollowingMarioFlag,x
CODE_01F914:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$0A
	CMP.b #$14
	BCC.b CODE_01F92F
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b CODE_01F971
	TYA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b CODE_01F92F
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BRA.b CODE_01F971

CODE_01F92F:
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSprXXX_NonBossBoos_FollowingMarioFlag,x
	BEQ.b CODE_01F989
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr028_BigBoo
	BEQ.b CODE_01F948
	LDA.b #$00
	CPY.b #!Define_SMW_SpriteID_NorSpr0AF_BooBlock
	BEQ.b CODE_01F948
	INC
CODE_01F948:
	AND.b !RAM_SMW_Counter_GlobalFrames
	BNE.b CODE_01F96F
	INC.w !RAM_SMW_NorSprXXX_NonBossBoos_IdleAnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSprXXX_NonBossBoos_IdleAnimationFrameCounter,x
	BNE.b CODE_01F959
	LDA.b #$20
	STA.w !RAM_SMW_NorSprXXX_NonBossBoos_IdleAnimationTimer,x
CODE_01F959:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_01F962
	BPL.b CODE_01F961
	INC
	INC
CODE_01F961:
	DEC
CODE_01F962:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_01F96D
	BPL.b CODE_01F96C
	INC
	INC
CODE_01F96C:
	DEC
CODE_01F96D:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01F96F:
	BRA.b CODE_01F9C8

CODE_01F971:
	CMP.b #$10
	BNE.b CODE_01F97F
	PHA
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	PLA
CODE_01F97F:
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_01F8D1,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_01F989:
	STZ.w !RAM_SMW_NorSprXXX_NonBossBoos_IdleAnimationFrameCounter,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_01F9C8
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxSpeed,y
	BEQ.b CODE_01F9A2
	CLC
	ADC.w SMW_GenericNormalSpriteAccelerationTable_Main,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01F9A2:
	LDA.b !RAM_SMW_Player_CurrentYPosLo
	PHA
	SEC
	SBC.w !RAM_SMW_Misc_ScratchRAM7E18B6
	STA.b !RAM_SMW_Player_CurrentYPosLo
	LDA.b !RAM_SMW_Player_CurrentYPosHi
	PHA
	SBC.b #$00
	STA.b !RAM_SMW_Player_CurrentYPosHi
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_Y
	PLA
	STA.b !RAM_SMW_Player_CurrentYPosHi
	PLA
	STA.b !RAM_SMW_Player_CurrentYPosLo
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxSpeed,y
	BEQ.b CODE_01F9C8
	CLC
	ADC.w SMW_GenericNormalSpriteAccelerationTable_Main,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01F9C8:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01F9CE:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0AF_BooBlock
	BNE.b CODE_01FA3D
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_01F9DB
	EOR.b #$FF
	INC
CODE_01F9DB:
	LDY.b #$00
	CMP.b #$08
	BCS.b CODE_01FA09
	PHA
	LDA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	PHA
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	PHA
	ORA.b #!Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction
	STA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSR.w SMW_SolidSpriteBlock_Sub
	PLA
	STA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	PLA
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	PLA
	LDY.b #$01
	CMP.b #$04
	BCS.b CODE_01FA15
	INY
	BRA.b CODE_01FA15

CODE_01FA09:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01FA15
	PHY
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	PLY
CODE_01FA15:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	TAX
	LDA.w BooBlockTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$F1
	ORA.w BooBlockProp,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	RTS

BooBlockTiles:
	db $8C,$C8,$CA

BooBlockProp:
	db $0E,$02,$02

CODE_01FA3D:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01FA47
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
CODE_01FA47:
	JSL.l SMW_NormalSpriteBooGFXRt_Main
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NonBossBoos_Status08_BigBooEntry, SMW_NorSpr028_BigBoo_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NonBossBoos_Status08_BooEntry, SMW_NorSpr037_Boo_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_NonBossBoos_Status08_BooBlockEntry, SMW_NorSpr0AF_BooBlock_Status08_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NormalSpriteBooGFXRt(Address)
namespace SMW_NormalSpriteBooGFXRt
%InsertMacroAtXPosition(<Address>)

BigBooXDisp:
	db $08,$08,$20,$00,$00,$00,$00,$10
	db $10,$10,$10,$20,$20,$20,$20,$30
	db $30,$30,$30,$FD,$0C,$0C,$27,$00
	db $00,$00,$00,$10,$10,$10,$10,$1F
	db $20,$20,$1F,$2E,$2E,$2C,$2C,$FB
	db $12,$12,$30,$00,$00,$00,$00,$10
	db $10,$10,$10,$1F,$20,$20,$1F,$2E
	db $2E,$2E,$2E,$F8,$11,$FF,$08,$08
	db $00,$00,$00,$00,$10,$10,$10,$10
	db $20,$20,$20,$20,$30,$30,$30,$30

BigBooYDisp:
	db $12,$22,$18,$00,$10,$20,$30,$00
	db $10,$20,$30,$00,$10,$20,$30,$00
	db $10,$20,$30,$18,$16,$16,$12,$22
	db $00,$10,$20,$30,$00,$10,$20,$30
	db $00,$10,$20,$30,$00,$10,$20,$30

BigBooTiles:
	db $C0,$E0,$E8,$80,$A0,$A0,$80,$82
	db $A2,$A2,$82,$84,$A4,$C4,$E4,$86
	db $A6,$C6,$E6,$E8,$C0,$E0,$E8,$80
	db $A0,$A0,$80,$82,$A2,$A2,$82,$84
	db $A4,$C4,$E4,$86,$A6,$C6,$E6,$E8
	db $C0,$E0,$E8,$80,$A0,$A0,$80,$82
	db $A2,$A2,$82,$84,$A4,$A4,$84,$86
	db $A6,$A6,$86,$E8,$E8,$E8,$C2,$E2
	db $80,$A0,$A0,$80,$82,$A2,$A2,$82
	db $84,$A4,$C4,$E4,$86,$A6,$C6,$E6

BigBooProp:
	db $00,$00,$40,$00,$00,$80,$80,$00
	db $00,$80,$80,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$40,$00
	db $00,$80,$80,$00,$00,$80,$80,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$40,$00,$00,$80,$80,$00
	db $00,$80,$80,$00,$00,$80,$80,$00
	db $00,$80,$80,$00,$00,$40,$00,$00
	db $00,$00,$80,$80,$00,$00,$80,$80
	db $00,$00,$00,$00,$00,$00,$00,$00

Main:
;$038398
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr037_Boo
	BNE.b CODE_0383C2
	LDA.b #$00
	LDY.b !RAM_SMW_NorSprXXX_NonBossBoos_FollowingMarioFlag,x
	BEQ.b CODE_0383BA
	LDA.b #$06
	LDY.w !RAM_SMW_NorSprXXX_NonBossBoos_IdleAnimationTimer,x
	BEQ.b CODE_0383BA
	TYA
	AND.b #$04
	LSR
	LSR
	ADC.b #$02
CODE_0383BA:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	RTS

CODE_0383C2:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDX.b #$00
CODE_0383E0:
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w BigBooTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	LSR
	LDA.w BigBooProp,x
	ORA.b !RAM_SMW_Misc_ScratchRAM05
	BCS.b CODE_0383F5
	EOR.b #$40
CODE_0383F5:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.w BigBooXDisp,x
	BCS.b CODE_038405
	EOR.b #$FF
	INC
	CLC
	ADC.b #$28
CODE_038405:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CMP.b #$03
	BCC.b CODE_038418
	TXA
	CLC
	ADC.b #$14
	TAX
CODE_038418:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w BigBooYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLX
	INY
	INY
	INY
	INY
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INX
	CPX.b #$14
	BNE.b CODE_0383E0
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$03
	BNE.b CODE_03844B
	LDA.w !RAM_SMW_NorSprXXX_NonBossBoos_IdleAnimationTimer,x
	BEQ.b CODE_03844B
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$05
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
CODE_03844B:
	LDA.b #$13
	LDY.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_Eeries_Status01(Address)
namespace SMW_NorSprXXX_Eeries_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
SetInitialFrameCounter:
	JSL.l SMW_GetRand_Main
	STA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	RTS

XSpeed:
	db $10,$F0
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Eeries_Status01_Main, SMW_NorSpr038_StraightEerie_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Eeries_Status01_Main, SMW_NorSpr039_WavyEerie_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Eeries_Status01_SetInitialFrameCounter, SMW_NorSpr028_BigBoo_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Eeries_Status01_SetInitialFrameCounter, SMW_NorSpr037_Boo_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSprXXX_Eeries_Status08(Address)
namespace SMW_NorSprXXX_Eeries_Status08
%InsertMacroAtXPosition(<Address>)

YSpeed:
	db $18,$E8

Main:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01F8C9
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01F8C9
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr039_WavyEerie
	BNE.b CODE_01F8C0
	LDA.b !RAM_SMW_NorSprXXX_Eeries_VerticalMovementDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w SMW_GenericNormalSpriteAccelerationTable_Main,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w YSpeed,y
	BNE.b CODE_01F8B8
	INC.b !RAM_SMW_NorSprXXX_Eeries_VerticalMovementDirection,x
CODE_01F8B8:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	JSR.w SMW_SubOffscreen_Bank01_Entry4
	BRA.b CODE_01F8C3

CODE_01F8C0:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
CODE_01F8C3:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
CODE_01F8C9:
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
	JMP.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Eeries_Status08_Main, SMW_NorSpr038_StraightEerie_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Eeries_Status08_Main, SMW_NorSpr039_WavyEerie_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr03D_RipVanFish_Status08(Address)
namespace SMW_NorSpr03D_RipVanFish_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #Bank02>>16
	PHA
	PLB
	JSL.l Bank02
	PLB
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr03D_RipVanFish_Status08(Address)
namespace SMW_NorSpr03D_RipVanFish_Status08
%InsertMacroAtXPosition(<Address>)

MaxSpeed:
	db $10,$F0

Acceleration:
	db $01,$FF

Return02BFCC:
	RTL

Bank02:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02BFCC
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	PHA
	LDY.w !RAM_SMW_Timer_StarPower
	BEQ.b CODE_02BFF3
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02BFF3:
	JSR.w SetFacingDirectionBasedOnSpeed
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	PLA
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	PLA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_02C012
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02C012:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$0C
	BEQ.b CODE_02C01B
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02C01B:
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BNE.b CODE_02C024
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02C024:
	LDA.b !RAM_SMW_NorSpr03D_RipVanFish_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

RipVanFishPtrs:
	dw State00_Sleeping
	dw State01_Awake

State00_Sleeping:
	LDA.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_02C044
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_02C044
	BPL.b CODE_02C042
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b CODE_02C044

CODE_02C042:
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02C044:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02C053
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
CODE_02C053:
	JSL.l SMW_SpawnMusicNoteOrZ_Z
	LDA.w !RAM_SMW_Flag_WakeUpRipVanFish
	BNE.b CODE_02C072
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	ADC.b #$30
	CMP.b #$60
	BCS.b CODE_02C07B
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ADC.b #$30
	CMP.b #$60
	BCS.b CODE_02C07B
CODE_02C072:
	INC.b !RAM_SMW_NorSpr03D_RipVanFish_CurrentState,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr03D_RipVanFish_SwimmingTimer,x
	BRA.b State01_Awake

CODE_02C07B:
	LDY.b #$02
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$30
	BNE.b CODE_02C085
	INY
CODE_02C085:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTL

State01_Awake:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_02C095
	DEC.w !RAM_SMW_NorSpr03D_RipVanFish_SwimmingTimer,x
	BEQ.b CODE_02C0CA
CODE_02C095:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_02C0BB
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxSpeed,y
	BEQ.b CODE_02C0AB
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02C0AB:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxSpeed,y
	BEQ.b CODE_02C0BB
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02C0BB:
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$04
	BEQ.b CODE_02C0C5
	INY
CODE_02C0C5:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTL

CODE_02C0CA:
	STZ.b !RAM_SMW_NorSpr03D_RipVanFish_CurrentState,x
	JMP.w State00_Sleeping
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr03D_RipVanFish_Status08(Address)
namespace SMW_NorSpr03D_RipVanFish_Status08
%InsertMacroAtXPosition(<Address>)

SetFacingDirectionBasedOnSpeed:
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_02C12D
	INY
CODE_02C12D:
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Note: The P-switch's "Main" state is status 09 (Stunned), so the main routine will never execute. Which is fine, because this is the code for sprite 19 (Display Message).

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr03E_PSwitch_Status01(Address)
namespace SMW_NorSpr03E_PSwitch_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr03E_PSwitch_Type,x
	TAY
	LDA.w PSwitchPal,y
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

PSwitchPal:
	db $06,$02
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_ParachutingEnemy_Status08(Address)
namespace SMW_NorSprXXX_ParachutingEnemy_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01D4E7:
	db $01,$FF

DATA_01D4E9:
	db $0F,$00

DATA_01D4EB:
	db $00,$02,$04,$06,$08,$0A,$0C,$0E
	db $0E,$0C,$0A,$08,$06,$04,$02,$00

Main:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01D505
	JMP.w CODE_01D671

CODE_01D505:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01D558
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_WaitForParachuteToDescend,x
	BNE.b CODE_01D558
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_01D51A
	INC.b !RAM_SMW_NorSpr_YPosLo,x
	BNE.b CODE_01D51A
	INC.w !RAM_SMW_NorSpr_YPosHi,x
CODE_01D51A:
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_FallStraightDownFlag,x
	BNE.b CODE_01D558
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_01D53A
	LDA.b !RAM_SMW_NorSprXXX_ParachutingEnemy_SwingDirection,x
	AND.b #$01
	TAY
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
	CLC
	ADC.w DATA_01D4E7,y
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
	CMP.w DATA_01D4E9,y
	BNE.b CODE_01D53A
	INC.b !RAM_SMW_NorSprXXX_ParachutingEnemy_SwingDirection,x
CODE_01D53A:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	LDY.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
	LDA.b !RAM_SMW_NorSprXXX_ParachutingEnemy_SwingDirection,x
	LSR
	LDA.w DATA_01D4EB,y
	BCC.b CODE_01D54B
	EOR.b #$FF
	INC
CODE_01D54B:
	CLC
	ADC.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	PLA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b CODE_01D558

CODE_01D558:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JMP.w CODE_01D5B3

DATA_01D55E:
	db $0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C
	db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D

DATA_01D56E:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $01,$01,$01,$01,$01,$01,$01,$01

DATA_01D57E:
	db $F8,$F8,$FA,$FA,$FC,$FC,$FE,$FE
	db $02,$02,$04,$04,$06,$06,$08,$08

DATA_01D58E:
	db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	db $00,$00,$00,$00,$00,$00,$00,$00

DATA_01D59E:
	db $0E,$0E,$0F,$0F,$10,$10,$10,$10
	db $10,$10,$10,$10,$0F,$0F,$0E,$0E

DATA_01D5AE:
	db !Define_SMW_SpriteID_NorSpr00F_Goomba
	db !Define_SMW_SpriteID_NorSpr00D_BobOmb

DATA_01D5B0:
	db $01,$05,$00

CODE_01D5B3:
	STZ.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteYPosOffset
	LDY.b #$F0
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_WaitForParachuteToDescend,x
	BEQ.b CODE_01D5C7
	LSR
	EOR.b #$0F
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteYPosOffset
	CLC
	ADC.b #$F0
	TAY
CODE_01D5C7:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	ADC.b #$FF
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	PHA
	AND.b #$F1
	ORA.b #$06
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDY.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
	LDA.w DATA_01D55E,y
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteAnimationFrame,x
	LDA.w DATA_01D56E,y
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	PLA
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDY.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	CLC
	ADC.w DATA_01D57E,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	ADC.w DATA_01D58E,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w DATA_01D59E,y
	SEC
	SBC.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteYPosOffset
	BPL.b CODE_01D627
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_01D627:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteAnimationFrame,x
	SEC
	SBC.b #$0C
	CMP.b #$01
	BNE.b CODE_01D642
	CLC
	ADC.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_01D642:
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteAnimationFrame,x
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_WaitForParachuteToDescend,x
	BEQ.b CODE_01D64D
	STZ.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteAnimationFrame,x
CODE_01D64D:
	LDY.w !RAM_SMW_NorSprXXX_ParachutingEnemy_ParachuteAnimationFrame,x
	LDA.w DATA_01D5B0,y
	JSR.w SMW_GenericGFXRtDraw4Tiles8x8Square_Sub
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	LDA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_WaitForParachuteToDescend,x
	BEQ.b CODE_01D693
	DEC
	BNE.b CODE_01D681
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	PLA
	PLA
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_WaitForParachuteToDescend,x
CODE_01D671:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr03F_ParachuteGoomba
	TAY
	LDA.w DATA_01D5AE,y
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	RTS

CODE_01D681:
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01D68C
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
CODE_01D68C:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_01D6B5

CODE_01D693:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_01D6B5
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_01D6AB
	LDA.b #$01
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_FallStraightDownFlag,x
	LDA.b #$07
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
CODE_01D6AB:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01D6B5
	LDA.b #$20
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_WaitForParachuteToDescend,x
CODE_01D6B5:
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_ParachutingEnemy_Status08_Return, SMW_NorSpr069_Unused_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_ParachutingEnemy_Status08_Return, SMW_NorSpr069_Unused_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_ParachutingEnemy_Status08_Main, SMW_NorSpr03F_ParachuteGoomba_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_ParachutingEnemy_Status08_Main, SMW_NorSpr040_ParachuteBobOmb_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprXXX_Dolphins_Status08(Address)
namespace SMW_NorSprXXX_Dolphins_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #Bank02>>16
	PHA
	PLB
	JSL.l Bank02
	PLB
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Dolphins_Status08_Main, SMW_NorSpr041_LongJumpDolphin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Dolphins_Status08_Main, SMW_NorSpr042_ShortJumpDolphin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_Dolphins_Status08_Main, SMW_NorSpr043_VerticalDolphin_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_Dolphins_Status08(Address)
namespace SMW_NorSprXXX_Dolphins_Status08
%InsertMacroAtXPosition(<Address>)

XAcceleration:
	db $FF,$01,$FF,$01,$00,$00

MaxXSpeed:
	db $E8,$18,$F8,$08,$00,$00

Bank02:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02BBFF
	JSR.w SMW_SubOffscreen_Bank02_Entry2
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$00
	BNE.b CODE_02BBB7
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_02BBB5
	CMP.b #$3F
	BCS.b CODE_02BBB7
CODE_02BBB5:
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02BBB7:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_02BBC1
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
CODE_02BBC1:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_02BBFB
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_02BBFB
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_02BBD7
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_02BBD7
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02BBD7:
	LDA.w !RAM_SMW_NorSprXXX_Dolphins_NoTurnAroundFlag,x
	BNE.b CODE_02BBF7
	LDA.b !RAM_SMW_NorSprXXX_Dolphins_HorizontalMovementDirection,x
	LSR
	PHP
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr041_LongJumpDolphin
	PLP
	ROL
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BNE.b CODE_02BBFB
	INC.b !RAM_SMW_NorSprXXX_Dolphins_HorizontalMovementDirection,x
CODE_02BBF7:
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02BBFB:
	JSL.l SMW_SolidSpriteBlock_Main
Return02BBFF:
	RTL

CODE_02BC00:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	JSL.l SMW_GenericGFXRtDraw2Tiles16x16sStacked_Main
	RTS

Tiles1:
	db $E2,$88

Tiles2:
	db $E7,$A8

Tiles3:
	db $E8,$A9

GFXRt:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr043_VerticalDolphin
	BNE.b CODE_02BC1D
	JMP.w CODE_02BC00

CODE_02BC1D:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL.b !RAM_SMW_Misc_ScratchRAM02
	PHP
	BCC.b CODE_02BC3C
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$42].XDisp,y
	BRA.b CODE_02BC4E

CODE_02BC3C:
	CLC
	ADC.b #$18
	STA.w SMW_OAMBuffer[$40].XDisp,y
	SEC
	SBC.b #$10
	STA.w SMW_OAMBuffer[$41].XDisp,y
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$42].XDisp,y
CODE_02BC4E:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	STA.w SMW_OAMBuffer[$42].YDisp,y
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$08
	LSR
	LSR
	LSR
	TAX
	LDA.w Tiles1,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Tiles2,x
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w Tiles3,x
	STA.w SMW_OAMBuffer[$42].Tile,y
	PLX
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	PLP
	BCS.b CODE_02BC7F
	ORA.b #$40
CODE_02BC7F:
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	LDA.b #$02
	LDY.b #$02
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr044_TorpedoTed_Status08(Address)
namespace SMW_NorSpr044_TorpedoTed_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr044_TorpedoTed_Status08(Address)
namespace SMW_NorSpr044_TorpedoTed_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
#LM300Hijack_Bank02RTL:
	RTL

Sub:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSpr044_TorpedoTed_ReleaseAnimationTimer,x
	BEQ.b CODE_02B896
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_02B896:
	JSR.w GFXRt
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02B8B7
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	LDA.w !RAM_SMW_NorSpr044_TorpedoTed_ReleaseAnimationTimer,x
	BEQ.b CODE_02B8BC
	LDA.b #$08
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return02B8B7:
	RTS

MaxSpeed:
	db $20,$F0

Acceleration:
	db $01,$FF

CODE_02B8BC:
	LDA.b !RAM_SMW_Counter_GlobalFrames					; Glitch: This ought to be set to use !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_02B8D2
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxSpeed,y
	BEQ.b CODE_02B8D2
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02B8D2:
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_02B8E4
	LDA.b !RAM_SMW_Counter_GlobalFrames					; Glitch: Same as above.
	AND.b #$01
	BNE.b CODE_02B8E4
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02B8E4:
	TXA
	CLC
	ADC.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	BNE.b Return02B8EF
	JSR.w SpawnSmokePuffTrail
Return02B8EF:
	RTS

XDisp:
	db $10,$00,$10

UnusedTiles:
	db $80,$82

Prop:
	db $40,$00

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	PHX
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp+$01,x
else
	ADC.w XDisp+$01,x
endif
	STA.w SMW_OAMBuffer[$41].XDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	PLX
	LDA.b #$80
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w !RAM_SMW_NorSpr044_TorpedoTed_ReleaseAnimationTimer,x
	CMP.b #$01
	LDA.b #$82
	BCS.b CODE_02B944
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LDA.b #$A0
	BCC.b CODE_02B944
	LDA.b #$82
CODE_02B944:
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$01
	LDY.b #$02
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

DATA_02B94E:
	db $F4,$1C

DATA_02B950:
	db $FF,$00

SpawnSmokePuffTrail:
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_02B954:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_02B969
	DEY
	BPL.b CODE_02B954
	DEC.w !RAM_SMW_SmokeSpr_CopyOfSlotToOverwriteWhenSlotsFull
	BPL.b CODE_02B966
	LDA.b #!Define_SMW_MaxSmokeSpriteSlot
	STA.w !RAM_SMW_SmokeSpr_CopyOfSlotToOverwriteWhenSlotsFull
CODE_02B966:
	LDY.w !RAM_SMW_SmokeSpr_CopyOfSlotToOverwriteWhenSlotsFull
CODE_02B969:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_02B94E,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w DATA_02B950,x
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PLA
	PLX
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b Return02B9A3
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$0F
	STA.w !RAM_SMW_SmokeSpr_Timer,y
Return02B9A3:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr045_DirectionalCoins_Status08(Address)
namespace SMW_NorSpr045_DirectionalCoins_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr045_DirectionalCoins_Status08(Address)
namespace SMW_NorSpr045_DirectionalCoins_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $00,$00,$F0,$10

YSpeed:
	db $F0,$10,$00,$00

DATA_02E201:
	db $00,$03,$02,$00,$01,$03,$02,$00
	db $00,$03,$02,$00,$00,$00,$00,$00

DATA_02E211:
	db $01,$00,$03,$02

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSpr045_DirectionalCoins_AppearBehindLayer1Timer,x
	CMP.b #$30
	BCC.b CODE_02E22B
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_02E22B:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PHA
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PHA
	ADC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	LDA.w !RAM_SMW_Timer_BluePSwitch
	BNE.b CODE_02E245
	JSL.l SMW_PowerUpAndItemGFXRt_DrawCoinSprite_Main
	BRA.b CODE_02E259

CODE_02E245:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$2E
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$3F
	STA.w SMW_OAMBuffer[$40].Prop,y
CODE_02E259:
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02E2DE
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_02E288
	DEC.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
	BNE.b CODE_02E288
CODE_02E271:
	STZ.w !RAM_SMW_NorSpr045_DirectionalCoins_DespawnTimer
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.w !RAM_SMW_Timer_BluePSwitch
	ORA.w !RAM_SMW_Timer_SilverPSwitch
	BNE.b Return02E287
	LDA.w !RAM_SMW_Misc_MusicRegisterBackup
	BMI.b Return02E287
	STA.w !RAM_SMW_IO_MusicCh1
Return02E287:
	RTS

CODE_02E288:
	LDY.b !RAM_SMW_NorSpr045_DirectionalCoins_MovementDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #(!Joypad_DPadL>>8)|(!Joypad_DPadR>>8)|(!Joypad_DPadU>>8)|(!Joypad_DPadD>>8)
	BEQ.b CODE_02E2B0
	TAY
	LDA.w DATA_02E201,y
	TAY
	LDA.w DATA_02E211,y
	CMP.b !RAM_SMW_NorSpr045_DirectionalCoins_MovementDirection,x
	BEQ.b CODE_02E2B0
	TYA
	STA.w !RAM_SMW_NorSpr045_DirectionalCoins_DirectionToTravelNext,x
CODE_02E2B0:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$0F
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_02E2DE
	LDA.w !RAM_SMW_NorSpr045_DirectionalCoins_DirectionToTravelNext,x
	STA.b !RAM_SMW_NorSpr045_DirectionalCoins_MovementDirection,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.b #$06
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	RTS

CODE_02E2DE:
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BNE.b CODE_02E2F3
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedVerticallyHi
	BNE.b CODE_02E2FF
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedVerticallyLo
	CMP.b #$25
	BNE.b CODE_02E2FF
	RTS

CODE_02E2F3:
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyHi
	BNE.b CODE_02E2FF
	LDA.w !RAM_SMW_Sprites_Map16TileBeingTouchedHorizontallyLo
	CMP.b #$25
	BEQ.b Return02E302
CODE_02E2FF:
	JSR.w CODE_02E271
Return02E302:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr046_DigginChuck_Status08(Address)
namespace SMW_NorSpr046_DigginChuck_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l SMW_NorSpr091_CharginChuck_Status08_Bank02
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08(Address)
namespace SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08(Address)
namespace SMW_NorSpr047_SwimmingAndJumpingCheepCheep_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E74B
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDY.b #$00
	JSR.w SMW_NorSprXXX_SuperKoopas_Status08_CODE_02EB3D
	LDA.b !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_CurrentState,x
	AND.b #$01
	JSL.l SMW_ExecutePtr_Absolute

SwimmingAndJumpingCheepCheepPtrs:
	dw Swimming
	dw Jumping

Return02E74B:
	RTS

XSpeed:
	db $14,$EC

Swimming:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	LDA.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnOrJumpTimer,x
	BNE.b Return02E77B
	INC.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnAroundCounter,x
	LDY.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnAroundCounter,x
	CPY.b #$04
	BEQ.b CODE_02E77C
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b #$20
	CPY.b #$03
	BEQ.b CODE_02E778
	LDA.b #$40
CODE_02E778:
	STA.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnOrJumpTimer,x
Return02E77B:
	RTS

CODE_02E77C:
	INC.b !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_CurrentState,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnOrJumpTimer,x
	LDA.b #$A0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

Jumping:
	LDA.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnOrJumpTimer,x
	BEQ.b CODE_02E7A4
	CMP.b #$70
	BCS.b Return02E7A3
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_02E79E
	CMP.b #$30
	BCS.b Return02E7A3
CODE_02E79E:
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return02E7A3:
	RTS

CODE_02E7A4:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	INC.b !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_CurrentState,x
	STZ.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnAroundCounter,x
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr047_SwimmingAndJumpingCheepCheep_TurnOrJumpTimer,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr048_DigginChuckRock_Status08(Address)
namespace SMW_NorSpr048_DigginChuckRock_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr048_DigginChuckRock_Status08(Address)
namespace SMW_NorSpr048_DigginChuckRock_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSpr048_DigginChuckRock_InGroundTimer,x
	BEQ.b CODE_02E7C9
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_02E7C9:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E82C
	LDA.w !RAM_SMW_NorSpr048_DigginChuckRock_InGroundTimer,x
	CMP.b #$08
	BCS.b Return02E82C
	LDY.b #$00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	JSR.w SMW_NorSprXXX_SuperKoopas_Status08_CODE_02EB3D
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr048_DigginChuckRock_InGroundTimer,x
	BNE.b CODE_02E828
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_02E7FD
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02E7FD:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$08
	BEQ.b CODE_02E808
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02E808:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02E828
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$38
	LDA.b #$E0
	BCC.b CODE_02E819
	LDA.b #$D0
CODE_02E819:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$08
	LDY.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	BEQ.b CODE_02E828
	BPL.b CODE_02E826
	LDA.b #$F8
CODE_02E826:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02E828:
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
Return02E82C:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr049_ShiftingPipe_Status01(Address)
namespace SMW_NorSpr049_ShiftingPipe_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr049_ShiftingPipe_InitialClearTileOffset,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr049_ShiftingPipe_Status08(Address)
namespace SMW_NorSpr049_ShiftingPipe_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr049_ShiftingPipe_Status08(Address)
namespace SMW_NorSpr049_ShiftingPipe_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

YSpeed:
	db $00,$F0,$00,$10

DATA_02E839:
	db $20,$40,$20,$40

LeftTileToSpawn:
	db $00,$14,$00,$02

RightTileToSpawn:
	db $00,$15,$00,$02

Sub:
	LDA.w !RAM_SMW_NorSpr049_ShiftingPipe_InitialClearTileOffset,x
	BMI.b CODE_02E872
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.w !RAM_SMW_NorSpr049_ShiftingPipe_InitialClearTileOffset,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDY.b #$03
	JSR.w GrowingPipeGfx
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr049_ShiftingPipe_InitialClearTileOffset,x
	SEC
	SBC.b #$10
	STA.w !RAM_SMW_NorSpr049_ShiftingPipe_InitialClearTileOffset,x
	RTS

CODE_02E872:
	JSR.w GFXRt
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_02E8B5
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$50
	CMP.b #$A0
	BCS.b CODE_02E8B5
	LDA.b !RAM_SMW_NorSpr049_ShiftingPipe_CurrentMovementPhase,x
	AND.b #$03
	TAY
	INC.w !RAM_SMW_NorSpr049_ShiftingPipe_MovementPhaseTimer,x
	LDA.w !RAM_SMW_NorSpr049_ShiftingPipe_MovementPhaseTimer,x
	CMP.w DATA_02E839,y
	BNE.b CODE_02E8A2
	STZ.w !RAM_SMW_NorSpr049_ShiftingPipe_MovementPhaseTimer,x
	INC.b !RAM_SMW_NorSpr049_ShiftingPipe_CurrentMovementPhase,x
	BRA.b CODE_02E8B5

CODE_02E8A2:
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_02E8B2
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$0F
	BNE.b CODE_02E8B2
	JSR.w GrowingPipeGfx
CODE_02E8B2:
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
CODE_02E8B5:
	JSL.l SMW_SolidSpriteBlock_Main
	RTS

GrowingPipeGfx:
	LDA.w LeftTileToSpawn,y
	STA.w !RAM_SMW_NorSpr049_ShiftingPipe_LeftMap16Tile
	LDA.w RightTileToSpawn,y
	STA.w !RAM_SMW_NorSpr049_ShiftingPipe_RightMap16Tile
	LDA.w !RAM_SMW_NorSpr049_ShiftingPipe_LeftMap16Tile
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
	LDA.w !RAM_SMW_NorSpr049_ShiftingPipe_RightMap16Tile
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
	RTS

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	DEC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b #$A4
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$A6
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
.PipeLakituEntry:
	LDA.b #$01
	LDY.b #$02
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's horizontally offscreen

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr04A_GoalSphere_Status08(Address)
namespace SMW_NorSpr04A_GoalSphere_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$1F
	ORA.b !RAM_SMW_Flag_SpritesLocked
	JSR.w SMW_SpawnSparkles_GoalSphereEntry
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b Return
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
#Debug_TriggerCutsceneOnGoal:
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
	LDA.b #!Define_SMW_LevelMusic_PassedBoss
	STA.w !RAM_SMW_IO_MusicCh1
Return:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr04B_PipeLakitu_Status08(Address)
namespace SMW_NorSpr04B_PipeLakitu_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr04B_PipeLakitu_Status08(Address)
namespace SMW_NorSpr04B_PipeLakitu_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BNE.b CODE_02E94C
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JMP.w GFXRt

CODE_02E94C:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E985
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	LDA.b !RAM_SMW_NorSpr04B_PipeLakitu_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

PipeLakituPtrs:
	dw State00_HidingInPipe
	dw State01_Peeking
	dw State02_Rising
	dw State03_ThrowSpiny
	dw State04_Descend

State00_HidingInPipe:
	LDA.w !RAM_SMW_NorSpr04B_PipeLakitu_PhaseTimer,x
	BNE.b Return02E985
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$13
	CMP.b #$36
	BCC.b Return02E985
	LDA.b #$90
CODE_02E980:
	STA.w !RAM_SMW_NorSpr04B_PipeLakitu_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr04B_PipeLakitu_CurrentState,x
Return02E985:
	RTS

State01_Peeking:
	LDA.w !RAM_SMW_NorSpr04B_PipeLakitu_PhaseTimer,x
	BNE.b CODE_02E996
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b #$0C
	BRA.b CODE_02E980

CODE_02E996:
	CMP.b #$7C
	BCC.b CODE_02E9A2
CODE_02E99A:
	LDA.b #$F8
CODE_02E99C:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	RTS

CODE_02E9A2:
	CMP.b #$50
	BCS.b Return02E9B3
	LDY.b #$00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$20
	BEQ.b CODE_02E9AF
	INY
CODE_02E9AF:
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return02E9B3:
	RTS

State02_Rising:
	LDA.w !RAM_SMW_NorSpr04B_PipeLakitu_PhaseTimer,x
	BNE.b CODE_02E99A
	LDA.b #$80
	BRA.b CODE_02E980

State03_ThrowSpiny:
	LDA.w !RAM_SMW_NorSpr04B_PipeLakitu_PhaseTimer,x
	BNE.b CODE_02E9C6
	LDA.b #$20
	BRA.b CODE_02E980

CODE_02E9C6:
	CMP.b #$40
	BNE.b CODE_02E9CF
	JSL.l SMW_MakeLakituThrowSpiny_Main
	RTS

CODE_02E9CF:
	BCS.b Return02E9D4
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
Return02E9D4:
	RTS

State04_Descend:
	LDA.w !RAM_SMW_NorSpr04B_PipeLakitu_PhaseTimer,x
	BNE.b CODE_02E9E2
	LDA.b #$50
	JSR.w CODE_02E980
	STZ.b !RAM_SMW_NorSpr04B_PipeLakitu_CurrentState,x
	RTS

CODE_02E9E2:
	LDA.b #$08
	BRA.b CODE_02E99C

HeadTiles:
	db $EC,$A8,$CE

BodyTiles:					;\ Note: Pipe Lakitu's body never changes...
	db $EE,$EE,$EE				;/

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].YDisp,y
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAX
	LDA.w HeadTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w BodyTiles,x
	STA.w SMW_OAMBuffer[$41].Tile,y
	PLX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	ROR
	LSR
	EOR.b #$5B
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	JMP.w SMW_NorSpr049_ShiftingPipe_Status08_GFXRt_PipeLakituEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr04C_ExplodingBlock_Status01(Address)
namespace SMW_NorSpr04C_ExplodingBlock_Status01
%InsertMacroAtXPosition(<Address>)

ExplodingBlkSpr:
	db !Define_SMW_SpriteID_NorSpr015_HorizontalCheepCheep
	db !Define_SMW_SpriteID_NorSpr00F_Goomba
	db !Define_SMW_SpriteID_NorSpr000_GreenNakedKoopa
	db !Define_SMW_SpriteID_NorSpr004_GreenKoopa

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w ExplodingBlkSpr,y
	STA.b !RAM_SMW_NorSpr04C_ExplodingBlock_Contents,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr04C_ExplodingBlock_Status08(Address)
namespace SMW_NorSpr04C_ExplodingBlock_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr04C_ExplodingBlock_Status08(Address)
namespace SMW_NorSpr04C_ExplodingBlock_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E462
	BRA.b CODE_02E42D

ADDR_02E429:						;\ Note: Unreachable address
	JSL.l SMW_SpawnMusicNoteOrZ_MusicNote		;/
CODE_02E42D:
	LDY.b #$00
	INC.w !RAM_SMW_NorSpr04C_ExplodingBlock_ShakingAnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr04C_ExplodingBlock_ShakingAnimationFrameCounter,x
	AND.b #$40
	BEQ.b CODE_02E444
	LDY.b #$04
	LDA.w !RAM_SMW_NorSpr04C_ExplodingBlock_ShakingAnimationFrameCounter,x
	AND.b #$04
	BEQ.b CODE_02E444
	LDY.b #$FC
CODE_02E444:
	STY.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$60
	CMP.b #$C0
	BCS.b Return02E462
	LDY.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b Return02E462
	JSL.l SMW_ShatterExplodingBlock_Main
Return02E462:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_ShatterExplodingBlock(Address)
namespace SMW_ShatterExplodingBlock
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr04C_ExplodingBlock_Contents,x
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	PHB
	LDA.b #SMW_SpawnBrickPieces_Main>>16
	PHA
	PLB
	LDA.b #$00
	JSL.l SMW_SpawnBrickPieces_Main
	PLB
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_SmallMontyMole_Status08(Address)
namespace SMW_NorSprXXX_SmallMontyMole_Status08
%InsertMacroAtXPosition(<Address>)

UNK_01E2C8:
	db $13,$14,$15,$16,$17,$18,$19 ; Possibly stomp sounds?

Main:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_NorSprXXX_SmallMontyMole_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

GroundMontyMolePtrs:
	dw State00_Invisible
	dw State01_AboutToEmerge
	dw State02_PopOutOfGround
	dw State03_Walking

State00_Invisible:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$60
	CMP.b #$C0
	BCS.b CODE_01E305
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b CODE_01E305
	INC.b !RAM_SMW_NorSprXXX_SmallMontyMole_CurrentState,x
	LDY.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	TAY
	LDA.b #$68
	CPY.b #!Define_SMW_Submap_SlowerEmergingMontyMoles
	BEQ.b CODE_01E302
	LDA.b #$20
CODE_01E302:
	STA.w !RAM_SMW_NorSprXXX_SmallMontyMole_WaitBeforeJumpingOutOfGround,x
CODE_01E305:
	JSR.w SMW_GetDrawInfo_Bank01
	RTS

State01_AboutToEmerge:
	LDA.w !RAM_SMW_NorSprXXX_SmallMontyMole_WaitBeforeJumpingOutOfGround,x
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b CODE_01E343
	INC.b !RAM_SMW_NorSprXXX_SmallMontyMole_CurrentState,x
	LDA.b #$B0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank01
	BNE.b CODE_01E320
	TAY
	JSR.w SMW_BreakThrowBlock_MontyMoleEntry
CODE_01E320:
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr04E_LedgeMontyMole
	BNE.b CODE_01E343
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.b #$08
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
CODE_01E343:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr04D_GroundMontyMole
	BNE.b CODE_01E363
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LSR
	AND.b #$01
	TAY
	LDA.w DATA_01E35F,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w DATA_01E361,y
	JSR.w SMW_GenericGFXRtDraw4Tiles8x8Square_Sub
	RTS

DATA_01E35F:
	db $01,$02

DATA_01E361:
	db $00,$05

CODE_01E363:
	LDA.b !RAM_SMW_Counter_LocalFrames
	ASL
	ASL
	AND.b #$C0
	ORA.b #$31
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$3F
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	RTS

State02_PopOutOfGround:
	JSR.w CODE_01E3EF
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b Return01E38E
	INC.b !RAM_SMW_NorSprXXX_SmallMontyMole_CurrentState,x
Return01E38E:
	RTS

NoFollowXSpeed:
	db $10,$F0

FollowMaxXSpeed:
	db $18,$E8

State03_Walking:
	JSR.w CODE_01E3EF
	LDA.w !RAM_SMW_NorSprXXX_SmallMontyMole_FollowMarioFlag,x
	BNE.b CODE_01E3C7
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSL.l SMW_GetRand_Main
	AND.b #$01
	BNE.b Return01E3C6
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w FollowMaxXSpeed,y
	BEQ.b Return01E3C6
	CLC
	ADC.w SMW_GenericNormalSpriteAccelerationTable_Main,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	TYA
	LSR
	ROR
	EOR.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b Return01E3C6
	JSR.w SMW_SpawnNormalSpriteTurnAroundSmoke_Main
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
Return01E3C6:
	RTS

CODE_01E3C7:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01E3E9
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	JSR.w SMW_SetNormalSpriteAnimationFrame_Main
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w NoFollowXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSprXXX_SmallMontyMole_WaitBeforeNextHop,x
	BNE.b Return01E3E8
	LDA.b #$50
	STA.w !RAM_SMW_NorSprXXX_SmallMontyMole_WaitBeforeNextHop,x
	LDA.b #$D8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return01E3E8:
	RTS

CODE_01E3E9:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_01E3EF:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSprXXX_SmallMontyMole_WaitBeforeJumpingOutOfGround,x
	BEQ.b CODE_01E3FB
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_01E3FB:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01E41C
	JSR.w SMW_NorSpr01E_Lakitu_Status08_CheckForPlayerAndNormalSpriteCollisions_Sub
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01E413
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
CODE_01E413:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b Return01E41B
	JSR.w SMW_ChangeNormalSpriteDirection_Main
Return01E41B:
	RTS

CODE_01E41C:
	PLA
	PLA
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_SmallMontyMole_Status08_Main, SMW_NorSpr04D_GroundMontyMole_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_SmallMontyMole_Status08_Main, SMW_NorSpr04E_LedgeMontyMole_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprXXX_JumpingPiranhaPlant_Status08(Address)
namespace SMW_NorSprXXX_JumpingPiranhaPlant_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_JumpingPiranhaPlant_Status08_Main, SMW_NorSpr04F_JumpingPiranhaPlant_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_JumpingPiranhaPlant_Status08_Main, SMW_NorSpr050_FireSpittingJumpingPiranhaPlant_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_JumpingPiranhaPlant_Status08(Address)
namespace SMW_NorSprXXX_JumpingPiranhaPlant_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_MouthAnimationFrameCounter,x
	AND.b #$08
	LSR
	LSR
	EOR.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_PropellerAnimationFrameCounter,x
	AND.b #$04
	LSR
	LSR
	INC
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.b #$01
	JSL.l SMW_GenericGFXRtDraw4Tiles8x8Square_Main
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E158
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

JumpingPiranhaPlantPtrs:
	dw State00_Waiting
	dw State01_Jump
	dw State02_Descend

State00_Waiting:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_WaitBeforeJumping,x
	BNE.b Return02E158
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$1B
	CMP.b #$37
	BCC.b Return02E158
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_CurrentState,x
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
Return02E158:
	RTS

State01_Jump:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_02E161
	CMP.b #$40
	BCS.b CODE_02E166
CODE_02E161:
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02E166:
	INC.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_MouthAnimationFrameCounter,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$F0
	BMI.b Return02E176
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr050_FireSpittingJumpingPiranhaPlant_WaitBeforeFireSpit,x
	INC.b !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_CurrentState,x
Return02E176:
	RTS

State02_Descend:
	INC.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_PropellerAnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr050_FireSpittingJumpingPiranhaPlant_WaitBeforeFireSpit,x
	BNE.b CODE_02E1A4
CODE_02E17F:
	INC.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_MouthAnimationFrameCounter,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_02E191
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$08
	BPL.b CODE_02E191
	INC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02E191:
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return02E176
	STZ.b !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_WaitBeforeJumping,x
	RTS

CODE_02E1A4:
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr050_FireSpittingJumpingPiranhaPlant
	BNE.b CODE_02E1F7
	STZ.w !RAM_SMW_NorSprXXX_JumpingPiranhaPlant_MouthAnimationFrameCounter,x
	CMP.b #$40
	BNE.b CODE_02E1F7
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b CODE_02E1F7
	LDA.b #$10
	JSR.w CODE_02E1C0
	LDA.b #$F0
CODE_02E1C0:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02E1C4:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02E1CD
	DEY
	BPL.b CODE_02E1C4
	RTS

CODE_02E1CD:
	LDA.b #!Define_SMW_SpriteID_ExtSpr0B_PiranhaFireball
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #$D0
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
CODE_02E1F7:
	BRA.b CODE_02E17F
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr051_Ninji_Status08(Address)
namespace SMW_NorSpr051_Ninji_Status08
%InsertMacroAtXPosition(<Address>)

YSpeed:
	db $D0,$C0,$B0,$D0

Bank03:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03C38F
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x				;\ Glitch: Set AND.b #$04 to AND.b #$0C to fix the bug where Ninjis will get stuck inside ceilings.
	AND.b #$04								;|
	BEQ.b CODE_03C385							;/
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr051_Ninji_WaitBeforeNextJump,x
	BNE.b CODE_03C385
	LDA.b #$60
	STA.w !RAM_SMW_NorSpr051_Ninji_WaitBeforeNextJump,x
	INC.b !RAM_SMW_NorSpr051_Ninji_JumpCounter,x
	LDA.b !RAM_SMW_NorSpr051_Ninji_JumpCounter,x
	AND.b #$03
	TAY
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03C385:
	LDA.b #$00
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_03C38C
	INC
CODE_03C38C:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
Return03C38F:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr052_MovingLedgeHole_Status01(Address)
namespace SMW_NorSpr052_MovingLedgeHole_Status01
%InsertMacroAtXPosition(<Address>)

Main:								;\ Glitch: Placing this sprite at the top of a subscreen will cause it to spawn at the bottom.
	DEC.b !RAM_SMW_NorSpr_YPosLo,x				;| LM: ROMs edited with 2.53+ cause this routine to become unused due to FuSoYa adding a fix for this bug.
	RTS							;/
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr052_MovingLedgeHole_Status08(Address)
namespace SMW_NorSpr052_MovingLedgeHole_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr052_MovingLedgeHole_Status08(Address)
namespace SMW_NorSpr052_MovingLedgeHole_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02E5D7
	INC.w !RAM_SMW_NorSpr052_MovingLedgeHole_ChangeDirectionTimer,x
	LDY.b #$10
	LDA.w !RAM_SMW_NorSpr052_MovingLedgeHole_ChangeDirectionTimer,x
	AND.b #$80
	BNE.b CODE_02E5D1
	LDY.b #$F0
CODE_02E5D1:
	TYA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
CODE_02E5D7:
	JSR.w GFXRt
	JSR.w CODE_02E5F7
	LDA.w !RAM_SMW_Player_DisableObjectInteractionFlag
	BEQ.b CODE_02E5E8
	DEC
	CMP.w !RAM_SMW_NorSpr_CurrentSlotID
	BNE.b Return02E5F6
CODE_02E5E8:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	STZ.w !RAM_SMW_Player_DisableObjectInteractionFlag
	BCC.b Return02E5F6
	INX
	STX.w !RAM_SMW_Player_DisableObjectInteractionFlag
	DEX
Return02E5F6:
	RTS

CODE_02E5F7:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_02E5F9:
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_02E633
	TYA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_02E633
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b CODE_02E633
	LDA.w !RAM_SMW_NorSpr_NoLevelCollisionFlag,y
	BEQ.b CODE_02E617
	DEC
	CMP.w !RAM_SMW_NorSpr_CurrentSlotID
	BNE.b CODE_02E633
CODE_02E617:
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_NoLevelCollisionFlag,y
	BCC.b CODE_02E633
	TXA
	INC
	STA.w !RAM_SMW_NorSpr_NoLevelCollisionFlag,y
CODE_02E633:
	DEY
	BPL.b CODE_02E5F9
	RTS

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	PHX
	LDX.b #$03					; Optimization: There is no reason why this should be drawing 4 tiles, when 3 is enough to cover the length it uses.
Loop:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
	PLX
	LDA.b #$03
	LDY.b #$02
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

XDisp:
	db $00,$08,$18,$20

Tiles:
	db $EB,$EA,$EA,$EB

Prop:
	db $71,$31,$31,$31
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr054_ClimbingNetDoor_Status01(Address)
namespace SMW_NorSpr054_ClimbingNetDoor_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	ADC.b #$07
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr054_ClimbingNetDoor_Status08(Address)
namespace SMW_NorSpr054_ClimbingNetDoor_Status08
%InsertMacroAtXPosition(<Address>)

UNK_01BA95:
	db $30,$54

XDisp:
	db $00,$01,$02,$04,$06,$09,$0C,$0D
	db $14,$0D,$0C,$09,$06,$04,$02,$01

AnimationFrame:
	db $00,$00,$00,$00,$00,$01,$01,$01
	db $02,$01,$01,$01,$00,$00,$00,$00

Tiles:
	db $00,$10,$00,$00,$10,$00,$01,$11,$01
	db $05,$15,$05,$05,$15,$05,$00,$00,$00
	db $03,$13,$03

Return01BACC:
	RTS

Main:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_WaitBeforeTurning,x
	CMP.b #$01
	BNE.b CODE_01BAF5
	LDA.b #!Define_SMW_Sound1DF9_HurtWhileFlying
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$19
	JSL.l UpdateClimbingNetDoorTiles
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_TurningAnimationTimer,x
	STA.w !RAM_SMW_Timer_OnSwingingClimbingNetDoor
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b #$10
	SEC
	SBC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_Sprites_PlayerXSpeedOnSwingingNetDoor
CODE_01BAF5:
	LDA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_TurningAnimationTimer,x
	ORA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_WaitBeforeTurning,x
	BNE.b CODE_01BB16
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSR.w CODE_01BC1D
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_01BB16
	LDA.w !RAM_SMW_Timer_DisplayPlayerNetPunchPose
	CMP.b #$01
	BNE.b CODE_01BB16
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_WaitBeforeTurning,x
CODE_01BB16:
	LDA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_TurningAnimationTimer,x
	BEQ.b Return01BACC
	CMP.b #$01
	BNE.b CODE_01BB27
	PHA
	LDA.b #$1A
	JSL.l UpdateClimbingNetDoorTiles
	PLA
CODE_01BB27:
	CMP.b #$10
	BNE.b CODE_01BB33
	LDA.w !RAM_SMW_Player_CurrentLayerPriority
	EOR.b #$01
	STA.w !RAM_SMW_Player_CurrentLayerPriority
CODE_01BB33:
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr054_ClimbingNetDoor_TurningAnimationTimer,x
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l AnimationFrame,x
else
	LDA.w AnimationFrame,x
endif
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CMP.b #$02
	BEQ.b CODE_01BB8E
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$20
	SEC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	SBC.l XDisp,x
else
	SBC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$43].XDisp,y
	STA.w SMW_OAMBuffer[$44].XDisp,y
	STA.w SMW_OAMBuffer[$45].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BNE.b CODE_01BB8E
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$46].XDisp,y
	STA.w SMW_OAMBuffer[$47].XDisp,y
	STA.w SMW_OAMBuffer[$48].XDisp,y
CODE_01BB8E:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$43].YDisp,y
	STA.w SMW_OAMBuffer[$46].YDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].YDisp,y
	STA.w SMW_OAMBuffer[$44].YDisp,y
	STA.w SMW_OAMBuffer[$47].YDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$42].YDisp,y
	STA.w SMW_OAMBuffer[$45].YDisp,y
	STA.w SMW_OAMBuffer[$48].YDisp,y
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM06
	TAX
CODE_01BBBD:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	INY
	INY
	INY
	INY
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_01BBBD
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b #$08
CODE_01BBD0:
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$09
	CPX.b #$06
	BCS.b CODE_01BBDA
	ORA.b #$40
CODE_01BBDA:
	CPX.b #$00
	BEQ.b CODE_01BBE6
	CPX.b #$03
	BEQ.b CODE_01BBE6
	CPX.b #$06
	BNE.b CODE_01BBE8
CODE_01BBE6:
	ORA.b #$80
CODE_01BBE8:
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_01BBD0
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	PHA
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$08
	JSR.w SMW_NormalSpritePlatformGFXRt_CODE_01B37E
	LDY.b #$0C
	PLA
	BEQ.b Return01BC1C
	CMP.b #$02
	BNE.b CODE_01BC11
	LDA.b #$03
	STA.w SMW_OAMTileSizeBuffer[$43].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$44].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$45].Slot,y
CODE_01BC11:
	LDA.b #$03
	STA.w SMW_OAMTileSizeBuffer[$46].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$47].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$48].Slot,y
Return01BC1C:
	RTS

CODE_01BC1D:
	LDA.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Player_YPosHi
	STA.b !RAM_SMW_Misc_ScratchRAM09
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr054_ClimbingNetDoor_Status08(Address)
namespace SMW_NorSpr054_ClimbingNetDoor_Status08
%InsertMacroAtXPosition(<Address>)

UpdateClimbingNetDoorTiles:
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr055_HorizontalCheckerboardPlatform_Status01(Address)
namespace SMW_NorSpr055_HorizontalCheckerboardPlatform_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_NorSpr055_HorizontalCheckerboardPlatform_PlatformType,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr055_HorizontalCheckerboardPlatform_Status01_Main, SMW_NorSpr057_VerticalCheckerboardPlatform_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08(Address)
namespace SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01B268:
	db $FF,$01

DATA_01B26A:
	db $F0,$10

Main:
	JSR.w SMW_NormalSpritePlatformGFXRt_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01B2C2
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BNE.b CODE_01B2A5
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	AND.b #$03
	BNE.b CODE_01B2A5
	LDA.w !RAM_SMW_NorSpr_Table7E151C,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w DATA_01B268,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w DATA_01B26A,y
	BNE.b CODE_01B2A5
	INC.w !RAM_SMW_NorSpr_Table7E151C,x
	LDA.b #$18
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr055_HorizontalCheckerboardPlatform
	BNE.b CODE_01B2A2
	LDA.b #$08
CODE_01B2A2:
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_01B2A5:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr057_VerticalCheckerboardPlatform
	BCS.b CODE_01B2B0
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	BRA.b CODE_01B2B6

CODE_01B2B0:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	STZ.w !RAM_SMW_Sprites_PositionDisp
CODE_01B2B6:
	LDA.w !RAM_SMW_Sprites_PositionDisp
	STA.w !RAM_SMW_NorSpr_Table7E1528,x
	JSR.w SMW_SolidSpriteBlock_Sub
	JSR.w SMW_SubOffscreen_Bank01_Entry2
Return01B2C2:
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08_Main, SMW_NorSpr056_HorizontalRockPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08_Main, SMW_NorSpr057_VerticalCheckerboardPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr055_HorizontalCheckerboardPlatform_Status08_Main, SMW_NorSpr058_VerticalRockPlatform_Status08_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NormalSpritePlatformGFXRt(Address)
namespace SMW_NormalSpritePlatformGFXRt
%InsertMacroAtXPosition(<Address>)

DATA_01B2C3:
	db $00,$01,$00,$01,$00,$00,$00,$00
	db $01,$01,$00,$00,$00,$00

Main:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr055_HorizontalCheckerboardPlatform
	TAY
	LDA.w DATA_01B2C3,y
	BEQ.b DrawFlatPlatform
	JMP.w DrawRockPlatform

DrawFlatPlatform:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr055_HorizontalCheckerboardPlatform_PlatformType,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	STA.w SMW_OAMBuffer[$42].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_01B2FF
	STA.w SMW_OAMBuffer[$43].YDisp,y
	STA.w SMW_OAMBuffer[$44].YDisp,y
CODE_01B2FF:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_01B326
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$43].XDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$44].XDisp,y
CODE_01B326:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_01B344
	LDA.b #$EA
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$EB
	STA.w SMW_OAMBuffer[$41].Tile,y
	STA.w SMW_OAMBuffer[$42].Tile,y
	STA.w SMW_OAMBuffer[$43].Tile,y
	LDA.b #$EC
	STA.w SMW_OAMBuffer[$44].Tile,y
	BRA.b CODE_01B359

CODE_01B344:
	LDA.b #$60
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$61
	STA.w SMW_OAMBuffer[$41].Tile,y
	STA.w SMW_OAMBuffer[$42].Tile,y
	STA.w SMW_OAMBuffer[$43].Tile,y
	LDA.b #$62
	STA.w SMW_OAMBuffer[$44].Tile,y
CODE_01B359:
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	STA.w SMW_OAMBuffer[$43].Prop,y
	STA.w SMW_OAMBuffer[$44].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_01B376
	LDA.b #$62
	STA.w SMW_OAMBuffer[$42].Tile,y
CODE_01B376:
	LDA.b #$04
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_01B37E
	LDA.b #$02
CODE_01B37E:
	LDY.b #$02
	JMP.w SMW_FinishOAMWrite_Sub

DiagPlatTiles:
	db $CB,$E4,$CC,$E5,$CC,$E5,$CC,$E4
	db $CB

UNK_FlyRockPlatTiles:
	db $85,$88,$86,$89,$86,$89,$86,$88
	db $85

DrawRockPlatform:
	JSR.w SMW_GetDrawInfo_Bank01
	PHY
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr05E_FloatingOrangePlatform
	BNE.b CODE_01B3A2
	INY
CODE_01B3A2:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	PLY
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$42].YDisp,y
	STA.w SMW_OAMBuffer[$44].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_01B3BD
	STA.w SMW_OAMBuffer[$46].YDisp,y
	STA.w SMW_OAMBuffer[$48].YDisp,y
CODE_01B3BD:
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].YDisp,y
	STA.w SMW_OAMBuffer[$43].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_01B3D0
	STA.w SMW_OAMBuffer[$45].YDisp,y
	STA.w SMW_OAMBuffer[$47].YDisp,y
CODE_01B3D0:
	LDA.b #$08
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_01B3D8
	LDA.b #$04
CODE_01B3D8:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	DEC
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr05B_BrownBuoyantPlatform
	LDA.b #$00
	BCS.b CODE_01B3EF
	LDA.b #$09
CODE_01B3EF:
	PHA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PLX
CODE_01B3F6:
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$08
	PHA
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DiagPlatTiles,x
else
	LDA.w DiagPlatTiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	CPX.b !RAM_SMW_Misc_ScratchRAM02
	PLX
	BCS.b CODE_01B411
	ORA.b #$40
CODE_01B411:
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	INY
	INY
	INY
	INY
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_01B3F6
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_01B444
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr05B_BrownBuoyantPlatform
	BCS.b CODE_01B43A
	LDA.b #$85
	STA.w SMW_OAMBuffer[$44].Tile,y
	LDA.b #$88
	STA.w SMW_OAMBuffer[$43].Tile,y
	BRA.b CODE_01B444

CODE_01B43A:
	LDA.b #$CB
	STA.w SMW_OAMBuffer[$44].Tile,y
	LDA.b #$E4
	STA.w SMW_OAMBuffer[$43].Tile,y
CODE_01B444:
	LDA.b #$08
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_01B44C
	LDA.b #$04
CODE_01B44C:
	JMP.w CODE_01B37E
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprXXX_TurnBlockBridge_Status08(Address)
namespace SMW_NorSprXXX_TurnBlockBridge_Status08
%InsertMacroAtXPosition(<Address>)

BlkBridgeLength:
	db $20,$00

TurnBlkBridgeSpeed:
	db $01,$FF

BlkBridgeTiming:
	db $40,$40

HorizontalAndVerticalTurnBlockBridgeEntry:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w GFXRt
	JSR.w CODE_01B852
	JSR.w CODE_01B6B2
	RTS

CODE_01B6B2:
	LDA.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	AND.b #$01
	TAY
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
	CMP.w BlkBridgeLength,y
	BEQ.b CODE_01B6D1
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_WaitBeforeExtending,x
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01B6D0
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
	CLC
	ADC.w TurnBlkBridgeSpeed,y
	STA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
Return01B6D0:
	RTS

CODE_01B6D1:
	LDA.w BlkBridgeTiming,y
	STA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_WaitBeforeExtending,x
	INC.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	RTS

HorizontalTurnBlockBridgeEntry:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w GFXRt
	JSR.w CODE_01B852
	JSR.w CODE_01B6E7
	RTS

CODE_01B6E7:
	LDY.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
	CMP.w BlkBridgeLength,y
	BEQ.b CODE_01B703
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_WaitBeforeExtending,x
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01B702
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
	CLC
	ADC.w TurnBlkBridgeSpeed,y
	STA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
Return01B702:
	RTS

CODE_01B703:
	LDA.w BlkBridgeTiming,y
	STA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_WaitBeforeExtending,x
	LDA.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	EOR.b #$01
	STA.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	RTS

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	AND.b #$02
	TAY
	LDA.w !RAM_SMW_NorSprXXX_TurnBlockBridge_ExtendDistance,x
	STA.w !RAM_SMW_Misc_ScratchRAM00,y
	LSR
	STA.w !RAM_SMW_Misc_ScratchRAM01,y
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$44].YDisp,y
	PHA
	PHA
	PHA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$42].YDisp,y
	PLA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM03
	STA.w SMW_OAMBuffer[$43].YDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$44].XDisp,y
	PHA
	PHA
	PHA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$42].XDisp,y
	PLA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$43].XDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_NorSprXXX_TurnBlockBridge_MovementState,x
	LSR
	LSR
	LDA.b #$40
	STA.w SMW_OAMBuffer[$41].Tile,y
	STA.w SMW_OAMBuffer[$43].Tile,y
	STA.w SMW_OAMBuffer[$44].Tile,y
	STA.w SMW_OAMBuffer[$42].Tile,y
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$43].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	STA.w SMW_OAMBuffer[$44].Prop,y
	ORA.b #$60							; Note: I wonder why Nintendo made the first tile have a different priority and X flip?
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	PHA
	LDA.b #$04
	JSR.w SMW_NormalSpritePlatformGFXRt_CODE_01B37E
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_TurnBlockBridge_Status08_HorizontalAndVerticalTurnBlockBridgeEntry, SMW_NorSpr059_HorizontalAndVerticalTurnBlockBridge_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_TurnBlockBridge_Status08_HorizontalTurnBlockBridgeEntry, SMW_NorSpr05A_HorizontalTurnBlockBridge_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_TurnBlockBridge_Status08(Address)
namespace SMW_NorSprXXX_TurnBlockBridge_Status08
%InsertMacroAtXPosition(<Address>)

Return01B851:
	RTS ; Unused

CODE_01B852:
	LDA.w !RAM_SMW_NorSpr_Table7E15C4,x
	BNE.b Return01B8B1
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCS.b Return01B8B1
	JSR.w CODE_01B8FF
	BCC.b Return01B8B1
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0D
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CLC
	ADC.b #$18
	CMP.b !RAM_SMW_Misc_ScratchRAM09
	BCS.b ADDR_01B8B2
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return01B8B1
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b #$01
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	CLC
	ADC.b #$1F
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01B88F
	CLC
	ADC.b #$10
CODE_01B88F:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_PositionDisp
	BPL.b CODE_01B8A7
	DEY
CODE_01B8A7:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
Return01B8B1:
	RTS

ADDR_01B8B2:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0D
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$FF
	LDY.b !RAM_SMW_Player_DuckingFlag
	BNE.b ADDR_01B8C3
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b ADDR_01B8C5
ADDR_01B8C3:
	LDA.b #$08
ADDR_01B8C5:
	CLC
	ADC.b !RAM_SMW_Player_OnScreenPosYLo
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	BCC.b ADDR_01B8D5
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b Return01B8D4
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
Return01B8D4:
	RTS

ADDR_01B8D5:
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b !RAM_SMW_Player_OnScreenPosXLo
	BCC.b ADDR_01B8EF
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	DEY
ADDR_01B8EF:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Player_XPosHi
	STZ.b !RAM_SMW_Player_XSpeed
	RTS

CODE_01B8FF:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	ASL
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM07
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01(Address)
namespace SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01
%InsertMacroAtXPosition(<Address>)

InitialXSpeed:
	db $08,$F8,$10,$F0

SpikeBallEntry:
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDY.w !RAM_SMW_NorSpr_Table7E157C,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	BEQ.b CODE_01B224
	INY
	INY
CODE_01B224:
	LDA.w InitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	BRA.b InitFloatingPlat

BuoyantCheckboardPlatformEntry:
	INC.w !RAM_SMW_NorSpr_Table7E1602,x
FloatingOrangePlatformEntry:
	LDA.w !RAM_SMW_Sprites_SpriteBuoyancySettings
	BNE.b InitFloatingPlat
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	RTS

InitFloatingPlat:
BrownBuoyantPlatformEntry:
OrangeBuoyantPlatformEntry:
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
CODE_01B23B:
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BNE.b Return
	DEC.w !RAM_SMW_NorSpr_Table7E151C,x
	BMI.b CODE_01B262
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	CMP.b #$02
	BCS.b Return						;\ Optimization: Save 2 bytes by changing this to BCC.b CODE_01B23B and removing the BRA.b.
	BRA.b CODE_01B23B					;/

Return:
HorizontalRockPlatformEntry:
VerticalRockPlatformEntry:
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_HorizontalRockPlatformEntry, SMW_NorSpr056_HorizontalRockPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_VerticalRockPlatformEntry, SMW_NorSpr058_VerticalRockPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_BrownBuoyantPlatformEntry, SMW_NorSpr05B_BrownBuoyantPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_BuoyantCheckboardPlatformEntry, SMW_NorSpr05C_BuoyantCheckboardPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_OrangeBuoyantPlatformEntry, SMW_NorSpr05D_OrangeBuoyantPlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_FloatingOrangePlatformEntry, SMW_NorSpr05E_FloatingOrangePlatform_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_SpikeBallEntry, SMW_NorSpr0A4_SpikeBall_Status01_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01(Address)
namespace SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01
%InsertMacroAtXPosition(<Address>)

CODE_01B262:
	LDA.b #!Define_SMW_NorSprStatus01_Init
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
HorizontalAndVerticalTurnBlockBridgeEntry:
HorizontalTurnBlockBridgeEntry:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_HorizontalAndVerticalTurnBlockBridgeEntry, SMW_NorSpr059_HorizontalAndVerticalTurnBlockBridge_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status01_HorizontalTurnBlockBridgeEntry, SMW_NorSpr05A_HorizontalTurnBlockBridge_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08(Address)
namespace SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08
%InsertMacroAtXPosition(<Address>)

FloatingOrangePlatformEntry:
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	BEQ.b CODE_01B563
	JSR.w SMW_NormalSpritePlatformGFXRt_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01B558
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.w !RAM_SMW_Sprites_PositionDisp
	STA.w !RAM_SMW_NorSpr_Table7E1528,x
	JSR.w SMW_SolidSpriteBlock_Sub
	BCC.b Return01B558
	LDA.b #$01
	STA.w !RAM_SMW_Flag_ActiveFastBackgroundScrollGenerator
	LDA.b #$08
	STA.b !RAM_SMW_NorSpr_XSpeed,x
Return01B558:
	RTS

SpikeBallEntry:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_01B563
	JMP.w SpikeBallGFXRt

CODE_01B563:
BrownBuoyantPlatformEntry:
BuoyantCheckboardPlatformEntry:
OrangeBuoyantPlatformEntry:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_01B56A
	JMP.w CODE_01B64E

CODE_01B56A:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$0C
	BNE.b CODE_01B574
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01B574:
	STZ.w !RAM_SMW_Sprites_PositionDisp
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A4_SpikeBall
	BNE.b CODE_01B580
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
CODE_01B580:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_01B588
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B588:
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_01B5A6
	LDY.b #$F8
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr05D_OrangeBuoyantPlatform
	BCC.b CODE_01B597
	LDY.b #$FC
CODE_01B597:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_01B5A1
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_01B5A6
CODE_01B5A1:
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B5A6:
	LDA.b !RAM_SMW_Player_YSpeed
	PHA
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A4_SpikeBall
	BNE.b CODE_01B5B5
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	CLC
	BRA.b CODE_01B5B8

CODE_01B5B5:
	JSR.w SMW_SolidSpriteBlock_Sub
CODE_01B5B8:
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.w !RAM_SMW_Misc_ScratchRAM7E185E
	BCC.b CODE_01B5E7
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr05D_OrangeBuoyantPlatform
	BCC.b CODE_01B5DA
	LDY.b #$03
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_01B5CD
	DEY
CODE_01B5CD:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_01B5DA
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B5DA:
	INC.w !RAM_SMW_Misc_ScratchRAM7E185E
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$20
	BCC.b CODE_01B5E7
	LSR
	LSR
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B5E7:
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	CMP.w !RAM_SMW_NorSpr_Table7E151C,x
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
	BEQ.b CODE_01B610
	LDA.w !RAM_SMW_Misc_ScratchRAM7E185E
	BNE.b CODE_01B610
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_01B610
	LDY.b #$08
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_01B603
	LDY.b #$06
CODE_01B603:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$20
	BPL.b CODE_01B610
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B610:
	LDA.b #$01
	AND.b !RAM_SMW_Counter_GlobalFrames
	BNE.b CODE_01B64E
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_01B624
	BPL.b CODE_01B61F
	CLC
	ADC.b #$02
CODE_01B61F:
	SEC
	SBC.b #$01
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01B624:
	LDY.w !RAM_SMW_Misc_ScratchRAM7E185E
	BEQ.b CODE_01B631
	LDY.b #$05
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_01B631
	LDY.b #$02
CODE_01B631:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
CODE_01B64E:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A4_SpikeBall
	BEQ.b SpikeBallGFXRt
	JMP.w SMW_NormalSpritePlatformGFXRt_Main

SpikeBallXDisp:
	db $F8,$08,$F8,$08

SpikeBallYDisp:
	db $F8,$F8,$08,$08

SpikeBallProp:
	db $31,$71,$A1,$F1

SpikeBallGFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	PHX
	LDX.b #$03
CODE_01B66C:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w SpikeBallXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w SpikeBallYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$04
	LSR
	ADC.b #$AA
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SpikeBallProp,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_01B66C
	PLX
	LDY.b #$02
	LDA.b #$03
	JMP.w SMW_FinishOAMWrite_Sub
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08_BrownBuoyantPlatformEntry, SMW_NorSpr05B_BrownBuoyantPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08_BuoyantCheckboardPlatformEntry, SMW_NorSpr05C_BuoyantCheckboardPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08_OrangeBuoyantPlatformEntry, SMW_NorSpr05D_OrangeBuoyantPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08_FloatingOrangePlatformEntry, SMW_NorSpr05E_FloatingOrangePlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_BuoyantPlatformsAndMine_Status08_SpikeBallEntry, SMW_NorSpr0A4_SpikeBall_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr05F_BrownChainedPlatform_Status01(Address)
namespace SMW_NorSpr05F_BrownChainedPlatform_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$78
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$68
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr05F_BrownChainedPlatform_Status08(Address)
namespace SMW_NorSpr05F_BrownChainedPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_SubOffscreen_Bank01_Entry3
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01C795
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	ORA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_PlayerOnPlatformFlag,x
	BNE.b CODE_01C795
	LDA.b #$01
	LDY.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
	BEQ.b CODE_01C795
	BMI.b CODE_01C78E
	LDA.b #$FF
CODE_01C78E:
	CLC
	ADC.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
CODE_01C795:
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	PHA
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	PHA
	LDA.b #$00
	SEC
	SBC.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	LDA.b #$02
	SBC.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	AND.b #$01
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	JSR.w CODE_01CACB
	JSR.w SMW_GetSineAndCosineOfTiltingPlatform_Main
	JSR.w SMW_CalculateCircleCoordinatesForTiltingPlaform_Main
	PLA
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	PLA
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	PHA
	SEC
	SBC.b !RAM_SMW_NorSpr05F_BrownChainedPlatform_PreviousXPos,x
	STA.w !RAM_SMW_Sprites_PositionDisp
	PLA
	STA.b !RAM_SMW_NorSpr05F_BrownChainedPlatform_PreviousXPos,x
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b #$A2
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$31
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	SEC
	SBC.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	BPL.b CODE_01C802
	EOR.b #$FF
	INC
	INY
CODE_01C802:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !REGISTER_DividendHi
	STZ.w !REGISTER_DividendLo
	LDA.b #$05
	STA.w !REGISTER_Divisor
	JSR.w SMW_WasteTime_Main
	LDA.w !REGISTER_QuotientLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !REGISTER_QuotientHi
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	SEC
	SBC.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	BPL.b CODE_01C82F
	EOR.b #$FF
	INC
	INY
CODE_01C82F:
	STY.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !REGISTER_DividendHi
	STZ.w !REGISTER_DividendLo
	LDA.b #$05
	STA.w !REGISTER_Divisor
	JSR.w SMW_WasteTime_Main
	LDA.w !REGISTER_QuotientLo
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !REGISTER_QuotientHi
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	INY
	INY
	INY
	INY
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b #$A2
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$31
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDX.b #$03
CODE_01C87C:
	INY
	INY
	INY
	INY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_01C88E
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM07
	STA.w SMW_OAMBuffer[$40].YDisp,y
	BRA.b CODE_01C896

CODE_01C88E:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM07
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_01C896:
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_01C8B1
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM09
	STA.w SMW_OAMBuffer[$40].XDisp,y
	BRA.b CODE_01C8B9

CODE_01C8B1:
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM09
	STA.w SMW_OAMBuffer[$40].XDisp,y
CODE_01C8B9:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	ADC.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$A2
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$31
	STA.w SMW_OAMBuffer[$40].Prop,y
	DEX
	BPL.b CODE_01C87C
	LDX.b #$03
CODE_01C8D5:
	STX.b !RAM_SMW_Misc_ScratchRAM02
	INY
	INY
	INY
	INY
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b #$10
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w PlatformXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w PlatformTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$31
	STA.w SMW_OAMBuffer[$40].Prop,y
	DEX
	BPL.b CODE_01C8D5
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$09
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterYPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Misc_RotatingObjectCenterXPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$41].YDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w SMW_OAMBuffer[$41].XDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM07
CODE_01C934:
	TYA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	LDX.b #$00
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM07
	BPL.b CODE_01C948
	DEX
CODE_01C948:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM04
	TXA
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM05
	JSR.w SMW_FinishOAMWrite_CODE_01B844
	BCC.b CODE_01C960
	TYA
	LSR
	LSR
	TAX
	LDA.b #$03
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
CODE_01C960:
	LDX.b #$00
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM06
	BPL.b CODE_01C96B
	DEX
CODE_01C96B:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	TXA
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	JSR.w CODE_01C9BF
	BCC.b CODE_01C97F
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_01C97F:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.b #$09
	BNE.b CODE_01C999
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosHi
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosHi
CODE_01C999:
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM08
	BPL.b CODE_01C934
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01C9B6
	JSR.w UpdateRotatingPlatformAngle
	JMP.w CODE_01C9EC

Return01C9B6:
	RTS

PlatformXDisp:
	db $E0,$F0,$00,$10

PlatformTiles:
	db $60,$61,$61,$62

CODE_01C9BF:
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	PHA
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM09
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.w #$0100
	PLA
	STA.b !RAM_SMW_Misc_ScratchRAM09
	SEP.b #$20
Return01C9D5:
	RTS

DATA_01C9D6:
	db $01,$FF

DATA_01C9D8:
	db $40,$C0

CODE_01C9DA:
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_PlayerIsTouchingPlatformFlag,x
	BEQ.b Return01C9EB
	STZ.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_PlayerIsTouchingPlatformFlag,x
CODE_01C9E2:
	PHX
	JSL.l SMW_PlayerGFXRt_Main
	PLX
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
Return01C9EB:
	RTS

CODE_01C9EC:
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosHi
	XBA
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	REP.b #$20
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0010
	CMP.w #$0120
	SEP.b #$20
	ROL
	AND.b #$01
	ORA.b !RAM_SMW_Flag_SpritesLocked
	STA.w !RAM_SMW_NorSpr_Table7E15C4,x
	BNE.b Return01C9D5
	JSR.w CODE_01CA9C
	STZ.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_PlayerOnPlatformFlag,x
	BCC.b CODE_01C9DA
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_PlayerIsTouchingPlatformFlag,x
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM03
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CLC
	ADC.b #$18
	CMP.b !RAM_SMW_Misc_ScratchRAM0E
	BCS.b Return01CA9B
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01C9E2
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b #$03
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_PlayerOnPlatformFlag,x
	LDA.b #$28
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01CA45
	LDA.b #$38
CODE_01CA45:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$03
	BNE.b CODE_01CA6E
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_PositionDisp
	BPL.b CODE_01CA64
	DEY
CODE_01CA64:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
CODE_01CA6E:
	JSR.w CODE_01C9E2
	LDA.b !RAM_SMW_IO_ControllerPress1
	BMI.b CODE_01CA79
	LDA.b #$FF
	STA.b !RAM_SMW_Player_HidePlayerTileFlags
CODE_01CA79:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) == $00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b Return01CA9B
endif
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	CLC
	ADC.b #$80
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	ADC.b #$00
	AND.b #$01
	TAY
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
	BEQ.b +
	EOR.w DATA_01C9D8,y
	BPL.b +
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b Return01CA9B
+:
endif
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
	CMP.w DATA_01C9D8,y
	BEQ.b Return01CA9B
	CLC
	ADC.w DATA_01C9D6,y
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
Return01CA9B:
	RTS

CODE_01CA9C:
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosLo
	SEC
	SBC.b #$18
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileXPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b #$40
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosLo
	SEC
	SBC.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_ChainTileYPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b #$13
	STA.b !RAM_SMW_Misc_ScratchRAM07
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	RTS

CODE_01CACB:
	LDA.b #$50
	STA.w !RAM_SMW_Misc_RotatingObjectXRadiusLo
	STZ.w !RAM_SMW_Misc_RotatingObjectYRadiusLo
	STZ.w !RAM_SMW_Misc_RotatingObjectXRadiusHi
	STZ.w !RAM_SMW_Misc_RotatingObjectYRadiusHi
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_XAngleSpeedLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_XAngleSpeedHi
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_XAngleSpeedLo
	SEC
	SBC.w !RAM_SMW_Misc_RotatingObjectXRadiusLo
	STA.w !RAM_SMW_Misc_RotatingObjectCenterXPosLo
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_XAngleSpeedHi
	SBC.w !RAM_SMW_Misc_RotatingObjectXRadiusHi
	STA.w !RAM_SMW_Misc_RotatingObjectCenterXPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_YAngleSpeedLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_YAngleSpeedHi
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_YAngleSpeedLo
	SEC
	SBC.w !RAM_SMW_Misc_RotatingObjectYRadiusLo
	STA.w !RAM_SMW_Misc_RotatingObjectCenterYPosLo
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_YAngleSpeedHi
	SBC.w !RAM_SMW_Misc_RotatingObjectYRadiusHi
	STA.w !RAM_SMW_Misc_RotatingObjectCenterYPosHi
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	STA.b !RAM_SMW_Misc_M7RotationHi
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr05F_BrownChainedPlatform_Status08(Address)
namespace SMW_NorSpr05F_BrownChainedPlatform_Status08
%InsertMacroAtXPosition(<Address>)

UpdateRotatingPlatformAngle:
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_SubAngle,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_SubAngle,x
	PHP
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	BCC.b CODE_01CD0F
	ORA.b #$F0
	DEY
CODE_01CD0F:
	PLP
	ADC.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	STA.w !RAM_SMW_NorSpr05F_BrownChainedPlatform_AngleHi,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr060_FlatPalaceSwitch_Status01(Address)
namespace SMW_NorSpr060_FlatPalaceSwitch_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr060_FlatPalaceSwitch_Status08(Address)
namespace SMW_NorSpr060_FlatPalaceSwitch_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr060_FlatPalaceSwitch_Status08(Address)
namespace SMW_NorSpr060_FlatPalaceSwitch_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

XDisp:
	db $00,$08,$10,$18,$00,$08,$10,$18

YDisp:
	db $00,$00,$00,$00,$08,$08,$08,$08

Tile:
	db $00,$01,$01,$00,$10,$11,$11,$10

Prop:
	db $31,$31,$71,$71,$31,$31,$71,$71

Palette:
	db $0A,$04,$06,$08

Sub:
	LDA.w !RAM_SMW_NorSpr060_FlatPalaceSwitch_WaitBeforeEraseSwitchObject,x
	CMP.b #$5E
	BNE.b DontEraseObjectYet
	LDA.b #$1B
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
DontEraseObjectYet:
	JSL.l SMW_SolidSpriteBlock_Main
;GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	PHX
	LDX.w !RAM_SMW_Sprites_ColorOfFlatPalaceSwitchToSpawn
	LDA.w Palette,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$07
Loop:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tile,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	CPX.b #$04
	BCS.b BaseTiles						; Info: The base tiles use palette 0, while the top tiles use a palette based on the color of the switch pressed.
	ORA.b !RAM_SMW_Misc_ScratchRAM02
BaseTiles:
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
	PLX
	LDY.b #$00
	LDA.b #$07
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

Return02CDC4:							;\ Optimization: Unused RTS
	RTS 							;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr061_SkullRaft_Status01(Address)
namespace SMW_NorSpr061_SkullRaft_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr061_SkullRaft_Status01(Address)
namespace SMW_NorSpr061_SkullRaft_Status01
%InsertMacroAtXPosition(<Address>)

XPosOffset:
	db $10,$20,$30

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	STZ.w !RAM_SMW_Sprites_FloatingSkullSpeed
	INC.b !RAM_SMW_NorSpr061_SkullRaft_FirstPlatformFlag,x
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
Loop:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b NoFreeSlot
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr061_SkullRaft
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDX.b !RAM_SMW_Misc_ScratchRAM00
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l XPosOffset,x
else
	LDA.w XPosOffset,x
endif
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
NoFreeSlot:							; Optimization: You know, if there are no free slots available, why bother checking if the remaining skulls can be spawned in?
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b Loop
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr061_SkullRaft_Status08(Address)
namespace SMW_NorSpr061_SkullRaft_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr061_SkullRaft_Status08(Address)
namespace SMW_NorSpr061_SkullRaft_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.b !RAM_SMW_NorSpr061_SkullRaft_FirstPlatformFlag,x
	BEQ.b CODE_02EDF6
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BNE.b CODE_02EDF6
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_02EDE6:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr061_SkullRaft
	BNE.b CODE_02EDF2
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
CODE_02EDF2:
	DEY
	BPL.b CODE_02EDE6
Return02EDF5:
	RTS

CODE_02EDF6:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LSR
	LDA.b #$E0
	BCC.b CODE_02EE09
	LDA.b #$E2
CODE_02EE09:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	CMP.b #$F0
	BCS.b CODE_02EE19
	CLC
	ADC.b #$03
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_02EE19:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02EDF5
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_02EE21:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_02EE36
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr061_SkullRaft
	BNE.b CODE_02EE36
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,y
	AND.b #$0F
	BEQ.b CODE_02EE36
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_02EE36:
	DEY
	BPL.b CODE_02EE21
	LDA.w !RAM_SMW_Sprites_FloatingSkullSpeed
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$20
	BMI.b CODE_02EE48
	LDA.b #$20
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02EE48:
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02EE57
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02EE57:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return02EEA8
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return02EEA8
	LDA.b #$0C
	STA.w !RAM_SMW_Sprites_FloatingSkullSpeed
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAX
	INC.w SMW_OAMBuffer[$40].YDisp,x
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$01
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	STZ.b !RAM_SMW_Player_InAirFlag
	LDA.b #$1C
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_02EE80
	LDA.b #$2C
CODE_02EE80:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$01
	BNE.b Return02EEA8
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_PositionDisp
	BPL.b CODE_02EE9E
	DEY
CODE_02EE9E:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
Return02EEA8:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_LineGuidedSprites_Status01(Address)
namespace SMW_NorSprXXX_LineGuidedSprites_Status01
%InsertMacroAtXPosition(<Address>)

LineGuideRopeEntry:
	CPX.b #$06
	BCC.b CODE_01D6E0
	LDA.w !RAM_SMW_Sprites_SpriteMemorySetting
	BEQ.b CODE_01D6E0
	INC.w !RAM_SMW_NorSpr_PropertyBits1662,x
	BRA.b CODE_01D6E0

CheckerboardLineGuidePlatformEntry:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	EOR.b #$10
	STA.w !RAM_SMW_NorSpr062_BrownLineGuidePlatform_PlatformType,x
	BEQ.b CODE_01D6E0
	INC.w !RAM_SMW_NorSpr_PropertyBits1662,x
CODE_01D6E0:
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
	JSR.w SMW_NorSprXXX_LineGuidedSprites_Status08_LineFuzzyPlats
	JSR.w SMW_NorSprXXX_LineGuidedSprites_Status08_LineFuzzyPlats
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
Return01D6EC:
	RTS

ChainsawEntry:
UpsideDownChainsawEntry:
LineGuideGrinderEntry:
LineGuideFuzzyEntry:
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_FasterMovementFlag,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	BNE.b CODE_01D707
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$40
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$01
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	BRA.b BrownLineGuidePlatformEntry

CODE_01D707:
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_MovementDirection,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$0F
	STA.b !RAM_SMW_NorSpr_XPosLo,x
BrownLineGuidePlatformEntry:
	LDA.b #$02
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_LineGuideRopeEntry, SMW_NorSpr064_LineGuideRope_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_CheckerboardLineGuidePlatformEntry, SMW_NorSpr063_CheckerboardLineGuidePlatform_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_ChainsawEntry, SMW_NorSpr065_Chainsaw_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_UpsideDownChainsawEntry, SMW_NorSpr066_UpsideDownChainsaw_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_LineGuideGrinderEntry, SMW_NorSpr067_LineGuideGrinder_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_LineGuideFuzzyEntry, SMW_NorSpr068_LineGuideFuzzy_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status01_BrownLineGuidePlatformEntry, SMW_NorSpr062_BrownLineGuidePlatform_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSprXXX_LineGuidedSprites_Status08(Address)
namespace SMW_NorSprXXX_LineGuidedSprites_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01D717:
	db $F8,$00

LineGuideRopeEntry:
ChainsawEntry:
UpsideDownChainsawEntry:
	TXA
	ASL
	ASL
	EOR.b !RAM_SMW_Counter_LocalFrames
	STA.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$07
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b LineGuideGrinderEntry
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	LSR
	LSR
	LSR
	AND.b #$01
	TAY
	LDA.w DATA_01D717,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$F2
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_SpawnNormalSpriteTurnAroundSmoke_Entry2
LineGuideGrinderEntry:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	ORA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b LineFuzzyPlats
	LDA.b #!Define_SMW_Sound1DFA_Grinder
	STA.w !RAM_SMW_IO_SoundCh2
LineFuzzyPlats:
BrownLineGuidePlatformEntry:
CheckerboardLineGuidePlatformEntry:
LineGuideFuzzyEntry:
	JMP.w CODE_01D9A7

CODE_01D74D:
	JSR.w SMW_SubOffscreen_Bank01_Entry2
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
	BNE.b CODE_01D75C
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
	BNE.b SMW_NorSprXXX_LineGuidedSprites_Status01_Return01D6EC
CODE_01D75C:
	LDA.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

Ptrs01D762:
	dw State00_AtEndOfTile
	dw State01_OnLineGuide
	dw State02_Falling

State01_OnLineGuide:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01D791
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_MovementDirection,x
	BNE.b CODE_01D792
	LDY.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LeftLineGuideSpeedTableIndex,x
	JSR.w CODE_01D7B0
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LeftLineGuideSpeedTableIndex,x
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_FasterMovementFlag,x
	BEQ.b CODE_01D787
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_01D787
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LeftLineGuideSpeedTableIndex,x
CODE_01D787:
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LeftLineGuideSpeedTableIndex,x
	CMP.w !RAM_SMW_NorSprXXX_LineGuidedSprites_RightLineGuideSpeedTableIndex,x
	BCC.b Return01D791
	STZ.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
Return01D791:
	RTS

CODE_01D792:
	LDY.w !RAM_SMW_NorSprXXX_LineGuidedSprites_RightLineGuideSpeedTableIndex,x
	DEY
	JSR.w CODE_01D7B0
	DEC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_RightLineGuideSpeedTableIndex,x
	BEQ.b CODE_01D7AD
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_FasterMovementFlag,x
	BEQ.b Return01D7AF
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b Return01D7AF
	DEC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_RightLineGuideSpeedTableIndex,x
	BNE.b Return01D7AF
CODE_01D7AD:
	STZ.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
Return01D7AF:
	RTS

CODE_01D7B0:
	PHB
	LDA.b #SMW_LineGuideSpeedTable_Main>>16
	PHA
	PLB
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LineGuideSpeedTableIndexLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LineGuideSpeedTableIndexHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b (!RAM_SMW_Misc_ScratchRAM04),y
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b (!RAM_SMW_Misc_ScratchRAM04),y
	PLB
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$F0
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM07
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$F0
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	RTS

DATA_01D7E1:
	db $FC,$04,$FC,$04

DATA_01D7E5:
	db $FF,$00,$FF,$00

DATA_01D7E9:
	db $FC,$FC,$04,$04

DATA_01D7ED:
	db $FF,$FF,$00,$00

CODE_01D7F1:
	JMP.w CODE_01D89F

State00_AtEndOfTile:
	LDY.b #$03
CODE_01D7F6:
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_01D7E1,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_01D7E5,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w DATA_01D7E9,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.w DATA_01D7ED,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
	BNE.b CODE_01D83A
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$F0
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_01D83A
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$F0
	CMP.b !RAM_SMW_Misc_ScratchRAM05
	BEQ.b CODE_01D861
CODE_01D83A:
	JSR.w CODE_01D94D
	BNE.b CODE_01D7F1
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$94
	BEQ.b CODE_01D851
	CMP.b #$95
	BNE.b CODE_01D856
	LDA.w !RAM_SMW_Flag_OnOffSwitch
	BEQ.b CODE_01D861
	BNE.b CODE_01D856
CODE_01D851:
	LDA.w !RAM_SMW_Flag_OnOffSwitch
	BNE.b CODE_01D861
CODE_01D856:
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$76
	BCC.b CODE_01D861
	CMP.b #$9A
	BCC.b CODE_01D895
CODE_01D861:
	LDY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	DEY
	BPL.b CODE_01D7F6
	LDA.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
	CMP.b #$02
	BEQ.b Return01D894
	LDA.b #$02
	STA.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
	LDY.w !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentltTouchedLineGuideTile,x
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_MovementDirection,x
	BEQ.b CODE_01D87E
	TYA
	CLC
	ADC.b #$20
	TAY
CODE_01D87E:
	LDA.w DATA_01DD11,y
	BPL.b CODE_01D884
	ASL
CODE_01D884:
	PHY
	ASL
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	PLY
	LDA.w DATA_01DD51,y
	ASL
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
Return01D894:
	RTS

CODE_01D895:
	PHA
	SEC
	SBC.b #$76
	TAY
	PLA
	CMP.b #$96
	BCC.b CODE_01D8A4
CODE_01D89F:
	LDY.w !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentltTouchedLineGuideTile,x
	BRA.b CODE_01D8C8

CODE_01D8A4:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.w !RAM_SMW_NorSpr_XPosHi,x
CODE_01D8C8:
	PHB
	LDA.b #SMW_LineGuideSpeedTable_Main>>16
	PHA
	PLB
	LDA.w SMW_LineGuideSpeedTable_PtrsLo,y
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LineGuideSpeedTableIndexLo,x
	LDA.w SMW_LineGuideSpeedTable_PtrsHi,y
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LineGuideSpeedTableIndexHi,x
	PLB
	LDA.w DATA_01DCD1,y
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_RightLineGuideSpeedTableIndex,x
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_LeftLineGuideSpeedTableIndex,x
	TYA
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentltTouchedLineGuideTile,x
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
	BNE.b CODE_01D933
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_MovementDirection,x
	LDA.w DATA_01DCF1,y
	BEQ.b CODE_01D8FF
	TAY
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CPY.b #$01
	BNE.b CODE_01D8FD
	EOR.b #$0F
CODE_01D8FD:
	BRA.b CODE_01D901

CODE_01D8FF:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
CODE_01D901:
	AND.b #$0F
	CMP.b #$0A
	BCC.b CODE_01D910
	LDA.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
	CMP.b #$02
	BEQ.b CODE_01D910
	INC.w !RAM_SMW_NorSprXXX_LineGuidedSprites_MovementDirection,x
CODE_01D910:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	JSR.w State01_OnLineGuide
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	SEC
	SBC.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$08
	CMP.b #$10
	BCS.b CODE_01D938
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	SEC
	SBC.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	CMP.b #$10
	BCS.b CODE_01D938
CODE_01D933:
	LDA.b #$01
	STA.b !RAM_SMW_NorSprXXX_LineGuidedSprites_CurrentState,x
	RTS

CODE_01D938:
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	JMP.w CODE_01D861

CODE_01D94D:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	LSR
	LSR
	LSR
	LSR
	PHA
	ORA.b !RAM_SMW_Misc_ScratchRAM06
	PHA
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	AND.b #$01
	BEQ.b CODE_01D977
	PLA
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM06
	BRA.b CODE_01D989

CODE_01D977:
	PLA
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_01D989:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	PLY
	STY.b !RAM_SMW_Misc_ScratchRAM05
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$07
	TAY
	PLA
	AND.w DATA_018000,y
	RTS

CODE_01D9A7:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr064_LineGuideRope
	BEQ.b CODE_01D9D3
	CMP.b #!Define_SMW_SpriteID_NorSpr065_Chainsaw
	BCC.b CODE_01D9D0
	CMP.b #!Define_SMW_SpriteID_NorSpr068_LineGuideFuzzy
	BNE.b CODE_01D9BA
	JSR.w CODE_01DBD4
	BRA.b CODE_01D9C1

CODE_01D9BA:
	CMP.b #!Define_SMW_SpriteID_NorSpr067_LineGuideGrinder
	BNE.b CODE_01D9C6
	JSR.w CODE_01DC0B
CODE_01D9C1:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BRA.b CODE_01D9CD

CODE_01D9C6:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	JSL.l ChainsawGFXRt
CODE_01D9CD:
	JMP.w CODE_01D74D

CODE_01D9D0:
	JMP.w CODE_01DAA2

CODE_01D9D3:
	JSR.w CODE_01DC54
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	JSR.w CODE_01D74D
	PLA
	SEC
	SBC.b !RAM_SMW_NorSpr_YPosLo,x
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_NorSpr064_LineGuideRope_PlayerYPosOffset
	PLA
	SEC
	SBC.b !RAM_SMW_NorSpr_XPosLo,x
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_NorSpr064_LineGuideRope_PlayerXPosOffset
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$03
	BNE.b Return01DA09
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01A80F
	BCS.b CODE_01DA0A
CODE_01D9FE:
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_TouchingPlayerFlag,x
	BEQ.b Return01DA09
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_TouchingPlayerFlag,x
	STZ.w !RAM_SMW_Flag_PlayerClimbOnAir
Return01DA09:
	RTS

CODE_01DA0A:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b CODE_01DA37
	LDA.w !RAM_SMW_Player_CarryingSomethingFlag1
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01D9FE
	LDA.b #$03
	STA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_TouchingPlayerFlag,x
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b Return01DA8F
	LDA.w !RAM_SMW_Flag_PlayerClimbOnAir
	BNE.b CODE_01DA2F
	LDA.b !RAM_SMW_IO_ControllerHold1
	AND.b #!Joypad_DPadU>>8
	BEQ.b Return01DA8F
	STA.w !RAM_SMW_Flag_PlayerClimbOnAir
CODE_01DA2F:
	BIT.b !RAM_SMW_IO_ControllerPress1
	BPL.b CODE_01DA3F
	LDA.b #$B0
	STA.b !RAM_SMW_Player_YSpeed
CODE_01DA37:
	STZ.w !RAM_SMW_Flag_PlayerClimbOnAir
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
CODE_01DA3F:
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr064_LineGuideRope_PlayerYPosOffset
	BPL.b CODE_01DA47
	DEY
CODE_01DA47:
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Player_YPosLo
	TYA
	ADC.b !RAM_SMW_Player_YPosHi
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w #$0000
	BPL.b CODE_01DA68
	INC.b !RAM_SMW_Player_YPosLo
CODE_01DA68:
	SEP.b #$20
	LDA.w !RAM_SMW_NorSpr064_LineGuideRope_PlayerXPosOffset
	JSR.w CODE_01DA90
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$08
	CMP.b !RAM_SMW_Player_XPosLo
	BEQ.b CODE_01DA84
	BPL.b CODE_01DA7F
	LDA.b #$FF
	BRA.b CODE_01DA81

CODE_01DA7F:
	LDA.b #$01
CODE_01DA81:
	JSR.w CODE_01DA90
CODE_01DA84:
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
	BEQ.b Return01DA8F
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
Return01DA8F:
	RTS

CODE_01DA90:
	LDY.b #$00
	CMP.b #$00
	BPL.b CODE_01DA97
	DEY
CODE_01DA97:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
	RTS

CODE_01DAA2:
	LDY.b #$18
	LDA.w !RAM_SMW_NorSpr062_BrownLineGuidePlatform_PlatformType,x
	BEQ.b CODE_01DAAB
	LDY.b #$28
CODE_01DAAB:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSR.w SMW_NormalSpritePlatformGFXRt_DrawFlatPlatform
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	JSR.w CODE_01D74D
	PLA
	SEC
	SBC.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	PHY
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	LDY.b #$18
	LDA.w !RAM_SMW_NorSpr062_BrownLineGuidePlatform_PlatformType,x
	BEQ.b CODE_01DAFD
	LDY.b #$28
CODE_01DAFD:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSR.w SMW_SolidSpriteBlock_Sub
	BCC.b CODE_01DB31
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
	BEQ.b CODE_01DB31
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_IsNotMovingFlag,x
	STZ.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
CODE_01DB31:
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	RTS

State02_Falling:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01DB59
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	LDA.w !RAM_SMW_NorSprXXX_LineGuidedSprites_WaitBeforeLatchingOntoLineGuide,x
	BNE.b Return01DB59
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$20
	BMI.b Return01DB59
	JSR.w State00_AtEndOfTile
Return01DB59:
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_LineGuideRopeEntry, SMW_NorSpr064_LineGuideRope_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_ChainsawEntry, SMW_NorSpr065_Chainsaw_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_UpsideDownChainsawEntry, SMW_NorSpr066_UpsideDownChainsaw_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_LineGuideGrinderEntry, SMW_NorSpr067_LineGuideGrinder_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_BrownLineGuidePlatformEntry, SMW_NorSpr062_BrownLineGuidePlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_CheckerboardLineGuidePlatformEntry, SMW_NorSpr063_CheckerboardLineGuidePlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_LineGuidedSprites_Status08_LineGuideFuzzyEntry, SMW_NorSpr068_LineGuideFuzzy_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_LineGuidedSprites_Status08(Address)
namespace SMW_NorSprXXX_LineGuidedSprites_Status08
%InsertMacroAtXPosition(<Address>)

DATA_018000:
	db $80,$40,$20,$10,$08,$04,$02,$01
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSprXXX_LineGuidedSprites_Status08(Address)
namespace SMW_NorSprXXX_LineGuidedSprites_Status08
%InsertMacroAtXPosition(<Address>)

CODE_01DBD4:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$01
	TAX
	LDA.b #$C8
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w DATA_01DC09,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b #$00
CODE_01DC03:
	PLX
CODE_01DC04:
	LDY.b #$02
	JMP.w SMW_FinishOAMWrite_Sub

DATA_01DC09:
	db $05,$45

CODE_01DC0B:
	JSR.w SMW_GetDrawInfo_Bank01
	PHX
	LDX.b #$03
CODE_01DC11:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_01DC3B,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DATA_01DC3F,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$02
	ORA.b #$6C
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w DATA_01DC43,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_01DC11
	BRA.b SMW_NorSpr0B4_NonLineGuideGrinder_Status08_CODE_01DBD0

DATA_01DC3B:
	db $F0,$00,$F0,$00

DATA_01DC3F:
	db $F0,$F0,$00,$00

DATA_01DC43:
	db $33,$73,$B3,$F3

RopeMotorTiles:
	db $C0,$C2,$E0,$C2

LineGuideRopeTiles:
	db $C0,$CE,$CE,$CE,$CE,$CE,$CE,$CE
	db $CE

CODE_01DC54:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TXA
	ASL
	ASL
	EOR.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$05
	CPX.b #$06
	BCC.b CODE_01DC7E
	LDY.w !RAM_SMW_Sprites_SpriteMemorySetting
	BEQ.b CODE_01DC7E
	LDA.b #$09
CODE_01DC7E:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDX.b #$00
CODE_01DC85:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM01
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l LineGuideRopeTiles,x
else
	LDA.w LineGuideRopeTiles,x
endif
	CPX.b #$00
	BNE.b CODE_01DCA2
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM02
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l RopeMotorTiles,x
else
	LDA.w RopeMotorTiles,x
endif
	PLX
CODE_01DCA2:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$37
	CPX.b #$01
	BCC.b CODE_01DCAD
	LDA.b #$31
CODE_01DCAD:
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	INX
	CPX.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b CODE_01DC85
	LDA.b #$DE
	STA.w SMW_OAMBuffer[$3F].Tile,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$04
	CPX.b #$06
	BCC.b CODE_01DCCE
	LDY.w !RAM_SMW_Sprites_SpriteMemorySetting
	BEQ.b CODE_01DCCE
	LDA.b #$08
CODE_01DCCE:
	JMP.w CODE_01DC04

DATA_01DCD1:
	db $15,$15,$15,$15,$0C,$10,$10,$10
	db $10,$0C,$0C,$10,$10,$10,$10,$0C
	db $15,$15,$10,$10,$10,$10,$10,$10
	db $10,$10,$10,$10,$10,$10,$15,$15

DATA_01DCF1:
	db $00,$00,$00,$00,$00,$00,$01,$02
	db $00,$00,$00,$00,$02,$01,$00,$00
	db $00,$00,$01,$02,$01,$02,$00,$00
	db $00,$00,$02,$02,$00,$00,$00,$00

DATA_01DD11:
	db $00,$10,$00,$F0,$F4,$FC,$F0,$10
	db $04,$0C,$0C,$00,$10,$F0,$FC,$F4
	db $F0,$10,$F0,$10,$F0,$10,$F8,$F8
	db $08,$08,$10,$10,$00,$00,$F0,$10
	db $10,$00,$F0,$F0,$0C,$04,$10,$F0
	db $00,$F4,$F4,$FC,$F0,$10,$00,$0C
	db $10,$F0,$10,$00,$10,$F0,$08,$08
	db $F8,$F8,$F0,$F0,$00,$00,$10,$F0

DATA_01DD51:
	db $10,$00,$10,$00,$0C,$10,$04,$00
	db $10,$0C,$0C,$10,$04,$00,$10,$0C
	db $10,$10,$08,$08,$08,$08,$10,$10
	db $10,$10,$00,$00,$10,$10,$10,$10
	db $00,$F0,$00,$F0,$F4,$F0,$00,$FC
	db $F0,$F4,$F4,$F0,$00,$FC,$F0,$F4
	db $F0,$F0,$F8,$F8,$F8,$F8,$F0,$F0
	db $F0,$F0,$00,$00,$F0,$F0,$F0
namespace off
endmacro

macro ROUTINE_RT03_SMW_NorSprXXX_LineGuidedSprites_Status08(Address)
namespace SMW_NorSprXXX_LineGuidedSprites_Status08
%InsertMacroAtXPosition(<Address>)

MotorTiles:
	db $E0,$C2,$C0,$C2

YDisp:
	db $F2,$0E

Prop:
	db $33,$B3

ChainsawGFXRt:
.Main:
	PHB
	PHK
	PLB
	JSR.w .Sub
	PLB
	RTL

.Sub:
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr065_Chainsaw
	TAX
	LDA.w YDisp,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w Prop,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	PLX
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$41].YDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	STA.w SMW_OAMBuffer[$42].YDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	PHX
	TAX
	LDA.w MotorTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.b #$AE
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$8E
	STA.w SMW_OAMBuffer[$42].Tile,y
	LDA.b #$37
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	LDY.b #$02
	TYA
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr06A_CoinGameCloud_Status08(Address)
namespace SMW_NorSpr06A_CoinGameCloud_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr06A_CoinGameCloud_Status08(Address)
namespace SMW_NorSpr06A_CoinGameCloud_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Acceleration:
	db $01,$FF

MaxYSpeed:
	db $10,$F0

Sub:
	LDA.b !RAM_SMW_NorSpr06A_CoinGameCloud_ResetCloudCoinCounter,x
	BNE.b CODE_02EEBE
	INC.b !RAM_SMW_NorSpr06A_CoinGameCloud_ResetCloudCoinCounter,x
	STZ.w !RAM_SMW_Counter_PinkBerryCloudCoins
CODE_02EEBE:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02EF1C
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$7F
	BNE.b CODE_02EED5
	LDA.w !RAM_SMW_NorSpr06A_CoinGameCloud_SpawnedCoinCounter,x
	CMP.b #$0B
	BCS.b CODE_02EED5
	INC.w !RAM_SMW_NorSpr06A_CoinGameCloud_SpawnedCoinCounter,x
	JSR.w CODE_02EF67
CODE_02EED5:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$01
	BNE.b CODE_02EF12
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM03
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
	LDY.b #$00
	BCC.b CODE_02EEF9
	INY
CODE_02EEF9:
	LDA.w !RAM_SMW_NorSpr06A_CoinGameCloud_SpawnedCoinCounter,x
	CMP.b #$0B
	BCC.b CODE_02EF05
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	LDY.b #$01
CODE_02EF05:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BEQ.b CODE_02EF12
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02EF12:
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b #$08
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
CODE_02EF1C:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	PHA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$60
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	ASL
	ASL
	ASL
	AND.b #$C0
	ORA.b #$30
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$04
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$04
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$4D
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$39
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDY.b #$00
	LDA.b #$00
	JSR.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
	RTS

CODE_02EF67:
	LDA.w !RAM_SMW_Counter_PinkBerryCloudCoins
	CMP.b #$0A
	BCC.b CODE_02EFAA
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_02EF70:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_02EF7B
	DEY
	CPY.b #!Define_SMW_MaxNormalSpriteSlot-$02
	BNE.b CODE_02EF70
	RTS

CODE_02EF7B:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$E0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	INC.w !RAM_SMW_NorSpr_FacingDirection,x
	PLX
	RTS

CODE_02EFAA:
	LDA.w !RAM_SMW_NorSpr06A_CoinGameCloud_SpawnedCoinCounter,x
	CMP.b #$0B
	BCS.b Return02EFBB
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02EFB3:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02EFBC
	DEY
	BPL.b CODE_02EFB3
Return02EFBB:
	RTS

CODE_02EFBC:
	LDA.b #!Define_SMW_SpriteID_ExtSpr0A_CloudCoin
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #$D0
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b #$00
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	STA.w !RAM_SMW_ExtSpr0A_CloudCoin_DisableBlockCollisionFlag,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSprXXX_WallSpringboard_Status08(Address)
namespace SMW_NorSprXXX_WallSpringboard_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #Sub>>16
	PHA
	PLB
	JSL.l Sub
	PLB
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallSpringboard_Status08_Main, SMW_NorSpr06B_LeftWallSpringboard_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_WallSpringboard_Status08_Main, SMW_NorSpr06C_RightWallSpringboard_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_WallSpringboard_Status08(Address)
namespace SMW_NorSprXXX_WallSpringboard_Status08
%InsertMacroAtXPosition(<Address>)

UNK_02CDC5:
	db $00,$07,$F9,$00,$01,$FF

Sub:
;$02CDCB
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02CDFE
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_CanBounceHigherTimer,x
	BEQ.b CODE_02CDF1
	DEC.w !RAM_SMW_NorSprXXX_WallSpringboard_CanBounceHigherTimer,x
	BIT.b !RAM_SMW_IO_ControllerHold1
	BPL.b CODE_02CDF1
	STZ.w !RAM_SMW_NorSprXXX_WallSpringboard_CanBounceHigherTimer,x
	LDY.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	LDA.w HighBouncePlayerYSpeed,y
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
CODE_02CDF1:
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

PeaBouncerPtrs:
	dw State00_DoNothing
	dw State01_PlayerIsOnTop
	dw State02_Rebound

Return02CDFE:
State00_DoNothing:
	RTL

HighBouncePlayerYSpeed:
	db $B6,$B4,$B0,$A8,$A0,$98,$90,$88

AutoBouncePlayerYSpeed:
	db $00,$00,$E8,$E0,$D0,$C8,$C0,$B8

State01_PlayerIsOnTop:
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_WaitBeforeAutoBounce,x
	BEQ.b CODE_02CE20
	DEC
	BNE.b Return02CE1F
	INC.w !RAM_SMW_NorSprXXX_WallSpringboard_CurrentState,x
	LDA.b #$01
	STA.w !RAM_SMW_NorSprXXX_WallSpringboard_ReboundDirectionCounter,x
Return02CE1F:
	RTL

CODE_02CE20:
	LDA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	BMI.b CODE_02CE29
	CMP.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	BCS.b CODE_02CE2F
CODE_02CE29:
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	RTL

CODE_02CE2F:
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	STA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	LDA.b #$08
	STA.w !RAM_SMW_NorSprXXX_WallSpringboard_WaitBeforeAutoBounce,x
	RTL

State02_Rebound:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$03
	BNE.b CODE_02CE49
	DEC.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	BEQ.b CODE_02CE86
CODE_02CE49:
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_ReboundDirectionCounter,x
	AND.b #$01
	BNE.b CODE_02CE70
	LDA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	BMI.b Return02CE66
	CMP.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	BCS.b CODE_02CE67
Return02CE66:
	RTL

CODE_02CE67:
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	STA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	INC.w !RAM_SMW_NorSprXXX_WallSpringboard_ReboundDirectionCounter,x
	RTL

CODE_02CE70:
	LDA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	SEC
	SBC.b #$04
	STA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	BPL.b Return02CE7D
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_02CE7E
Return02CE7D:
	RTL

CODE_02CE7E:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	INC.w !RAM_SMW_NorSprXXX_WallSpringboard_ReboundDirectionCounter,x
	RTL

CODE_02CE86:
	STZ.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	STZ.w !RAM_SMW_NorSprXXX_WallSpringboard_CurrentState,x
	RTL

ADDR_02CE8C: ; unreachable
	JSR.w GFXRt
	RTL

XDisp:
	db $00,$08,$10,$18,$20
	db $00,$08,$10,$18,$20
	db $00,$08,$10,$18,$20
	db $00,$08,$10,$18,$1F
	db $00,$08,$10,$17,$1E
	db $00,$08,$0F,$16,$1D
	db $00,$07,$0F,$16,$1C
	db $00,$07,$0E,$15,$1B

YDisp:
	db $00,$00,$00,$00,$00
	db $00,$01,$01,$01,$02
	db $00,$00,$01,$02,$04
	db $00,$01,$02,$04,$06
	db $00,$01,$03,$06,$08
	db $00,$02,$04,$08,$0A
	db $00,$02,$05,$07,$0C
	db $00,$02,$05,$09,$0E

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr06B_LeftWallSpringboard
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_02CEF7
	EOR.b #$FF
	INC
CODE_02CEF7:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
CODE_02CEFC:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	LSR
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l XDisp,x
else
	LDA.w XDisp,x
endif
	BCC.b CODE_02CF10
	EOR.b #$FF
	INC
CODE_02CF10:
	STA.b !RAM_SMW_Misc_ScratchRAM08
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	ASL
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l YDisp,x
else
	LDA.w YDisp,x
endif
	BCC.b CODE_02CF23
	EOR.b #$FF
	INC
CODE_02CF23:
	STA.b !RAM_SMW_Misc_ScratchRAM09
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$3D
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$0A
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	PHY
	JSR.w HandlePlayerCollision
	PLY
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BMI.b CODE_02CF4A
	JMP.w CODE_02CEFC

CODE_02CF4A:
	LDY.b #$00
	LDA.b #$04
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

Return02CF51:
	RTS

HandlePlayerCollision:
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCS.b Return02CF51
	LDA.b !RAM_SMW_Player_OnScreenPosYHi
	ORA.b !RAM_SMW_Player_OnScreenPosXHi
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return02CF51
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	CMP.b #$01
	LDA.b #$10
	BCC.b CODE_02CF76
	LDA.b #$20
CODE_02CF76:
	CLC
	ADC.b !RAM_SMW_Player_OnScreenPosYLo
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0A
	CLC
	ADC.b #$08
	CMP.b #$14
	BCS.b Return02CFFD
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	CMP.b #$01
	LDA.b #$1A
	BCS.b CODE_02CF92
	LDA.b #$1C
CODE_02CF92:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0B
	CLC
	ADC.b #$08
	CMP.b !RAM_SMW_Misc_ScratchRAM0F
	BCS.b Return02CFFD
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return02CFFD
	LDA.b #$1F
	PHX
	LDX.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_02CFAF
	LDA.b #$2F
CODE_02CFAF:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	PLX
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0F
	PHP
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	PLP
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	STZ.b !RAM_SMW_Player_InAirFlag
	LDA.b #$02
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_CurrentState,x
	BEQ.b CODE_02CFEB
	CMP.b #$02
	BEQ.b CODE_02CFEB
	LDA.w !RAM_SMW_NorSprXXX_WallSpringboard_WaitBeforeAutoBounce,x
	CMP.b #$01
	BNE.b Return02CFEA
	LDA.b #$08
	STA.w !RAM_SMW_NorSprXXX_WallSpringboard_CanBounceHigherTimer,x
	LDY.b !RAM_SMW_NorSprXXX_WallSpringboard_CurrentAngle,x
	LDA.w AutoBouncePlayerYSpeed,y
	STA.b !RAM_SMW_Player_YSpeed
Return02CFEA:
	RTS

CODE_02CFEB:
	STZ.b !RAM_SMW_Player_XSpeed
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w MaxAngle,y
	STA.w !RAM_SMW_NorSprXXX_WallSpringboard_MaximumAngle,x
	LDA.b #$01
	STA.w !RAM_SMW_NorSprXXX_WallSpringboard_CurrentState,x
	STZ.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
Return02CFFD:
	RTS

MaxAngle:
	db $01,$01,$03,$05,$07
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr06C_RightWallSpringboard_Status01(Address)
namespace SMW_NorSpr06C_RightWallSpringboard_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SolidSpriteBlock(Address)
namespace SMW_SolidSpriteBlock
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_ProcessInteract
	BCC.b NoContact1
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CLC
	ADC.b #$18
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b HandleMarioBelow
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b NoContact1
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$08
	BNE.b NoContact1
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #$01
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.b #$1F
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b NotRidingYoshi1
	LDA.b #$2F
NotRidingYoshi1:
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b !RAM_SMW_Player_BlockedFlags
	AND.b #$03
	BNE.b Contact
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	BPL.b MoveMarioRight
	DEY
MoveMarioRight:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
Contact:
	SEC
	RTS

NoContact1:
	CLC
	RTS

HandleMarioBelow:
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,x		;\ Note: !Define_SMW_NorSpr_190FProp_CanPassThroughPlaformFromBelow
	LSR						;|
	BCS.b NoContact1				;/
	LDA.b #$00
	LDY.b !RAM_SMW_Player_DuckingFlag
	BNE.b IsDucking
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b IsNotSmall
IsDucking:
	LDA.b #$08
IsNotSmall:
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b NotRidingYoshi2
	ADC.b #$08
NotRidingYoshi2:
	CLC
	ADC.b !RAM_SMW_Player_OnScreenPosYLo
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b HandleMarioSide
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b NoContact2
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr083_LeftFlyingBlock
	BCC.b IsNotSprite83Plus
Entry2:
	LDA.b #$0F
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	BNE.b CODE_01B4F2
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
CODE_01B4F2:
IsNotSprite83Plus:
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
NoContact2:
	CLC
	RTS

DATA_01B4F9:
	db $0E,$F1
	db $10,$E0
	db $1F,$F1

DATA_01B4FF:
	db $00,$FF
	db $00,$FF
	db $00,$FF

HandleMarioSide:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	BEQ.b IsReznor
	CMP.b #!Define_SMW_SpriteID_NorSpr09C_HammerBroPlatform
	BEQ.b IsHammerBroPlatform
	CMP.b #!Define_SMW_SpriteID_NorSpr0BB_MovingCastleStone
	BEQ.b IsMovingCastleStone
	CMP.b #!Define_SMW_SpriteID_NorSpr060_FlatPalaceSwitch
	BEQ.b IsFlatPalaceSwitch
	CMP.b #!Define_SMW_SpriteID_NorSpr049_ShiftingPipe
	BNE.b IsNotShiftingPipe
IsHammerBroPlatform:
IsMovingCastleStone:
IsFlatPalaceSwitch:
	INY
	INY
IsReznor:
	INY
	INY
IsNotShiftingPipe:
	LDA.w DATA_01B4F9,y
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w DATA_01B4FF,y
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Player_XPosHi
	STZ.b !RAM_SMW_Player_XSpeed
	CLC
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr06F_DinoTorch_Status01(Address)
namespace SMW_NorSpr06F_DinoTorch_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr06F_DinoTorch_FireLength,x
CODE_01855D:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr06F_DinoTorch_BreathFireTimer,x
	BRA.b SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr06F_DinoTorch_Status01_CODE_01855D, SMW_NorSpr00D_BobOmb_Status01_Main)

	%SetDuplicateOrNullPointer(SMW_NorSpr06F_DinoTorch_Status01_Main, SMW_NorSpr06E_DinoRhino_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr06F_DinoTorch_Status08(Address)
namespace SMW_NorSpr06F_DinoTorch_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank03
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr06F_DinoTorch_Status08_Main, SMW_NorSpr06D_InvisibleBlock_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr06F_DinoTorch_Status08_Main, SMW_NorSpr06E_DinoRhino_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSpr06F_DinoTorch_Status08(Address)
namespace SMW_NorSpr06F_DinoTorch_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x				;\ Optimization: You know, SolidSpriteBlock_Main is in bank 01. Sprite 6D's main pointer could have been set to directly point there.
	CMP.b #!Define_SMW_SpriteID_NorSpr06D_InvisibleBlock		;| That would have rendered this bit of code unnecessary.
	BNE.b NotInvisibleBlock						;|
	JSL.l SMW_SolidSpriteBlock_Main					;|
	RTL								;/

NotInvisibleBlock:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return039CA3
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return039CA3
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

DinoTorchPtrs:
	dw CODE_039CA8
	dw CODE_039D41
	dw CODE_039D41
	dw CODE_039C74

DATA_039C6E:
	db $00,$FE,$02

DATA_039C71:
	db $00,$FF,$00

CODE_039C74:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_039C89
	STZ.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_039C89
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_039C89:
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_039C6E,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_039C71,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
Return039CA3:
	RTS

XSpeed:
	db $08,$F8,$10,$F0

CODE_039CA8:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_039C89
	LDA.w !RAM_SMW_NorSpr06F_DinoTorch_BreathFireTimer,x
	BNE.b CODE_039CC8
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr06E_DinoRhino
	BEQ.b CODE_039CC8
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr06F_DinoTorch_BreathFireTimer,x
	JSL.l SMW_GetRand_Main
	AND.b #$01
	INC
	STA.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
CODE_039CC8:
	TXA
	ASL
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	BNE.b CODE_039CDA
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_039CDA:
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr06E_DinoRhino
	BEQ.b CODE_039CE9
	INY
	INY
CODE_039CE9:
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w DinoSetGfxFrame
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b Return039D00
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$03
	STA.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
Return039D00:
	RTS

DinoFlameTable:
	db $41,$42,$42,$32,$22,$12,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$12
	db $22,$32,$42,$42,$42,$42,$41,$41
	db $41,$43,$43,$33,$23,$13,$03,$03
	db $03,$03,$03,$03,$03,$03,$03,$03
	db $03,$03,$03,$03,$03,$03,$03,$13
	db $23,$33,$43,$43,$43,$43,$41,$41

CODE_039D41:
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr06F_DinoTorch_BreathFireTimer,x
	BNE.b DinoFlameTimerSet
	STZ.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr06F_DinoTorch_BreathFireTimer,x
	LDA.b #$00
DinoFlameTimerSet:
	CMP.b #$C0
	BNE.b CODE_039D5A
	LDY.b #!Define_SMW_Sound1DFC_FireSpit
	STY.w !RAM_SMW_IO_SoundCh3
CODE_039D5A:
	LSR
	LSR
	LSR
	LDY.b !RAM_SMW_NorSpr06F_DinoTorch_CurrentState,x
	CPY.b #$02
	BNE.b CODE_039D66
	CLC
	ADC.b #$20
CODE_039D66:
	TAY
	LDA.w DinoFlameTable,y
	PHA
	AND.b #$0F
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	PLA
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr06F_DinoTorch_FireLength,x
	BNE.b Return039D9D
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr06E_DinoRhino
	BEQ.b Return039D9D
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return039D9D
	JSR.w DinoFlameClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return039D9D
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b Return039D9D
	JSL.l SMW_DamagePlayer_Hurt
Return039D9D:
	RTS

DinoFlame1:
	db $DC,$02,$10,$02

DinoFlame2:
	db $FF,$00,$00,$00

DinoFlame3:
	db $24,$0C,$24,$0C

DinoFlame4:
	db $02,$DC,$02,$DC

DinoFlame5:
	db $00,$FF,$00,$FF

DinoFlame6:
	db $0C,$24,$0C,$24

DinoFlameClipping:
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	SEC
	SBC.b #$02
	TAY
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_039DC4
	INY
	INY
CODE_039DC4:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DinoFlame1,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DinoFlame2,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w DinoFlame3,y
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w DinoFlame4,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.w DinoFlame5,y
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.w DinoFlame6,y
	STA.b !RAM_SMW_Misc_ScratchRAM07
	RTS

DinoSetGfxFrame:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$08
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

DinoTorchXDisp:
	db $D8,$E0,$EC,$F8,$00,$FF,$FF,$FF
	db $FF,$00

DinoTorchYDisp:
	db $00,$00,$00,$00,$00,$D8,$E0,$EC
	db $F8,$00

DinoFlameTiles:
	db $80,$82,$84,$86,$00,$88,$8A,$8C
	db $8E,$00

DinoTorchProp:
	db $09,$05,$05,$05,$0F

DinoTorchTiles:
	db $EA,$AA,$C4,$C6

DinoRhinoXDisp:
	db $F8,$08,$F8,$08,$08,$F8,$08,$F8

DinoRhinoProp:
	db $2F,$2F,$2F,$2F,$6F,$6F,$6F,$6F

DinoRhinoYDisp:
	db $F0,$F0,$00,$00

DinoRhinoTiles:
	db $C0,$C2,$E4,$E6,$C0,$C2,$E0,$E2
	db $C8,$CA,$E8,$E2,$CC,$CE,$EC,$EE

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr06F_DinoTorch
	BEQ.b CODE_039EA9
	PHX
	LDX.b #$03
CODE_039E5F:
	STX.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b #$01
	BCS.b CODE_039E6C
	TXA
	CLC
	ADC.b #$04
	TAX
CODE_039E6C:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DinoRhinoProp,x
else
	LDA.w DinoRhinoProp,x
endif
	STA.w SMW_OAMBuffer[$40].Prop,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DinoRhinoXDisp,x
else
	LDA.w DinoRhinoXDisp,x
endif
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$01
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DinoRhinoYDisp,x
else
	LDA.w DinoRhinoYDisp,x
endif
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DinoRhinoTiles,x
else
	LDA.w DinoRhinoTiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	INY
	INY
	INY
	INY
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
	DEX
	BPL.b CODE_039E5F
	PLX
	LDA.b #$03
	LDY.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS

CODE_039EA9:
	LDA.w !RAM_SMW_NorSpr06F_DinoTorch_FireLength,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$02
	ASL
	ASL
	ASL
	ASL
	ASL
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	CPX.b #$03
	BEQ.b CODE_039EC4
	ASL
CODE_039EC4:
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDX.b #$04
CODE_039EC8:
	STX.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$03
	BNE.b CODE_039ED5
	TXA
	CLC
	ADC.b #$05
	TAX
CODE_039ED5:
	PHX
	LDA.w DinoTorchXDisp,x
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_039EE0
	EOR.b #$FF
	INC
CODE_039EE0:
	PLX
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w DinoTorchYDisp,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CMP.b #$04
	BNE.b CODE_039EFD
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w DinoTorchTiles,x
	BRA.b CODE_039F00

CODE_039EFD:
	LDA.w DinoFlameTiles,x
CODE_039F00:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$00
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_039F0B
	ORA.b #$40
CODE_039F0B:
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	CPX.b #$04
	BEQ.b CODE_039F13
	EOR.b !RAM_SMW_Misc_ScratchRAM05
CODE_039F13:
	ORA.w DinoTorchProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	CPX.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_039EC8
	PLX
	LDY.w !RAM_SMW_NorSpr06F_DinoTorch_FireLength,x
	LDA.w DinoTilesWritten,y
	LDY.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS

DinoTilesWritten:
	db $04,$03,$02,$01,$00

Return039F37:
	RTS ; unused
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr070_Pokey_Status01(Address)
namespace SMW_NorSpr070_Pokey_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$1F
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b IsRidingYoshi
	LDA.b #$07
IsRidingYoshi:
	STA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	BRA.b SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr070_Pokey_Status08(Address)
namespace SMW_NorSpr070_Pokey_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr070_Pokey_Status08(Address)
namespace SMW_NorSpr070_Pokey_Status08
%InsertMacroAtXPosition(<Address>)

PokeyClipIndex:
	db !Define_SMW_NorSpr_1662Prop_SpriteClipping1B
	db !Define_SMW_NorSpr_1662Prop_SpriteClipping1B
	db !Define_SMW_NorSpr_1662Prop_SpriteClipping1A
	db !Define_SMW_NorSpr_1662Prop_SpriteClipping19
	db !Define_SMW_NorSpr_1662Prop_SpriteClipping18
	db !Define_SMW_NorSpr_1662Prop_SpriteClipping17

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	PHX
	LDX.b #$04
	LDY.b #$00
PokeyLoopStart:
	LSR
	BCC.b BitNotSet
	INY
BitNotSet:
	DEX
	BPL.b PokeyLoopStart
	PLX
	LDA.w PokeyClipIndex,y
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	PLB
	RTL

DATA_02B653:
	db $01,$02,$04,$08

DATA_02B657:
	db $00,$01,$03,$07

DATA_02B65B:
	db $FF,$FE,$FC,$F8

XDisp:
	db $00,$01,$00,$FF

XSpeed:
	db $02,$FE

DATA_02B665:
	db $00,$05,$09,$0C,$0E,$0F,$10,$10
	db $10,$10,$10,$10,$10

Sub:
	LDA.w !RAM_SMW_NorSpr070_Pokey_DeadSegmentFlag,x
	BNE.b CODE_02B681
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_02B6A7
	JMP.w CODE_02B726

CODE_02B681:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	CMP.b #$01
	LDA.b #$8A
	BCC.b CODE_02B692
	LDA.b #$E8
CODE_02B692:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return02B6A6
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_SubOffscreen_Bank02_Entry1
Return02B6A6:
	RTS

CODE_02B6A7:
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	BNE.b PokeyAlive
CODE_02B6AB:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

PokeyAlive:
	CMP.b #$20
	BCS.b CODE_02B6AB
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02B726
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	INC.w !RAM_SMW_NorSpr070_Pokey_TurnTowardsMarioTimer,x
	LDA.w !RAM_SMW_NorSpr070_Pokey_TurnTowardsMarioTimer,x
	AND.b #$7F
	BNE.b CODE_02B6CF
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr070_Pokey_HorizontalMovementDirection,x
CODE_02B6CF:
	LDY.w !RAM_SMW_NorSpr070_Pokey_HorizontalMovementDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_02B6E8
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02B6E8:
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02B6F5
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02B6F5:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_02B704
	LDA.w !RAM_SMW_NorSpr070_Pokey_HorizontalMovementDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr070_Pokey_HorizontalMovementDirection,x
CODE_02B704:
	JSR.w CODE_02B7AC
	LDY.b #$00
CODE_02B709:
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	AND.w DATA_02B653,y
	BNE.b CODE_02B721
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	PHA
	AND.w DATA_02B657,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PLA
	LSR
	AND.w DATA_02B65B,y
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
CODE_02B721:
	INY
	CPY.b #$04
	BNE.b CODE_02B709
CODE_02B726:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$40
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.w !RAM_SMW_NorSpr070_Pokey_DisconnectedUpperSegments,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.w !RAM_SMW_NorSpr070_Pokey_ReconnectBodyTimer,x
	LDA.w DATA_02B665,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	STZ.b !RAM_SMW_Misc_ScratchRAM05
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDX.b #$04
CODE_02B74B:
	STX.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM06
	AND.b #$03
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CMP.b #$01
	BNE.b CODE_02B760
	LDX.b #$00
CODE_02B760:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR.b !RAM_SMW_Misc_ScratchRAM02
	BCC.b CODE_02B781
	LSR.b !RAM_SMW_Misc_ScratchRAM04
	BCS.b CODE_02B77B
	PHA
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM05
	PLA
CODE_02B77B:
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM05
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_02B781:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	LSR
	LDA.b #$E8
	BCS.b CODE_02B791
	LDA.b #$8A
CODE_02B791:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$05
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02B74B
	PLX
	LDA.b #$04
	LDY.b #$02
Bank02SpriteEntry:
	JSL.l SMW_FinishOAMWrite_Main
	RTS

CODE_02B7AC:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_02B7AE:
	TYA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b CODE_02B7D2
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BNE.b CODE_02B7D2
	PHB
	LDA.b #SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact>>16
	PHA
	PLB
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	PLB
	BCS.b CODE_02B7D6
CODE_02B7D2:
	DEY
	BPL.b CODE_02B7AE
Return02B7D5:
	RTS

CODE_02B7D6:
	LDA.w !RAM_SMW_NorSpr070_Pokey_DisableSegmentLossTimer,x
	BNE.b Return02B7D5
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	SEC
	SBC.b !RAM_SMW_NorSpr_YPosLo,x
	PHY
	STY.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	JSR.w RemovePokeySgmntRt
	PLY
	JSR.w CODE_02B82E
	RTS

RemovePokeySgmntRt:
	LDY.b #$00
	CMP.b #$09
	BMI.b CODE_02B803
	INY
	CMP.b #$19
	BMI.b CODE_02B803
	INY
	CMP.b #$29
	BMI.b CODE_02B803
	INY
	CMP.b #$39
	BMI.b CODE_02B803
	INY
CODE_02B803:
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	AND.w PokeyUnsetBit,y
	STA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	STA.w !RAM_SMW_NorSpr070_Pokey_DisconnectedUpperSegments,x
	LDA.w DATA_02B829,y
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr070_Pokey_ReconnectBodyTimer,x
	ASL
	STA.w !RAM_SMW_NorSpr070_Pokey_DisableSegmentLossTimer,x
	RTS

RemovePokeySegment:
	PHB
	PHK
	PLB
	JSR.w RemovePokeySgmntRt
	PLB
	RTL

PokeyUnsetBit:
	db $EF,$F7,$FB,$FD,$FE

DATA_02B829:
	db $E0,$F0,$F8,$FC,$FE

CODE_02B82E:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return02B881
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr070_Pokey
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDX.w !RAM_SMW_Sprites_SecondTrackedSpriteIndex
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ROR.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #$E0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	PLX
	LDA.b !RAM_SMW_NorSpr070_Pokey_Segments,x
	AND.b !RAM_SMW_Misc_ScratchRAM0D
	STA.w !RAM_SMW_NorSpr070_Pokey_Segments,y
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr070_Pokey_DeadSegmentFlag,y
	LDA.b #$01
	JSL.l SMW_GivePoints_Entry2
Return02B881:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr071_RedCapeSuperKoopa_Status01(Address)
namespace SMW_NorSpr071_RedCapeSuperKoopa_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$28
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr071_RedCapeSuperKoopa_Status01_Main, SMW_NorSpr072_YellowCapeSuperKoopa_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSprXXX_SuperKoopas_Status08(Address)
namespace SMW_NorSprXXX_SuperKoopas_Status08
%InsertMacroAtXPosition(<Address>)

RedCapeSuperKoopaEntry:
	JSL.l Bank02
	RTS

YellowCapeSuperKoopaEntry:
	JSL.l Bank02
	RTS

GroundSuperKoopaEntry:
	JSL.l Bank02
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_SuperKoopas_Status08_RedCapeSuperKoopaEntry, SMW_NorSpr071_RedCapeSuperKoopa_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_SuperKoopas_Status08_YellowCapeSuperKoopaEntry, SMW_NorSpr072_YellowCapeSuperKoopa_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_SuperKoopas_Status08_GroundSuperKoopaEntry, SMW_NorSpr073_GroundSuperKoopa_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_SuperKoopas_Status08(Address)
namespace SMW_NorSprXXX_SuperKoopas_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

NonGroundedKoopaXSpeed:
	db $18,$E8

Sub:
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BNE.b CODE_02EB49
	LDY.b #$04
CODE_02EB3D:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	BEQ.b CODE_02EB44
	INY
CODE_02EB44:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_02EB49:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02EB7C
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr073_GroundSuperKoopa
	BEQ.b CODE_02EB7D
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w NonGroundedKoopaXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w CODE_02EBF8
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b Return02EB7C
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$F0
	BMI.b Return02EB7C
	CLC
	ADC.b #$FF
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return02EB7C:
	RTS

CODE_02EB7D:
	LDA.b !RAM_SMW_NorSpr073_GroundSuperKoopa_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

SuperKoopaPtrs:
	dw GroundedSuperKoopaState00_Running
	dw GroundedSuperKoopaState01_Jumping
	dw GroundedSuperKoopaState02_Flying

MaxXSpeed:
	db $18,$E8

XAcceleration:
	db $01,$FF

GroundedSuperKoopaState00_Running:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BEQ.b CODE_02EBAB
	CLC
	ADC.w XAcceleration,y
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_02EBA9
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02EBA9:
	INC.b !RAM_SMW_Misc_ScratchRAM00
CODE_02EBAB:
	INC.w !RAM_SMW_NorSpr073_GroundSuperKoopa_TakeOffTimer,x
	LDA.w !RAM_SMW_NorSpr073_GroundSuperKoopa_TakeOffTimer,x
	CMP.b #$30
	BEQ.b CODE_02EBCA
CODE_02EBB5:
	LDY.b #$00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$04
	BEQ.b CODE_02EBBE
	INY
CODE_02EBBE:
	TYA
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_02EBC6
	CLC
	ADC.b #$06
CODE_02EBC6:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_02EBCA:
	INC.b !RAM_SMW_NorSpr073_GroundSuperKoopa_CurrentState,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

GroundedSuperKoopaState01_Jumping:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$14
	BMI.b CODE_02EBDE
	INC.b !RAM_SMW_NorSpr073_GroundSuperKoopa_CurrentState,x
CODE_02EBDE:
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w CODE_02EBB5
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

GroundedSuperKoopaState02_Flying:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w MaxXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_02EBF8
	CLC
	ADC.b #$FF
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02EBF8:
	LDY.b #$02
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$04
	BEQ.b CODE_02EC01
	INY
CODE_02EC01:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

XDisp:
	db $08,$08,$10,$00
	db $08,$08,$10,$00
	db $08,$10,$10,$00
	db $08,$10,$10,$00
	db $09,$09,$00,$00
	db $09,$09,$00,$00
	db $08,$10,$00,$00
	db $08,$10,$00,$00
	db $08,$10,$00,$00
	db $00,$00,$F8,$00
	db $00,$00,$F8,$00
	db $00,$F8,$F8,$00
	db $00,$F8,$F8,$00
	db $FF,$FF,$00,$00
	db $FF,$FF,$00,$00
	db $00,$F8,$00,$00
	db $00,$F8,$00,$00
	db $00,$F8,$00,$00

YDisp:
	db $00,$08,$08,$00
	db $00,$08,$08,$00
	db $03,$03,$08,$00
	db $03,$03,$08,$00
	db $FF,$07,$00,$00
	db $FF,$07,$00,$00
	db $FD,$FD,$00,$00
	db $FD,$FD,$00,$00
	db $FD,$FD,$00,$00

Tiles:
	db $C8,$D8,$D0,$E0
	db $C9,$D9,$C0,$E2
	db $E4,$E5,$F2,$E0
	db $F4,$F5,$F2,$E0
	db $DA,$CA,$E0,$CF
	db $DB,$CB,$E0,$CF
	db $E4,$E5,$E0,$CF
	db $F4,$F5,$E2,$CF
	db $E4,$E5,$E2,$CF

Prop:
	db $03,$03,$03,$00
	db $03,$03,$03,$00
	db $03,$03,$01,$01
	db $03,$03,$01,$01
	db $83,$83,$80,$00				;\ Glitch: Thesed $00 bytes should be changed to $01 to fix the garbage sprite tiles that appear for these poses.
	db $83,$83,$80,$00				;/
	db $03,$03,$00,$01
	db $03,$03,$00,$01
	db $03,$03,$00,$01

TileSize:
	db $00,$00,$00,$02
	db $00,$00,$00,$02
	db $00,$00,$00,$02
	db $00,$00,$00,$02
	db $00,$00,$02,$00
	db $00,$00,$02,$00
	db $00,$00,$02,$00
	db $00,$00,$02,$00
	db $00,$00,$02,$00

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$0E
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	STZ.b !RAM_SMW_Misc_ScratchRAM04
CODE_02ECF7:
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	LSR
	LDA.w Prop,x
	AND.b #$02
	BEQ.b CODE_02ED4D
	PHP
	PHX
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr073_GroundSuperKoopa_HasFeatherFlag,x
	BEQ.b CODE_02ED3B
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$01
	PHY
	TAY
	LDA.w DATA_02ED39,y
	PLY
	BRA.b CODE_02ED44

DATA_02ED39:
	db $10,$0A

CODE_02ED3B:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr072_YellowCapeSuperKoopa
	LDA.b #$08
	BCC.b CODE_02ED44
	LSR
CODE_02ED44:
	PLX
	PLP
	ORA.w Prop,x
	AND.b #$FD
	BRA.b CODE_02ED52

CODE_02ED4D:
	LDA.w Prop,x
	ORA.b !RAM_SMW_Misc_ScratchRAM05
CODE_02ED52:
	ORA.b !RAM_SMW_Sprites_TilePriority
	BCS.b CODE_02ED5F
	PHA
	TXA
	CLC
	ADC.b #$24
	TAX
	PLA
	ORA.b #$40
CODE_02ED5F:
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	INY
	INY
	INY
	INY
	INC.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$04
	BNE.b CODE_02ECF7
	PLX
	LDY.b #$FF
	LDA.b #$03
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr073_GroundSuperKoopa_Status01(Address)
namespace SMW_NorSpr073_GroundSuperKoopa_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	BEQ.b CODE_018547
	LDA.b #!Define_SMW_NorSpr_1656Prop_SafeToJumpOn
	STA.w !RAM_SMW_NorSpr_PropertyBits1656,x
	LDA.b #!Define_SMW_NorSpr_1662Prop_FallWhenKilled|!Define_SMW_NorSpr_1662Prop_SpriteClipping00
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	LDA.b #!Define_SMW_NorSpr_1686Prop_DontChangeDirectionWhenTouched
	STA.w !RAM_SMW_NorSpr_PropertyBits1686,x
	RTS

CODE_018547:
	INC.w !RAM_SMW_NorSpr073_GroundSuperKoopa_HasFeatherFlag,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr074_Mushroom_Status01(Address)
namespace SMW_NorSpr074_Mushroom_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	INC.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr074_Mushroom_Status01_Main, SMW_NorSpr075_FireFlower_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr074_Mushroom_Status01_Main, SMW_NorSpr076_Star_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr074_Mushroom_Status01_Main, SMW_NorSpr077_Feather_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr074_Mushroom_Status01_Main, SMW_NorSpr078_1upMushroom_Status01_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr077_Feather_Status08(Address)
namespace SMW_NorSpr077_Feather_Status08
%InsertMacroAtXPosition(<Address>)

XAccelerarion:
	db $02,$FE

MaxXSpeed:
	db $20,$E0

YSpeed:
	db $0A,$F6,$08

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01C744
	LDA.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	BEQ.b CODE_01C701
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BNE.b CODE_01C6FF
	STZ.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
CODE_01C6FF:
	BRA.b CODE_01C741

CODE_01C701:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0C_GoalPowerUp
	BEQ.b CODE_01C744
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BEQ.b CODE_01C715
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	JMP.w CODE_01C741

CODE_01C715:
	LDA.w !RAM_SMW_NorSpr077_Feather_HorizontalMovementDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w XAccelerarion,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BNE.b CODE_01C72B
	INC.w !RAM_SMW_NorSpr077_Feather_HorizontalMovementDirection,x
CODE_01C72B:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_01C730
	INY
CODE_01C730:
	LDA.w YSpeed,y
	CLC
	ADC.b #$06
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01C741:
	JSR.w SMW_SetFacingDirectionBasedOnSpeed_Bank01
CODE_01C744:
	JSR.w SMW_NorSprXXX_PowerUps_Status08_CODE_01C4AC
	JMP.w SMW_PowerUpAndItemGFXRt_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr079_VineHead_Status08(Address)
namespace SMW_NorSpr079_VineHead_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.w !RAM_SMW_NorSpr079_VineHead_AppearBehindLayer1Timer,x
	CMP.b #$20
	BCC.b CODE_01C191
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_01C191:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LSR
	LDA.b #$AC
	BCC.b CODE_01C1A3
	LDA.b #$AE
CODE_01C1A3:
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01C1ED
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.w !RAM_SMW_NorSpr079_VineHead_AppearBehindLayer1Timer,x
	CMP.b #$20
	BCS.b CODE_01C1CB
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BNE.b CODE_01C1C8
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BPL.b CODE_01C1CB
CODE_01C1C8:
	JMP.w SMW_SubOffscreen_Bank01_EraseSprite

CODE_01C1CB:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$0F
	CMP.b #$00
	BNE.b Return01C1ED
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.b #$03
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
Return01C1ED:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr07A_Fireworks_Status08(Address)
namespace SMW_NorSpr07A_Fireworks_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	LDA.b !RAM_SMW_NorSpr07A_Fireworks_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

FireworkPtrs:
	dw InitialFire
	dw ShootUp
	dw Explode
	dw FadeAway

YSpeed:
	db $E4,$E6,$E4,$E2

InitialFire:
	LDY.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_Sound1DFC_YoshiStompsEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr07A_Fireworks_WaitBeforeWhistleSound,x
	INC.b !RAM_SMW_NorSpr07A_Fireworks_CurrentState,x
	RTS

DATA_03C83D:
	db $14,$0C,$10,$15

DATA_03C841:
	db $08,$10,$0C,$05

ShootUp:
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_WaitBeforeWhistleSound,x
	CMP.b #$01
	BNE.b CODE_03C85B
	LDY.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	LDA.w FireworkSounds_WhistleCh1,y
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w FireworkSounds_WhistleCh3,y
	STA.w !RAM_SMW_IO_SoundCh3
CODE_03C85B:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	INC.b !RAM_SMW_NorSpr07A_Fireworks_DecelerateTimer,x
	LDA.b !RAM_SMW_NorSpr07A_Fireworks_DecelerateTimer,x
	AND.b #$03
	BNE.b CODE_03C869
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03C869:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$FC
	BNE.b CODE_03C885
	INC.b !RAM_SMW_NorSpr07A_Fireworks_CurrentState,x
	LDY.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	LDA.w DATA_03C83D,y
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ExpandingSpeed,x
	LDA.w DATA_03C841,y
	STA.w !RAM_SMW_NorSpr07A_Fireworks_WaitBeforeBangSound,x
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ColorFlashIndex
CODE_03C885:
	JSR.w CODE_03C96D
	RTS

DATA_03C889:
	db $FF,$80,$C0,$FF

Explode:
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_WaitBeforeBangSound,x
	DEC
	BNE.b CODE_03C8A2
	LDY.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	LDA.w FireworkSounds_BangCh1,y
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w FireworkSounds_BangCh3,y
	STA.w !RAM_SMW_IO_SoundCh3
CODE_03C8A2:
	JSR.w CODE_03C8B1
	LDA.b !RAM_SMW_NorSpr07A_Fireworks_CurrentState,x
	CMP.b #$02
	BNE.b CODE_03C8AE
	JSR.w CODE_03C8B1
CODE_03C8AE:
	JMP.w CODE_03C9E9

CODE_03C8B1:
	LDY.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_ExplosionSize,x
	CLC
	ADC.w !RAM_SMW_NorSpr07A_Fireworks_ExpandingSpeed,x
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ExplosionSize,x
	BCS.b ADDR_03C8DB
	CMP.w DATA_03C889,y
	BCS.b CODE_03C8E0
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_ExpandingSpeed,x
	CMP.b #$02
	BCC.b CODE_03C8D4
	SEC
	SBC.b #$01
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ExpandingSpeed,x
	BCS.b CODE_03C8E4
CODE_03C8D4:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ExpandingSpeed,x
	BRA.b CODE_03C8E4

ADDR_03C8DB:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ExplosionSize,x
CODE_03C8E0:
	INC.b !RAM_SMW_NorSpr07A_Fireworks_CurrentState,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03C8E4:
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_ExpandingSpeed,x
	AND.b #$FF
	TAY
	LDA.w DATA_03C8F1,y
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ParticleAnimationSet,x
	RTS

DATA_03C8F1:
	db $06,$05,$04,$03,$03,$03,$03,$02
	db $02,$02,$02,$02,$02,$02,$01,$01
	db $01,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $03,$03,$03,$03,$03,$03,$03,$03
	db $03,$03,$02,$02,$02,$02,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$02

FadeAway:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_03C949
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03C949:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b #$07
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	CPY.b #$08
	BNE.b CODE_03C958
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_03C958:
	CPY.b #$03
	BCC.b CODE_03C962
	INC
	CPY.b #$05
	BCC.b CODE_03C962
	INC
CODE_03C962:
	STA.w !RAM_SMW_NorSpr07A_Fireworks_ParticleAnimationSet,x
	JSR.w CODE_03C9E9
	RTS

DATA_03C969:
	db $EC,$8E,$EC,$EC

CODE_03C96D:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return03C9B8
	JSR.w SMW_GetDrawInfo_Bank03
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	TAX
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	LSR
	AND.b #$02
	LSR
	ADC.w DATA_03C969,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.b !RAM_SMW_Counter_GlobalFrames
	ASL
	AND.b #$0E
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Counter_GlobalFrames
	ASL
	ASL
	ASL
	ASL
	AND.b #$40
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	ORA.b #$31
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
Return03C9B8:
	RTS

DATA_03C9B9:
	db $36,$35,$C7,$34,$34,$34,$34,$24
	db $03,$03,$36,$35,$C7,$34,$34,$24
	db $24,$24,$24,$03,$36,$35,$C7,$34
	db $34,$34,$24,$24,$03,$24,$36,$35
	db $C7,$34,$24,$24,$24,$24,$24,$03

DATA_03C9E1:
	db $00,$01,$01,$00,$00,$FF,$FF,$00

CODE_03C9E9:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_ExplosionSize,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_ParticleAnimationSet,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	PHX
	LDX.b #$3F
	LDY.b #$00
CODE_03CA0D:
	STX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	CMP.b #$03
	LDA.w DATA_03C626,x
	BCC.b CODE_03CA1B
	LDA.w DATA_03C6CE,x
CODE_03CA1B:
	SEC
	SBC.b #$40
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PHY
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	CMP.b #$03
	LDA.w DATA_03C67A,x
	BCC.b CODE_03CA2D
	LDA.w DATA_03C722,x
CODE_03CA2D:
	SEC
	SBC.b #$50
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_03CA39
	EOR.b #$FF
	INC
CODE_03CA39:
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_03CA4F
	EOR.b #$FF
	INC
CODE_03CA4F:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_03CA58
	EOR.b #$FF
	INC
CODE_03CA58:
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_03CA6E
	EOR.b #$FF
	INC
CODE_03CA6E:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CMP.b #$06
	BCC.b CODE_03CA82
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	LSR
	LSR
	AND.b #$07
	TAY
CODE_03CA82:
	LDA.w DATA_03C9E1,y
	PLY
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM08
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM09
	STA.w SMW_OAMBuffer[$00].YDisp,y
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	ADC.b !RAM_SMW_Misc_ScratchRAM07
	TAX
	LDA.w DATA_03C9B9,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	LSR
	NOP #2
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM0A
	CPX.b #$03
	BEQ.b CODE_03CABD
	EOR.b !RAM_SMW_Misc_ScratchRAM04
CODE_03CABD:
	AND.b #$0E
	ORA.b #$31
	STA.w SMW_OAMBuffer[$00].Prop,y
	PLX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BMI.b CODE_03CADA
	JMP.w CODE_03CA0D

CODE_03CADA:
	LDX.b #$53
CODE_03CADC:
	STX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	CMP.b #$03
	LDA.w DATA_03C626,x
	BCC.b CODE_03CAEA
	LDA.w DATA_03C6CE,x
CODE_03CAEA:
	SEC
	SBC.b #$40
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	CMP.b #$03
	LDA.w DATA_03C67A,x
	BCC.b CODE_03CAFB
	LDA.w DATA_03C722,x
CODE_03CAFB:
	SEC
	SBC.b #$50
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_03CB08
	EOR.b #$FF
	INC
CODE_03CB08:
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_03CB1E
	EOR.b #$FF
	INC
CODE_03CB1E:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_03CB27
	EOR.b #$FF
	INC
CODE_03CB27:
	STA.w !REGISTER_Multiplicand
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplier
	NOP #4
	LDA.w !REGISTER_ProductOrRemainderHi
	LDY.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_03CB3D
	EOR.b #$FF
	INC
CODE_03CB3D:
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CMP.b #$06
	BCC.b CODE_03CB51
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	LSR
	LSR
	AND.b #$07
	TAY
CODE_03CB51:
	LDA.w DATA_03C9E1,y
	PLY
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM09
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	ADC.b !RAM_SMW_Misc_ScratchRAM07
	TAX
	LDA.w DATA_03C9B9,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	LSR
	NOP #2
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM0A
	CPX.b #$03
	BEQ.b CODE_03CB8C
	EOR.b !RAM_SMW_Misc_ScratchRAM04
CODE_03CB8C:
	AND.b #$0E
	ORA.b #$31
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	CPX.b #$3F
	BEQ.b CODE_03CBAB
	JMP.w CODE_03CADC

CODE_03CBAB:
	PLX
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr07A_Fireworks_Status08(Address)
namespace SMW_NorSpr07A_Fireworks_Status08
%InsertMacroAtXPosition(<Address>)

FireworkSounds:
.WhistleCh1:
	db !Define_SMW_Sound1DF9_FireworksWhistle,$00,!Define_SMW_Sound1DF9_FireworksWhistle,!Define_SMW_Sound1DF9_LouderFireworksWhistle

.WhistleCh3:
	db $00,!Define_SMW_Sound1DFC_FireworksWhistle,$00,$00

.BangCh1:
	db !Define_SMW_Sound1DF9_FireworksBang,$00,!Define_SMW_Sound1DF9_FireworksBang,!Define_SMW_Sound1DF9_LouderFireworksBang

.BangCh3:
	db $00,!Define_SMW_Sound1DFC_FireworksBang,$00,$00
namespace off
endmacro

macro ROUTINE_RT03_SMW_NorSpr07A_Fireworks_Status08(Address)
namespace SMW_NorSpr07A_Fireworks_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03C626:
	db $14,$28,$38,$20,$30,$4C,$40,$34
	db $2C,$1C,$08,$0C,$04,$0C,$1C,$24
	db $2C,$38,$40,$48,$50,$5C,$5C,$6C
	db $4C,$58,$24,$78,$64,$70,$78,$7C
	db $70,$68,$58,$4C,$40,$34,$24,$04
	db $18,$2C,$0C,$0C,$14,$18,$1C,$24
	db $2C,$28,$24,$30,$30,$34,$38,$3C
	db $44,$54,$48,$5C,$68,$40,$4C,$40
	db $3C,$40,$50,$54,$60,$54,$4C,$5C
	db $5C,$68,$74,$6C,$7C,$78,$68,$80
	db $18,$48,$2C,$1C

DATA_03C67A:
	db $1C,$0C,$08,$1C,$14,$08,$14,$24
	db $28,$2C,$30,$3C,$44,$4C,$44,$34
	db $40,$34,$24,$1C,$10,$0C,$18,$18
	db $2C,$28,$68,$28,$34,$34,$38,$40
	db $44,$44,$38,$3C,$44,$48,$4C,$5C
	db $5C,$54,$64,$74,$74,$88,$80,$94
	db $8C,$78,$6C,$64,$70,$7C,$8C,$98
	db $90,$98,$84,$84,$88,$78,$78,$6C
	db $5C,$50,$50,$48,$50,$5C,$64,$64
	db $74,$78,$74,$64,$60,$58,$54,$50
	db $50,$58,$30,$34

DATA_03C6CE:
	db $20,$30,$39,$47,$50,$60,$70,$7C
	db $7B,$80,$7D,$78,$6E,$60,$4F,$47
	db $41,$38,$30,$2A,$20,$10,$04,$00
	db $00,$08,$10,$20,$1A,$10,$0A,$06
	db $0F,$17,$16,$1C,$1F,$21,$10,$18
	db $20,$2C,$2E,$3B,$30,$30,$2D,$2A
	db $34,$36,$3A,$3F,$45,$4D,$5F,$54
	db $4E,$67,$70,$67,$70,$5C,$4E,$40
	db $48,$56,$57,$5F,$68,$72,$77,$6F
	db $66,$60,$67,$5C,$57,$4B,$4D,$54
	db $48,$43,$3D,$3C

DATA_03C722:
	db $18,$1E,$25,$22,$1A,$17,$20,$30
	db $41,$4F,$61,$70,$7F,$8C,$94,$92
	db $A0,$86,$93,$88,$88,$78,$66,$50
	db $40,$30,$22,$20,$2C,$30,$40,$4F
	db $59,$51,$3F,$39,$4C,$5F,$6A,$6F
	db $77,$7E,$6C,$60,$58,$48,$3D,$2F
	db $28,$38,$44,$30,$36,$27,$21,$2F
	db $39,$2A,$2F,$39,$40,$3F,$49,$50
	db $60,$59,$4C,$51,$48,$4F,$56,$67
	db $5B,$68,$75,$7D,$87,$8A,$7A,$6B
	db $70,$82,$73,$92
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr07B_GoalTape_Status01(Address)
namespace SMW_NorSpr07B_GoalTape_Status01
%InsertMacroAtXPosition(<Address>)

ADDR_01C062:						;\ Note: Unused code
	JSR.w Main					;|
	LDA.b !RAM_SMW_NorSpr_YPosLo,x			;|
	SEC						;|
	SBC.b #$4C					;|
	STA.b !RAM_SMW_NorSpr_YPosLo,x			;|
	LDA.w !RAM_SMW_NorSpr_YPosHi,x			;|
	SBC.b #$00					;|
	STA.w !RAM_SMW_NorSpr_YPosHi,x			;|
	RTS						;/

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_NorSpr07B_GoalTape_HitboxXPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxXPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxYPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
#LM300Hijack_SecretExit2And3GoalTape1:
	STA.w !RAM_SMW_NorSpr07B_GoalTape_GoalType,x		;\ LM: NOPed out code (3.00+)
	AND.b #$01						;| LM changes how !RAM_SMW_NorSpr07B_GoalTape_GoalType is stored to to allow goal tapes to trigger secret exit 2 and 3.
	STA.w !RAM_SMW_NorSpr_YPosHi,x				;/
	STA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxYPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr07B_GoalTape_Status08(Address)
namespace SMW_NorSpr07B_GoalTape_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01C0A4
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_GoalCrossedFlag,x
	BEQ.b CODE_01C0A7
Return01C0A4:
	RTS

YSpeed:
	db $10,$F0

CODE_01C0A7:
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_ChangeDirectionTimer,x
	BNE.b CODE_01C0B4
	LDA.b #$7C
	STA.w !RAM_SMW_NorSpr07B_GoalTape_ChangeDirectionTimer,x
	INC.w !RAM_SMW_NorSpr07B_GoalTape_VerticalDirection,x
CODE_01C0B4:
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr07B_GoalTape_HitboxXPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxXPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	CMP.w #$0010
	SEP.b #$20
	BCS.b Return01C12C
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxYPosLo,x
	CMP.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxYPosHi,x
#LM300Hijack_SecretExit2And3GoalTape2:
	AND.b #$01						; LM: Changed to AND.b #$FF so goal tapes can trigger more secret exits (3.00+)
	SBC.b !RAM_SMW_Player_YPosHi
	BCC.b Return01C12C
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_GoalType,x
	LSR
	LSR
	STA.w !RAM_SMW_Flag_SecretGoalSprite
	LDA.b #!Define_SMW_LevelMusic_PassedLevel
	STA.w !RAM_SMW_IO_MusicCh1
	LDA.b #$FF
	STA.w !RAM_SMW_Misc_MusicRegisterBackup
#Debug_TriggerCutsceneOnGoal:
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
	STZ.w !RAM_SMW_Timer_StarPower
	INC.w !RAM_SMW_NorSpr07B_GoalTape_GoalCrossedFlag,x
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b CODE_01C125
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	INC.w !RAM_SMW_NorSpr07B_GoalTape_BrokeTapeFlag,x
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_HitboxYPosLo,x
	SEC
	SBC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr07B_GoalTape_RelativeYPosTapeWasHitAt,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr07B_GoalTape_DisplayStarsTimer,x
	JSL.l GiveBonusStars
	BRA.b CODE_01C128

CODE_01C125:
	STZ.w !RAM_SMW_NorSpr_PropertyBits1686,x
CODE_01C128:
	JSL.l TriggerGoalTape
Return01C12C:
	RTS

GFXRt:
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_BrokeTapeFlag,x
	BNE.b CODE_01C175
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	STA.w SMW_OAMBuffer[$42].YDisp,y
	LDA.b #$D4
	STA.w SMW_OAMBuffer[$40].Tile,y
	INC
	STA.w SMW_OAMBuffer[$41].Tile,y
	STA.w SMW_OAMBuffer[$42].Tile,y
	LDA.b #$32
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	LDY.b #$00
	LDA.b #$02
	JMP.w SMW_FinishOAMWrite_Sub

CODE_01C175:
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_DisplayStarsTimer,x
	BEQ.b CODE_01C17F
	JSL.l BonusStarNumbersGFXRt
	RTS

CODE_01C17F:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr07B_GoalTape_Status08(Address)
namespace SMW_NorSpr07B_GoalTape_Status08
%InsertMacroAtXPosition(<Address>)

DATA_07F0C8:
	db $00,$08,$10,$00,$10,$00,$10,$00
	db $10,$00,$08,$10,$FF,$08,$08,$08
	db $08,$08,$FF,$00,$08,$10,$10,$08
	db $00,$00,$08,$10,$FF,$00,$08,$10
	db $08,$10,$10,$00,$08,$10,$FF,$00
	db $00,$10,$00,$10,$00,$08,$10,$10
	db $FF,$00,$08,$10,$00,$00,$08,$10
	db $10,$00,$08,$10,$FF,$08,$10,$00
	db $00,$08,$10,$00,$10,$00,$08,$10
	db $FF,$00,$08,$10,$10,$0C,$08,$08
	db $FF,$00,$08,$10,$00,$10,$00,$08
	db $10,$00,$10,$00,$08,$10,$FF,$00
	db $08,$10,$00,$10,$00,$08,$10,$10
	db $00,$08,$10,$FF

DATA_07F134:
	db $00,$00,$00,$08,$08,$10,$10,$18
	db $18,$20,$20,$20,$FF,$00,$08,$10
	db $18,$20,$FF,$00,$00,$00,$08,$10
	db $18,$20,$20,$20,$FF,$00,$00,$08
	db $10,$10,$18,$20,$20,$20,$FF,$00
	db $08,$08,$10,$10,$18,$18,$18,$20
	db $FF,$00,$00,$00,$08,$10,$10,$10
	db $18,$20,$20,$20,$FF,$00,$00,$08
	db $10,$10,$10,$18,$18,$20,$20,$20
	db $FF,$00,$00,$00,$08,$10,$18,$20
	db $FF,$00,$00,$00,$08,$08,$10,$10
	db $10,$18,$18,$20,$20,$20,$FF,$00
	db $00,$00,$08,$08,$10,$10,$10,$18
	db $20,$20,$20,$FF

DATA_07F1A0:
	db $00,$0D,$13,$1D,$27,$31,$3D,$49
	db $51,$5F

BonusStarsEarned:
	db $01,$02,$03,$04,$05,$06,$07,$08
	db $09,$10,$11,$12,$13,$14,$15,$16
	db $17,$18,$19,$20,$21,$22,$23,$24
	db $25,$26,$27,$28,$29,$30,$40,$50

BonusStarNumbersGFXRt:
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_DisplayStarsTimer,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_RelativeYPosTapeWasHitAt,x
	LSR
	LSR
	TAX
	LDA.l BonusStarsEarned,x
	PHA
	LSR
	LSR
	LSR
	LSR
	TAX
	BEQ.b CODE_07F1ED
	LDA.l DATA_07F1A0,x
	TAX
	LDY.b #$20
	JSR.w CODE_07F200
CODE_07F1ED:
	PLA
	AND.b #$0F
	TAX
	LDA.l DATA_07F1A0,x
	TAX
	LDA.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.b #$54
	JSR.w CODE_07F200
	RTL

CODE_07F200:
	LDA.l DATA_07F0C8,x
	BMI.b CODE_07F24A
	CLC
	ADC.b #$64
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].XDisp,y 
	LDA.l DATA_07F134,x
	CLC
	ADC.b #$40
	STA.w SMW_OAMBuffer[$00].YDisp,y 
	LDA.b #$EF
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	CPX.b #$10
	BCS.b CODE_07F22A
	TXA
	LSR
	LSR
	TAX
	LDA.l DATA_07F24E,x
CODE_07F22A:
	STA.w SMW_OAMBuffer[$00].Tile,y
	PLX
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	AND.b #$0E
	ORA.b #$30
	STA.w SMW_OAMBuffer[$00].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	INX
	BRA.b CODE_07F200

CODE_07F24A:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

DATA_07F24E:
	db $66,$66,$6E,$FF

GiveBonusStars:
	PHX
	LDA.w !RAM_SMW_NorSpr07B_GoalTape_RelativeYPosTapeWasHitAt,x
	LSR
	LSR
	TAX
	LDA.l BonusStarsEarned,x
	STA.w !RAM_SMW_Counter_BonusStarsEarned
	PLX
	CMP.b #$50
	BNE.b Return07F26B
	LDA.b #$0A
	JSL.l SMW_GivePoints_Main
Return07F26B:
	RTL
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr07B_GoalTape_Status08(Address)
namespace SMW_NorSpr07B_GoalTape_Status08
%InsertMacroAtXPosition(<Address>)

TriggerGoalTape:
	STZ.w !RAM_SMW_Timer_InflateFromPBalloon
	STZ.w !RAM_SMW_Timer_PlayerHasPBalloon
	STZ.w !RAM_SMW_Timer_RespawnSprite
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) == $00
	STZ.w !RAM_SMW_GenSpr_SpriteID
endif
	STZ.w !RAM_SMW_Counter_GoalCoinPointsIndex
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
LvlEndSprLoopStrt:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BCC.b LvlEndNextSprite
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BNE.b CODE_00FAA3
	PHX
	JSR.w LvlEndPowerUp
	PLX
	BRA.b LvlEndNextSprite

CODE_00FAA3:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr07B_GoalTape
	BEQ.b CODE_00FAB2
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,y
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,y
	BNE.b CODE_00FAC5
CODE_00FAB2:
	LDA.w !RAM_SMW_NorSpr_PropertyBits1686,y
	AND.b #!Define_SMW_NorSpr_1686Prop_DontBecomeCoinOnGoalTapeTrigger
	BNE.b CODE_00FAC5
	LDA.b #$10
	STA.w !RAM_SMW_NorSprStatus06_GoalCoins_WaitBeforeTurningIntoCoin,y
	LDA.b #!Define_SMW_NorSprStatus06_GoalCoins
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BRA.b LvlEndNextSprite

CODE_00FAC5:
	LDA.w !RAM_SMW_NorSpr_PropertyBits190F,y
	AND.b #!Define_SMW_NorSpr_190FProp_DontDespawnOnLevelEnd
	BNE.b LvlEndNextSprite
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
LvlEndNextSprite:
	DEY
	BPL.b LvlEndSprLoopStrt
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
	LDA.b #$00
CODE_00FAD8:
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	DEY
	BPL.b CODE_00FAD8
	RTL

DATA_00FADF:
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr077_Feather
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr076_Star
	db $E0
	db $F0
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr074_Mushroom
	db !Define_SMW_SpriteID_NorSpr077_Feather
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr076_Star
	db $E0
	db $F1
	db $F0
	db $F0
	db $F0
	db $F0
	db $F1
	db $E0
	db $F2
	db $E0
	db $E0
	db $E0
	db $E0
	db $F1
	db $E0
	db $E4

DATA_00FAFB:
	db $FF
	db $74
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr076_Star
	db !Define_SMW_SpriteID_NorSpr077_Feather

LvlEndPowerUp:
	LDX.b !RAM_SMW_Player_CurrentPowerUp
	LDA.w !RAM_SMW_Timer_StarPower			;\ Note: Unused goal star
	BEQ.b CODE_00FB09				;|
	LDX.b #$04					;/
CODE_00FB09:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_00FB10
	LDX.b #$05
CODE_00FB10:
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr02F_PortableSpringboard
	BEQ.b CODE_00FB2D
	CMP.b #!Define_SMW_SpriteID_NorSpr03E_PSwitch
	BEQ.b CODE_00FB2D
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BEQ.b ADDR_00FB28
	CMP.b #!Define_SMW_SpriteID_NorSpr02D_BabyYoshi
	BNE.b CODE_00FB32
	TXA
	CLC
	ADC.b #$07
	TAX
ADDR_00FB28:
	TXA
	CLC
	ADC.b #$07
	TAX
CODE_00FB2D:
	TXA
	CLC
	ADC.b #$07
	TAX
CODE_00FB32:
	LDA.l DATA_00FADF,x
	LDX.w !RAM_SMW_Player_CurrentItemBox
	CMP.l DATA_00FAFB,x
	BNE.b CODE_00FB41
	LDA.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom
CODE_00FB41:
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$E0
	BCC.b LvlEndStoreSpr
	PHA
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	PLA
	CMP.b #$F0
	LDA.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom		;\ Optimization: This branch is meaningless.
	BCS.b LvlEndStoreSpr					;|
	LDA.b #!Define_SMW_SpriteID_NorSpr078_1upMushroom		;/
LvlEndStoreSpr:
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr076_Star			;\ Optimization: Unused star prize
	BNE.b CODE_00FB5F 					;|
	INC.w !RAM_SMW_UnusedRAM_GotInvincibleStarFromGoal		;/
CODE_00FB5F:
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	STA.w !RAM_SMW_NorSpr_Table7E1594,y
	LDA.b #!Define_SMW_NorSprStatus0C_GoalPowerUp
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$D0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #$05
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,y
	LDA.b #!Define_SMW_Sound1DF9_CarryItemToGoal
	STA.w !RAM_SMW_IO_SoundCh1
	LDX.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_00FB84:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,x
	BEQ.b CODE_00FB8D
	DEX
	BPL.b CODE_00FB84
	RTS

CODE_00FB8D:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,x
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	STA.w !RAM_SMW_SmokeSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosLo,y
	STA.w !RAM_SMW_SmokeSpr_XPosLo,x
	LDA.b #$1B
	STA.w !RAM_SMW_SmokeSpr_Timer,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr07C_PrincessPeach_Status08(Address)
namespace SMW_NorSpr07C_PrincessPeach_Status08
%InsertMacroAtXPosition(<Address>)

BlushYDisp:
	db $01,$11

BlushTiles:
	db $6E,$88

Bank03:
;$03AC97
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$7F
	BNE.b CODE_03ACB8
	JSL.l SMW_GetRand_Main
	AND.b #$07
	BNE.b CODE_03ACB8
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_BlinkTimer,x
CODE_03ACB8:
	LDY.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_BlinkTimer,x
	BEQ.b CODE_03ACC1
	INY
CODE_03ACC1:
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_03ACCB
	TYA
	CLC
	ADC.b #$08
	TAY
CODE_03ACCB:
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$D0
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	JSR.w SMW_NorSpr07C_PrincessPeach_Status08_GFXRt_DrawPeach
	LDY.b #$02
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_MarioBlushTimer,x
	BEQ.b CODE_03AD18
	PHX
	LDX.b #$00
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_03ACEB
	INX
CODE_03ACEB:
	LDY.b #$4C
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Player_OnScreenPosYLo
	CLC
	ADC.w BlushYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) != $00
	LDA.w !RAM_SMW_Player_CurrentCharacter
	BEQ.b CODE_03AD09
	LDA.w SMW_OAMBuffer[$40].YDisp,Y
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U) != $00
	SEC
	SBC.b #$02
else
	DEC
	DEC
endif
	STA.w SMW_OAMBuffer[$40].YDisp,Y
CODE_03AD09:
endif
	LDA.w BlushTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.b !RAM_SMW_Player_FacingDirection
	CMP.b #$01
	LDA.b #$31
	BCC.b CODE_03AD0C
	ORA.b #$40
CODE_03AD0C:
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
CODE_03AD18:
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_Player_XSpeed
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

PrincessPeachPtrs:
	dw FloatingDown
	dw WaitAfterFall
	dw WalkTowardsBro
	dw StandByBro
	dw KissBro
	dw DisplayMessage
	dw FadeText
	dw Fireworks

FloatingDown:
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$08
	BCS.b CODE_03AD4B
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03AD4B:
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BMI.b CODE_03AD63
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$B0
else
	CMP.b #$A0
endif
	BCC.b CODE_03AD63
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$B0
else
	LDA.b #$A0
endif
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$A0
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
CODE_03AD63:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b Return03AD73
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_03AD6B:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_03AD74
	DEY
	BPL.b CODE_03AD6B
Return03AD73:
	RTS

CODE_03AD74:
	LDA.b #!Define_SMW_SpriteID_MExtSpr05_SmallStar
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	JSL.l SMW_GetRand_Main
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$1F
	CLC
	ADC.b #$F8
	BPL.b CODE_03AD88
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_03AD88:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$1F
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_MExtSpr_YPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_MExtSpr_YSpeed,y
	LDA.b #$17
	STA.w !RAM_SMW_MExtSpr_Timer,y
	RTS

WaitAfterFall:
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	BNE.b CODE_03ADC2
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	JSR.w CODE_03ADCC
	BCC.b CODE_03ADC2
	INC.w !RAM_SMW_NorSpr07C_PrincessPeach_LandedOnMarioFlag,x
CODE_03ADC2:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Player_FacingDirection
	RTS

CODE_03ADCC:
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	RTS

XSpeed:
	db $08,$F8,$F8,$08

WalkTowardsBro:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$08
	BNE.b CODE_03ADE8
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_03ADE8:
	JSR.w CODE_03ADCC
	PHP
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	PLP
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_LandedOnMarioFlag,x
	BNE.b ADDR_03ADF9
	BCS.b CODE_03AE14
	BRA.b CODE_03ADFF

ADDR_03ADF9:
	BCC.b CODE_03AE14
	TYA
	EOR.b #$01
	TAY
CODE_03ADFF:
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Player_XSpeed
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Player_FacingDirection
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	RTS

CODE_03AE14:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Player_FacingDirection
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	LDA.b #$60
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	RTS

StandByBro:
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	BNE.b Return03AE31
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	LDA.b #$A0
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
Return03AE31:
	RTS

KissBro:
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	BNE.b CODE_03AE3F
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	STZ.w !RAM_SMW_UnusedRAM_7E188A				; Optimization: This is unused
	STZ.w !RAM_SMW_Player_RelativeYPositionDuringScreenShake
CODE_03AE3F:
	CMP.b #$50
	BCC.b Return03AE5A
	PHA
	BNE.b CODE_03AE4B
	LDA.b #$14
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_BlinkTimer,x
CODE_03AE4B:
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	PLA
	CMP.b #$68
	BNE.b Return03AE5A
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_MarioBlushTimer,x
Return03AE5A:
	RTS

DATA_03AE5B:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	db $08,$08,$00,$10,$08,$08,$00,$08
	db $08,$08,$08,$08,$08,$00,$08,$08
	db $08,$08,$10,$08,$08,$08,$00,$08
	db $03,$38,$04,$10,$04,$10,$0C,$08
	db $08,$08,$08,$08,$08,$04,$0C,$04
	db $10,$00,$08,$08,$08,$08,$08,$08
	db $08,$08,$08,$00,$08,$08,$08,$03
	db $08,$08,$00,$10,$08,$08,$08,$00
	db $08,$08,$00,$08,$08,$08,$08,$40
	db $10,$10,$10,$C0
elseif !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $05,$05,$05,$05,$05,$05,$10,$05
	db $05,$05,$05,$05,$05,$05,$05,$05
	db $08,$05,$05,$05,$05,$05,$14,$08
	db $05,$05,$05,$05,$14,$05,$05,$08
	db $05,$05,$05,$05,$05,$05,$05,$05
	db $14,$05,$05,$05,$05,$05,$14,$05
	db $03,$14,$05,$05,$05,$05,$05,$05
	db $05,$05,$05,$05,$05,$05,$08,$05
	db $05,$05,$05,$05,$05,$05,$05,$05
	db $05,$05,$08,$05,$05,$05,$05,$05
	db $05,$05,$05,$50
else
	db $08,$08,$08,$08,$08,$08,$18,$08
	db $08,$08,$08,$08,$08,$08,$08,$08
	db $08,$08,$08,$08,$08,$08,$20,$08
	db $08,$08,$08,$08,$20,$08,$08,$10
	db $08,$08,$08,$08,$08,$08,$08,$08
	db $20,$08,$08,$08,$08,$08,$20,$08
	db $04,$20,$08,$08,$08,$08,$08,$08
	db $08,$08,$08,$08,$08,$08,$10,$08
	db $08,$08,$08,$08,$08,$08,$08,$08
	db $08,$08,$10,$08,$08,$08,$08,$08
	db $08,$08,$08,$40
endif

DisplayMessage:
	JSR.w DisplayPeachRescueMessage
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_WaitBeforeDrawingNextLetter,x
	BNE.b Return
	LDY.w !RAM_SMW_NorSpr07C_PrincessPeach_CurrentLetterLo
	CPY.b #(MessageData_End-MessageData)/4
	BEQ.b DoneDisplayingMessage
	INC.w !RAM_SMW_NorSpr07C_PrincessPeach_CurrentLetterLo
	LDA.w DATA_03AE5B,y
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_WaitBeforeDrawingNextLetter,x
Return:
	RTS

DoneDisplayingMessage:
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	RTS

CODE_03AED0:
	INC.b !RAM_SMW_NorSpr07C_PrincessPeach_CurrentState,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_SpawnFireworksTimer
	RTS

UNK_03AED8: ; unused?
	db $00,$00,$94,$18,$18,$9C,$9C,$FF
	db $00,$00,$52,$63,$63,$73,$73,$7F

FadeText:
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_PhaseTimer,x
	BEQ.b CODE_03AED0
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	ASL
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	ASL
	ASL
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	PHX
	TAX
	LDY.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	LDA.b #$02
	STA.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload,y
	LDA.b #$F1
	STA.w !RAM_SMW_Palettes_DynamicPaletteCGRAMAddress,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors+$01,y
	LDA.b #$00
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors+$02,y
	TYA
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	PLX
	JSR.w DisplayPeachRescueMessage
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr07C_PrincessPeach_Status08(Address)
namespace SMW_NorSpr07C_PrincessPeach_Status08
%InsertMacroAtXPosition(<Address>)

InitialXLo:
	db $60,$B0,$40,$80
namespace off
endmacro

macro ROUTINE_RT03_SMW_NorSpr07C_PrincessPeach_Status08(Address)
namespace SMW_NorSpr07C_PrincessPeach_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03C78A:
	db $00,$AA,$FF,$AA

DATA_03C78E:
	db $00,$7E,$27,$7E

DATA_03C792:
	db $C0,$C0,$FF,$C0

Fireworks:
;$03C796
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_WaitBeforeSpawningFireworks,x
	BEQ.b CODE_03C7A7
	DEC
	BNE.b Return03C7A6
	INC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
Return03C7A6:
	RTS

CODE_03C7A7:
	LDA.w !RAM_SMW_NorSpr07A_Fireworks_ColorFlashIndex
	AND.b #$03
	TAY
	LDA.w DATA_03C78A,y
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w DATA_03C78E,y
	STA.w !RAM_SMW_Palettes_BackgroundColorHi
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_SpawnFireworksTimer
	BNE.b Return03C80F
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_FireworksCounter,x
	CMP.b #$04
	BEQ.b CODE_03C810
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
CODE_03C7C7:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_03C7D0
	DEY
	BPL.b CODE_03C7C7
	RTS

CODE_03C7D0:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr07A_Fireworks
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b #$A8
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	PHX
	LDA.w !RAM_SMW_NorSpr07C_PrincessPeach_FireworksCounter,x
	AND.b #$03
	STA.w !RAM_SMW_NorSpr07A_Fireworks_CurrentType,y
	TAX
	LDA.w DATA_03C792,x
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_SpawnFireworksTimer
	LDA.w InitialXLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	PLX
	INC.w !RAM_SMW_NorSpr07C_PrincessPeach_FireworksCounter,x
Return03C80F:
	RTS

CODE_03C810:
	LDA.b #$70
	STA.w !RAM_SMW_NorSpr07C_PrincessPeach_WaitBeforeSpawningFireworks,x
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_NorSpr07C_PrincessPeach_Status08(Address)
namespace SMW_NorSpr07C_PrincessPeach_Status08
%InsertMacroAtXPosition(<Address>)

; Optimization: Besides changing the BG mode after Bowser disappears and using stipe image text (Which would have been a less hacky way of implementing this), all the property bytes could have been set separately from the tile number.

MessageData:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	incbin "strings/PeachRescueMessage_SMW_J.bin"
else
					;\ Info: This text is 84 characters long in the original SMW. Due to using sprites, the max would be 128, but that's if no other sprites are on screen.
.Line1:					;|
	db $18,$20,$A1,$0E		;| M
	db $20,$20,$88,$0E		;| a
	db $28,$20,$AB,$0E		;| r
	db $30,$20,$99,$0E		;| i
	db $38,$20,$A8,$0E		;| o
	db $40,$20,$BF,$0E		;| '
	db $48,$20,$AC,$0E		;| s
					;|  
	db $58,$20,$88,$0E		;| a
	db $60,$20,$8B,$0E		;| d
	db $68,$20,$AF,$0E		;| v
	db $70,$20,$8C,$0E		;| e
	db $78,$20,$9E,$0E		;| n
	db $80,$20,$AD,$0E		;| t
	db $88,$20,$AE,$0E		;| u
	db $90,$20,$AB,$0E		;| r
	db $98,$20,$8C,$0E		;| e
					;|  
	db $A8,$20,$99,$0E		;| i
	db $B0,$20,$AC,$0E		;| s
					;|  
	db $C0,$20,$A8,$0E		;| o
	db $C8,$20,$AF,$0E		;| v
	db $D0,$20,$8C,$0E		;| e
	db $D8,$20,$AB,$0E		;| r
	db $E0,$20,$BD,$0E		;| .
.Line2:					;|  
	db $18,$30,$A1,$0E		;| M
	db $20,$30,$88,$0E		;| a
	db $28,$30,$AB,$0E		;| r
	db $30,$30,$99,$0E		;| i
	db $38,$30,$A8,$0E		;| o
	db $40,$30,$BE,$0E		;| ,
	db $48,$30,$AD,$0E		;| t
	db $50,$30,$98,$0E		;| h
	db $58,$30,$8C,$0E		;| e
					;|  
	db $68,$30,$A0,$0E		;| P
	db $70,$30,$AB,$0E		;| r
	db $78,$30,$99,$0E		;| i
	db $80,$30,$9E,$0E		;| n
	db $88,$30,$8A,$0E		;| c
	db $90,$30,$8C,$0E		;| e
	db $98,$30,$AC,$0E		;| s
	db $A0,$30,$AC,$0E		;| s
	db $A8,$30,$BE,$0E		;| ,
	db $B0,$30,$B0,$0E		;| Y
	db $B8,$30,$A8,$0E		;| o
	db $C0,$30,$AC,$0E		;| s
	db $C8,$30,$98,$0E		;| h
	db $D0,$30,$99,$0E		;| i
	db $D8,$30,$BE,$0E		;| ,
.Line3:					;|  
	db $18,$40,$88,$0E		;| a
	db $20,$40,$9E,$0E		;| n
	db $28,$40,$8B,$0E		;| d
					;|  
	db $38,$40,$98,$0E		;| h
	db $40,$40,$99,$0E		;| i
	db $48,$40,$AC,$0E		;| s
					;|  
	db $58,$40,$8D,$0E		;| f
	db $60,$40,$AB,$0E		;| r
	db $68,$40,$99,$0E		;| i
	db $70,$40,$8C,$0E		;| e
	db $78,$40,$9E,$0E		;| n
	db $80,$40,$8B,$0E		;| d
	db $88,$40,$AC,$0E		;| s
					;|  
	db $98,$40,$88,$0E		;| a
	db $A0,$40,$AB,$0E		;| r
	db $A8,$40,$8C,$0E		;| e
					;|  
	db $B8,$40,$8E,$0E		;| g
	db $C0,$40,$A8,$0E		;| o
	db $C8,$40,$99,$0E		;| i
	db $D0,$40,$9E,$0E		;| n
	db $D8,$40,$8E,$0E		;| g
.Line4:					;|  
	db $18,$50,$AD,$0E		;| t
	db $20,$50,$A8,$0E		;| o
					;|  
	db $30,$50,$AD,$0E		;| t
	db $38,$50,$88,$0E		;| a
	db $40,$50,$9B,$0E		;| k
	db $48,$50,$8C,$0E		;| e
					;|  
	db $58,$50,$88,$0E		;| a
					;| 
	db $68,$50,$AF,$0E		;| v
	db $70,$50,$88,$0E		;| a
	db $78,$50,$8A,$0E		;| c
	db $80,$50,$88,$0E		;| a
	db $88,$50,$AD,$0E		;| t
	db $90,$50,$99,$0E		;| i
	db $98,$50,$A8,$0E		;| o
	db $A0,$50,$9E,$0E		;| n
	db $A8,$50,$BD,$0E		;/ .
endif
.End:

DisplayPeachRescueMessage:
;$03D674
	PHX
	REP.b #$30
	LDX.w !RAM_SMW_NorSpr07C_PrincessPeach_CurrentLetterLo
	BEQ.b NoLettersToDraw
	DEX
	LDY.w #$0000
Loop:
	PHX
	TXA
	ASL
	ASL
	TAX
	LDA.w MessageData,x
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w MessageData+$02,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	PHY
	TYA
	LSR
	LSR
	TAY
	SEP.b #$20
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	REP.b #$20
	PLY
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
NoLettersToDraw:
	SEP.b #$30
	PLX
	RTS
namespace off
endmacro

macro ROUTINE_RT05_SMW_NorSpr07C_PrincessPeach_Status08(Address)
namespace SMW_NorSpr07C_PrincessPeach_Status08
%InsertMacroAtXPosition(<Address>)

PeachXDisp:
	db $00,$08,$00,$08,$00,$08,$00,$08
	db $00,$08,$00,$08,$00,$08,$00,$08
	db $00,$08,$00,$08,$00,$08,$00,$08
	db $00,$08,$00,$08,$00,$08,$00,$08
	db $00,$08,$00,$08,$00,$08,$00,$08
	db $00,$08,$00,$08,$00,$08,$00,$08
	db $08,$00,$08,$00,$08,$00,$08,$00
	db $08,$00,$08,$00,$08,$00,$08,$00
	db $08,$00,$08,$00,$08,$00,$08,$00
	db $08,$00,$08,$00,$08,$00,$08,$00

PeachYDisp:
	db $00,$00,$08,$08,$00,$00,$08,$08
	db $00,$00,$08,$08,$00,$00,$08,$08
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10
	db $00,$00,$10,$10,$00,$00,$10,$10

PeachTiles:
	db $05,$06,$15,$16,$9D,$9E,$4E,$AE
	db $06,$05,$16,$15,$9E,$9D,$AE,$4E
	db $8A,$8B,$AA,$68,$83,$84,$AA,$68
	db $8A,$8B,$80,$81,$83,$84,$80,$81
	db $85,$86,$A5,$A6,$83,$84,$A5,$A6
	db $82,$83,$A2,$A3,$82,$83,$A2,$A3
	db $8A,$8B,$AA,$68,$83,$84,$AA,$68
	db $8A,$8B,$80,$81,$83,$84,$80,$81
	db $85,$86,$A5,$A6,$83,$84,$A5,$A6
	db $82,$83,$A2,$A3,$82,$83,$A2,$A3

PeachProp:
	db $01,$01,$01,$01,$01,$01,$01,$01
	db $41,$41,$41,$41,$41,$41,$41,$41
	db $01,$01,$01,$01,$01,$01,$01,$01
	db $01,$01,$01,$01,$01,$01,$01,$01
	db $00,$00,$00,$00,$01,$01,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $41,$41,$41,$41,$41,$41,$41,$41
	db $41,$41,$41,$41,$41,$41,$41,$41
	db $40,$40,$40,$40,$41,$41,$40,$40
	db $40,$40,$40,$40,$40,$40,$40,$40

GFXRt_DrawHELP:
;$03AA6E
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$20
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	CPY.b #$08
	BCC.b CODE_03AAC6
	CPY.b #$10
	BCS.b CODE_03AAC6
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$04
	STA.w SMW_OAMBuffer[$28].XDisp
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$29].XDisp
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$18
	STA.w SMW_OAMBuffer[$28].YDisp
	STA.w SMW_OAMBuffer[$29].YDisp
	LDA.b #$20
	STA.w SMW_OAMBuffer[$28].Tile
	LDA.b #$22
	STA.w SMW_OAMBuffer[$29].Tile
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$06
	INC
	INC
	INC
	STA.w SMW_OAMBuffer[$28].Prop
	STA.w SMW_OAMBuffer[$29].Prop
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$28].Slot
	STA.w SMW_OAMTileSizeBuffer[$29].Slot
CODE_03AAC6:
	LDY.b #$70
GFXRt_DrawPeach:
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM04
	PHX
	LDX.b #$03
CODE_03AAD1:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM04
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w PeachXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w PeachYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w PeachTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w PeachProp,x
	PHX
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	CPX.b #$09
	BEQ.b CODE_03AAFC
	ORA.b #$30
CODE_03AAFC:
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	PLX
	DEX
	BPL.b CODE_03AAD1
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_FlyingItems_Status08(Address)
namespace SMW_NorSprXXX_FlyingItems_Status08
%InsertMacroAtXPosition(<Address>)

YAcceleration:
	db $FF,$01

MaxYSpeed:
	db $F0,$10

Main:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0C_GoalPowerUp
	BEQ.b CODE_01C255
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01C255
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b CODE_01C21D
	LDA.w !RAM_SMW_NorSprXXX_FlyingItems_AppearBehindLayer1Timer,x
	BEQ.b CODE_01C21D
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
	JSR.w SMW_PowerUpAndItemGFXRt_Main
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b #$F8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	RTS

CODE_01C21D:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_01C239
	LDA.w !RAM_SMW_NorSprXXX_FlyingItems_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_01C239
	INC.w !RAM_SMW_NorSprXXX_FlyingItems_VerticalDirection,x
CODE_01C239:
	LDA.b #$0C
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	PHA
	CLC
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	PLA
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_01C255:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BNE.b CODE_01C262
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	BRA.b CODE_01C27F

CODE_01C262:
	LDA.b !RAM_SMW_NorSprXXX_FlyingItems_ItemToDraw,x
	CMP.b #$02
	BNE.b CODE_01C27C
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_01C271
	JSR.w SMW_SpawnSparkles_NormalSpriteEntry
CODE_01C271:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$0E
	EOR.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
CODE_01C27C:
	JSR.w SMW_DrawWingTiles_Main
CODE_01C27F:
	LDA.b !RAM_SMW_NorSprXXX_FlyingItems_ItemToDraw,x
	BEQ.b CODE_01C287
	JSR.w SMW_GetDrawInfo_Bank01
	RTS

CODE_01C287:
	JSR.w SMW_PowerUpAndItemGFXRt_Main
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b Return01C2D2
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr07E_FlyingRedCoin
	BNE.b CODE_01C2A6
	JSR.w SMW_NorSprXXX_PowerUps_Status08_CODE_01C4F0
	LDA.b #$05
	JSL.l SMW_GiveCoins_MultipleCoins
	LDA.b #$03
	JSL.l SMW_GivePoints_Main
	BRA.b ADDR_01C30F

CODE_01C2A6:
	CMP.b #!Define_SMW_SpriteID_NorSpr07F_Flying1up
	BNE.b CODE_01C2AF
	JSR.w SMW_NorSprXXX_PowerUps_Status08_GiveMario1Up
	BRA.b ADDR_01C30F

CODE_01C2AF:
	CMP.b #!Define_SMW_SpriteID_NorSpr080_Key
	BNE.b CODE_01C2CE
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return01C2D2
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$D0
	STA.b !RAM_SMW_Player_YSpeed
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.w !RAM_SMW_NorSprXXX_FlyingItems_AppearBehindLayer1Timer,x
	LDA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	AND.b #!Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction^$FF
	STA.w !RAM_SMW_NorSpr_PropertyBits167A,x
	RTS

CODE_01C2CE:
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BEQ.b CODE_01C2D3
Return01C2D2:
	RTS

CODE_01C2D3:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_01C2D5:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus0B_Carried
	BNE.b CODE_01C2E8
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr07D_PBalloon
	BEQ.b CODE_01C2E8
	LDA.b #!Define_SMW_NorSprStatus09_Stunned
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
CODE_01C2E8:
	DEY
	BPL.b CODE_01C2D5
	LDA.b #!Define_SMW_NorSprStatus00_EmptySlot
	LDY.w !RAM_SMW_Timer_InflateFromPBalloon
	BNE.b CODE_01C2F4
	LDA.b #!Define_SMW_NorSprStatus0B_Carried
CODE_01C2F4:
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_Player_YSpeed
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$09
	STA.w !RAM_SMW_Timer_InflateFromPBalloon
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_PlayerHasPBalloon
	LDA.b #!Define_SMW_Sound1DF9_PBalloon
	STA.w !RAM_SMW_IO_SoundCh1
	RTS

ADDR_01C30F:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FlyingItems_Status08_Main, SMW_NorSpr07D_PBalloon_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FlyingItems_Status08_Main, SMW_NorSpr07E_FlyingRedCoin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FlyingItems_Status08_Main, SMW_NorSpr07F_Flying1up_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_FlyingItems_Status08_Main, SMW_NorSpr080_Key_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr081_ChangingItem_Status01(Address)
namespace SMW_NorSpr081_ChangingItem_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	INC.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr081_ChangingItem_Status01_Return, SMW_NorSpr041_LongJumpDolphin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr081_ChangingItem_Status01_Return, SMW_NorSpr042_ShortJumpDolphin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr081_ChangingItem_Status01_Return, SMW_NorSpr043_VerticalDolphin_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr081_ChangingItem_Status01_Return, SMW_NorSpr044_TorpedoTed_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr081_ChangingItem_Status01_Return, SMW_NorSpr06B_LeftWallSpringboard_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr081_ChangingItem_Status01_Return, SMW_NorSpr089_Layer3Smasher_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSprXXX_PowerUps_Status08(Address)
namespace SMW_NorSprXXX_PowerUps_Status08
%InsertMacroAtXPosition(<Address>)

ChangingItemSprite:
	db !Define_SMW_SpriteID_NorSpr074_Mushroom 
	db !Define_SMW_SpriteID_NorSpr075_FireFlower
	db !Define_SMW_SpriteID_NorSpr077_Feather
	db !Define_SMW_SpriteID_NorSpr076_Star

ChangingItemEntry:
	LDA.b #$01
	STA.w !RAM_SMW_NorSprXXX_PowerUps_IsChangingItem,x
	LDA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b CODE_01C324
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	INC.w !RAM_SMW_NorSpr081_ChangingItem_SpriteChangeCounter,x
endif
	INC.w !RAM_SMW_NorSpr081_ChangingItem_SpriteChangeCounter,x
CODE_01C324:
	LDA.w !RAM_SMW_NorSpr081_ChangingItem_SpriteChangeCounter,x
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w ChangingItemSprite,y
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	JSR.w CODE_01C353
	LDA.b #!Define_SMW_SpriteID_NorSpr081_ChangingItem
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	RTS

EatenBerryGfxProp:
	db $02,$02,$04,$06

FireFlowerEntry:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$08
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_01C353:
MovingCoinEntry:
MushroomEntry:
StarEntry:
OneUpMushroomEntry:
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_IsBerryFlag,x
	BEQ.b CODE_01C371
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$80
	STA.w SMW_OAMBuffer[$40].Tile,y
	PHX
	LDX.w !RAM_SMW_Yoshi_BerryBeingEaten
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l EatenBerryGfxProp,x
else
	LDA.w EatenBerryGfxProp,x
endif
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	RTS

CODE_01C371:
	LDA.b !RAM_SMW_Sprites_TilePriority
	PHA
	JSR.w CODE_01C4AC
	LDA.w !RAM_SMW_NorSpr_Table7E1534,x
	BEQ.b CODE_01C38F
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01C387
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01C387:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$0C
	BNE.b CODE_01C3AB
	PLA
	RTS

CODE_01C38F:
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_RisingOutOfBlockTimer,x
	BEQ.b CODE_01C3AE
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_RisingOutOfSpriteBlockFlag,x
	BNE.b CODE_01C3A0
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_01C3A0:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01C3AB
	LDA.b #$FC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01C3AB:
	JMP.w CODE_01C48D

CODE_01C3AE:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01C3AB
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus0C_GoalPowerUp
	BEQ.b CODE_01C3AB
	LDA.b !RAM_SMW_NorSpr_SpriteID,x					;\ Optimization: Unnecessary.
	CMP.b #!Define_SMW_SpriteID_NorSpr076_Star				;|
	BNE.b CODE_01C3BF						;|
CODE_01C3BF:								;/
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	JSR.w SMW_SetXSpeedBasedOnNormalSpriteFacingDirection_Main
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr075_FireFlower
	BNE.b CODE_01C3D2
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_IsChangingItem,x
	BNE.b CODE_01C3D2
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01C3D2:
	CMP.b #!Define_SMW_SpriteID_NorSpr076_Star
	BEQ.b CODE_01C3E1
	CMP.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	BEQ.b CODE_01C3E1
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_IsChangingItem,x
	BNE.b CODE_01C3E1
	ASL.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01C3E1:
	LDA.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	BEQ.b CODE_01C3F3
	BMI.b CODE_01C3F1
	JSR.w SMW_HandleNormalSpriteLevelCollision_Sub
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BNE.b CODE_01C3F1
	STZ.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
CODE_01C3F1:
	BRA.b CODE_01C437

CODE_01C3F3:
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b CODE_01C42C
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_01C42C
	STZ.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BNE.b ADDR_01C41E
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$A0
	BCC.b ADDR_01C41E
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	ORA.b #$04
	STA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	JSR.w SMW_SetXSpeedBasedOnNormalSpriteFacingDirection_Main
ADDR_01C41E:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_01C42F

CODE_01C42C:
	JSR.w SMW_HandleNormalSpriteGravity_Sub
CODE_01C42F:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BEQ.b CODE_01C437
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01C437:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_CheckNormalSpriteLevelCollision_Ceiling
	BEQ.b CODE_01C443
	LDA.b #$00
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01C443:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BNE.b CODE_01C44A
	BRA.b CODE_01C47E

CODE_01C44A:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	BNE.b CODE_01C46C
	JSR.w SMW_SetXSpeedBasedOnNormalSpriteFacingDirection_Main
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	INC
	PHA
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	PLA
	LSR
	JSR.w SMW_UnnecessaryInvertARt_CopyOfBank01
	CMP.b #$FC
	BCS.b CODE_01C46A
	LDY.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BMI.b CODE_01C46A
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01C46A:
	BRA.b CODE_01C47E

CODE_01C46C:
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank01
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_IsChangingItem,x
	BNE.b CODE_01C47A
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr076_Star
	BNE.b CODE_01C47E
CODE_01C47A:
	LDA.b #$C8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01C47E:
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_NoBlockSideInteractionTimer,x
	ORA.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	BNE.b CODE_01C48D
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b CODE_01C48D
	JSR.w SMW_ChangeNormalSpriteDirection_Main
CODE_01C48D:
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_RisingOutOfBlockTimer,x
	CMP.b #$36
	BCS.b CODE_01C4A8
	LDA.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	BEQ.b CODE_01C49C
	CMP.b #$FF
	BNE.b CODE_01C4A1
CODE_01C49C:
	LDA.w !RAM_SMW_NorSpr_CurrentLayerPriority,x
	BEQ.b CODE_01C4A5
CODE_01C4A1:
	LDA.b #$10
	STA.b !RAM_SMW_Sprites_TilePriority
CODE_01C4A5:
	JSR.w SMW_PowerUpAndItemGFXRt_Main
CODE_01C4A8:
	PLA
	STA.b !RAM_SMW_Sprites_TilePriority
Return01C4AB:
	RTS

CODE_01C4AC:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_CODE_01A80F
	BCC.b Return01C4AB
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_IsChangingItem,x
	BEQ.b CODE_01C4BA
	LDA.b !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,x
	BNE.b Return01C4FA
CODE_01C4BA:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b Return01C4FA
CODE_01C4BF:
	LDA.w !RAM_SMW_NorSprXXX_PowerUps_RisingOutOfBlockTimer,x
	CMP.b #$18
	BCS.b Return01C4FA
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	BNE.b TouchedPowerUp
	JSL.l SMW_GiveCoins_OneCoin
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	AND.b #$0E
	CMP.b #$02
	BEQ.b CODE_01C4E0
	LDA.b #$01
	BRA.b CODE_01C4EC

CODE_01C4E0:
	LDA.w !RAM_SMW_Counter_CurrentSilverCoins
	INC.w !RAM_SMW_Counter_CurrentSilverCoins
	CMP.b #$0A
	BCC.b CODE_01C4EC
	LDA.b #$0A
CODE_01C4EC:
	JSL.l SMW_GivePoints_Main
CODE_01C4F0:
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_01C4F2:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_01C4FB
	DEY
	BPL.b CODE_01C4F2
Return01C4FA:
	RTS

CODE_01C4FB:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr05_Glitter
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$10
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS

ItemBoxSprite:
	db $00,$01,$01,$01
	db $00,$01,$04,$02
	db $00,$00,$00,$00
	db $00,$01,$04,$02
	db $00,$00,$00,$00

GivePowerPtrIndex:
	db $00,$01,$01,$01
	db $04,$04,$04,$01
	db $02,$02,$02,$02
	db $03,$03,$01,$03
	db $05,$05,$05,$05

TouchedPowerUp:
	SEC
	SBC.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	ASL
	ASL
	ORA.b !RAM_SMW_Player_CurrentPowerUp
	TAY
	LDA.w ItemBoxSprite,y
	BEQ.b NoItem
	STA.w !RAM_SMW_Player_CurrentItemBox
	LDA.b #!Define_SMW_Sound1DFC_PutItemInReserve
	STA.w !RAM_SMW_IO_SoundCh3
NoItem:
	LDA.w GivePowerPtrIndex,y
	JSL.l SMW_ExecutePtr_Absolute

HandlePowerUpPtrs:
	dw GiveMarioMushroom
	dw CODE_01C56F
	dw GiveMarioStar
	dw GiveMarioCape
	dw GiveMarioFire
	dw GiveMario1Up

Return01C560:
	RTS ; Unused

GiveMarioMushroom:
	LDA.b #!Define_SMW_PlayerState02_Grow
	STA.b !RAM_SMW_Player_CurrentState
	LDA.b #$2F
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	STA.w !RAM_SMW_Player_AnimationTimer
else
	STA.w !RAM_SMW_Player_AnimationTimer,y			; Note: That ,y seems very questionable to me...
endif
	STA.b !RAM_SMW_Flag_SpritesLocked
	JMP.w CODE_01C56F 					; Optimization: Jump to next instruction...

CODE_01C56F:
	LDA.b #$04
	LDY.w !RAM_SMW_NorSpr_Table7E1534,x
	BNE.b CODE_01C57A
	JSL.l SMW_GivePoints_Main
CODE_01C57A:
	LDA.b #!Define_SMW_Sound1DF9_GetPowerup
	STA.w !RAM_SMW_IO_SoundCh1
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSprXXX_PowerUps_Status08(Address)
namespace SMW_NorSprXXX_PowerUps_Status08
%InsertMacroAtXPosition(<Address>)

GiveMarioStar:
	JSL.l SMW_GivePlayerStarPower_Main
	BRA.b CODE_01C56F

GiveMarioCape:
	LDA.b #$02
	STA.b !RAM_SMW_Player_CurrentPowerUp
	LDA.b #!Define_SMW_Sound1DF9_GetCape
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$04
	JSL.l SMW_GivePoints_Main
	JSL.l CODE_01C5AE
	INC.b !RAM_SMW_Flag_SpritesLocked
	RTS

CODE_01C5AE:
	LDA.b !RAM_SMW_Player_OnScreenPosYHi		;\ Glitch: This will cause the game to freeze if you collect a feather while above the screen in an autoscroll level.
	ORA.b !RAM_SMW_Player_OnScreenPosXHi		;| To fix, move these instructions to be after the STA.w !RAM_SMW_Player_AnimationTimer
	BNE.b Return01C5EB				;/
	LDA.b #!Define_SMW_PlayerState03_GotCape
	STA.b !RAM_SMW_Player_CurrentState
	LDA.b #$18
	STA.w !RAM_SMW_Player_AnimationTimer
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_01C5BF:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_01C5D4
	DEY
	BPL.b CODE_01C5BF
	DEC.w !RAM_SMW_SmokeSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_01C5D1
	LDA.b #!Define_SMW_MaxSmokeSpriteSlot
	STA.w !RAM_SMW_SmokeSpr_SlotToOverwriteWhenSlotsFull
CODE_01C5D1:
	LDY.w !RAM_SMW_SmokeSpr_SlotToOverwriteWhenSlotsFull
CODE_01C5D4:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke|$80
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b #$1B
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	LDA.b !RAM_SMW_Player_YPosLo
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b !RAM_SMW_Player_XPosLo
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
Return01C5EB:
	RTL

GiveMarioFire:
	LDA.b #$20
	STA.w !RAM_SMW_Timer_PlayerPaletteCycle
	STA.b !RAM_SMW_Flag_SpritesLocked
	LDA.b #!Define_SMW_PlayerState04_GotFlower
	STA.b !RAM_SMW_Player_CurrentState
	LDA.b #$03
	STA.b !RAM_SMW_Player_CurrentPowerUp
	JMP.w CODE_01C56F

GiveMario1Up:
	LDA.b #$08
	CLC
	ADC.w !RAM_SMW_NorSpr_Table7E1594,x
	JSL.l SMW_GivePoints_Main
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_PowerUps_Status08_ChangingItemEntry, SMW_NorSpr081_ChangingItem_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_PowerUps_Status08_FireFlowerEntry, SMW_NorSpr075_FireFlower_Status08_Main)

	%SetDuplicateOrNullPointer(SMW_NorSprXXX_PowerUps_Status08_MovingCoinEntry, SMW_NorSpr021_MovingCoin_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_PowerUps_Status08_MushroomEntry, SMW_NorSpr074_Mushroom_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_PowerUps_Status08_StarEntry, SMW_NorSpr076_Star_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_PowerUps_Status08_OneUpMushroomEntry, SMW_NorSpr078_1upMushroom_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr082_BonusGame_Status01(Address)
namespace SMW_NorSpr082_BonusGame_Status01
%InsertMacroAtXPosition(<Address>)

DATA_01DD90:
	db $F0,$50,$78,$A0,$A0,$A0,$78,$50
	db $50

DATA_01DD99:
	db $78,$F0,$F0,$F0,$18,$40,$40,$40
	db $18

DATA_01DDA2:
	db $18,$03,$00,$00,$01,$01,$02,$02
	db $03,$FF

Main:
	LDA.w !RAM_SMW_Flag_DisableBonusGameSprite
	BEQ.b CODE_01DDB5
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

CODE_01DDB5:
	LDX.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01DDB7:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr082_BonusGame
	STA.w !RAM_SMW_NorSpr_SpriteID,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DD90,x
else
	LDA.w DATA_01DD90,x
endif
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DD99,x
else
	LDA.w DATA_01DD99,x
endif
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	ASL
	LDA.b #$00
	BCS.b CODE_01DDD6
	INC
CODE_01DDD6:
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DDA2,x
else
	LDA.w DATA_01DDA2,x
endif
	STA.w !RAM_SMW_NorSpr082_BonusGame_MovementDirection,x
	TXA
	CLC
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	STA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	DEX
	BNE.b CODE_01DDB7
	STZ.w !RAM_SMW_Sprites_BonusGameIsOverFlag
	STZ.w !RAM_SMW_Counter_NumberOfBonusGame1upsToSpawn
	JSL.l SMW_GetRand_Main
	EOR.b !RAM_SMW_Counter_GlobalFrames
	ADC.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	TAY
	LDA.w SMW_NorSpr082_BonusGame_Status08_DATA_01DE21,y
	STA.w !RAM_SMW_NorSpr_AnimationFrameCounter+$09
	LDA.b #$01
	STA.b !RAM_SMW_NorSpr082_BonusGame_AnimationFlag+$09
	INC.w !RAM_SMW_Flag_DisableBonusGameSprite
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr082_BonusGame_Status08(Address)
namespace SMW_NorSpr082_BonusGame_Status08
%InsertMacroAtXPosition(<Address>)

DATA_01DE11:
	db $10,$00,$F0,$00

DATA_01DE15:
	db $00,$10,$00,$F0

DATA_01DE19:
	db $A0,$A0,$50,$50

DATA_01DE1D:
	db $F0,$40,$40,$F0

DATA_01DE21:
	db $01,$01,$01,$04,$04,$04,$07,$07
	db $07

Main:
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	CPX.b #$01
	BNE.b CODE_01DE34
	JSR.w Spawn1ups
CODE_01DE34:
	JSR.w CODE_01DF19
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01DE40
	LDA.w !RAM_SMW_Sprites_BonusGameIsOverFlag
	BEQ.b CODE_01DE41
Return01DE40:
	RTS

CODE_01DE41:
	LDA.b !RAM_SMW_NorSpr082_BonusGame_AnimationFlag,x
	BNE.b CODE_01DE8C
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_01DE58
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	CMP.b #$09
	BNE.b CODE_01DE58
	STZ.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_01DE58:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	BCC.b CODE_01DE8C
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b CODE_01DE8C
	LDA.b #$F4
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_01DE69
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$FC
else
	LDA.b #$00
endif
CODE_01DE69:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b !RAM_SMW_Player_OnScreenPosYLo
	BCS.b CODE_01DE8C
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DF9_ONOFFSwitch
	STA.w !RAM_SMW_IO_SoundCh1
	INC.b !RAM_SMW_NorSpr082_BonusGame_AnimationFlag,x
	LDY.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w DATA_01DE21,y
	STA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr082_BonusGame_HitAnimationTimer,x
CODE_01DE8C:
	LDY.w !RAM_SMW_NorSpr082_BonusGame_MovementDirection,x
	BMI.b Return01DEAF
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.w DATA_01DE19,y
	BNE.b CODE_01DE9F
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.w DATA_01DE1D,y
	BEQ.b CODE_01DEB0
CODE_01DE9F:
	LDA.w DATA_01DE11,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w DATA_01DE15,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
Return01DEAF:
	RTS

CODE_01DEB0:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01DEB2:
	LDA.w !RAM_SMW_NorSpr082_BonusGame_AnimationFlag,y
	BEQ.b CODE_01DED7
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	CLC
	ADC.b #$04
	AND.b #$F8
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosLo,y
	CLC
	ADC.b #$04
	AND.b #$F8
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	DEY
	BNE.b CODE_01DEB2
	INC.w !RAM_SMW_Sprites_BonusGameIsOverFlag
	JSR.w CODE_01DFD9
	RTS

CODE_01DED7:
	LDA.w !RAM_SMW_NorSpr082_BonusGame_MovementDirection,x
	INC
	AND.b #$03
	TAY
	STA.w !RAM_SMW_NorSpr082_BonusGame_MovementDirection,x
	BRA.b CODE_01DE9F

DATA_01DEE3:
	db $58,$59,$83,$83,$48,$49,$58,$59
	db $83,$83,$48,$49,$34,$35,$83,$83
	db $24,$25,$34,$35,$83,$83,$24,$25
	db $36,$37,$83,$83,$26,$27,$36,$37
	db $83,$83,$26,$27

DATA_01DF07:
	db $04,$04,$04,$08,$08,$08,$0A,$0A
	db $0A

DATA_01DF10:
	db $00,$03,$05,$07,$08,$08,$07,$05
	db $03

CODE_01DF19:
	LDA.w !RAM_SMW_NorSpr082_BonusGame_HitAnimationTimer,x
	LSR
	TAY
	LDA.w DATA_01DF10,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$44].XDisp,y
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$42].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].XDisp,y
	STA.w SMW_OAMBuffer[$43].XDisp,y
	LDA.w !RAM_SMW_NorSpr082_BonusGame_FlashBlockLineTimer,x
	CLC
	BEQ.b CODE_01DF4E
	LSR
	LSR
	LSR
	LSR
	BRA.b CODE_01DF4D

ADDR_01DF49: ; Unreachable
	CLC
	ADC.w !RAM_SMW_NorSpr_CurrentSlotID

CODE_01DF4D:
	LSR
CODE_01DF4E:
	PHP
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$44].YDisp,y
	PLP
	BCS.b CODE_01DF6C
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$42].YDisp,y
	STA.w SMW_OAMBuffer[$43].YDisp,y
CODE_01DF6C:
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	PHX
	PHA
	ASL
	ASL
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DEE3,x
else
	LDA.w DATA_01DEE3,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DEE3+$01,x
else
	LDA.w DATA_01DEE3+$01,x
endif
	STA.w SMW_OAMBuffer[$41].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DEE3+$02,x
else
	LDA.w DATA_01DEE3+$02,x
endif
	STA.w SMW_OAMBuffer[$42].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_01DEE3+$03,x
else
	LDA.w DATA_01DEE3+$03,x
endif
	STA.w SMW_OAMBuffer[$43].Tile,y
	LDA.b #$E4
	STA.w SMW_OAMBuffer[$44].Tile,y
	PLX
	LDA.b !RAM_SMW_Sprites_TilePriority
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ORA.l DATA_01DF07,x
else
	ORA.w DATA_01DF07,x
endif
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	STA.w SMW_OAMBuffer[$42].Prop,y
	STA.w SMW_OAMBuffer[$43].Prop,y
	ORA.b #$01
	STA.w SMW_OAMBuffer[$44].Prop,y
	PLX
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$42].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$43].Slot,y
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$44].Slot,y
	RTS

DATA_01DFC1:
	db $00,$01,$02,$02,$03,$04,$04,$05
	db $06,$06,$07,$00,$00,$08,$04,$02
	db $08,$06,$03,$08,$07,$01,$08,$05

CODE_01DFD9:
	LDA.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_01DFDD:
	LDX.b #$02
CODE_01DFDF:
	STX.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	TAY
	LDA.w DATA_01DFC1,y
	TAY
	LDA.w SMW_NorSpr082_BonusGame_Status01_DATA_01DD99+$01,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w SMW_NorSpr082_BonusGame_Status01_DATA_01DD90+$01,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01DFFA:
	LDA.w !RAM_SMW_NorSpr_YPosLo,y
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_01E008
	LDA.w !RAM_SMW_NorSpr_XPosLo,y
	CMP.b !RAM_SMW_Misc_ScratchRAM03
	BEQ.b CODE_01E00D
CODE_01E008:
	DEY
	CPY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
	BNE.b CODE_01DFFA
CODE_01E00D:
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,y
	STA.b !RAM_SMW_Misc_ScratchRAM04,x
	STY.b !RAM_SMW_Misc_ScratchRAM07,x
	DEX
	BPL.b CODE_01DFDF
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b CODE_01E035
	CMP.b !RAM_SMW_Misc_ScratchRAM06
	BNE.b CODE_01E035
	INC.w !RAM_SMW_Counter_NumberOfBonusGame1upsToSpawn
	LDA.b #$70
	LDY.b !RAM_SMW_Misc_ScratchRAM07
	STA.w !RAM_SMW_NorSpr082_BonusGame_FlashBlockLineTimer,y
	LDY.b !RAM_SMW_Misc_ScratchRAM08
	STA.w !RAM_SMW_NorSpr082_BonusGame_FlashBlockLineTimer,y
	LDY.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr082_BonusGame_FlashBlockLineTimer,y
CODE_01E035:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_01DFDD
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDY.b #!Define_SMW_Sound1DFC_Correct
	LDA.w !RAM_SMW_Counter_NumberOfBonusGame1upsToSpawn
	STA.w !RAM_SMW_Counter_RemainingBonusGame1ups
	BNE.b CODE_01E04C
	LDA.b #$58
	STA.w !RAM_SMW_Timer_BonusGameEnd
	INY
CODE_01E04C:
	STY.w !RAM_SMW_IO_SoundCh3
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr082_BonusGame_Status08(Address)
namespace SMW_NorSpr082_BonusGame_Status08
%InsertMacroAtXPosition(<Address>)

Spawn1ups:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$3F
	BNE.b CODE_01E27B
	LDA.w !RAM_SMW_Counter_NumberOfBonusGame1upsToSpawn
	BEQ.b CODE_01E27B
	DEC.w !RAM_SMW_Counter_NumberOfBonusGame1upsToSpawn
	JSR.w CODE_01E281
CODE_01E27B:
	LDA.b #$01
	STA.w !RAM_SMW_Flag_RunClusterSprites
	RTS

CODE_01E281:
	LDY.b #!Define_SMW_MaxClusterSpriteSlot-$0C
CODE_01E283:
	LDA.w !RAM_SMW_ClusterSpr_SpriteID,y
	BEQ.b CODE_01E28C
	DEY
	BPL.b CODE_01E283
	RTS

CODE_01E28C:
	LDA.b #!Define_SMW_SpriteID_ClusterSpr01_1up
	STA.w !RAM_SMW_ClusterSpr_SpriteID,y
	LDA.b #$00
	STA.w !RAM_SMW_ClusterSpr_YPosLo,y
	LDA.b #$01
	STA.w !RAM_SMW_ClusterSpr_YPosHi,y
	LDA.b #$18
	STA.w !RAM_SMW_ClusterSpr_XPosLo,y
	LDA.b #$00
	STA.w !RAM_SMW_ClusterSpr_XPosHi,y
	LDA.b #$01
	STA.w !RAM_SMW_ClusterSpr01_1up_XSpeed,y
	LDA.b #$10
	STA.w !RAM_SMW_ClusterSpr01_1up_YSpeed,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr083_LeftFlyingBlock_Status01(Address)
namespace SMW_NorSpr083_LeftFlyingBlock_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	STA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_ContentsOfBlock,x
	INC.w !RAM_SMW_NorSpr_FacingDirection,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr083_LeftFlyingBlock_Status01_Main, SMW_NorSpr084_HorizontalFlyingBlock_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr083_LeftFlyingBlock_Status01_Main, SMW_NorSpr085_Unused_Status08_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr083_LeftFlyingBlock_Status08(Address)
namespace SMW_NorSpr083_LeftFlyingBlock_Status08
%InsertMacroAtXPosition(<Address>)

Acceleration:
	db $FF,$01

MaxYSpeed:
	db $F4,$0C

MaxXSpeed:
	db $F0,$10

Main:
	LDA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_BlockContentsRisingTimer,x
	BEQ.b CODE_01AD80
	STZ.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_01AD80
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
CODE_01AD80:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	DEC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STZ.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	LDA.b !RAM_SMW_NorSpr083_LeftFlyingBlock_HitFlag,x
	BNE.b CODE_01ADF8
	JSR.w SMW_DrawWingTiles_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_01ADF8
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_01ADB7
	LDA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_01ADB7
	INC.w !RAM_SMW_NorSpr083_LeftFlyingBlock_VerticalDirection,x
CODE_01ADB7:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr083_LeftFlyingBlock
	BEQ.b CODE_01ADE8
	LDA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_WaitBeforeTurningAround,x
	BNE.b CODE_01ADE6
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_01ADE6
	LDA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_HorizontalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BNE.b CODE_01ADE6
	INC.w !RAM_SMW_NorSpr083_LeftFlyingBlock_HorizontalDirection,x
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_WaitBeforeTurningAround,x
CODE_01ADE6:
	BRA.b CODE_01ADEC

CODE_01ADE8:
	LDA.b #$F4
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01ADEC:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	LDA.w !RAM_SMW_Sprites_PositionDisp
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_01ADF8:
	JSR.w SMW_CheckForNormalSpriteToNormalSpriteCollision_Sub
	JSR.w SMW_SolidSpriteBlock_Sub
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_BounceAnimationTimer,x
	CMP.b #$08
	BNE.b CODE_01AE5E
	LDY.b !RAM_SMW_NorSpr083_LeftFlyingBlock_HitFlag,x
	CPY.b #$02
	BEQ.b CODE_01AE5E
	PHA
	INC.b !RAM_SMW_NorSpr083_LeftFlyingBlock_HitFlag,x
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr083_LeftFlyingBlock_BlockContentsRisingTimer,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	LDY.w !RAM_SMW_NorSpr083_LeftFlyingBlock_ContentsOfBlock,x
	LDA.b !RAM_SMW_Player_CurrentPowerUp
	BNE.b CODE_01AE38
	INY
	INY
	INY
	INY
CODE_01AE38:
	LDA.w DATA_01AE88,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	PHB
	LDA.b #SMW_SpawnBounceSprite_CODE_02887D>>16
	PHA
	PLB
	PHX
	JSL.l SMW_SpawnBounceSprite_CODE_02887D
	PLX
	LDY.w !RAM_SMW_Sprites_PowerUpFromBlockSpriteSlot
	LDA.b #$01
	STA.w !RAM_SMW_NorSprXXX_PowerUps_RisingOutOfSpriteBlockFlag,y
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr075_FireFlower
	BNE.b CODE_01AE5C
	LDA.b #$FF
	STA.w !RAM_SMW_NorSprXXX_PowerUps_StayInPlaceFlag,y
CODE_01AE5C:
	PLB
	PLA
CODE_01AE5E:
	LSR
	TAY
	LDA.w DATA_01AE7F,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_NorSpr083_LeftFlyingBlock_HitFlag,x
	CMP.b #$01
	LDA.b #$2A
	BCC.b CODE_01AE7B
	LDA.b #$2E
CODE_01AE7B:
	STA.w SMW_OAMBuffer[$40].Tile,y
	RTS

DATA_01AE7F:
	db $00,$03,$05,$07,$08,$08,$07,$05
	db $03

DATA_01AE88:
	db $06,$02,$04,$05,$06,$01,$01,$05
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr083_LeftFlyingBlock_Status08_Main, SMW_NorSpr084_HorizontalFlyingBlock_Status08_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr086_Wiggler_Status01(Address)
namespace SMW_NorSpr086_Wiggler_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr086_Wiggler_Status01(Address)
namespace SMW_NorSpr086_Wiggler_Status01
%InsertMacroAtXPosition(<Address>)

WigglerSegmentTablePointerLo:
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0000)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0080)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0100)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0180)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)

WigglerSegmentTablePointerHi:
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0000)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)>>8
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0080)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)>>8
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0100)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)>>8
	db ((!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable+$0180)-!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable)>>8

Bank02:
	PHB
	PHK
	PLB
	JSR.w GetWigglerSegmentPosIndex
	LDY.b #$7E
CODE_02EFFA:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b [!RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo],y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	INY
	STA.b [!RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo],y
	DEY
	DEY
	DEY
	BPL.b CODE_02EFFA
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	PLB
	RTL

GetWigglerSegmentPosIndex:
	TXA
	AND.b #$03
	TAY
	LDA.b #!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable
	CLC
	ADC.w WigglerSegmentTablePointerLo,y
	STA.b !RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo
	LDA.b #!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable>>8
	ADC.w WigglerSegmentTablePointerHi,y
	STA.b !RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrHi
	LDA.b #!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable>>16
	STA.b !RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrBank
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr086_Wiggler_Status08(Address)
namespace SMW_NorSpr086_Wiggler_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr086_Wiggler_Status08(Address)
namespace SMW_NorSpr086_Wiggler_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

XSpeed:
	db $08,$F8
	db $10,$F0

Sub:
	JSR.w SMW_NorSpr086_Wiggler_Status01_GetWigglerSegmentPosIndex
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_02F03F
	JMP.w CODE_02F0D8

CODE_02F03F:
	JSL.l SMW_CheckForNormalSpriteToNormalSpriteCollision_Main
	LDA.w !RAM_SMW_NorSpr086_Wiggler_StunnedTimer,x
	BEQ.b CODE_02F061
	CMP.b #$01
	BNE.b CODE_02F050
	LDA.b #$08
	BRA.b CODE_02F052

CODE_02F050:
	AND.b #$0E
CODE_02F052:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	AND.b #$F1
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	JMP.w CODE_02F0D8

CODE_02F061:
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr086_Wiggler_IsAngryFlag,x
	BEQ.b CODE_02F086
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	INC.w !RAM_SMW_NorSpr086_Wiggler_TurnTowardsMarioWhileAngryTimer,x
	LDA.w !RAM_SMW_NorSpr086_Wiggler_TurnTowardsMarioWhileAngryTimer,x
	AND.b #$3F
	BNE.b CODE_02F086
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_02F086:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_NorSpr086_Wiggler_IsAngryFlag,x
	BEQ.b CODE_02F090
	INY
	INY
CODE_02F090:
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BNE.b CODE_02F0AE
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02F0AE
	JSR.w SMW_SetNormalSpriteYSpeedBasedOnSlope_Bank02
	BRA.b CODE_02F0C3

CODE_02F0AE:
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b CODE_02F0C3
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	STZ.w !RAM_SMW_NorSpr086_Wiggler_FlipSegmentsWhenTurningTimer,x
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_02F0C3:
	JSR.w CODE_02F0DB
	LDA.w !RAM_SMW_NorSpr086_Wiggler_FlipSegmentsWhenTurningTimer,x
	INC.w !RAM_SMW_NorSpr086_Wiggler_FlipSegmentsWhenTurningTimer,x
	AND.b #$07
	BNE.b CODE_02F0D8
	LDA.b !RAM_SMW_NorSpr086_Wiggler_IndividualSegmentFacingDirectionFlags,x
	ASL
	ORA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_NorSpr086_Wiggler_IndividualSegmentFacingDirectionFlags,x
CODE_02F0D8:
	JMP.w CODE_02F110

CODE_02F0DB:
	PHX
	PHB
	REP.b #$30
	LDA.b !RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo
	CLC
	ADC.w #$007D
	TAX
	LDA.b !RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo
	CLC
	ADC.w #$007F
	TAY
	LDA.w #$007D
	MVP !RAM_SMW_NorSpr086_Wiggler_SegmentPosTable>>16,!RAM_SMW_NorSpr086_Wiggler_SegmentPosTable>>16
	SEP.b #$30
	PLB
	PLX
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b [!RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo],y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	INY
	STA.b [!RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo],y
	RTS

DATA_02F103:
	db $00,$1E,$3E,$5E,$7E

WigglerYDisp:
	db $00,$01,$02,$01

WigglerTiles:
	db $C4,$C6,$C8,$C6

CODE_02F110:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.w !RAM_SMW_NorSpr086_Wiggler_IsAngryFlag,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_NorSpr086_Wiggler_IndividualSegmentFacingDirectionFlags,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TYA
	CLC
	ADC.b #$04
	TAY
	LDX.b #$00
CODE_02F12D:
	PHX
	STX.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	LSR
	LSR
	LSR
	NOP #4
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM05
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM06
	PHY
	LDY.w DATA_02F103,x
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	BEQ.b CODE_02F14D
	TYA
	LSR
	AND.b #$FE
	TAY
CODE_02F14D:
	STY.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b [!RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo],y
	PLY
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PHY
	LDY.b !RAM_SMW_Misc_ScratchRAM09
	INY
	LDA.b [!RAM_SMW_NorSpr086_Wiggler_SegmentPosPtrLo],y
	PLY
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	SEC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	SBC.l WigglerYDisp,x
else
	SBC.w WigglerYDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLX
	PHX
	LDA.b #$8C
	CPX.b #$00
	BEQ.b CODE_02F178
	LDX.b !RAM_SMW_Misc_ScratchRAM06
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l WigglerTiles,x
else
	LDA.w WigglerTiles,x
endif
CODE_02F178:
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	ORA.b !RAM_SMW_Sprites_TilePriority
	LSR.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_02F186
	ORA.b #$40
CODE_02F186:
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	INX
	CPX.b #$05
	BNE.b CODE_02F12D
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	BEQ.b CODE_02F1C7
	PHX
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.w EyeXDisp,x
	PLX
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w SMW_OAMBuffer[$41].YDisp,y
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$88
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$41].Prop,y
	BRA.b CODE_02F1EF

CODE_02F1C7:
	PHX
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.w FlowerXDisp,x
	PLX
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w SMW_OAMBuffer[$41].YDisp,y
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$98
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$41].Prop,y
	AND.b #$F1
	ORA.b #$0A
CODE_02F1EF:
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	LDA.b #$05
	LDY.b #$FF
	JSR.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w #$0050
	CMP.w #$00A0
	SEP.b #$20
	BCS.b Return02F295
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return02F295
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
CODE_02F22B:
	LDA.w SMW_OAMBuffer[$41].XDisp,y
	SEC
	SBC.b !RAM_SMW_Player_OnScreenPosXLo				;\ Glitch: 8-Bit values being used for the player's on screen position means that this can cause the player to be able to interact with the wiggler at times you shouldn't.
	ADC.b #$0C							;| (Ex. Bounce off a wiggler at Y = 13 by falling into a pit that's directly below it).
	CMP.b #$18							;|
	BCS.b CODE_02F29B						;|
	LDA.w SMW_OAMBuffer[$41].YDisp,y				;|
	SEC								;|
	SBC.b !RAM_SMW_Player_OnScreenPosYLo				;/
	SBC.b #$10
	PHY
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_02F247
	SBC.b #$10
CODE_02F247:
	PLY
	CLC
	ADC.b #$0C
	CMP.b #$18
	BCS.b CODE_02F29B						; Glitch: Because there is no comparison for what priority the player has versus the wiggler, you can still interact with it even if you're behind a net.
									; Glitch: The player can land on the wiggler even if in a state where you normally can't interact with sprites because there is not check for the player's state.
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b ADDR_02F29D
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	ORA.b !RAM_SMW_Player_OnScreenPosYHi
	BNE.b CODE_02F29B
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	BNE.b CODE_02F26B
	LDA.b !RAM_SMW_Player_YSpeed
	CMP.b #$08
	BMI.b CODE_02F296
CODE_02F26B:
	LDA.b #!Define_SMW_Sound1DF9_KickShell
	STA.w !RAM_SMW_IO_SoundCh1
	JSL.l SMW_BoostMarioSpeed_Main
	LDA.w !RAM_SMW_NorSpr086_Wiggler_IsAngryFlag,x
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b Return02F295
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped		;\ Glitch: There is no cap on this RAM address, meaning that continuously stomping on wigglers will result in glitched score sprites spawning.
	INC.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped		;|
	JSL.l SMW_GivePoints_Main					;/
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr086_Wiggler_StunnedTimer,x
	INC.w !RAM_SMW_NorSpr086_Wiggler_IsAngryFlag,x
	JSR.w CODE_02F2D7
Return02F295:
	RTS

CODE_02F296:
	JSL.l SMW_DamagePlayer_Hurt
	RTS

CODE_02F29B:
	BRA.b CODE_02F2C7

ADDR_02F29D:
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	INC.w !RAM_SMW_Player_StarKillCount
	LDA.w !RAM_SMW_Player_StarKillCount
	CMP.b #$09
	BCC.b ADDR_02F2B5
	LDA.b #$09
	STA.w !RAM_SMW_Player_StarKillCount
ADDR_02F2B5:
	JSL.l SMW_GivePoints_Main
	LDY.w !RAM_SMW_Player_StarKillCount
	CPY.b #$08
	BCS.b Return02F2C6
	LDA.w StompSounds-$01,y
	STA.w !RAM_SMW_IO_SoundCh1
Return02F2C6:
	RTS

CODE_02F2C7:
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return02F2D2
	JMP.w CODE_02F22B

Return02F2D2:
	RTS

FlowerXDisp:
	db $00,$08

EyeXDisp:
	db $04,$04

CODE_02F2D7:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02F2D9:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02F2E2
	DEY
	BPL.b CODE_02F2D9
	RTS

CODE_02F2E2:
	LDA.b #!Define_SMW_SpriteID_ExtSpr0E_WigglerFlower
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b #$01
	STA.w !RAM_SMW_ExtSpr0E_WigglerFlower_DisableBlockCollisionFlag,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #$D0
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr086_Wiggler_Status08(Address)
namespace SMW_NorSpr086_Wiggler_Status08
%InsertMacroAtXPosition(<Address>)

StompSounds:
	%INLINEDATATABLE_SMW_StompSoundTable()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr087_LakituCloud_Status08(Address)
namespace SMW_NorSpr087_LakituCloud_Status08
%InsertMacroAtXPosition(<Address>)

XDisp:
	db $FC,$04,$FE,$02,$FB,$05,$FD,$03
	db $FA,$06,$FC,$04,$FB,$05,$FD,$03

YDisp:
	db $00,$FF,$03,$04,$FF,$FE,$04,$03
	db $FE,$FF,$03,$03,$FF,$00,$03,$03
	db $F8,$FC,$00,$04

CloudYPosOffset:
	db $0E,$0F,$10,$11,$12,$11,$10,$0F
	db $1A,$1B,$1C,$1D,$1E,$1D,$1C,$1B

UNK_01E7A3:
	db $1A

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b NoCloudGfx
CODE_01E7A8:
	JMP.w GFXRt

NoCloudGfx:
	LDY.w !RAM_SMW_Timer_DespawnLakituCloud
	BEQ.b CODE_01E7C5
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_01E7C5
	LDA.w !RAM_SMW_Timer_DespawnLakituCloud
	BEQ.b CODE_01E7C5
	DEC.w !RAM_SMW_Timer_DespawnLakituCloud
	BNE.b CODE_01E7C5
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr087_LakituCloud_EvaporateTimer,x
CODE_01E7C5:
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_EvaporateTimer,x
	BEQ.b CODE_01E7DB
	DEC
	BNE.b CODE_01E7A8
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_RespawnSprite
	LDA.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	STA.w !RAM_SMW_Sprites_SpriteToRespawn
	RTS

CODE_01E7DB:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_01E7DD:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_01E7F2
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr01E_Lakitu
	BNE.b CODE_01E7F2
	TYA
	STA.w !RAM_SMW_NorSpr087_LakituCloud_LakituSpriteSlot,x
	JMP.w CODE_01E898

CODE_01E7F2:
	DEY
	BPL.b CODE_01E7DD
	LDA.b !RAM_SMW_NorSpr087_LakituCloud_PlayerInCloudFlag,x
	BNE.b CODE_01E840
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_PlayerHasControlledCloudFlag,x
	BEQ.b CODE_01E804
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
CODE_01E804:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b CODE_01E83D
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_ProcessInteract
	BCC.b CODE_01E83D
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b CODE_01E83D
	INC.b !RAM_SMW_NorSpr087_LakituCloud_PlayerInCloudFlag,x
	LDA.b #$11
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01E81D
	LDA.b #$22
CODE_01E81D:
	CLC
	ADC.b !RAM_SMW_Player_CurrentYPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_CurrentYPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Player_CurrentXPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_CurrentXPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STA.w !RAM_SMW_NorSpr087_LakituCloud_PlayerHasControlledCloudFlag,x
	LDA.b !RAM_SMW_Player_XSpeed
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01E83D:
	JMP.w GFXRt

CODE_01E840:
	JSR.w GFXRt
	PHB
	LDA.b #SMW_HandleHeldPBalloonAndInLakituCloudMovement_Main>>16
	PHA
	PLB
	JSL.l SMW_HandleHeldPBalloonAndInLakituCloudMovement_Main
	PLB
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.b #$03
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$07
	TAY
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_01E866
	TYA
	CLC
	ADC.b #$08
	TAY
CODE_01E866:
	LDA.b !RAM_SMW_Player_CurrentXPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_CurrentXPosHi
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Player_CurrentYPosLo
	CLC
	ADC.w CloudYPosOffset,y
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Player_CurrentYPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	STZ.b !RAM_SMW_Player_InAirFlag
	INC.w !RAM_SMW_Misc_PlayerOnSolidSprite
	INC.w !RAM_SMW_Flag_PlayerInLakitusCloud
	LDA.b !RAM_SMW_IO_ControllerPress1
	AND.b #!Joypad_B>>8
	BEQ.b Return01E897
	LDA.b #$C0
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	STZ.b !RAM_SMW_NorSpr087_LakituCloud_PlayerInCloudFlag,x
Return01E897:
	RTS

CODE_01E898:
	PHY
	JSR.w CODE_01E98D
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$07
	TAY
	LDA.w CloudYPosOffset,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PLY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
GFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	LDA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return01E897
	LDA.b #$F8
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b #$FC
	STA.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.b #$00
	LDY.b !RAM_SMW_NorSpr087_LakituCloud_PlayerInCloudFlag,x
	BNE.b CODE_01E8E2
	LDA.b #$30
CODE_01E8E2:
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	STA.w !RAM_SMW_NorSpr087_LakituCloud_PlayerInCloudOAMIndex
	ORA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr087_LakituCloud_TempXPosLo
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr087_LakituCloud_TempYPosLo
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_01E901:
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDY.b !RAM_SMW_Misc_ScratchRAM0C,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l XDisp,x
else
	LDA.w XDisp,x
endif
	CLC
	ADC.w !RAM_SMW_NorSpr087_LakituCloud_TempXPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l YDisp,x
else
	LDA.w YDisp,x
endif
	CLC
	ADC.w !RAM_SMW_NorSpr087_LakituCloud_TempYPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$60
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_EvaporateTimer,x
	BEQ.b CODE_01E935
	LSR
	LSR
	LSR
	TAX
	LDA.w EvaporatingCloudTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
CODE_01E935:
	LDA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_01E901
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b #$F8
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDY.b #$02
	LDA.b #$01
	JSR.w SMW_FinishOAMWrite_Sub
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_PlayerInCloudOAMIndex
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDY.b #$02
	LDA.b #$01
	JSR.w SMW_FinishOAMWrite_Sub
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b Return01E984
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_TempXPosLo
	CLC
	ADC.b #$04
	STA.w SMW_OAMBuffer[$02].XDisp
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_TempYPosLo
	CLC
	ADC.b #$07
	STA.w SMW_OAMBuffer[$02].YDisp
	LDA.b #$4D
	STA.w SMW_OAMBuffer[$02].Tile
	LDA.b #$39
	STA.w SMW_OAMBuffer[$02].Prop
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$02].Slot
Return01E984:
	RTS

EvaporatingCloudTiles:
	db $66,$64,$62,$60

MaxLakituXSpeed:
	db $20,$E0

MaxLakituYSpeed:
	db $10,$F0

CODE_01E98D:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01E984
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	LDY.w !RAM_SMW_NorSpr087_LakituCloud_LakituSpriteSlot,x
	STA.w !RAM_SMW_NorSpr_FacingDirection,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_Timer_DisappearingSprite
	BEQ.b CODE_01E9BD
	PHY
	PHX
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_LakituSpriteSlot,x
	TAX
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	PLX
	CMP.b #!Define_SMW_NorSprStatus00_EmptySlot
	BNE.b CODE_01E9B8
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
CODE_01E9B8:
	PLY
	TYA
	EOR.b #$01
	TAY
CODE_01E9BD:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_01E9E6
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxLakituXSpeed,y
	BEQ.b CODE_01E9D0
	CLC
	ADC.w SMW_GenericNormalSpriteAccelerationTable_Main,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01E9D0:
	LDA.w !RAM_SMW_NorSpr087_LakituCloud_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w SMW_GenericNormalSpriteAccelerationTable_Main,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxLakituYSpeed,y
	BNE.b CODE_01E9E6
	INC.w !RAM_SMW_NorSpr087_LakituCloud_VerticalDirection,x
CODE_01E9E6:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	LDY.w !RAM_SMW_Timer_DisappearingSprite
	BNE.b CODE_01E9F9
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	ASL
	ASL
	ASL
	CLC
	ADC.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_01E9F9:
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	PLA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDY.w !RAM_SMW_NorSpr087_LakituCloud_LakituSpriteSlot,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$7F
	ORA.w !RAM_SMW_NorSpr01E_Lakitu_FishingFlag,y
	BNE.b Return01EA16
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr01E_Lakitu_ThrowingAnimationTimer,y
	JSR.w SMW_MakeLakituThrowSpiny_Sub
Return01EA16:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_MakeLakituThrowSpiny(Address)
namespace SMW_MakeLakituThrowSpiny
%InsertMacroAtXPosition(<Address>)

InitialXSpeed:
	db $10,$F0

Main:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return01EA6F
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.w !RAM_SMW_Timer_SilverPSwitch
	CMP.b #$01
	LDA.b #!Define_SMW_SpriteID_NorSpr014_SpinyEgg
	BCC.b CODE_01EA37
	LDA.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
CODE_01EA37:
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$D8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	LDA.w InitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr021_MovingCoin
	BNE.b CODE_01EA6D
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_Table7E15F6,x
CODE_01EA6D:
	TXY
	PLX
Return01EA6F:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr088_WingedCage_Status01(Address)
namespace SMW_NorSpr088_WingedCage_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	PHB						;\ Optimization: Useless init routine.
	LDA.b #Bank02>>16				;|
	PHA						;|
	PLB						;|
	JSL.l Bank02					;|
	PLB						;/
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr088_WingedCage_Status01(Address)
namespace SMW_NorSpr088_WingedCage_Status01
%InsertMacroAtXPosition(<Address>)

Bank02:
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr088_WingedCage_Status08(Address)
namespace SMW_NorSpr088_WingedCage_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #Bank02>>16
	PHA
	PLB
	JSL.l Bank02
	PLB
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr088_WingedCage_Status08(Address)
namespace SMW_NorSpr088_WingedCage_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b ADDR_02CC05
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
ADDR_02CC05:
	JSR.w GFXRt
	PHX
	JSL.l SMW_NorSpr088_WingedCage_Status08_SyncLayer3ScrollToLayer1
	PLX
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w !RAM_SMW_Misc_Layer1XDisp
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCS.b SMW_NorSpr088_WingedCage_Status01_Bank02
	LDA.w !RAM_SMW_Flag_StandingOnBetaCage
	BEQ.b ADDR_02CC2D
	JSL.l SMW_NorSpr088_WingedCage_Status08_SyncPlayerPositionToLayer1
ADDR_02CC2D:
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_Layer1YDisp
	BPL.b ADDR_02CC35
	DEY
ADDR_02CC35:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Player_XSpeed
	DEY
	BPL.b ADDR_02CC6C
	CLC
	ADC.w #$0000
	CMP.b !RAM_SMW_Player_XPosLo
	BCC.b ADDR_02CC7F
	STA.b !RAM_SMW_Player_XPosLo
	LDY.b #$00
	STY.b !RAM_SMW_Player_XSpeed
	BRA.b ADDR_02CC7F

ADDR_02CC6C:
	CLC
	ADC.w #$0090
	CMP.b !RAM_SMW_Player_XPosLo
	BCS.b ADDR_02CC7F
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w #$0091
	STA.b !RAM_SMW_Player_XPosLo
	LDY.b #$00
	STY.b !RAM_SMW_Player_XSpeed
ADDR_02CC7F:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.b !RAM_SMW_Player_YSpeed
	BPL.b ADDR_02CC93
	CLC
	ADC.w #$0020
	CMP.b !RAM_SMW_Player_YPosLo
	BCC.b ADDR_02CCAE
	LDY.b #$00
	STY.b !RAM_SMW_Player_YSpeed
	BRA.b ADDR_02CCAE

ADDR_02CC93:
	CLC
	ADC.w #$0060
	CMP.b !RAM_SMW_Player_YPosLo
	BCS.b ADDR_02CCAE
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	ADC.w #$0061
	STA.b !RAM_SMW_Player_YPosLo
	LDY.b #$00
	STY.b !RAM_SMW_Player_YSpeed
	LDY.b #$01
	STY.w !RAM_SMW_Misc_PlayerOnSolidSprite
	STY.w !RAM_SMW_Flag_StandingOnBetaCage
ADDR_02CCAE:
	SEP.b #$20
	RTL

XDisp:
	db $00,$30,$60,$90

YDisp:
	db $F8,$00,$F8,$00

GFXRt:
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	STY.b !RAM_SMW_Misc_ScratchRAM02
ADDR_02CCD0:
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l XDisp,x
else
	ADC.w XDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l YDisp,x
else
	ADC.w YDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	LSR
	EOR.b !RAM_SMW_Misc_ScratchRAM08
	LSR
	LDA.b #$C6
	BCC.b ADDR_02CD01
	LDA.b #$81
ADDR_02CD01:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$D6
	BCC.b ADDR_02CD0A
	LDA.b #$D7
ADDR_02CD0A:
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$70
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM08
	BPL.b ADDR_02CCD0
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr088_WingedCage_Status08(Address)
namespace SMW_NorSpr088_WingedCage_Status08
%InsertMacroAtXPosition(<Address>)

SyncPlayerPositionToLayer1:
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer1XDisp-$01
	AND.w #$FF00
	BPL.b ADDR_00FF14
	ORA.w #$00FF
ADDR_00FF14:
	XBA
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	LDA.w !RAM_SMW_Misc_Layer1YDisp-$01
	AND.w #$FF00
	BPL.b ADDR_00FF25
	ORA.w #$00FF
ADDR_00FF25:
	XBA
	EOR.w #$FFFF
	INC
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Player_YPosLo
	SEP.b #$20
	RTL

SyncLayer3ScrollToLayer1:
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	REP.b #$20
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0030
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	SEP.b #$20
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	REP.b #$20
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$0100
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
	SEP.b #$20
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr089_Layer3Smasher_Status08(Address)
namespace SMW_NorSpr089_Layer3Smasher_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	PHB
	LDA.b #Bank02>>16
	PHA
	PLB
	JSL.l Bank02
	PLB
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr089_Layer3Smasher_Status08(Address)
namespace SMW_NorSpr089_Layer3Smasher_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	JSL.l UpdateLayer3SmasherPosition
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02D444
	JSR.w CODE_02D49C
	LDY.b #$00
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	BPL.b CODE_02D3FD
	DEY
CODE_02D3FD:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr089_Layer3Smasher_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

Layer3SmasherPtrs:
	dw State00_WaitInCeiling
	dw State01_SlowlyDescend
	dw State02_Smashing
	dw State03_WaitToRise
	dw State04_RiseUp

State00_WaitInCeiling:
	LDA.w !RAM_SMW_Timer_DisappearingSprite
	BEQ.b CODE_02D422
	JSR.w SMW_SubOffscreen_Bank02_EraseSprite
	RTS								; Crash: This should be an RTL! This will cause the game to crash if you try to remove a layer 3 smasher using Normal sprite 0D2.

CODE_02D422:
	LDA.w !RAM_SMW_NorSpr089_Layer3Smasher_PhaseTimer,x
	BNE.b Return02D444
	INC.b !RAM_SMW_NorSpr089_Layer3Smasher_CurrentState,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$68
else
	LDA.b #$80
endif
	STA.w !RAM_SMW_NorSpr089_Layer3Smasher_PhaseTimer,x
	JSL.l SMW_GetRand_Main
	AND.b #$3F
	ORA.b #$80
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	STZ.b !RAM_SMW_NorSpr_YPosLo,x
	STZ.w !RAM_SMW_NorSpr_YPosHi,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
Return02D444:
	RTL

State01_SlowlyDescend:
	LDA.w !RAM_SMW_NorSpr089_Layer3Smasher_PhaseTimer,x
	BEQ.b CODE_02D452
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$06
else
	LDA.b #$04
endif
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	RTL

CODE_02D452:
	INC.b !RAM_SMW_NorSpr089_Layer3Smasher_CurrentState,x
	RTL

State02_Smashing:
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_02D460
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$70
else
	CMP.b #$40
endif
	BCS.b CODE_02D465
CODE_02D460:
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	ADC.b #$0A
else
	ADC.b #$07
endif
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02D465:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$A0
	BCC.b Return02D480
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$50
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr089_Layer3Smasher_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr089_Layer3Smasher_CurrentState,x
Return02D480:
	RTL

State03_WaitToRise:
	LDA.w !RAM_SMW_NorSpr089_Layer3Smasher_PhaseTimer,x
	BNE.b Return02D488
	INC.b !RAM_SMW_NorSpr089_Layer3Smasher_CurrentState,x
Return02D488:
	RTL

State04_RiseUp:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$D8
else
	LDA.b #$E0
endif
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	BNE.b Return02D49B
	STZ.b !RAM_SMW_NorSpr089_Layer3Smasher_CurrentState,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$88
else
	LDA.b #$A0
endif
	STA.w !RAM_SMW_NorSpr089_Layer3Smasher_PhaseTimer,x
Return02D49B:
	RTL

CODE_02D49C:
	LDA.b #$00
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_02D4A8
	LDY.b !RAM_SMW_Player_DuckingFlag
	BNE.b CODE_02D4A8
	LDA.b #$10
CODE_02D4A8:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b !RAM_SMW_Player_OnScreenPosYLo
	BCC.b CODE_02D4EF
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Player_OnScreenPosXLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.w #$0030
	CMP.w #$0090
	BCS.b CODE_02D4EF
	SEC
	SBC.w #$0008
	CMP.w #$0080
	SEP.b #$20
	BCS.b CODE_02D4E5
	LDA.b !RAM_SMW_Player_InAirFlag			;\ Glitch: Due to the order of events, pressing A/B every frame results in being able to survive under the sprite.
	BNE.b CODE_02D4DC				;/
	JSL.l SMW_DamagePlayer_Hurt
	RTS

CODE_02D4DC:
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b Return02D4E4
	STA.b !RAM_SMW_Player_YSpeed
Return02D4E4:
	RTS

CODE_02D4E5:
	PHP
	LDA.b #$08
	PLP
	BPL.b CODE_02D4ED
	LDA.b #$F8
CODE_02D4ED:
	STA.b !RAM_SMW_Player_XSpeed
CODE_02D4EF:
	SEP.b #$20
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr089_Layer3Smasher_Status08(Address)
namespace SMW_NorSpr089_Layer3Smasher_Status08
%InsertMacroAtXPosition(<Address>)

UpdateLayer3SmasherPosition:
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	REP.b #$20
	CMP.w #$FF00
	BMI.b CODE_00FF73
	CMP.w #$0100
	BMI.b CODE_00FF76
CODE_00FF73:
	LDA.w #$0100
CODE_00FF76:
	STA.b !RAM_SMW_Mirror_Layer3XPosLo
	SEP.b #$20
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	XBA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	REP.b #$20
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #$00A0
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w !RAM_SMW_ShakingLayer1DispYLo
	STA.b !RAM_SMW_Mirror_Layer3YPosLo
	SEP.b #$20
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's horizontally offscreen
; Glitch: This sprite does not call FinishOAMWrite, which means its tiles can wrap around the screen
; Note: This sprite does not call GetDrawInfo

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr08A_Bird_Status08(Address)
namespace SMW_NorSpr08A_Bird_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr08A_Bird_Status08(Address)
namespace SMW_NorSpr08A_Bird_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_02F321
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_02F321:
	JSR.w GFXRt
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.b #$03
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr08A_Bird_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

BirdPtrs:
	dw Hopping
	dw Pecking

Return02F33B:				;\ Note: Unused
	RTS 				;/

DATA_02F33C:
	db $02,$03,$05,$01

XSpeed:
	db $08,$F8

Hopping:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b Return02F370
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$E8
	BCC.b Return02F370
	AND.b #$F8
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$30
	CMP.b #$60
	BCC.b CODE_02F381
	LDA.w !RAM_SMW_NorSpr08A_Bird_ActionCounter,x
	BEQ.b CODE_02F371
	DEC.w !RAM_SMW_NorSpr08A_Bird_ActionCounter,x
Return02F370:
	RTS

CODE_02F371:
	INC.b !RAM_SMW_NorSpr08A_Bird_CurrentState,x
	JSL.l SMW_GetRand_Main
	AND.b #$03
	TAY
	LDA.w DATA_02F33C,y
	STA.w !RAM_SMW_NorSpr08A_Bird_ActionCounter,x
	RTS

CODE_02F381:
	LDA.w !RAM_SMW_NorSpr08A_Bird_ForcedTurnAroundTimer,x
	BNE.b Return02F38E
	JSR.w CODE_02F3C1
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr08A_Bird_ForcedTurnAroundTimer,x
Return02F38E:
	RTS

Pecking:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr08A_Bird_PeckingTimer,x
	BEQ.b CODE_02F3A3
	CMP.b #$08
	BCS.b Return02F3A2
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
Return02F3A2:
	RTS

CODE_02F3A3:
	LDA.w !RAM_SMW_NorSpr08A_Bird_ActionCounter,x
	BEQ.b CODE_02F3B7
	DEC.w !RAM_SMW_NorSpr08A_Bird_ActionCounter,x
	JSL.l SMW_GetRand_Main
	AND.b #$1F
	ORA.b #$0A
	STA.w !RAM_SMW_NorSpr08A_Bird_PeckingTimer,x
	RTS

CODE_02F3B7:
	STZ.b !RAM_SMW_NorSpr08A_Bird_CurrentState,x
	JSL.l SMW_GetRand_Main
	AND.b #$01
	BNE.b CODE_02F3CE
CODE_02F3C1:
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_02F3CE:
	JSL.l SMW_GetRand_Main
	AND.b #$03
	CLC
	ADC.b #$02
	STA.w !RAM_SMW_NorSpr08A_Bird_ActionCounter,x
	RTS

Tiles:
	db $D2,$D3,$D0,$D1,$9B

Direction:
	db $71,$31

Palette:
	db $08,$04,$06,$0A

BirdOAMIndex:
	db $30,$34,$48,$3C

GFXRt:
	TXA
	AND.b #$03
	TAY
	LDA.w Palette,y
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	ORA.w Direction,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	AND.b #$03
	TAY
	LDA.w BirdOAMIndex,y
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,y
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not use the sprite lock flag ($7E009D) so it will not pause along with other sprites
; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's horizontally offscreen
; Note: This sprite could have easily been a smoke/minor extended sprite. Why is it a normal sprite?

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr08B_FireplaceSmoke_Status08(Address)
namespace SMW_NorSpr08B_FireplaceSmoke_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr08B_FireplaceSmoke_Status08(Address)
namespace SMW_NorSpr08B_FireplaceSmoke_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	INC.w !RAM_SMW_NorSPr08B_FireplaceSmoke_XSpeedFrameCount,x	;\ Note: This ought to be placed after the checck that prevents the smoke from moving horizontally.
	LDY.b #$04							;|
	LDA.w !RAM_SMW_NorSPr08B_FireplaceSmoke_XSpeedFrameCount,x	;|
	AND.b #$40							;|
	BEQ.b CODE_02F442						;|
	LDY.b #$FE							;|
CODE_02F442:								;|
	STY.b !RAM_SMW_NorSpr_XSpeed,x					;/
	LDA.b #$FC							;\ Optimization: This could be put in the init routine, as this never changes.
	STA.b !RAM_SMW_NorSpr_YSpeed,x					;/
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.w !RAM_SMW_NorSPr08B_FireplaceSmoke_NoHorizontalMovementFlag,x
	BNE.b CODE_02F453
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
CODE_02F453:
	JSR.w GFXRt
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BNE.b Return02F462						; Glitch: If the screen is scrolling fast enough vertically, the smoke won't despawn.
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return02F462:
	RTS

DATA_02F463:
	db $03,$04,$05,$04,$05,$06,$05,$06
	db $07,$06,$07,$08,$07,$08,$07,$08
	db $07,$08,$07,$08,$07,$08,$07,$08
	db $07

GFXRt:									; Note: This sprite does not call GetDrawInfo
									; Glitch: This sprite does not call FinishOAMWrite, which means its tiles can wrap around the screen
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$0F
	BNE.b CODE_02F485
	INC.w !RAM_SMW_NorSPr08B_FireplaceSmoke_XDispIndex,x		;\ Glitch: This has no cap! If the smoke exists for too long, it will start glitching up!
CODE_02F485:								;|
	LDY.w !RAM_SMW_NorSPr08B_FireplaceSmoke_XDispIndex,x		;/
	LDA.w DATA_02F463,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PHA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b #$C5
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$05
	STA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$40
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's offscreen
; Glitch: This sprite does not use the sprite lock flag ($7E009D) so it will not pause along with other sprites

macro ROUTINE_RT00_SMW_NorSpr08C_SideExitAndFireplace_Status08(Address)
namespace SMW_NorSpr08C_SideExitAndFireplace_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr08C_SideExitAndFireplace_Status08(Address)
namespace SMW_NorSpr08C_SideExitAndFireplace_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:

	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	LDA.b #$01							;\ Optimization: This could have been put in the init routine and the sprite could have despawned if it was not set to also be a fireplace
	STA.w !RAM_SMW_Flag_SideExits					;| Glitch: Doing the above will fix a glitch where a sound plays if Yoshi hits this sprite with his tongue.
	LDA.b !RAM_SMW_NorSpr_XPosLo,x					;|
	AND.b #$10							;|
	BNE.b NotAFireplace						;/
	JSR.w GFXRt
	JSR.w SmokeSpawn
NotAFireplace:
	RTS

TopTile:
	db $D4,$AB

BottomTile:
	db $BB,$9A

GFXRt:										; Note: This sprite does not call GetDrawInfo
										; Glitch: This sprite does not call FinishOAMWrite, which means its tiles can wrap around the screen
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x					;\ Note: Weird OAM index modification
	CLC									;|
	ADC.b #$08								;|
	TAY									;/
	LDA.b #$B8								;\ Glitch: Hardcoded X/Y disposition means that this sprite's tiles are fixed on screen as it scrolls.
	STA.w SMW_OAMBuffer[$40].XDisp,y					;|
	STA.w SMW_OAMBuffer[$41].XDisp,y					;|
	LDA.b #$B0								;|
	STA.w SMW_OAMBuffer[$40].YDisp,y					;|
	LDA.b #$B8								;|
	STA.w SMW_OAMBuffer[$41].YDisp,y					;/
	LDA.b !RAM_SMW_Counter_GlobalFrames
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	AND.b #$07
	BNE.b CODE_02F516
else
	AND.b #$03
	BNE.b CODE_02F516
	PHY
	JSL.l SMW_GetRand_Main
	PLY
	AND.b #$03
	BNE.b CODE_02F516
	INC.b !RAM_SMW_NorSPr08C_SideExitAndFireplace_FrameIndex,x
endif
CODE_02F516:
	PHX
	LDA.b !RAM_SMW_NorSPr08C_SideExitAndFireplace_FrameIndex,x
	AND.b #$01
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l TopTile,x
else
	LDA.w TopTile,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BottomTile,x
else
	LDA.w BottomTile,x
endif
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$35
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	PLX
	RTS

SmokeSpawn:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	BNE.b .Return
	JSR.w .CheckForEmptySlot
.Return:
	RTS

.CheckForEmptySlot:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
..Loop:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b ..EmptySlot
	DEY
	BPL.b ..Loop
	RTS

..EmptySlot:
	LDA.b #!Define_SMW_SpriteID_NorSpr08B_FireplaceSmoke
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$BB
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$E0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$20
	STA.w !RAM_SMW_NorSPr08B_FireplaceSmoke_NoHorizontalMovementFlag,x
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Note: This sprite does not call GetDrawInfo
; Glitch: This sprite does not call FinishOAMWrite, which means its tiles can wrap around the screen
; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's offscreen

macro ROUTINE_RT00_SMW_NorSpr08D_GhostHouseDoor_Status08(Address)
namespace SMW_NorSpr08D_GhostHouseDoor_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr08D_GhostHouseDoor_Status08(Address)
namespace SMW_NorSpr08D_GhostHouseDoor_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:

	PHB
	PHK
	PLB
	PHX
	JSR.w Sub
	PLX
	PLB
	RTL

DATA_02F59E:
	db $08,$18,$F8,$F8,$F8,$F8,$28,$28
	db $28,$28

DATA_02F5A8:
	db $00,$00,$FF,$FF,$FF,$FF,$00,$00
	db $00,$00

YDisp:
	db $5F,$5F,$8F,$97,$A7,$AF,$8F,$97
	db $A7,$AF

Tile:
	db $9C,$9E,$A0,$B0,$B0,$A0,$A0,$B0
	db $B0,$A0

Prop:
	db $23,$23,$2D,$2D,$AD,$AD,$6D,$6D
	db $ED,$ED

Sub:
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo			;\ Optimzation: If the sprite had called the above routines, this code would be unnecessary (aside from the LDX.b #$09).
	CMP.b #$46							;|
	BCS.b Return02F618						;|
	LDX.b #$09							;|
	LDY.b #$A0							;|
CODE_02F5DA:								;|
	STZ.b !RAM_SMW_Misc_ScratchRAM02				;|
	LDA.w DATA_02F59E,x						;|
	SEC								;|
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo			;|
	STA.b !RAM_SMW_Misc_ScratchRAM00				;|
	LDA.w DATA_02F5A8,x						;|
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi			;|
	BEQ.b CODE_02F5ED						;|
	INC.b !RAM_SMW_Misc_ScratchRAM02				;|
CODE_02F5ED:								;/
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tile,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02F5DA
Return02F618:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's offscreen

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr08E_WarpHole_Status08(Address)
namespace SMW_NorSpr08E_WarpHole_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr08E_WarpHole_Status08(Address)
namespace SMW_NorSpr08E_WarpHole_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return
	STZ.b !RAM_SMW_Player_XSpeed
	LDA.b !RAM_SMW_NorSpr_XPosLo,x			;\ Glitch: This can cause a wall of glitch tiles to appear because the camera will teleport instead of scroll.
	CLC						;|
	ADC.b #$0A					;|
	STA.b !RAM_SMW_Player_XPosLo			;|
	LDA.w !RAM_SMW_NorSpr_XPosHi,x			;|
	ADC.b #$00					;|
	STA.b !RAM_SMW_Player_XPosHi			;/
Return:
	RTS

Return02EAF1:
	RTS ; unused
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr08F_ScalePlatform_Status01(Address)
namespace SMW_NorSpr08F_ScalePlatform_Status01
%InsertMacroAtXPosition(<Address>)

ScalePlatWidth:
	db $80,$40

Main:
;$0183B5
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosHi,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w ScalePlatWidth,y
	STA.b !RAM_SMW_NorSPr08F_ScalePlatform_RightPlatformXPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSPr08F_ScalePlatform_RightPlatformXPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr08F_ScalePlatform_Status08(Address)
namespace SMW_NorSpr08F_ScalePlatform_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr08F_ScalePlatform_Status08(Address)
namespace SMW_NorSpr08F_ScalePlatform_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	PHA
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	PLA
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	RTL

Sub:
	JSR.w SMW_SubOffscreen_Bank02_Entry3
	STZ.w !RAM_SMW_NorSPr08F_ScalePlatform_PlayerIsOnSpriteFlag
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	LDA.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_NorSPr08F_ScalePlatform_RightPlatformXPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSPr08F_ScalePlatform_RightPlatformXPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDY.b #$02
	JSR.w CODE_02E524
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	BCC.b CODE_02E4EB
	INC.w !RAM_SMW_NorSPr08F_ScalePlatform_PlayerIsOnSpriteFlag
	LDA.b #$F8
	JSR.w CODE_02E559
CODE_02E4EB:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDY.b #$00
	JSR.w CODE_02E524
	BCC.b CODE_02E503
	INC.w !RAM_SMW_NorSPr08F_ScalePlatform_PlayerIsOnSpriteFlag
	LDA.b #$08
	JSR.w CODE_02E559
CODE_02E503:
	LDA.w !RAM_SMW_NorSPr08F_ScalePlatform_PlayerIsOnSpriteFlag
	BNE.b Return02E51F
	LDY.b #$02
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosLo,x
	BEQ.b Return02E51F
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosHi,x
	BMI.b CODE_02E51B
	LDY.b #$FE
CODE_02E51B:
	TYA
	JSR.w CODE_02E559
Return02E51F:
	RTS

MushrmScaleTiles:
	db $02,$07,$07,$02

CODE_02E524:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	AND.b #$0F
	BNE.b CODE_02E54E
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_02E54E
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_02E533
	INY
CODE_02E533:
	LDA.w MushrmScaleTiles,y
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
CODE_02E54E:
	JSR.w GFXRt
	STZ.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
	RTS

CODE_02E559:
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E57D
	PHA
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	PLA
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_PositionDisp
	EOR.b #$FF
	INC
	BPL.b CODE_02E56F
	DEY
CODE_02E56F:
	CLC
	ADC.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosLo,x
	STA.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosLo,x
	TYA
	ADC.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosHi,x
	STA.w !RAM_SMW_NorSPr08F_ScalePlatform_InitialYPosHi,x
Return02E57D:
	RTS

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	DEC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b #$80
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$40
	STA.w SMW_OAMBuffer[$41].Prop,y
	LDA.b #$01
	LDY.b #$02
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr090_GreenGasBubble_Status08(Address)
namespace SMW_NorSpr090_GreenGasBubble_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr090_GreenGasBubble_Status08(Address)
namespace SMW_NorSpr090_GreenGasBubble_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

XSpeed:
	db $10,$F0

Acceleration:
	db $01,$FF

MaxYSpeed:
	db $10,$F0

Sub:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02E351
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return02E351
	LDY.w !RAM_SMW_NorSpr090_GreenGasBubble_HorizontalMovementDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_02E344
	LDA.b !RAM_SMW_NorSpr090_GreenGasBubble_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w Acceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_02E344
	INC.b !RAM_SMW_NorSpr090_GreenGasBubble_VerticalDirection,x
CODE_02E344:
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
Return02E351:
	RTS

DATA_02E352:
	db $00,$10,$20,$30,$00,$10,$20,$30
	db $00,$10,$20,$30,$00,$10,$20,$30

DATA_02E362:
	db $00,$00,$00,$00,$10,$10,$10,$10
	db $20,$20,$20,$20,$30,$30,$30,$30

Tiles:
	db $80,$82,$84,$86,$A0,$A2,$A4,$A6
	db $A0,$A2,$A4,$A6,$80,$82,$84,$86

Prop:
	db $3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B
	db $BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB

DATA_02E392:
	db $00,$00,$02,$02,$00,$00,$02,$02
	db $01,$01,$03,$03,$01,$01,$03,$03

DATA_02E3A2:
	db $00,$01,$02,$01

DATA_02E3A6:
	db $02,$01,$00,$01

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_02E3A2,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w DATA_02E3A6,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDX.b #$0F
Loop:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_02E352,x
	PHA
	LDA.w DATA_02E392,x
	AND.b #$02
	BNE.b CODE_02E3DA
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	BRA.b CODE_02E3DE

CODE_02E3DA:
	PLA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
CODE_02E3DE:
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DATA_02E362,x
	PHA
	LDA.w DATA_02E392,x
	AND.b #$01
	BNE.b CODE_02E3F5
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	BRA.b CODE_02E3F9

CODE_02E3F5:
	PLA
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM03
CODE_02E3F9:
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
	PLX
	LDY.b #$02
	LDA.b #$0F
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr091_CharginChuck_Status01(Address)
namespace SMW_NorSpr091_CharginChuck_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status01_Main, SMW_NorSpr096_CharginChuckCopy_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr091_CharginChuck_Status08(Address)
namespace SMW_NorSpr091_CharginChuck_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr092_SplittinChuck_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr093_BouncinChuck_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr094_WhistlinChuck_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr095_ClappinChuck_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr096_CharginChuckCopy_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr097_PuntinChuck_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr091_CharginChuck_Status08_Main, SMW_NorSpr098_PitchinChuck_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSpr091_CharginChuck_Status08(Address)
namespace SMW_NorSpr091_CharginChuck_Status08
%InsertMacroAtXPosition(<Address>)

DATA_02C132:
	db $30,$20,$0A,$30

DATA_02C136:
	db $05,$0E,$0F,$10

State04_Digging:
	LDA.w !RAM_SMW_NorSpr046_DigginChuck_HeadTurnTimer,x
	BEQ.b CODE_02C156
	CMP.b #$01
	BNE.b CODE_02C150
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingTimer,x
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingAnimationFrameCounter,x
	STZ.w !RAM_SMW_NorSpr046_DigginChuck_ShovelAnimationFrame,x
CODE_02C150:
	LDA.b #$02
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	RTS

CODE_02C156:
	LDA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingTimer,x
	BNE.b CODE_02C181
	INC.w !RAM_SMW_NorSpr046_DigginChuck_DiggingAnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingAnimationFrameCounter,x
	AND.b #$03
	STA.w !RAM_SMW_NorSpr046_DigginChuck_ShovelAnimationFrame,x
	TAY
	LDA.w DATA_02C132,y
	STA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingTimer,x
	CPY.b #$01
	BNE.b CODE_02C181
	LDA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingAnimationFrameCounter,x
	AND.b #$0C
	BNE.b CODE_02C17E
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr046_DigginChuck_HeadTurnTimer,x
	RTS

CODE_02C17E:
	JSR.w CODE_02C19A
CODE_02C181:
	LDY.w !RAM_SMW_NorSpr046_DigginChuck_ShovelAnimationFrame,x
	LDA.w DATA_02C136,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w DATA_02C1F3,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	RTS

DigginChuckRockInitialXPosLo:
	db $14,$EC

DigginChuckRockInitialXPosHi:
	db $00,$FF

DigginChuckRockInitialXSpeed:
	db $08,$F8

CODE_02C19A:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return02C1F2
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr048_DigginChuckRock
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DigginChuckRockInitialXPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w DigginChuckRockInitialXPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.w DigginChuckRockInitialXSpeed,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	PLX
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$0A
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b #$C0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #$2C
	STA.w !RAM_SMW_NorSpr048_DigginChuckRock_InGroundTimer,y
Return02C1F2:
	RTS

DATA_02C1F3:
	db $01,$03

Bank02:
	PHB
	PHK
	PLB
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	PHA
	JSR.w CODE_02C22C
	PLA
	BNE.b CODE_02C211
	CMP.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	BEQ.b CODE_02C211
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_UnusedLineOfSightTimer,x
	BNE.b CODE_02C211
	LDA.b #$28
	STA.w !RAM_SMW_NorSpr091_CharginChuck_UnusedLineOfSightTimer,x
CODE_02C211:
	PLB
	RTL

DATA_02C213:
	db $01,$02,$03,$02

CODE_02C217:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_02C213,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	JSR.w GFXRt
	RTS

MaxYSpeed:
	db $40,$10

YAcceleration:
	db $03,$01

CODE_02C22C:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_02C217
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_WaitBeforeChargingTimer,x
	BEQ.b CODE_02C23D
	LDA.b #$05
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
CODE_02C23D:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BNE.b CODE_02C253
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BPL.b CODE_02C253
	LDA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	CMP.b #$05
	BCS.b CODE_02C253
	LDA.b #$06
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
CODE_02C253:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_02C25B
	RTS

CODE_02C25B:
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSR.w ProcessPlayerInteraction
	JSL.l SMW_CheckForNormalSpriteToNormalSpriteCollision_Main
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$08
	BEQ.b CODE_02C274
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02C274:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_02C2F4
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b CODE_02C2E4
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	BEQ.b CODE_02C2E4
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$14
	CMP.b #$1C
	BCC.b CODE_02C2E4
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$40
	BNE.b CODE_02C2E4
	LDA.w !RAM_SMW_Blocks_CopyOfCurrentlyProcessedMap16TileLo2
	CMP.b #$2E
	BEQ.b CODE_02C2A6
	CMP.b #$1E
	BNE.b CODE_02C2E4
CODE_02C2A6:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02C2F7
	LDA.b !RAM_SMW_Blocks_XPosHi
	PHA
	LDA.b !RAM_SMW_Blocks_XPosLo
	PHA
	LDA.b !RAM_SMW_Blocks_YPosHi
	PHA
	LDA.b !RAM_SMW_Blocks_YPosLo
	PHA
	JSL.l SMW_SpawnBrickPieces_Main
	LDA.b #$02
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	PLA
	SEC
	SBC.b #$10
	STA.b !RAM_SMW_Blocks_YPosLo
	PLA
	SBC.b #$00
	STA.b !RAM_SMW_Blocks_YPosHi
	PLA
	STA.b !RAM_SMW_Blocks_XPosLo
	PLA
	STA.b !RAM_SMW_Blocks_XPosHi
	JSL.l SMW_SpawnBrickPieces_Main
	LDA.b #$02
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	JSL.l SMW_GenerateTile_Main
	BRA.b CODE_02C2F4

CODE_02C2E4:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02C2F7
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	BRA.b CODE_02C301

CODE_02C2F4:
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
CODE_02C2F7:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02C301
	JSR.w CODE_02C579
CODE_02C301:
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDY.w !RAM_SMW_NorSpr_InLiquidFlag,x
	CPY.b #$01
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BCC.b CODE_02C31A
	INY
	CMP.b #$00
	BPL.b CODE_02C31A
	CMP.b #$E0
	BCS.b CODE_02C31A
	LDA.b #$E0
CODE_02C31A:
	CLC
	ADC.w YAcceleration,y
	BMI.b CODE_02C328
	CMP.w MaxYSpeed,y
	BCC.b CODE_02C328
	LDA.w MaxYSpeed,y
CODE_02C328:
	TAY
	BMI.b CODE_02C334
	LDY.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	CPY.b #$07
	BNE.b CODE_02C334
	CLC
	ADC.b #$03
CODE_02C334:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

ChuckPtrs:
	dw State00_LookingSideToSide
	dw State01_Charging
	dw State02_PrepareToCharge
	dw State03_Hurt
	dw State04_Digging
	dw State05_PrepareToJumpOrSplit
	dw State06_Jumping
	dw State07_LandFromJump
	dw State08_Clappin
	dw State09_Puntin
	dw State0A_Pitchin
	dw State0B_WaitToWhistle
	dw State0C_Whistlin

State0B_WaitToWhistle:
	LDA.b #$03
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_02C370
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$30
	CMP.b #$60
	BCS.b CODE_02C370
	LDA.b #$0C
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
CODE_02C370:
	JMP.w CODE_02C556

DATA_02C373:
	db $05,$05,$05,$02,$02,$06,$06,$06

State0C_Whistlin:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	BNE.b CODE_02C386
	LDA.b #!Define_SMW_Sound1DFC_ChuckWhistle
	STA.w !RAM_SMW_IO_SoundCh3
CODE_02C386:
	LDY.b #$03
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$30
	BEQ.b CODE_02C390
	LDY.b #$06
CODE_02C390:
	TYA
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$07
	TAY
	LDA.w DATA_02C373,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	LSR
	LDA.b #!Define_SMW_SpriteID_GenSpr09_GenerateSuperKoopa
	BCC.b CODE_02C3AF
	STA.w !RAM_SMW_GenSpr_SpriteID
CODE_02C3AF:
	STA.w !RAM_SMW_Flag_WakeUpRipVanFish
	RTS

DATA_02C3B3:
	db $7F,$BF,$FF,$DF

DATA_02C3B7:
	db $18,$19,$14,$14

DATA_02C3BB:
	db $18,$18,$18,$18,$17,$17,$17,$17
	db $17,$17,$16,$15,$15,$16,$16,$16

State0A_Pitchin:
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_JumpingFlag,x
	BNE.b CODE_02C43A
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	BPL.b CODE_02C3E7
	CMP.b #$D0
	BCS.b CODE_02C3E7
	LDA.b #$C8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$3E
	STA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
	INC.w !RAM_SMW_NorSpr098_PitchinChuck_JumpingFlag,x
CODE_02C3E7:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	BNE.b CODE_02C3F5
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
	BEQ.b CODE_02C3F5
	INC.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
CODE_02C3F5:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	BNE.b CODE_02C3FE
	JSR.w CODE_02C556
CODE_02C3FE:
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
	BNE.b CODE_02C40C
	LDY.w !RAM_SMW_NorSpr098_PitchinChuck_BaseballThrowSetIndex,x
	LDA.w DATA_02C3B3,y
	STA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
CODE_02C40C:
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
	CMP.b #$40
	BCS.b CODE_02C419
	LDA.b #$00
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	RTS

CODE_02C419:
	SEC
	SBC.b #$40
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_02C3B7,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
	AND.b #$1F
	CMP.b #$06
	BNE.b Return02C439
	JSR.w CODE_02C466
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr098_PitchinChuck_WaitBeforeThrowingNextBaseball,x
Return02C439:
	RTS

CODE_02C43A:
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_PhaseTimer,x
	BEQ.b CODE_02C45C
	PHA
	CMP.b #$20
	BCC.b CODE_02C44A
	CMP.b #$30
	BCS.b CODE_02C44A
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02C44A:
	LSR
	LSR
	TAY
	LDA.w DATA_02C3BB,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	PLA
	CMP.b #$26
	BNE.b Return02C45B
	JSR.w CODE_02C466
Return02C45B:
	RTS

CODE_02C45C:
	STZ.w !RAM_SMW_NorSpr098_PitchinChuck_JumpingFlag,x
	RTS

BaseballInitialXPosLo:
	db $10,$F8

BaseballInitialXPosHi:
	db $00,$FF

BaseballInitialXSpeed:
	db $18,$E8

CODE_02C466:
	LDA.w !RAM_SMW_NorSpr098_PitchinChuck_WaitBeforeThrowingNextBaseball,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return02C439
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02C470:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02C479
	DEY
	BPL.b CODE_02C470
	RTS

CODE_02C479:
	LDA.b #!Define_SMW_SpriteID_ExtSpr0D_Baseball
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w BaseballInitialXPosLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w BaseballInitialXPosHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.w BaseballInitialXSpeed,x
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	PLX
	RTS

DATA_02C4B5:
	db $00,$00,$11,$11,$11,$11,$00,$00

State09_Puntin:
	STZ.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	TXA
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$7F
	CMP.b #$00
	BNE.b CODE_02C4D5
	PHA
	JSR.w CODE_02C556
	JSL.l SMW_SpawnFootball_Main
	PLA
CODE_02C4D5:
	CMP.b #$20
	BCS.b Return02C4E2
	LSR
	LSR
	TAY
	LDA.w DATA_02C4B5,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
Return02C4E2:
	RTS

State08_Clappin:
	JSR.w CODE_02C556
	LDA.b #$06
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	CPY.b #$F0
	BMI.b CODE_02C504
	LDY.w !RAM_SMW_NorSpr095_ClappinChuck_JumpingFlag,x
	BEQ.b CODE_02C504
	LDA.w !RAM_SMW_NorSpr095_ClappinChuck_WaitBeforeClapSound,x
	BNE.b CODE_02C502
	LDA.b #!Define_SMW_Sound1DFC_Clap
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr095_ClappinChuck_WaitBeforeClapSound,x
CODE_02C502:
	LDA.b #$07
CODE_02C504:
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return02C53B
	STZ.w !RAM_SMW_NorSpr095_ClappinChuck_JumpingFlag,x
	LDA.b #$04
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr095_ClappinChuck_WaitBeforeJumpsOrHops,x
	BNE.b Return02C53B
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr095_ClappinChuck_WaitBeforeJumpsOrHops,x
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	BPL.b Return02C53B
	CMP.b #$D0
	BCS.b Return02C53B
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	INC.w !RAM_SMW_NorSpr095_ClappinChuck_JumpingFlag,x
CODE_02C536:
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
Return02C53B:
	RTS

State06_Jumping:
	LDA.b #$06
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return02C555
	JSR.w CODE_02C579
	JSR.w CODE_02C556
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	INC.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
Return02C555:
	RTS

CODE_02C556:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w DATA_02C639,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	RTS

State07_LandFromJump:
	LDA.b #$03
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	BNE.b CODE_02C579
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return02C57D
	LDA.b #$05
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
CODE_02C579:
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
Return02C57D:
	RTS

SplittingInitialXSpeed:
	db $10,$F0

JumpingInitialXSpeed:
	db $20,$E0

State05_PrepareToJumpOrSplit:
	JSR.w CODE_02C556
	LDA.w !RAM_SMW_NorSpr092_SplittinChuck_WaitBeforeSplittin,x
	BEQ.b CODE_02C602
	CMP.b #$01
	BNE.b CODE_02C5FC
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr093_BouncinChuck
	BNE.b CODE_02C5A7
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.w JumpingInitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$B0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$06
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	JMP.w CODE_02C536

CODE_02C5A7:
	STZ.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr092_SplittinChuck_WaitBeforeSplittin,x
	LDA.b #!Define_SMW_Sound1DF9_MagicShoot
	STA.w !RAM_SMW_IO_SoundCh1
	STZ.w !RAM_SMW_NorSpr092_SplittinChuck_SpawnChuckIndex
	JSR.w CODE_02C5BC
	INC.w !RAM_SMW_NorSpr092_SplittinChuck_SpawnChuckIndex
CODE_02C5BC:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b CODE_02C5FC
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr091_CharginChuck
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDX.w !RAM_SMW_NorSpr092_SplittinChuck_SpawnChuckIndex
	LDA.w SplittingInitialXSpeed,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	PLX
	LDA.b #$C8
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr092_SplittinChuck_WaitBeforeSplittin,y
CODE_02C5FC:
	LDA.b #$09
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	RTS

CODE_02C602:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$50
	CMP.b #$A0
	BCS.b CODE_02C618
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr092_SplittinChuck_WaitBeforeSplittin,x
	RTS

CODE_02C618:
	LDA.b #$03
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$3F
	BNE.b Return02C627
	LDA.b #$E0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return02C627:
	RTS

CODE_02C628:
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr091_CharginChuck_WaitBeforeChargingTimer,x
	RTS

DATA_02C62E:
	db $00,$00,$00,$00,$01,$02,$03,$04
	db $04,$04,$04

DATA_02C639:
	db $00,$04

State00_LookingSideToSide:
	LDA.b #$03
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	STZ.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	AND.b #$0F
	BNE.b CODE_02C668
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CLC
	ADC.b #$28
	CMP.b #$50
	BCS.b CODE_02C668
	JSR.w CODE_02C556
	INC.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
CODE_02C65C:
	LDA.b #$02
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	LDA.b #$18
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	RTS

DATA_02C666:
	db $01,$FF

CODE_02C668:
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	BNE.b CODE_02C677
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	BRA.b CODE_02C65C

CODE_02C677:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_02C691
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_HeadTurnCounter,x
	AND.b #$01
	TAY
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_HeadAnimationFrameCounter,x
	CLC
	ADC.w DATA_02C666,y
	CMP.b #$0B
	BCS.b CODE_02C69B
	STA.w !RAM_SMW_NorSpr091_CharginChuck_HeadAnimationFrameCounter,x
CODE_02C691:
	LDY.w !RAM_SMW_NorSpr091_CharginChuck_HeadAnimationFrameCounter,x
	LDA.w DATA_02C62E,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	RTS

CODE_02C69B:
	INC.w !RAM_SMW_NorSpr091_CharginChuck_HeadTurnCounter,x
	RTS

ChargingXSpeed:
	db $10,$F0,$18,$E8

DATA_02C6A3:
	db $12,$13,$12,$13

State01_Charging:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02C6BA
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_UnusedLineOfSightTimer,x
	CMP.b #$01
	BRA.b CODE_02C6BA

ADDR_02C6B5: ; unreachable, aha! the unused sfx 24
	LDA.b #!Define_SMW_Sound1DF9_Unused
	STA.w !RAM_SMW_IO_SoundCh1
CODE_02C6BA:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CLC
	ADC.b #$30
	CMP.b #$60
	BCS.b CODE_02C6D7
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_02C6D7
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	STA.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
CODE_02C6D7:
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	BNE.b CODE_02C6EC
	STZ.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	JSR.w CODE_02C628
	JSL.l SMW_GetRand_Main
	AND.b #$3F
	ORA.b #$40
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
CODE_02C6EC:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w DATA_02C639,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02C713
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	BEQ.b CODE_02C70E
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	BNE.b CODE_02C70C
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
CODE_02C70C:
	INY
	INY
CODE_02C70E:
	LDA.w ChargingXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02C713:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LDY.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	BNE.b CODE_02C71B
	LSR
CODE_02C71B:
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_02C6A3,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	RTS

State02_PrepareToCharge:
	LDA.b #$03
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	BNE.b Return02C73C
	JSR.w CODE_02C628
	LDA.b #$01
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
Return02C73C:
	RTS

DATA_02C73D:
	db $0A,$0B,$0A,$0C,$0D,$0C

HurtAnimationFrameCounter:
	db $0C,$10,$10,$04,$08,$10,$18

State03_Hurt:
	LDY.w !RAM_SMW_NorSprXXX_Chucks_HurtFrameCounter,x
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	BNE.b CODE_02C760
	INC.w !RAM_SMW_NorSprXXX_Chucks_HurtFrameCounter,x
	INY
	CPY.b #$07
	BEQ.b CODE_02C777
	LDA.w HurtAnimationFrameCounter,y
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
CODE_02C760:
	LDA.w DATA_02C73D,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	LDA.b #$02
	CPY.b #$05
	BNE.b CODE_02C773
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	NOP
	AND.b #$02
	INC
CODE_02C773:
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	RTS

CODE_02C777:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr094_WhistlinChuck
	BEQ.b CODE_02C794
	CMP.b #!Define_SMW_SpriteID_NorSpr046_DigginChuck
	BNE.b CODE_02C785
	LDA.b #!Define_SMW_SpriteID_NorSpr091_CharginChuck
	STA.b !RAM_SMW_NorSpr_SpriteID,x
CODE_02C785:
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	LDA.b #$02
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	INC.w !RAM_SMW_NorSpr091_CharginChuck_HasLineOfSightFlag,x
	JMP.w CODE_02C556

CODE_02C794:
	LDA.b #$0C
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	RTS

UNK_02C799:
	db $F0,$10

StompKnockbackXSpeed:
	db $20,$E0

ProcessPlayerInteraction:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	BNE.b Return02C80F
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return02C80F
	LDA.w !RAM_SMW_Timer_StarPower
	BEQ.b CODE_02C7C4
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02C7B1:
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_Sound1DF9_KickShell
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$03
	JSL.l SMW_GivePoints_Main
	RTS

CODE_02C7C4:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CMP.b #$EC
	BPL.b CODE_02C810
	LDA.b #$05
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1564,x
	LDA.b #!Define_SMW_Sound1DF9_Contact
	STA.w !RAM_SMW_IO_SoundCh1
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	JSL.l SMW_BoostMarioSpeed_Main
	STZ.w !RAM_SMW_NorSpr091_CharginChuck_UnusedLineOfSightTimer,x
	LDA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	CMP.b #$03
	BEQ.b Return02C80F
	INC.w !RAM_SMW_NorSprXXX_Chucks_HitCounter,x
	LDA.w !RAM_SMW_NorSprXXX_Chucks_HitCounter,x
	CMP.b #$03
	BCC.b CODE_02C7F6
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_02C7B1

CODE_02C7F6:
	LDA.b #!Define_SMW_Sound1DFC_StunEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #$03
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	STZ.w !RAM_SMW_NorSprXXX_Chucks_HurtFrameCounter,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.w StompKnockbackXSpeed,y
	STA.b !RAM_SMW_Player_XSpeed
Return02C80F:
	RTS

CODE_02C810:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b Return02C819
	JSL.l SMW_DamagePlayer_Hurt
Return02C819:
	RTS

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	JSR.w DrawHead
	JSR.w DrawBody
	JSR.w DrawExtraTiles
	JSR.w DrawDigginChuckExtraTiles
	LDY.b #$FF
CODE_02C82B:
	LDA.b #$04
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

HeadXDisp:
	db $F8				; Sittin' left/right
	db $F8				; Unused
	db $F8				; Unused
	db $00				; Sittin' towards screen
	db $00				; Crouchin'
	db $FE				; Sittin' slightly left/right
	db $00				; Whistlin'/Jumpin'
	db $00				; Clappin'
	db $FA				; Unused
	db $00				; Crouchin'
	db $00				;\ Hurt
	db $00				;|
	db $00				;|
	db $00				;/
	db $00				; Diggin' (Put Shovel in Ground)
	db $FD				; Diggin' (Hold Shovel Level)
	db $FD				; Diggin' (Raise Shovel)
	db $F9				; Puntin'
	db $F6				;\ Chargin'
	db $F6				;/
	db $F8				; Wait to throw baseball
	db $FE				;\ Jumpin' to throw baseballs
	db $FC				;|
	db $FA				;/
	db $F8				;\ Throwin' baseballs
	db $FA				;/

HeadYDisp:
	db $F8				; Sittin' left/right
	db $F9				; Unused
	db $F7				; Unused
	db $F8				; Sittin' towards screen
	db $FC				; Crouchin'
	db $F8				; Sittin' slightly left/right
	db $F4				; Whistlin'/Jumpin'
	db $F5				; Clappin'
	db $F5				; Unused
	db $FC				; Crouchin'
	db $FD				;\ Hurt
	db $00				;|
	db $F9				;|
	db $F5				;/
	db $F8				; Diggin' (Put Shovel in Ground)
	db $FA				; Diggin' (Hold Shovel Level)
	db $F6				; Diggin' (Raise Shovel)
	db $F6				; Puntin'
	db $F4				;\ Chargin'
	db $F4				;/
	db $F8				; Wait to throw baseball
	db $F6				;\ Jumpin' to throw baseballs
	db $F6				;|
	db $F8				;/
	db $F8				;\ Throwin' baseballs
	db $F5				;/

HeadOAMIndexOffset:
	db $08				; Sittin' left/right
	db $08				; Unused
	db $08				; Unused
	db $00				; Sittin' towards screen
	db $00				; Crouchin'
	db $00				; Sittin' slightly left/right
	db $08				; Whistlin'/Jumpin'
	db $08				; Clappin'
	db $08				; Unused
	db $00				; Crouchin'
	db $08				;\ Hurt
	db $08				;|
	db $00				;|
	db $00				;/
	db $00				; Diggin' (Put Shovel in Ground)
	db $00				; Diggin' (Hold Shovel Level)
	db $00				; Diggin' (Raise Shovel)
	db $08				; Puntin'
	db $10				;\ Chargin'
	db $10				;/
	db $0C				; Wait to throw baseball
	db $0C				;\ Jumpin' to throw baseballs
	db $0C				;|
	db $0C				;/
	db $0C				;\ Throwin' baseballs
	db $0C				;/

HeadTiles:
	db $06				; Right
	db $0A				; Slightly right
	db $0E				; Towards screen
	db $0A				; Slightly left
	db $06				; Left
	db $4B				; Up left
	db $4B				; Up right

HeadProp:
	db $40				; Right
	db $40				; Slightly right
	db $00				; Towards screen
	db $00				; Slightly left
	db $00				; Left
	db $00				; Up left
	db $40				; Up right

DrawHead:
	STZ.b !RAM_SMW_Misc_ScratchRAM07
	LDY.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	STY.b !RAM_SMW_Misc_ScratchRAM04
	CPY.b #$09
	CLC
	BNE.b CODE_02C8AB
	LDA.w !RAM_SMW_NorSpr091_CharginChuck_PhaseTimer,x
	SEC
	SBC.b #$20
	BCC.b CODE_02C8AB
	PHA
	LSR
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM07
	PLA
	LSR
	LSR
CODE_02C8AB:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_Table7E15F6,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.w HeadOAMIndexOffset,y
	TAY
	LDX.b !RAM_SMW_Misc_ScratchRAM04
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l HeadXDisp,x
else
	LDA.w HeadXDisp,x
endif
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b CODE_02C8D8
	EOR.b #$FF
	INC
CODE_02C8D8:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l HeadYDisp,x
else
	ADC.w HeadYDisp,x
endif
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM07
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l HeadProp,x
else
	LDA.w HeadProp,x
endif
	ORA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w SMW_OAMBuffer[$40].Prop,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l HeadTiles,x
else
	LDA.w HeadTiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

BodyXDisp1:
	db $F8				; Sittin' left/right (hand)
	db $F8				; Unused
	db $F8				; Unused
	db $FC				; Sittin' towards screen
	db $FC				; Crouchin'
	db $FC				; Sittin' slightly left/right
	db $FC				; Whistlin'/Jumpin'
	db $F8				; Clappin'
	db $01				; Unused
	db $FC				; Crouchin'
	db $FC				;\ Hurt
	db $FC				;|
	db $FC				;|
	db $FC				;/
	db $FC				; Diggin' (Put Shovel in Ground)
	db $FC				; Diggin' (Hold Shovel Level)
	db $FC				; Diggin' (Raise Shovel)
	db $F8				; Puntin' (Foot)
	db $F8				;\ Chargin'
	db $F8				;/
	db $F8				; Wait to throw baseball (hand)
	db $08				;\ Jumpin' to throw baseballs (hand)
	db $06				;|
	db $F8				;/
	db $F8				;\ Throwin' baseballs (hand)
	db $01				;/

	db $10				; Sittin' left/right (hand)
	db $10				; Unused
	db $10				; Unused
	db $04				; Sittin' towards screen
	db $04				; Crouchin'
	db $04				; Sittin' slightly left/right
	db $04				; Whistlin'/Jumpin'
	db $08				; Clappin'
	db $07				; Unused
	db $04				; Crouchin'
	db $04				;\ Hurt
	db $04				;|
	db $04				;|
	db $04				;/
	db $04				; Diggin' (Put Shovel in Ground)
	db $04				; Diggin' (Hold Shovel Level)
	db $04				; Diggin' (Raise Shovel)
	db $10				; Puntin' (Foot)
	db $08				;\ Chargin'
	db $08				;/
	db $10				; Wait to throw baseball (hand)
	db $00				;\ Jumpin' to throw baseballs (hand)
	db $02				;|
	db $10				;/
	db $10				;\ Throwin' baseballs (hand)
	db $07				;/

BodyXDisp2:
	db $00				; Sittin' left/right (body)
	db $00				; Unused
	db $00				; Unused
	db $04				; Sittin' towards screen
	db $04				; Crouchin'
	db $04				; Sittin' slightly left/right
	db $04				; Whistlin'/Jumpin'
	db $08				; Clappin'
	db $00				; Unused
	db $04				; Crouchin'
	db $04				;\ Hurt
	db $04				;|
	db $04				;|
	db $04				;/
	db $04				; Diggin' (Put Shovel in Ground)
	db $04				; Diggin' (Hold Shovel Level)
	db $04				; Diggin' (Raise Shovel)
	db $00				; Puntin' (body)
	db $00				;\ Chargin'
	db $00				;/
	db $00				; Wait to throw baseball (body)
	db $00				;\ Jumpin' to throw baseballs (body)
	db $00				;|
	db $00				;/
	db $00				;\ Throwin' baseballs (body)
	db $00				;/

	db $00				; Sittin' left/right (body)
	db $00				; Unused
	db $00				; Unused
	db $FC				; Sittin' towards screen
	db $FC				; Crouchin'
	db $FC				; Sittin' slightly left/right
	db $FC				; Whistlin'/Jumpin'
	db $F8				; Clappin'
	db $00				; Unused
	db $FC				; Crouchin'
	db $FC				;\ Hurt
	db $FC				;|
	db $FC				;|
	db $FC				;/
	db $FC				; Diggin' (Put Shovel in Ground)
	db $FC				; Diggin' (Hold Shovel Level)
	db $FC				; Diggin' (Raise Shovel)
	db $00				; Puntin' (body)
	db $00				;\ Chargin'
	db $00				;/
	db $00				; Wait to throw baseball (body)
	db $00				;\ Jumpin' to throw baseballs (body)
	db $00				;|
	db $00				;/
	db $00				;\ Throwin' baseballs (body)
	db $00				;/

BodyYDisp1:
	db $06				; Sittin' left/right (hand)
	db $06				; Unused
	db $06				; Unused
	db $00				; Sittin' towards screen
	db $00				; Crouchin'
	db $00				; Sittin' slightly left/right
	db $00				; Whistlin'/Jumpin'
	db $00				; Clappin'
	db $F8				; Unused
	db $00				; Crouchin'
	db $00				;\ Hurt
	db $00				;|
	db $00				;|
	db $00				;/
	db $00				; Diggin' (Put Shovel in Ground)
	db $00				; Diggin' (Hold Shovel Level)
	db $00				; Diggin' (Raise Shovel)
	db $03				; Puntin' (Foot)
	db $00				;\ Chargin'
	db $00				;/
	db $06				; Wait to throw baseball (hand)
	db $F8				;\ Jumpin' to throw baseballs (hand)
	db $F8				;|
	db $00				;/
	db $00				;\ Throwin' baseballs (hand)
	db $F8				;/

BodyTiles1:
	db $0D				; Sittin' left/right (hand)
	db $34				; Unused
	db $35				; Unused
	db $26				; Sittin' towards screen
	db $2D				; Crouchin'
	db $28				; Sittin' slightly left/right
	db $40				; Whistlin'/Jumpin'
	db $42				; Clappin'
	db $5D				; Unused
	db $2D				; Crouchin'
	db $64				;\ Hurt
	db $64				;|
	db $64				;|
	db $64				;/
	db $E7				; Diggin' (Put Shovel in Ground)
	db $28				; Diggin' (Hold Shovel Level)
	db $82				; Diggin' (Raise Shovel)
	db $CB				; Puntin' (Foot)
	db $23				;\ Chargin'
	db $20				;/
	db $0D				; Wait to throw baseball (hand)
	db $0C				;\ Jumpin' to throw baseballs (hand)
	db $5D				;|
	db $BD				;/
	db $BD				;\ Throwin' baseballs (hand)
	db $5D				;/

BodyTiles2:
	db $4E				; Sittin' left/right (body)
	db $0C				; Unused
	db $22				; Unused
	db $26				; Sittin' towards screen
	db $2D				; Crouchin'
	db $29				; Sittin' slightly left/right
	db $40				; Whistlin'/Jumpin'
	db $42				; Clappin'
	db $AE				; Unused
	db $2D				; Crouchin'
	db $64				;\ Hurt
	db $64				;|
	db $64				;|
	db $64				;/
	db $E8				; Diggin' (Put Shovel in Ground)
	db $29				; Diggin' (Hold Shovel Level)
	db $83				; Diggin' (Raise Shovel)
	db $CC				; Puntin' (body)
	db $24				;\ Chargin'
	db $21				;/
	db $4E				; Wait to throw baseball (body)
	db $A0				;\ Jumpin' to throw baseballs (body)
	db $A0				;|
	db $A2				;/
	db $A4				;\ Throwin' baseballs (body)
	db $AE				;/

BodyProp1:
	db $00				; Sittin' left/right (hand)
	db $00				; Unused
	db $00				; Unused
	db $00				; Sittin' towards screen
	db $00				; Crouchin'
	db $00				; Sittin' slightly left/right
	db $00				; Whistlin'/Jumpin'
	db $00				; Clappin'
	db $00				; Unused
	db $00				; Crouchin'
	db $00				;\ Hurt
	db $00				;|
	db $00				;|
	db $00				;/
	db $00				; Diggin' (Put Shovel in Ground)
	db $00				; Diggin' (Hold Shovel Level)
	db $00				; Diggin' (Raise Shovel)
	db $00				; Puntin' (Foot)
	db $00				;\ Chargin'
	db $00				;/
	db $00				; Wait to throw baseball (hand)
	db $40				;\ Jumpin' to throw baseballs (hand)
	db $00				;|
	db $00				;/
	db $00				;\ Throwin' baseballs (hand)
	db $00				;/

BodyProp2:
	db $00				; Sittin' left/right (body)
	db $00				; Unused
	db $00				; Unused
	db $40				; Sittin' towards screen
	db $40				; Crouchin'
	db $00				; Sittin' slightly left/right
	db $40				; Whistlin'/Jumpin'
	db $40				; Clappin'
	db $00				; Unused
	db $40				; Crouchin'
	db $40				;\ Hurt
	db $40				;|
	db $40				;|
	db $40				;/
	db $00				; Diggin' (Put Shovel in Ground)
	db $00				; Diggin' (Hold Shovel Level)
	db $00				; Diggin' (Raise Shovel)
	db $00				; Puntin' (body)
	db $00				;\ Chargin'
	db $00				;/
	db $00				; Wait to throw baseball (body)
	db $00				;\ Jumpin' to throw baseballs (body)
	db $00				;|
	db $00				;/
	db $00				;\ Throwin' baseballs (body)
	db $00				;/

BodyTileSize1:
	db $00				; Sittin' left/right (hand)
	db $00				; Unused
	db $00				; Unused
	db $02				; Sittin' towards screen
	db $02				; Crouchin'
	db $02				; Sittin' slightly left/right
	db $02				; Whistlin'/Jumpin'
	db $02				; Clappin'
	db $00				; Unused
	db $02				; Crouchin'
	db $02				;\ Hurt
	db $02				;|
	db $02				;|
	db $02				;/
	db $02				; Diggin' (Put Shovel in Ground)
	db $02				; Diggin' (Hold Shovel Level)
	db $02				; Diggin' (Raise Shovel)
	db $00				; Puntin' (Foot)
	db $02				;\ Chargin'
	db $02				;/
	db $00				; Wait to throw baseball (hand)
	db $00				;\ Jumpin' to throw baseballs (hand)
	db $00				;|
	db $00				;/
	db $00				;\ Throwin' baseballs (hand)
	db $00				;/

BodyOAMIndexOffset:
	db $00				; Sittin' left/right
	db $00				; Unused
	db $00				; Unused
	db $04				; Sittin' towards screen
	db $04				; Crouchin'
	db $04				; Sittin' slightly left/right
	db $0C				; Whistlin'/Jumpin'
	db $0C				; Clappin'
	db $00				; Unused
	db $08				; Crouchin'
	db $00				;\ Hurt
	db $00				;|
	db $04				;|
	db $04				;/
	db $04				; Diggin' (Put Shovel in Ground)
	db $04				; Diggin' (Hold Shovel Level)
	db $04				; Diggin' (Raise Shovel)
	db $00				; Puntin'
	db $08				;\ Chargin'
	db $08				;/
	db $00				; Wait to throw baseball
	db $00				;\ Jumpin' to throw baseballs
	db $00				;|
	db $00				;/
	db $00				;\ Throwin' baseballs
	db $00				;/

DrawBody:
	STZ.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b CODE_02CA36
	CLC
	ADC.b #$1A
	LDX.b #$40
	STX.b !RAM_SMW_Misc_ScratchRAM06
CODE_02CA36:
	TAX
	LDY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w BodyOAMIndexOffset,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM05
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l BodyXDisp1,x
else
	ADC.w BodyXDisp1,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l BodyXDisp2,x
else
	ADC.w BodyXDisp2,x
endif
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l BodyYDisp1,x
else
	ADC.w BodyYDisp1,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$41].YDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BodyTiles1,x
else
	LDA.w BodyTiles1,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BodyTiles2,x
else
	LDA.w BodyTiles2,x
endif
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	ORA.b !RAM_SMW_Misc_ScratchRAM06
	PHA
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	EOR.l BodyProp1,x
else
	EOR.w BodyProp1,x
endif
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	EOR.l BodyProp2,x
else
	EOR.w BodyProp2,x
endif
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BodyTileSize1,x
else
	LDA.w BodyTileSize1,x
endif
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

JumpinChuckLeftHandXDisp:
	db $FA			; Hand
	db $00			; Clappin Arms

JumpinChuckRightHandXDisp:
	db $0E			; Hand
	db $00			; Clappin Arms

JumpinChuckHandTiles:
	db $0C			; Hand
	db $44			; Clappin Arms

JumpinChuckHandsYDisp:
	db $F8			; Hand
	db $F0			; Clappin Arms

JumpinChuckHandTileSize:
	db $00			; Hand
	db $02			; Clappin Arms

DrawExtraTiles:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CMP.b #$14
	BCC.b NotPitchinChuckPose
	JMP.w DrawHeldBaseball

NotPitchinChuckPose:
	CMP.b #$12
	BEQ.b DrawCharginShoulder
	CMP.b #$13
	BEQ.b DrawCharginShoulder
	SEC
	SBC.b #$06
	CMP.b #$02
	BCS.b Return02CAF9
	TAX
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l JumpinChuckLeftHandXDisp,x
else
	ADC.w JumpinChuckLeftHandXDisp,x
endif
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l JumpinChuckRightHandXDisp,x
else
	ADC.w JumpinChuckRightHandXDisp,x
endif
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l JumpinChuckHandsYDisp,x
else
	ADC.w JumpinChuckHandsYDisp,x
endif
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l JumpinChuckHandTiles,x
else
	LDA.w JumpinChuckHandTiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$40
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAY
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l JumpinChuckHandTileSize,x
else
	LDA.w JumpinChuckHandTileSize,x
endif
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
Return02CAF9:
	RTS

CharginShoulderProp:
	db $47,$07						; Note: Should be $4B,$0B. Likely a leftover of when chargin' chucks were blue instead of green.

DrawCharginShoulder:
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHX
	TAX
	ASL
	ASL
	ASL
	PHA
	EOR.b #$08
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.b #$1C
	STA.w SMW_OAMBuffer[$40].Tile,y
	INC
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.w CharginShoulderProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	TYA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$40].Slot,x
	STZ.w SMW_OAMTileSizeBuffer[$41].Slot,x
	PLX
	RTS

BaseballXDisp:
	db $FA,$0A,$06,$00,$00,$01
	db $0E,$FE,$02,$00,$00,$09

BaseballYDisp:
	db $08,$F4,$F4,$00,$00,$F4

DrawHeldBaseball:
	PHX
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_02CB5E
	CLC
	ADC.b #$06
CODE_02CB5E:
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	CLC
	ADC.b #$08
	TAY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w BaseballXDisp-$14,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w BaseballYDisp-$14,x
	BEQ.b CODE_02CB8E
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$AD
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$09
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAX
	STZ.w SMW_OAMTileSizeBuffer[$40].Slot,x
CODE_02CB8E:
	PLX
	RTS

DigginChuckXDisp:
	db $FC,$04		; Shoulder
	db $10,$F0		; Level Shovel
	db $12,$EE		; Raised Shovel

DigginChuckProp:
	db $47,$07

DigginChuckYDisp:
	db $F8			; Shoulder
	db $00			; Level Shovel
	db $F8			; Raised Shovel

DigginChuckTiles:
	db $CA			; Shoulder
	db $E2			; Level Shovel
	db $A0			; Raised Shovel

DigginChuckTileSize:
	db $00			; Shoulder
	db $02			; Level Shovel
	db $02			; Raised Shovel

DrawDigginChuckExtraTiles:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr046_DigginChuck
	BNE.b Return02CBFB
	LDA.w !RAM_SMW_NorSprXXX_Chucks_BodyAnimationFrame,x
	CMP.b #$05
	BNE.b CODE_02CBB2
	LDA.b #$01
	BRA.b CODE_02CBB9

CODE_02CBB2:
	CMP.b #$0E
	BCC.b Return02CBFB
	SEC
	SBC.b #$0E
CODE_02CBB9:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$0C
	TAY
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	ASL
	ORA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DigginChuckXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	TXA
	AND.b #$01
	TAX
	LDA.w DigginChuckProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DigginChuckYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w DigginChuckTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.w DigginChuckTileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLX
Return02CBFB:
	RTS

Return02CBFC:						;\ Optimization: Unused RTS
	RTS 						;/
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_SpawnFootball(Address)
namespace SMW_SpawnFootball
%InsertMacroAtXPosition(<Address>)

InitialXPosLo:
	db $14,$EC

InitialXPosHi:
	db $00,$FF

InitialXSpeed:
	db $18,$E8

Main:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return03CC08
	LDA.b #!Define_SMW_SpriteID_NorSpr01B_Football
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.l InitialXPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ADC.l InitialXPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.l InitialXSpeed,x
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	LDA.b #$E0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr01B_Football_WaitBeforeBeingKicked,y
	PLX
Return03CC08:
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr095_ClappinChuck_Status01(Address)
namespace SMW_NorSpr095_ClappinChuck_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$08
	BRA.b CODE_01851A

PitchinChuckEntry:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$30
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr098_PitchinChuck_BaseballThrowSetIndex,x
	LDA.b #$0A
	BRA.b CODE_01851A

PuntinChuckEntry:
	LDA.b #$09
	BRA.b CODE_01851A

WhistlinChuckEntry:
	LDA.b #$0B
	BRA.b CODE_01851A

SplittinChuckEntry:
BouncinChuckEntry:
	LDA.b #$05
	BRA.b CODE_01851A

DigginChuckEntry:
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr046_DigginChuck_DiggingTimer,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x						;\ Optimization: This code is useless due to the JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	AND.b #$10								;| Glitch: Alternatively, digging chucks aren't supposed to spawn facing towards the player
	LSR									;|
	LSR									;|
	LSR									;|
	LSR									;|
	STA.w !RAM_SMW_NorSpr_FacingDirection,x					;/
	LDA.b #$04
CODE_01851A:
	STA.b !RAM_SMW_NorSprXXX_Chucks_CurrentState,x
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDA.w DATA_018526,y
	STA.w !RAM_SMW_NorSprXXX_Chucks_HeadAnimationFrame,x
	RTS

DATA_018526:
	db $00,$04
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr095_ClappinChuck_Status01_DigginChuckEntry, SMW_NorSpr046_DigginChuck_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr095_ClappinChuck_Status01_SplittinChuckEntry, SMW_NorSpr092_SplittinChuck_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr095_ClappinChuck_Status01_BouncinChuckEntry, SMW_NorSpr093_BouncinChuck_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr095_ClappinChuck_Status01_WhistlinChuckEntry, SMW_NorSpr094_WhistlinChuck_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr095_ClappinChuck_Status01_PuntinChuckEntry, SMW_NorSpr097_PuntinChuck_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr095_ClappinChuck_Status01_PitchinChuckEntry, SMW_NorSpr098_PitchinChuck_Status01_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr099_VolcanoLotus_Status08(Address)
namespace SMW_NorSpr099_VolcanoLotus_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr099_VolcanoLotus_Status08(Address)
namespace SMW_NorSpr099_VolcanoLotus_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02DFC8
	STZ.w !RAM_SMW_NorSpr099_VolcanoLotus_FlashingPaletteFlag,x
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_02DFAF
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02DFAF:
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02DFBC
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_02DFBC:
	LDA.b !RAM_SMW_NorSpr099_VolcanoLotus_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

VolcanoLotusPtrs:
	dw State00_Waiting
	dw State01_Flashing
	dw State02_Shooting

Return02DFC8:
	RTS

State00_Waiting:
	LDA.w !RAM_SMW_NorSpr099_VolcanoLotus_PhaseTimer,x
	BNE.b CODE_02DFD6
	LDA.b #$40
CODE_02DFD0:
	STA.w !RAM_SMW_NorSpr099_VolcanoLotus_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr099_VolcanoLotus_CurrentState,x
	RTS

CODE_02DFD6:
	LSR
	LSR
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

State01_Flashing:
	LDA.w !RAM_SMW_NorSpr099_VolcanoLotus_PhaseTimer,x
	BNE.b CODE_02DFE8
	LDA.b #$40
	BRA.b CODE_02DFD0

CODE_02DFE8:
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr099_VolcanoLotus_FlashingPaletteFlag,x
	RTS

State02_Shooting:
	LDA.w !RAM_SMW_NorSpr099_VolcanoLotus_PhaseTimer,x
	BNE.b CODE_02DFFB
	LDA.b #$80
	JSR.w CODE_02DFD0
	STZ.b !RAM_SMW_NorSpr099_VolcanoLotus_CurrentState,x
CODE_02DFFB:
	CMP.b #$38
	BNE.b CODE_02E002
	JSR.w CODE_02E079
CODE_02E002:
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

Tiles:
	db $8E,$9E,$E2

GFXRt:
	JSR.w SMW_NorSpr08F_ScalePlatform_Status08_GFXRt
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$CE
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$30
	ORA.b #$0B
	STA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$40
	STA.w SMW_OAMBuffer[$41].Prop,y
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$42].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$43].XDisp,y
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$42].YDisp,y
	STA.w SMW_OAMBuffer[$43].YDisp,y
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$42].Tile,y
	INC
	STA.w SMW_OAMBuffer[$43].Tile,y
	PLX
	LDA.w !RAM_SMW_NorSpr099_VolcanoLotus_FlashingPaletteFlag,x
	CMP.b #$01
	LDA.b #$39
	BCC.b CODE_02E05B
	LDA.b #$35
CODE_02E05B:
	STA.w SMW_OAMBuffer[$42].Prop,y
	STA.w SMW_OAMBuffer[$43].Prop,y
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	LDY.b #$00
	LDA.b #$01
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

FireInitialXSpeed:
	db $10,$F0,$06,$FA

FireInitialYSpeed:
	db $EC,$EC,$E8,$E8

CODE_02E079:
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b Return02E0C4
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_02E085:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02E087:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02E090
	DEY
	BPL.b CODE_02E087
	RTS

CODE_02E090:
	LDA.b #!Define_SMW_SpriteID_ExtSpr0C_VolcanoLotusFire
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w FireInitialXSpeed,x
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	LDA.w FireInitialYSpeed,x
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	PLX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_02E085
Return02E0C4:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr09A_SumoBro_Status01(Address)
namespace SMW_NorSpr09A_SumoBro_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$03
	STA.b !RAM_SMW_NorSpr09A_SumoBro_CurrentState,x
	LDA.b #$70
CODE_018379:
	STA.w !RAM_SMW_NorSpr09A_SumoBro_PhaseTimer,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr09A_SumoBro_Status08(Address)
namespace SMW_NorSpr09A_SumoBro_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr09A_SumoBro_Status08(Address)
namespace SMW_NorSpr09A_SumoBro_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

Sub:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02DCE9
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return02DCE9
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_02DCDB
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
CODE_02DCDB:
	LDA.b !RAM_SMW_NorSpr09A_SumoBro_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

SumoBroPtrs:
	dw State00_WaitingToStep
	dw State01_AboutToStep
	dw State02_Stepping
	dw State03_Stomping

Return02DCE9:
	RTS

State00_WaitingToStep:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr09A_SumoBro_PhaseTimer,x
	BNE.b Return02DCFE
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b #$03
CODE_02DCF9:
	STA.w !RAM_SMW_NorSpr09A_SumoBro_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr09A_SumoBro_CurrentState,x
Return02DCFE:
	RTS

State01_AboutToStep:
	LDA.w !RAM_SMW_NorSpr09A_SumoBro_PhaseTimer,x
	BNE.b Return02DD0B
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b #$03
	BRA.b CODE_02DCF9

Return02DD0B:
	RTS

XSpeed:
	db $20,$E0

State02_Stepping:
	LDA.w !RAM_SMW_NorSpr09A_SumoBro_WaitBeforeNextStep,x
	BNE.b CODE_02DD45
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr09A_SumoBro_PhaseTimer,x
	BNE.b Return02DD44
	INC.w !RAM_SMW_NorSpr09A_SumoBro_StepsTaken,x
	LDA.w !RAM_SMW_NorSpr09A_SumoBro_StepsTaken,x
	AND.b #$01
	BNE.b CODE_02DD2F
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr09A_SumoBro_WaitBeforeNextStep,x
CODE_02DD2F:
	LDA.w !RAM_SMW_NorSpr09A_SumoBro_StepsTaken,x
	CMP.b #$03
	BNE.b CODE_02DD3D
	STZ.w !RAM_SMW_NorSpr09A_SumoBro_StepsTaken,x
	LDA.b #$70
	BRA.b CODE_02DCF9

CODE_02DD3D:
	LDA.b #$03
CODE_02DD3F:
	JSR.w CODE_02DCF9
	STZ.b !RAM_SMW_NorSpr09A_SumoBro_CurrentState,x
Return02DD44:
	RTS

CODE_02DD45:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

State03_Stomping:
	LDA.b #$03
	LDY.w !RAM_SMW_NorSpr09A_SumoBro_PhaseTimer,x
	BEQ.b CODE_02DD81
	CPY.b #$2E
	BNE.b CODE_02DD6F
	PHA
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b CODE_02DD6E
	LDA.b #$30
	STA.w !RAM_SMW_Timer_ShakeLayer1
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	PHY
	JSR.w GenSumoLightning
	PLY
CODE_02DD6E:
	PLA
CODE_02DD6F:
	CPY.b #$30
	BCC.b CODE_02DD7D
	CPY.b #$50
	BCS.b CODE_02DD7D
	INC
	CPY.b #$44
	BCS.b CODE_02DD7D
	INC
CODE_02DD7D:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

CODE_02DD81:
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b #$40
	JSR.w CODE_02DD3F
	RTS

GenSumoLightning:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return02DDC5
	LDA.b #!Define_SMW_SpriteID_NorSpr02B_SumoLightning
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1FE2,x
	PLX
Return02DDC5:
	RTS

XDisp:
	db $FF,$07,$FC,$04,$FF,$07,$FC,$04
	db $FF,$FF,$FC,$04,$FF,$FF,$FC,$04
	db $02,$02,$F4,$04,$02,$02,$F4,$04
	db $09,$01,$04,$FC,$09,$01,$04,$FC
	db $01,$01,$04,$FC,$01,$01,$04,$FC
	db $FF,$FF,$0C,$FC,$FF,$FF,$0C,$FC

YDisp:
	db $F8,$F8,$00,$00,$F8,$F8,$00,$00
	db $F8,$F0,$00,$00,$F8,$F8,$00,$00
	db $F8,$F8,$01,$00,$F8,$F8,$FF,$00

Tiles:
	db $98,$99,$A7,$A8,$98,$99,$AA,$AB
	db $8A,$66,$AA,$AB,$EE,$EE,$C5,$C6
	db $80,$80,$C1,$C3,$80,$80,$C1,$C3

TileSize:
	db $00,$00,$02,$02,$00,$00,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$02
	db $02,$02,$02,$02,$02,$02,$02,$02

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	LSR
	ROR
	ROR
	AND.b #$40
	EOR.b #$40
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	ASL
	PHX
	TAX
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM05
CODE_02DE5B:
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_02DE65
	TXA
	CLC
	ADC.b #$18
	TAX
CODE_02DE65:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	CMP.b #$66
	SEC
	BNE.b CODE_02DE84
	CLC
CODE_02DE84:
	LDA.b #$34
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM05
	BPL.b CODE_02DE5B
	PLX
	LDY.b #$FF
	LDA.b #$03
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Note: This sprite won't display its graphics unless it's either dying or Normal sprite 09C exists.

;---------------------------------------------------------------------------

macro ROUTINE_SMW_NorSpr09B_HammerBro_Status01(Address)
namespace SMW_NorSpr09B_HammerBro_Status01
%InsertMacroAtXPosition(<Address>)

Main:								;\ Optimization: Useless init routine.
	JSL.l SMW_NorSpr09B_HammerBro_Status08_Bank02_Return	;|
	RTS							;/
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr09B_HammerBro_Status08(Address)
namespace SMW_NorSpr09B_HammerBro_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr09B_HammerBro_Status08(Address)
namespace SMW_NorSpr09B_HammerBro_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
.Return:
	RTL

Sub:
	STZ.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BNE.b CODE_02DA6E
	JMP.w GFXRt

HammerFreq:
	db $1F,$0F,$0F,$0F,$0F,$0F,$0F

CODE_02DA6E:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02DAE8
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSR.w SMW_SubOffscreen_Bank02_Entry2
	LDY.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	TAY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BEQ.b CODE_02DA89
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_02DA89:
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	ASL
	CPY.b #!Define_SMW_Submap_MoreAgressiveHammerBro
	BEQ.b CODE_02DA92
	ASL
CODE_02DA92:
	AND.b #$40
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.w HammerFreq,y
	ORA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr09B_HammerBro_WaitBeforeThowingNextHammer,x
	BNE.b Return02DAE8
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr09B_HammerBro_WaitBeforeThowingNextHammer,x
	LDY.b #$10
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	BNE.b CODE_02DAB6
	LDY.b #$F0
CODE_02DAB6:
	STY.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02DABA:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b GenerateHammer
	DEY
	BPL.b CODE_02DABA
	RTS

GenerateHammer:
	LDA.b #!Define_SMW_SpriteID_ExtSpr04_Hammer
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #$D0
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
Return02DAE8:
	RTS

XDisp:
	db $08,$10,$00,$10

YDisp:
	db $F8,$F8,$00,$00

Tiles:
	db $5A,$4A,$46,$48
	db $4A,$5A,$48,$46

TileSize:
	db $00,$00,$02,$02

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$03
CODE_02DB08:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	PHA
	ORA.b #$37
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	BEQ.b CODE_02DB2A
	INX
	INX
	INX
	INX
CODE_02DB2A:
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02DB08
HammerBroPlatformEntry:
	PLX
	LDY.b #$FF
	LDA.b #$03
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr09C_HammerBroPlatform_Status08(Address)
namespace SMW_NorSpr09C_HammerBroPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr09C_HammerBroPlatform_Status08(Address)
namespace SMW_NorSpr09C_HammerBroPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

XAcceleration:
	db $01,$FF

MaxXSpeed:
	db $20,$E0

YAcceleration:
	db $02,$FE

MaxYSpeed:
	db $20,$E0

Sub:
	JSR.w GFXRt
	LDA.b #$FF										;\ Glitch: Because the platform is constantly checking for a hammer bro to board it, you can't have more than 2 hammer bro platforms on screen if a hammer bro is also present.
	STA.w !RAM_SMW_NorSpr09C_HammerBroPlatform_HammerBroOnPlatformSpriteSlot,x		;/ The fix to this would require the hammer bro to have a flag indicating which platform it belongs to.
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_02DB66:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_02DB74
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr09B_HammerBro
	BEQ.b PutHammerBroOnPlat
CODE_02DB74:
	DEY
	BPL.b CODE_02DB66
	BRA.b CODE_02DB9E

PutHammerBroOnPlat:
	TYA
	STA.w !RAM_SMW_NorSpr09C_HammerBroPlatform_HammerBroOnPlatformSpriteSlot,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$10
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSR.w SMW_NorSpr09B_HammerBro_Status08_GFXRt
	PLX
CODE_02DB9E:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02DC0E
	JSR.w SMW_SubOffscreen_Bank02_Entry2
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_02DBD7
	LDA.w !RAM_SMW_NorSpr09C_HammerBroPlatform_HorizontalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BNE.b CODE_02DBC1
	INC.w !RAM_SMW_NorSpr09C_HammerBroPlatform_HorizontalDirection,x
CODE_02DBC1:
	LDA.w !RAM_SMW_NorSpr09C_HammerBroPlatform_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_02DBD7
	INC.w !RAM_SMW_NorSpr09C_HammerBroPlatform_VerticalDirection,x
CODE_02DBD7:
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	BEQ.b Return02DC0E
	LDA.b #$01
	STA.b !RAM_SMW_NorSpr09C_HammerBroPlatform_HitFlag,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$08
	BMI.b CODE_02DBF8
	INC.b !RAM_SMW_NorSpr09C_HammerBroPlatform_HitFlag,x
CODE_02DBF8:
	LDY.w !RAM_SMW_NorSpr09C_HammerBroPlatform_HammerBroOnPlatformSpriteSlot,x
	BMI.b Return02DC0E
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #$C0
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	PHX
	TYX
	JSL.l SMW_SpawnContactEffectFromSide_Main
	PLX
Return02DC0E:
	RTS

XDisp:
	db $00,$10,$F2,$1E
	db $00,$10,$FA,$1E

YDisp:
	db $00,$00,$F6,$F6
	db $00,$00,$FE,$FE

Tiles:
	db $40,$40,$C6,$C6
	db $40,$40,$5D,$5D

Prop:
	db $32,$32,$72,$32
	db $32,$32,$72,$32

TileSize:
	db $02,$02,$02,$02
	db $02,$02,$00,$00

BounceYDisp:
	db $00,$04,$06,$08
	db $08,$06,$04,$00

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_NorSpr09C_HammerBroPlatform_HitFlag,x
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1558,x
	LSR
	TAY
	LDA.w BounceYDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$03
CODE_02DC5D:
	STX.b !RAM_SMW_Misc_ScratchRAM06
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	CPX.b #$02
	BCS.b CODE_02DC8A
	INX
	CPX.b !RAM_SMW_Misc_ScratchRAM07
	BNE.b CODE_02DC8A
	LDA.w SMW_OAMBuffer[$40].YDisp,y			;\ Glitch: This code will only execute once, because the Hit flag will never reset back to 00.
	SEC						;|
	SBC.b !RAM_SMW_Misc_ScratchRAM05		;|
	STA.w SMW_OAMBuffer[$40].YDisp,y			;/
CODE_02DC8A:
	PLX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	DEX
	BPL.b CODE_02DC5D
	JMP.w SMW_NorSpr09B_HammerBro_Status08_HammerBroPlatformEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr09D_BubbleWithSprite_Status01(Address)
namespace SMW_NorSpr09D_BubbleWithSprite_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_NorSpr04C_ExplodingBlock_Status01_Main
	STY.b !RAM_SMW_NorSpr09D_BubbleWithSprite_Contents,x
	DEC.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	BRA.b SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr09D_BubbleWithSprite_Status08(Address)
namespace SMW_NorSpr09D_BubbleWithSprite_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr09D_BubbleWithSprite_Status08(Address)
namespace SMW_NorSpr09D_BubbleWithSprite_Status08
%InsertMacroAtXPosition(<Address>)

BubbleSprTiles1:
	db $A8,$CA,$67,$24

BubbleSprTiles2:
	db $AA,$CC,$69,$24

BubbleSprGfxProp1:
	db $84,$85,$05,$08

Bank02:
	PHB
	PHK
	PLB
	JSR.w Sub
	PLB
	RTL

BubbleSprGfxProp2:
	db $08,$F8

BubbleSprGfxProp3:
	db $01,$FF

BubbleSprGfxProp4:
	db $0C,$F4

Sub:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$14
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	PHX
	LDA.b !RAM_SMW_NorSpr09D_BubbleWithSprite_Contents,x
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	TAX
	LDA.w BubbleSprGfxProp1,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	ASL
	ASL
	ASL
	LDA.w BubbleSprTiles1,x
	BCC.b CODE_02D8E4
	LDA.w BubbleSprTiles2,x
CODE_02D8E4:
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	CMP.b #$60
	BCS.b CODE_02D8F3
	AND.b #$02
	BEQ.b CODE_02D8F6
CODE_02D8F3:
	JSR.w GFXRt
CODE_02D8F6:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BNE.b CODE_02D904
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BRA.b CODE_02D96B

CODE_02D904:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02D977
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_02D91D
	DEC.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	CMP.b #$04
	BNE.b CODE_02D91D
	LDA.b #!Define_SMW_Sound1DFC_Clap
	STA.w !RAM_SMW_IO_SoundCh3
CODE_02D91D:
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	DEC
	BEQ.b CODE_02D978
	CMP.b #$07
	BCC.b Return02D977
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSR.w SMW_UpdateNormalSpritePositionBank02_Y
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDY.w !RAM_SMW_NorSpr09D_BubbleWithSprite_HorizontalDirection,x
	LDA.w BubbleSprGfxProp2,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_02D958
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w BubbleSprGfxProp3,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w BubbleSprGfxProp4,y
	BNE.b CODE_02D958
	INC.w !RAM_SMW_NorSpr09D_BubbleWithSprite_VerticalDirection,x
CODE_02D958:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BNE.b CODE_02D96B
	JSL.l SMW_CheckForNormalSpriteToNormalSpriteCollision_Main
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return02D9A0
	STZ.b !RAM_SMW_Player_YSpeed
	STZ.b !RAM_SMW_Player_XSpeed
CODE_02D96B:
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	CMP.b #$07
	BCC.b Return02D977
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
Return02D977:
	RTS

CODE_02D978:
	LDY.b !RAM_SMW_NorSpr09D_BubbleWithSprite_Contents,x
	LDA.w BubbleSprites,y
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	PHA
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLY
	LDA.b #$20
	CPY.b #$74
	BNE.b CODE_02D98D
	LDA.b #$04
CODE_02D98D:
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr00D_BobOmb
	BNE.b CODE_02D999
	DEC.w !RAM_SMW_NorSpr00D_BobOmb_WaitBeforeExplosion,x
CODE_02D999:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
Return02D9A0:
	RTS

BubbleSprites:
	db !Define_SMW_SpriteID_NorSpr00F_Goomba
	db !Define_SMW_SpriteID_NorSpr00D_BobOmb
	db !Define_SMW_SpriteID_NorSpr015_HorizontalCheepCheep
	db !Define_SMW_SpriteID_NorSpr074_Mushroom

XDisp:
	db $F8,$08,$F8,$08,$FF,$F9,$07,$F9
	db $07,$00,$FA,$06,$FA,$06,$00

YDisp:
	db $F6,$F6,$02,$02,$FC,$F5,$F5,$03
	db $03,$FC,$F4,$F4,$04,$04,$FB

Tiles:
	db $A0,$A0,$A0,$A0,$99

Prop:
	db $07,$47,$87,$C7,$03

TileSize:
	db $02,$02,$02,$02,$00

DATA_02D9D2:
	db $00,$05,$0A,$05

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_02D9D2,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	SEC
	SBC.b #$14
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	PHX
	LDA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_TimerUntilPopping,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b #$04
CODE_02D9F8:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$06
	BCS.b CODE_02DA37
	CMP.b #$03
	LDA.b #$02
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b #$64
	BCS.b CODE_02DA34
	LDA.b #$66
CODE_02DA34:
	STA.w SMW_OAMBuffer[$40].Tile,y
CODE_02DA37:
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02D9F8
	PLX
	LDY.b #$FF
	LDA.b #$04
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr09E_BallNChain_Status01(Address)
namespace SMW_NorSpr09E_BallNChain_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$38
	BRA.b CODE_01839C

GreyChainedPlatformEntry:
	LDA.b #$30
CODE_01839C:								; LM: Sprite 7B (Goal Tape) uses this code when being loaded. (3.00+)
	STA.w !RAM_SMW_NorSpr09E_BallNChain_ChainLength,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr09E_BallNChain_Status01_GreyChainedPlatformEntry, SMW_NorSpr0A3_GreyChainedPlatform_Status01_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr09F_BanzaiBill_Status01(Address)
namespace SMW_NorSpr09F_BanzaiBill_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank01_X
	TYA
	BNE.b FireLeft
	JMP.w SMW_SubOffscreen_Bank01_EraseSprite
								; Optimization: If the bullet bill's init routine was moved here, it would allow it to play its usual sound when placed into a level directly and save a byte at the same time.
FireLeft:
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr09F_BanzaiBill_Status08(Address)
namespace SMW_NorSpr09F_BanzaiBill_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank02
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr09F_BanzaiBill_Status08(Address)
namespace SMW_NorSpr09F_BanzaiBill_Status08
%InsertMacroAtXPosition(<Address>)

Sub:
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BEQ.b Return02D5A3
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return02D5A3
	JSR.w SMW_SubOffscreen_Bank02_Entry1
	LDA.b #$E8
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank02_X
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
Return02D5A3:
	RTS

XDisp:
	db $00,$10,$20,$30,$00,$10,$20,$30
	db $00,$10,$20,$30,$00,$10,$20,$30

YDisp:
	db $00,$00,$00,$00,$10,$10,$10,$10
	db $20,$20,$20,$20,$30,$30,$30,$30

Tiles:
	db $80,$82,$84,$86,$A0,$88,$CE,$EE
	db $C0,$C2,$CE,$EE,$8E,$AE,$84,$86

Prop:
	db $33,$33,$33,$33,$33,$33,$33,$33
	db $33,$33,$33,$33,$33,$33,$B3,$B3

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank02
	PHX
	LDX.b #$0F
Loop:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
	PLX
	LDY.b #$02
	LDA.b #$0F
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

Bank02:
	PHB
	PHK
	PLB
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr09F_BanzaiBill
	BNE.b NotBanzaiBill
	JSR.w Sub
	BRA.b IsBanzaiBill

NotBanzaiBill:
	JSR.w SMW_NorSpr0A3_GreyChainedPlatform_Status08_Sub
IsBanzaiBill:
	PLB
	RTL
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr09F_BanzaiBill_Status08_Main, SMW_NorSpr09E_BallNChain_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr09F_BanzaiBill_Status08_Main, SMW_NorSpr0A3_GreyChainedPlatform_Status08_Main)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0A0_ActivateBowserBattle_Status01(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank03
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0A0_ActivateBowserBattle_Status01(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status01
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	STZ.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	LDA.b #$80
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HPForCurrentPhase,x
	LDA.b #$03
	STA.b !RAM_SMW_NorSprXXX_CurrentlyActiveBoss,x
	JSL.l SMW_InitializeMode7TilemapsAndPalettes_Main
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT00_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank03
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr01B_Football_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr051_Ninji_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr07A_Fireworks_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr07C_PrincessPeach_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0A1_BowserBowlingBall_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0A2_MechaKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0A8_Blargg_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0A9_Reznor_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0AA_Fishbone_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0AB_Rex_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0AC_DownFirstWoodenSpike_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0AE_FishinBoo_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B0_ReflectingBooBuddies_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B1_CreateEatBlock_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B2_FallingSpike_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B3_BowserStatueFire_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B6_ReflectingPodoboo_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B8_CarrotTopLiftUpperLeft_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0B9_MessageBox_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0BA_TimedPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0BB_MovingCastleStone_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0BC_BowserStatue_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0BE_Swooper_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0BF_MegaMole_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C0_SinkingLavaPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C1_WingedPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C2_Blurp_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C3_PorcuPuffer_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C4_GreyFallingPlatform_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C5_BigBooBoss_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C6_Spotlight_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C7_InvisibleMushroom_Status08_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0A0_ActivateBowserBattle_Status08_Main, SMW_NorSpr0C8_LightSwitch_Status08_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	PHB
	PHK
	PLB
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0C8_LightSwitch
	BNE.b NotLightSwitch
	JSR.w SMW_NorSpr0C8_LightSwitch_Status08_Bank03
	PLB
	RTL

NotLightSwitch:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C7_InvisibleMushroom
	BNE.b NotInvisibleMushroom
	JSR.w SMW_NorSpr0C7_InvisibleMushroom_Status08_Bank03
	PLB
	RTL

NotInvisibleMushroom:
	CMP.b #!Define_SMW_SpriteID_NorSpr051_Ninji
	BNE.b NotNinji
	JSR.w SMW_NorSpr051_Ninji_Status08_Bank03
	PLB
	RTL

NotNinji:
	CMP.b #!Define_SMW_SpriteID_NorSpr01B_Football
	BNE.b NotFootball
	JSR.w SMW_NorSpr01B_Football_Status08_Bank03
	PLB
	RTL

NotFootball:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C6_Spotlight
	BNE.b NotSpotlight
	JSR.w SMW_NorSpr0C6_Spotlight_Status08_Bank03
	PLB
	RTL

NotSpotlight:
	CMP.b #!Define_SMW_SpriteID_NorSpr07A_Fireworks
	BNE.b NotFireworks
	JSR.w SMW_NorSpr07A_Fireworks_Status08_Bank03
	PLB
	RTL

NotFireworks:
	CMP.b #!Define_SMW_SpriteID_NorSpr07C_PrincessPeach
	BNE.b NotPrincessPeach
	JSR.w SMW_NorSpr07C_PrincessPeach_Status08_Bank03
	PLB
	RTL

NotPrincessPeach:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C5_BigBooBoss
	BNE.b NotBigBooBoss
	JSR.w SMW_NorSpr0C5_BigBooBoss_Status08_Bank03
	PLB
	RTL

NotBigBooBoss:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C4_GreyFallingPlatform
	BNE.b NotGreyFallingPlatform
	JSR.w SMW_NorSpr0C4_GreyFallingPlatform_Status08_Bank03
	PLB
	RTL

NotGreyFallingPlatform:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C2_Blurp
	BNE.b NotBlurp
	JSR.w SMW_NorSpr0C2_Blurp_Status08_Bank03
	PLB
	RTL

NotBlurp:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C3_PorcuPuffer
	BNE.b NotPorcuPuffer
	JSR.w SMW_NorSpr0C3_PorcuPuffer_Status08_Bank03
	PLB
	RTL

NotPorcuPuffer:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C1_WingedPlatform
	BNE.b NotWingedPlatform
	JSR.w SMW_NorSpr0C1_WingedPlatform_Status08_Bank03
	PLB
	RTL

NotWingedPlatform:
	CMP.b #!Define_SMW_SpriteID_NorSpr0C0_SinkingLavaPlatform
	BNE.b NotSinkingLavaPlatform
	JSR.w SMW_NorSpr0C0_SinkingLavaPlatform_Status08_Bank03
	PLB
	RTL

NotSinkingLavaPlatform:
	CMP.b #!Define_SMW_SpriteID_NorSpr0BF_MegaMole
	BNE.b NotMegaMole
	JSR.w SMW_NorSpr0BF_MegaMole_Status08_Bank03
	PLB
	RTL

NotMegaMole:
	CMP.b #!Define_SMW_SpriteID_NorSpr0BE_Swooper
	BNE.b NotSwooper
	JSR.w SMW_NorSpr0BE_Swooper_Status08_Bank03
	PLB
	RTL

NotSwooper:
	CMP.b #!Define_SMW_SpriteID_NorSpr0BD_SlidingNakedBlueKoopa
	BNE.b NotSlidingNakedBlueKoopa
	JSR.w SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08_Bank03
	PLB
	RTL

NotSlidingNakedBlueKoopa:
	CMP.b #!Define_SMW_SpriteID_NorSpr0BC_BowserStatue
	BNE.b NotBowserStatue
	JSR.w SMW_NorSpr0BC_BowserStatue_Status08_Bank03
	PLB
	RTL

NotBowserStatue:
	CMP.b #!Define_SMW_SpriteID_NorSpr0B8_CarrotTopLiftUpperLeft
	BEQ.b IsCarrotTopLift
	CMP.b #!Define_SMW_SpriteID_NorSpr0B7_CarrotTopLiftUpperRight
	BNE.b NotCarrotTopLift
IsCarrotTopLift:
	JSR.w SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08_Bank03
	PLB
	RTL

NotCarrotTopLift:
	CMP.b #!Define_SMW_SpriteID_NorSpr0B9_MessageBox
	BNE.b NotMessageBox
	JSR.w SMW_NorSpr0B9_MessageBox_Status08_Bank03
	PLB
	RTL

NotMessageBox:
	CMP.b #!Define_SMW_SpriteID_NorSpr0BA_TimedPlatform
	BNE.b NotTimedPlatform
	JSR.w SMW_NorSpr0BA_TimedPlatform_Status08_Bank03
	PLB
	RTL

NotTimedPlatform:
	CMP.b #!Define_SMW_SpriteID_NorSpr0BB_MovingCastleStone
	BNE.b NotMovingCastleStone
	JSR.w SMW_NorSpr0BB_MovingCastleStone_Status08_Bank03
	PLB
	RTL

NotMovingCastleStone:
	CMP.b #!Define_SMW_SpriteID_NorSpr0B3_BowserStatueFire
	BNE.b NotBowserStatueFire
	JSR.w SMW_NorSpr0B3_BowserStatueFire_Status08_Bank03
	PLB
	RTL

NotBowserStatueFire:
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0B2_FallingSpike
	BNE.b NotFallingSpike
	JSR.w SMW_NorSpr0B2_FallingSpike_Status08_Bank03
	PLB
	RTL

NotFallingSpike:
	CMP.b #!Define_SMW_SpriteID_NorSpr0AE_FishinBoo
	BNE.b NotFishinBoo
	JSR.w SMW_NorSpr0AE_FishinBoo_Status08_Bank03
	PLB
	RTL

NotFishinBoo:
	CMP.b #!Define_SMW_SpriteID_NorSpr0B6_ReflectingPodoboo
	BNE.b NotReflectingPodoboo
	JSR.w SMW_NorSprXXX_ReflectingEnemy_Status08_ReflectingPodobooEntry
	PLB
	RTL

NotReflectingPodoboo:
	CMP.b #!Define_SMW_SpriteID_NorSpr0B0_ReflectingBooBuddies
	BNE.b NotReflectingBooBuddies
	JSR.w SMW_NorSprXXX_ReflectingEnemy_Status08_ReflectingBooBuddiesEntry
	PLB
	RTL

NotReflectingBooBuddies:
	CMP.b #!Define_SMW_SpriteID_NorSpr0B1_CreateEatBlock
	BNE.b NotCreateEatBlock
	JSR.w SMW_NorSpr0B1_CreateEatBlock_Status08_Bank03
	PLB
	RTL

NotCreateEatBlock:
	CMP.b #!Define_SMW_SpriteID_NorSpr0AC_DownFirstWoodenSpike
	BEQ.b IsWoodenSpike
	CMP.b #!Define_SMW_SpriteID_NorSpr0AD_UpDownFirstWoodenSpike
	BNE.b NotWoodenSpike
IsWoodenSpike:
	JSR.w SMW_NorSpr0AC_DownFirstWoodenSpike_Status08_Bank03
	PLB
	RTL

NotWoodenSpike:
	CMP.b #!Define_SMW_SpriteID_NorSpr0AB_Rex
	BNE.b NotRex
	JSR.w SMW_NorSpr0AB_Rex_Status08_Bank03
	PLB
	RTL

NotRex:
	CMP.b #!Define_SMW_SpriteID_NorSpr0AA_Fishbone
	BNE.b NotFishbone
	JSR.w SMW_NorSpr0AA_Fishbone_Status08_Bank03
	PLB
	RTL

NotFishbone:
	CMP.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	BNE.b NotReznor
	JSR.w SMW_NorSpr0A9_Reznor_Status08_Bank03
	PLB
	RTL

NotReznor:
	CMP.b #!Define_SMW_SpriteID_NorSpr0A8_Blargg
	BNE.b NotBlargg
	JSR.w SMW_NorSpr0A8_Blargg_Status08_Bank03
	PLB
	RTL

NotBlargg:
	CMP.b #!Define_SMW_SpriteID_NorSpr0A1_BowserBowlingBall
	BNE.b NotBowserBowlingBall
	JSR.w SMW_NorSpr0A1_BowserBowlingBall_Status08_Bank03
	PLB
	RTL

NotBowserBowlingBall:
	CMP.b #!Define_SMW_SpriteID_NorSpr0A2_MechaKoopa
	BNE.b IsActivateBowserBattle
	JSR.w SMW_NorSpr0A2_MechaKoopa_Status08_Bank03
	PLB
	RTL

IsActivateBowserBattle:
	JSL.l UpdatePaletteAndLightningAnimation
	JSR.w Sub
	JSR.w GFXRt
	PLB
	RTL

DATA_03A265:
	db $04,$03,$02,$01,$00,$01,$02,$03
	db $04,$05,$06,$07,$07,$07,$07,$07
	db $07,$07,$07,$07

Sub:
	LDA.b !RAM_SMW_Misc_M7AngleLo
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_03A265,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_PaletteIndex
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	CLC
	ADC.b #(SMW_InitializeMode7TilemapsAndPalettes_TilemapData_Bowser-SMW_InitializeMode7TilemapsAndPalettes_TilemapData)/$10
	ORA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_FacingFirection,x
	STA.w !RAM_SMW_Misc_Mode7TilemapIndex
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$03
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_PropellerAnimationFrameCounter
	LDA.b #$90
	STA.b !RAM_SMW_Mirror_M7CenterXPosLo
	LDA.b #$C8
	STA.b !RAM_SMW_Mirror_M7CenterYPosLo
	JSL.l SMW_UpdateMode7SpriteAnimations_Main
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HurtStateTimer
	BEQ.b CODE_03A2AD
	JSR.w CODE_03AF59
CODE_03A2AD:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SmokePuffTimer,x
	BEQ.b CODE_03A2B5
	JSR.w SmokeGFXRt
CODE_03A2B5:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HelpAnimationTimer,x
	BEQ.b CODE_03A2CE
	DEC
	LSR
	LSR
	PHA
	LSR
	TAY
	LDA.w DATA_03A8BE,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PLA
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM03
	JSR.w SMW_NorSpr07C_PrincessPeach_Status08_GFXRt_DrawHELP		;\ Optimization: Seems like the routine that draws Peach may have been an RTL routine at some point.
	NOP								;/
CODE_03A2CE:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03A340
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HelpAnimationTimer,x
	LDA.b #$30
	STA.b !RAM_SMW_Sprites_TilePriority
	LDA.b !RAM_SMW_Misc_M7AngleLo
	CMP.b #$20
	BCS.b CODE_03A2E1
	STZ.b !RAM_SMW_Sprites_TilePriority
CODE_03A2E1:
	JSR.w CODE_03A661
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	BEQ.b CODE_03A2F2
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_03A2F2
	DEC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
CODE_03A2F2:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$7F
	BNE.b CODE_03A305
	JSL.l SMW_GetRand_Main
	AND.b #$01
	BNE.b CODE_03A305
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarBlinkAnimationTimer,x
CODE_03A305:
	JSR.w CODE_03B078
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	CMP.b #$09
	BEQ.b CODE_03A31A
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarFaceAnimationFrame
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarBlinkAnimationTimer,x
	BEQ.b CODE_03A31A
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarFaceAnimationFrame
CODE_03A31A:
	JSR.w CODE_03A5AD
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.w !RAM_SMW_NorSpr_Table7E151C,x
	JSL.l SMW_ExecutePtr_Absolute

ActivateBowserBattlePtrs:
	dw State00_InitialDescent
	dw State01_SwoopOut
	dw State02_SwoopIn
	dw State03_DropFireballs
	dw State04_RiseUpToDie
	dw State05_ClownCarMalfunction
	dw State06_DropPeachAndFlyOff
	dw State07_Phase1
	dw State08_Phase2
	dw State09_Phase3

Return03A340:
	RTS

SmokeXDisp:
	db $D5,$DD,$23,$2B,$D5,$DD,$23,$2B
	db $D5,$DD,$23,$2B,$D5,$DD,$23,$2B
	db $D6,$DE,$22,$2A,$D6,$DE,$22,$2A
	db $D7,$DF,$21,$29,$D7,$DF,$21,$29
	db $D8,$E0,$20,$28,$D8,$E0,$20,$28
	db $DA,$E2,$1E,$26,$DA,$E2,$1E,$26
	db $DC,$E4,$1C,$24,$DC,$E4,$1C,$24
	db $E0,$E8,$18,$20,$E0,$E8,$18,$20
	db $E8,$F0,$10,$18,$E8,$F0,$10,$18

SmokeYDisp:
	db $DD,$D5,$D5,$DD,$23,$2B,$2B,$23
	db $DD,$D5,$D5,$DD,$23,$2B,$2B,$23
	db $DE,$D6,$D6,$DE,$22,$2A,$2A,$22
	db $DF,$D7,$D7,$DF,$21,$29,$29,$21
	db $E0,$D8,$D8,$E0,$20,$28,$28,$20
	db $E2,$DA,$DA,$E2,$1E,$26,$26,$1E
	db $E4,$DC,$DC,$E4,$1C,$24,$24,$1C
	db $E8,$E0,$E0,$E8,$18,$20,$20,$18
	db $F0,$E8,$E8,$F0,$10,$18,$18,$10

SmokeProp:
	db $80,$40,$00,$C0,$00,$C0,$80,$40

SmokeTiles:
	db $E3,$ED,$ED,$EB,$EB,$E9,$E9,$E7
	db $E7

SmokeGFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SmokePuffTimer,x
	DEC
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM03
	ASL
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$70
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	PHX
	LDX.b #$07
CODE_03A3FA:
	PHX
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w SmokeXDisp,x
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w SmokeYDisp,x
	CLC
	ADC.b #$30
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w SmokeTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.w SmokeProp,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03A3FA
	PLX
	LDY.b #$02
	LDA.b #$07
	JSL.l SMW_FinishOAMWrite_Main
	RTS

DuckingAnimationFrames:
	db $00,$00,$00,$00,$02,$04,$06,$08
	db $0A,$0E

State00_InitialDescent:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeAttackPhase1,x
	BNE.b CODE_03A482
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DuckingAnimationTimer,x
	BNE.b CODE_03A465
	LDA.b #$0E
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$05
else
	LDA.b #$04
endif
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$10
	BNE.b Return03A464
	LDA.b #$A4
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DuckingAnimationTimer,x
Return03A464:
	RTS

CODE_03A465:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.b #$01
	BEQ.b CODE_03A47C
	CMP.b #$40
	BCS.b Return03A47B
	LSR
	LSR
	LSR
	TAY
	LDA.w DuckingAnimationFrames,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
Return03A47B:
	RTS

CODE_03A47C:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$15
else
	LDA.b #$24
endif
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeAttackPhase1,x
	RTS

CODE_03A482:
	DEC
	BNE.b Return03A48F
	LDA.b #$07
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	LDA.b #$78
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
Return03A48F:
	RTS

DATA_03A490:
	db $FF,$01

DATA_03A492:
	db $C8,$38

DATA_03A494:
	db $01,$FF

DATA_03A496:
	db $1C,$E4

DATA_03A498:
	db $00,$02,$04,$02

State07_Phase1:
	JSR.w CODE_03A4D2
	JSR.w CODE_03A4FD
	JSR.w CODE_03A4ED
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HorizontalAccelerationDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w DATA_03A490,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w DATA_03A492,y
	BNE.b CODE_03A4BB
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HorizontalAccelerationDirection,x
CODE_03A4BB:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_VerticalAccelerationDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w DATA_03A494,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w DATA_03A496,y
	BNE.b Return03A4D1
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_VerticalAccelerationDirection,x
Return03A4D1:
	RTS

CODE_03A4D2:
	LDY.b #$00
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$E0
	BNE.b CODE_03A4E6
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$18
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_03A498,y
	TAY
CODE_03A4E6:
	TYA
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	RTS

DATA_03A4EB:
	db $80,$00

CODE_03A4ED:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$1F
	BNE.b Return03A4FC
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.w DATA_03A4EB,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_FacingFirection,x
Return03A4FC:
	RTS

CODE_03A4FD:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	BNE.b Return03A52C
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	CMP.b #$08
	BNE.b CODE_03A51A
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_Phase2AttackCounter
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_Phase2AttackCounter
	CMP.b #$03
	BEQ.b CODE_03A51A
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeBowlingBallDrop
	BRA.b Return03A52C

CODE_03A51A:
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_Phase2AttackCounter
	LDA.w !RAM_SMW_NorSpr_CurrentStatus
	BEQ.b CODE_03A527
	LDA.w !RAM_SMW_NorSpr_CurrentStatus+$01
	BNE.b Return03A52C
CODE_03A527:
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeMechaKoopaThrow
Return03A52C:
	RTS

DATA_03A52D:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$02,$04,$06,$08,$0A,$0E,$0E
	db $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
	db $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
	db $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
	db $0E,$0E,$0A,$08,$06,$04,$02,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00

DATA_03A56D:
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$10,$20,$30,$40,$50,$60
	db $80,$A0,$C0,$E0,$FF,$FF,$FF,$FF
	db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	db $FF,$FF,$FF,$FF,$FF,$C0,$80,$60
	db $40,$30,$20,$10,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00

CODE_03A5AD:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeMechaKoopaThrow
	BEQ.b CODE_03A5D8
	DEC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeMechaKoopaThrow
	BNE.b CODE_03A5BD
	LDA.b #$54
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	RTS

CODE_03A5BD:
	LSR
	LSR
	TAY
	LDA.w DATA_03A52D,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeMechaKoopaThrow
	CMP.b #$80
	BNE.b CODE_03A5D5
	JSR.w CODE_03B019
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
CODE_03A5D5:
	PLA
	PLA
	RTS

CODE_03A5D8:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeBowlingBallDrop
	BEQ.b Return03A60D
	DEC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeBowlingBallDrop
	BEQ.b CODE_03A60E
	LSR
	LSR
	TAY
	LDA.w DATA_03A52D,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	LDA.w DATA_03A56D,y
	STA.b !RAM_SMW_Misc_M7RotationLo
	STZ.b !RAM_SMW_Misc_M7RotationHi
	CMP.b #$FF
	BNE.b CODE_03A5FC
	STZ.b !RAM_SMW_Misc_M7RotationLo
	INC.b !RAM_SMW_Misc_M7RotationHi
	STZ.b !RAM_SMW_Sprites_TilePriority
CODE_03A5FC:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeBowlingBallDrop
	CMP.b #$80
	BNE.b CODE_03A60B
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	JSR.w CODE_03A61D
CODE_03A60B:
	PLA
	PLA
Return03A60D:
	RTS

CODE_03A60E:
	LDA.b #$60
	LDY.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_Phase2AttackCounter
	CPY.b #$02
	BEQ.b CODE_03A619
	LDA.b #$20
CODE_03A619:
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	RTS

CODE_03A61D:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus+$08
	LDA.b #!Define_SMW_SpriteID_NorSpr0A1_BowserBowlingBall
	STA.b !RAM_SMW_NorSpr_SpriteID+$08
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo+$08
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi+$08
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$40
	STA.b !RAM_SMW_NorSpr_YPosLo+$08
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi+$08
	PHX
	LDX.b #$08
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	RTS

DATA_03A64D:
	db $00,$00,$00,$00,$FC,$F8,$F4,$F0
	db $F4,$F8,$FC,$00,$04,$08,$0C,$10
	db $0C,$08,$04,$00

CODE_03A661:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HurtStateTimer
	BEQ.b Return03A6BF
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeMechaKoopaThrow
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeBowlingBallDrop
	DEC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HurtStateTimer
	BNE.b CODE_03A691
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	DEC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HPForCurrentPhase,x
	BNE.b CODE_03A691
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	CMP.b #$09
	BEQ.b CODE_03A6C0
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HPForCurrentPhase,x
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DuckingAnimationTimer,x

CODE_03A691:
	PLY
	PLY
	PHA
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HurtStateTimer
	LSR
	LSR
	TAY
	LDA.w DATA_03A64D,y
	STA.b !RAM_SMW_Misc_M7RotationLo
	STZ.b !RAM_SMW_Misc_M7RotationHi
	BPL.b CODE_03A6A5
	INC.b !RAM_SMW_Misc_M7RotationHi
CODE_03A6A5:
	PLA
	LDY.b #$0C
	CMP.b #$40
	BCS.b CODE_03A6B6
CODE_03A6AC:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LDY.b #$10
	AND.b #$04
	BEQ.b CODE_03A6B6
	LDY.b #$12
CODE_03A6B6:
	TYA
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarFaceAnimationFrame
Return03A6BF:
	RTS

CODE_03A6C0:
	LDA.b #$04
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03A6F0:
	db $0E,$0E,$0A,$08,$06,$04,$02,$00

State01_SwoopOut:
;$03A6F8
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DuckingAnimationTimer,x
	BEQ.b CODE_03A731
	CMP.b #$01
	BNE.b CODE_03A706
	LDY.b #!Define_SMW_LevelMusic_BowserZoomOut
	STY.w !RAM_SMW_IO_MusicCh1
CODE_03A706:
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_03A6F0,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HorizontalAccelerationDirection,x
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_VerticalAccelerationDirection,x
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ScalingDirection
	RTS

DATA_03A71F:
	db $01,$FF

DATA_03A721:
	db $10,$80

DATA_03A723:
	db $07,$03

DATA_03A725:
	db $FF,$01

DATA_03A727:
	db $F0,$08

DATA_03A729:
	db $01,$FF

DATA_03A72B:
	db $03,$03

DATA_03A72D:
	db $60,$02

DATA_03A72F:
	db $01,$01

CODE_03A731:
	LDY.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HorizontalAccelerationDirection,x
	CPY.b #$02
	BCS.b CODE_03A74F
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_03A723,y
	BNE.b CODE_03A74F
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w DATA_03A71F,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w DATA_03A721,y
	BNE.b CODE_03A74F
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HorizontalAccelerationDirection,x
CODE_03A74F:
	LDY.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_VerticalAccelerationDirection,x
	CPY.b #$02
	BCS.b CODE_03A76D
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_03A72B,y
	BNE.b CODE_03A76D
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w DATA_03A725,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w DATA_03A727,y
	BNE.b CODE_03A76D
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_VerticalAccelerationDirection,x
CODE_03A76D:
	LDY.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ScalingDirection
	CPY.b #$02
	BEQ.b CODE_03A794
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_03A72F,y
	BNE.b CODE_03A78D
	LDA.b !RAM_SMW_Misc_M7AngleLo
	CLC
	ADC.w DATA_03A729,y
	STA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_M7AngleHi
	CMP.w DATA_03A72D,y
	BNE.b CODE_03A78D
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ScalingDirection
CODE_03A78D:
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	CMP.b #$FE
	BNE.b Return03A7AC
CODE_03A794:
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	JSL.l SMW_GetRand_Main
	AND.b #$F0
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_FireballInitialXPosLo
	LDA.b #!Define_SMW_LevelMusic_BowserInterlude
	STA.w !RAM_SMW_IO_MusicCh1
Return03A7AC:
	RTS

State03_DropFireballs:
	LDA.b #$60
	STA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_M7AngleHi
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b #$60
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	BNE.b CODE_03A7DF
	LDA.b #!Define_SMW_LevelMusic_BowserZoomIn
	STA.w !RAM_SMW_IO_MusicCh1
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	LDA.b #$18
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$08
	STA.b !RAM_SMW_Misc_M7AngleLo
	STA.b !RAM_SMW_Misc_M7AngleHi
	LDA.b #$64
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	RTS

CODE_03A7DF:
	CMP.b #$60
	BCS.b Return03A840
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$1F
	BNE.b Return03A840
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$04
CODE_03A7EB:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_03A7F6
	DEY
	CPY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
	BNE.b CODE_03A7EB
	RTS

CODE_03A7F6:
	LDA.b #!Define_SMW_Sound1DFC_FireSpit					;\ Glitch: This is overwritten by the podoboo pan sounds a bit later in this routine.
	STA.w !RAM_SMW_IO_SoundCh3						;/
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr033_Podoboo
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_FireballInitialXPosLo
	PHA
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	CLC
	ADC.b #$20
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_FireballInitialXPosLo
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	INC.b !RAM_SMW_NorSpr033_Podoboo_FireballType,x
	ASL.w !RAM_SMW_NorSpr_PropertyBits1686,x				;\ Note: !Define_SMW_NorSpr_1686Prop_DisableObjectClipping
	LSR.w !RAM_SMW_NorSpr_PropertyBits1686,x				;/
	LDA.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping39
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	PLX
	PLA
	LSR
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.w RainingFireSounds,y
	STA.w !RAM_SMW_IO_SoundCh3
Return03A840:
	RTS

RainingFireSounds:
	db !Define_SMW_Sound1DFC_PodobooPan1,!Define_SMW_Sound1DFC_PodobooPan2,!Define_SMW_Sound1DFC_PodobooPan3,!Define_SMW_Sound1DFC_PodobooPan4
	db !Define_SMW_Sound1DFC_PodobooPan5,!Define_SMW_Sound1DFC_PodobooPan6,!Define_SMW_Sound1DFC_PodobooPan7,!Define_SMW_Sound1DFC_PodobooPan8

BowserSoundMusic:
	db !Define_SMW_LevelMusic_FightBowser3,!Define_SMW_LevelMusic_FightBowser4

State02_SwoopIn:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DuckingAnimationTimer,x
	BNE.b CODE_03A86E
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_03A858
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_03A858:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return03A86D
	INC.b !RAM_SMW_Misc_M7AngleLo
	INC.b !RAM_SMW_Misc_M7AngleHi
	LDA.b !RAM_SMW_Misc_M7AngleLo
	CMP.b #$20
	BNE.b Return03A86D
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DuckingAnimationTimer,x
Return03A86D:
	RTS

CODE_03A86E:
	CMP.b #$A0
	BNE.b CODE_03A877
	PHA
	JSR.w CODE_03A8D6
	PLA
CODE_03A877:
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$01
	BEQ.b CODE_03A89D
	CMP.b #$40
	BCS.b CODE_03A8AE
	CMP.b #$3F
	BNE.b CODE_03A892
	PHA
	LDY.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SongToPlayIndex
	LDA.w BowserSoundMusic-$07,y
	STA.w !RAM_SMW_IO_MusicCh1
	PLA
CODE_03A892:
	LSR
	LSR
	LSR
	TAY
	LDA.w DuckingAnimationFrames,y
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_BowserAnimationFrame,x
	RTS

CODE_03A89D:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SongToPlayIndex
	INC
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeNextAttack
	RTS

CODE_03A8AE:
	CMP.b #$E8
	BNE.b CODE_03A8B7
	LDY.b #!Define_SMW_Sound1DF9_PeachPoppingOutOfClownCar
	STY.w !RAM_SMW_IO_SoundCh1
CODE_03A8B7:
	SEC
	SBC.b #$3F
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HelpAnimationTimer,x
	RTS

DATA_03A8BE:
	db $00,$00,$00,$08,$10,$14,$14,$16
	db $16,$18,$18,$17,$16,$16,$17,$18
	db $18,$17,$14,$10,$0C,$08,$04,$00

CODE_03A8D6:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$04
CODE_03A8D8:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_03A8E3
	DEY
	CPY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
	BNE.b CODE_03A8D8
	RTS

CODE_03A8E3:
	LDA.b #!Define_SMW_Sound1DF9_MagicShoot
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$18
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.w !RAM_SMW_NorSpr_FacingDirection,x
	LDY.b #$0C
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	BPL.b CODE_03A92A
	LDY.b #$F4
	INC.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_03A92A:
	STY.b !RAM_SMW_NorSpr_XSpeed,x
	PLX
	RTS
namespace off
endmacro

macro ROUTINE_RT03_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03AB15:
	db $01,$FF

DATA_03AB17:
	db $20,$E0

DATA_03AB19:
	db $02,$FE

DATA_03AB1B:
	db $20,$E0,$01,$FF,$10,$F0

State08_Phase2:
	JSR.w CODE_03A4FD
	JSR.w CODE_03A4D2
	JSR.w CODE_03A4ED
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$00
	BNE.b CODE_03AB4B
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CMP.b !RAM_SMW_Player_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b !RAM_SMW_Player_XPosHi
	BMI.b CODE_03AB3E
	INY
CODE_03AB3E:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w DATA_03AB17,y
	BEQ.b CODE_03AB4B
	CLC
	ADC.w DATA_03AB15,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_03AB4B:
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$10
	BMI.b CODE_03AB54
	INY
CODE_03AB54:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w DATA_03AB1B,y
	BEQ.b Return03AB61
	CLC
	ADC.w DATA_03AB19,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return03AB61:
	RTS

DATA_03AB62:
	db $10,$F0

State09_Phase3:
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_ClownCarFaceAnimationFrame
	JSR.w CODE_03A4FD
	JSR.w CODE_03A4D2
	JSR.w CODE_03A4ED
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.b #$03
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$74
else
	CMP.b #$64
endif
	BCC.b Return03AB9E
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BMI.b Return03AB9E
	LDA.b #$64
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$A0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.w DATA_03AB62,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$20
	STA.w !RAM_SMW_Timer_ShakeLayer1
Return03AB9E:
	RTS

State04_RiseUpToDie:
	JSR.w CODE_03A6AC
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	BMI.b CODE_03ABAF
	BNE.b CODE_03ABB9
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$10
	BCS.b CODE_03ABB9
CODE_03ABAF:
	LDA.b #$05
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$50
else
	LDA.b #$60
endif
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
CODE_03ABB9:
	LDA.b #$F8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

State05_ClownCarMalfunction:
	JSR.w CODE_03A6AC
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BNE.b CODE_03ABEB
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.b #$0A
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_M7RotationHi
	BEQ.b Return03ABEA
	STZ.b !RAM_SMW_Misc_M7RotationLo
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$50
else
	LDA.b #$60
endif
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
Return03ABEA:
	RTS

CODE_03ABEB:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$30
else
	CMP.b #$40
endif
	BCC.b Return03AC02
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CMP.b #$4A
else
	CMP.b #$5E
endif
	BNE.b CODE_03ABF8
	LDY.b #!Define_SMW_LevelMusic_BowserDied
	STY.w !RAM_SMW_IO_MusicCh1
CODE_03ABF8:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SmokePuffTimer,x
	BNE.b Return03AC02
	LDA.b #$12
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SmokePuffTimer,x
Return03AC02:
	RTS

State06_DropPeachAndFlyOff:
	JSR.w CODE_03A6AC
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	CMP.b #$01
	BNE.b CODE_03AC22
	LDA.b #!Define_SMW_PlayerState0B_RescuedPeach
	STA.b !RAM_SMW_Player_CurrentState
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_EndOfBattleFlag
	STZ.w !RAM_SMW_Palettes_BackgroundColorLo
	STZ.w !RAM_SMW_Palettes_BackgroundColorHi
	LDA.b #$03
	STA.w !RAM_SMW_Player_CurrentLayerPriority
	JSR.w CODE_03AC63
CODE_03AC22:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	BNE.b Return03AC4C
	LDA.b #$FA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$FC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.b #$05
	STA.b !RAM_SMW_Misc_M7RotationLo
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_M7RotationHi
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return03AC4C
	LDA.b !RAM_SMW_Misc_M7AngleLo
	CMP.b #$80
	BCS.b CODE_03AC4D
	INC.b !RAM_SMW_Misc_M7AngleLo
	INC.b !RAM_SMW_Misc_M7AngleHi
Return03AC4C:
	RTS

CODE_03AC4D:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_PeachKissMusicIsPlaying,x
	BNE.b CODE_03AC5A
	LDA.b #!Define_SMW_LevelMusic_PrincessKiss
	STA.w !RAM_SMW_IO_MusicCh1
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_PeachKissMusicIsPlaying,x
CODE_03AC5A:
	LDA.b #$FE
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	RTS

CODE_03AC63:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus+$08
	LDA.b #!Define_SMW_SpriteID_NorSpr07C_PrincessPeach
	STA.b !RAM_SMW_NorSpr_SpriteID+$08
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.b !RAM_SMW_NorSpr_XPosLo+$08
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi+$08
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$47
	STA.b !RAM_SMW_NorSpr_YPosLo+$08
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi+$08
	PHX
	LDX.b #$08
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	RTS
namespace off
endmacro

macro ROUTINE_RT04_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03AF34:
	db $F4,$FF,$0C,$19,$24,$19,$0C,$FF

DATA_03AF3C:
	db $FC,$F6,$F4,$F6,$FC,$02,$04,$02

DATA_03AF44:
	db $05,$05,$05,$05,$45,$45,$45,$45

DATA_03AF4C:
	db $34,$34,$34,$35,$35,$36,$36,$37
	db $38,$3A,$3E,$46,$54

CODE_03AF59:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_FacingFirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$EC
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	PHX
	LDX.b #$03
CODE_03AF72:
	PHX
	TXA
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	AND.b #$07
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_03AF34,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DATA_03AF3C,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$59
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w DATA_03AF44,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03AF72
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_TearDropYDispIndex
	INC.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_TearDropYDispIndex
	LSR
	LSR
	LSR
	CMP.b #$0D
	BCS.b CODE_03AFD7
	TAX
	LDY.b #$FC
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	ASL
	ROL
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$15
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.l DATA_03AF4C,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$49
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$07
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
CODE_03AFD7:
	PLX
	LDY.b #$00
	LDA.b #$04
	JSL.l SMW_FinishOAMWrite_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDX.b #$04
CODE_03AFE6:
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$00].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03AFE6
	PLX
	RTS

DATA_03B013:
	db $00,$10

DATA_03B015:
	db $00,$00

DATA_03B017:
	db $F8,$08

CODE_03B019:
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w CODE_03B020
	INC.b !RAM_SMW_Misc_ScratchRAM02
CODE_03B020:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
CODE_03B022:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	BEQ.b CODE_03B02B
	DEY
	BPL.b CODE_03B022
	RTS

CODE_03B02B:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr0A2_MechaKoopa
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$10
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_03B013,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w DATA_03B015,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDY.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w DATA_03B017,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	PLX
	RTS

DATA_03B074:
	db $40,$C0

DATA_03B076:
	db $10,$F0

CODE_03B078:
	LDA.b !RAM_SMW_Misc_M7AngleLo
	CMP.b #$20
	BNE.b Return03B0DB
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	CMP.b #$07
	BCC.b Return03B0F2
	LDA.b !RAM_SMW_Misc_M7RotationLo
	ORA.b !RAM_SMW_Misc_M7RotationHi
	BNE.b Return03B0F2
	JSR.w CODE_03B0DC
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeAttackPhase1,x
	BNE.b Return03B0DB
	LDA.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping24
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b CODE_03B0BD
	JSR.w CODE_03B0D6
	STZ.b !RAM_SMW_Player_YSpeed
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeMechaKoopaThrow
	ORA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_WaitBeforeBowlingBallDrop
	BEQ.b CODE_03B0B3
	LDA.w DATA_03B076,y
	BRA.b CODE_03B0B6

CODE_03B0B3:
	LDA.w DATA_03B074,y
CODE_03B0B6:
	STA.b !RAM_SMW_Player_XSpeed
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
CODE_03B0BD:
	INC.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b CODE_03B0C9
	JSR.w CODE_03B0D2
CODE_03B0C9:
	INC.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return03B0DB
CODE_03B0D2:
	JSL.l SMW_DamagePlayer_Hurt
CODE_03B0D6:
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_DisableMarioContactTimer,x
Return03B0DB:
	RTS

CODE_03B0DC:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$0A
CODE_03B0DE:
	PHY
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BNE.b CODE_03B0EE
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,y
	BNE.b CODE_03B0EE
	JSR.w CODE_03B0F3
CODE_03B0EE:
	PLY
	DEY
	BPL.b CODE_03B0DE
Return03B0F2:
	RTS

CODE_03B0F3:
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	LDA.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping24
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCS.b CODE_03B142
	INC.w !RAM_SMW_NorSpr_PropertyBits1662,x
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return03B160
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HurtStateTimer
	BNE.b Return03B160
	LDA.b #$4C
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HurtStateTimer
	STZ.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_TearDropYDispIndex
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	STA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_SongToPlayIndex
	LDA.b #!Define_SMW_Sound1DFC_StunEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_CurrentState,x
	CMP.b #$09
	BNE.b CODE_03B142
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_HPForCurrentPhase,x
	CMP.b #$01
	BNE.b CODE_03B142
	PHY
	JSL.l SMW_DespawnNonBossSprites_Main
	PLY
CODE_03B142:
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr_XSpeed,y
	PHX
	LDX.b #$10
	LDA.w !RAM_SMW_NorSpr_YSpeed,y
	BMI.b CODE_03B151
	LDX.b #$D0
CODE_03B151:
	TXA
	STA.w !RAM_SMW_NorSpr_YSpeed,y
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	TYX
	JSL.l SMW_SpawnContactEffectFromSide_Main
	PLX
Return03B160:
	RTS
namespace off
endmacro

macro ROUTINE_RT05_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

GFXRt:
	JSR.w DrawItemBox
	JSR.w DrawCastleRoof
	RTS

ItemBoxXPos:
	db ((!RAM_SMW_Misc_StatusBar_ItemBox-!RAM_SMW_Misc_StatusBarTilemap)*$08)+$10
	db ((!RAM_SMW_Misc_StatusBar_ItemBox-!RAM_SMW_Misc_StatusBarTilemap)*$08)+$20
	db ((!RAM_SMW_Misc_StatusBar_ItemBox-!RAM_SMW_Misc_StatusBarTilemap)*$08)+$10
	db ((!RAM_SMW_Misc_StatusBar_ItemBox-!RAM_SMW_Misc_StatusBarTilemap)*$08)+$20

ItemBoxYPos:
	db $07,$07,$17,$17

ItemBoxProp:
	db $37,$77,$B7,$F7

DrawItemBox:
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_EndOfBattleFlag
	BEQ.b CODE_03B457
	STZ.w !RAM_SMW_Player_CurrentItemBox
CODE_03B457:
	LDA.w !RAM_SMW_Player_CurrentItemBox
	BEQ.b Return03B48B
	PHX
	LDX.b #$03
	LDY.b #!OAM_SMW_NorSpr0A0_ActivateBowserBattle_ItemBox*$04
CODE_03B461:
	LDA.w ItemBoxXPos,x
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w ItemBoxYPos,x
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$43
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w ItemBoxProp,x
	STA.w SMW_OAMBuffer[$00].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03B461
	PLX
Return03B48B:
	RTS

RoofXPos:
	db $00,$30,$60,$90,$C0,$F0,$00,$30
	db $40,$50,$60,$90,$A0,$B0,$C0,$F0

RoofYPos:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	db $C0,$C0,$C0,$C0,$C0,$C0,$E0,$E0
	db $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0
else
	db $B0,$B0,$B0,$B0,$B0,$B0,$D0,$D0
	db $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
endif

DrawCastleRoof:
	PHX
	LDY.b #!OAM_SMW_NorSpr0A0_ActivateBowserBattle_CastleRoofDuringFight*$04
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_EndOfBattleFlag
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$01
	LDX.b #$10
	BCC.b CODE_03B4BF
	LDY.b #!OAM_SMW_NorSpr0A0_ActivateBowserBattle_CastleRoofDuringEnding*$04
	DEX
CODE_03B4BF:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$D0
else
	LDA.b #$C0
endif
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$08
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$0D
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03B4BF
	LDX.b #$0F
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BNE.b CODE_03B532
	LDY.b #$14
CODE_03B4FA:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l RoofXPos,x
else
	LDA.w RoofXPos,x
endif
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l RoofYPos,x
else
	LDA.w RoofYPos,x
endif
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$08
	CPX.b #$06
	BCS.b CODE_03B514
	LDA.b #$03
CODE_03B514:
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$0D
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03B4FA
	BRA.b CODE_03B56A

CODE_03B532:
	LDY.b #$50
CODE_03B534:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l RoofXPos,x
else
	LDA.w RoofXPos,x
endif
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l RoofYPos,x
else
	LDA.w RoofYPos,x
endif
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$08
	CPX.b #$06
	BCS.b CODE_03B54E
	LDA.b #$03
CODE_03B54E:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$0D
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03B534
CODE_03B56A:
	PLX
	RTS
namespace off
endmacro

macro ROUTINE_RT06_SMW_NorSpr0A0_ActivateBowserBattle_Status08(Address)
namespace SMW_NorSpr0A0_ActivateBowserBattle_Status08
%InsertMacroAtXPosition(<Address>)

BowserPaletteTableIndex:
	db SMW_GlobalPalettes_Bowser_Normal-SMW_GlobalPalettes_Bowser, SMW_GlobalPalettes_Bowser_Fade01-SMW_GlobalPalettes_Bowser
	db SMW_GlobalPalettes_Bowser_Fade02-SMW_GlobalPalettes_Bowser, SMW_GlobalPalettes_Bowser_Fade03-SMW_GlobalPalettes_Bowser
	db SMW_GlobalPalettes_Bowser_Fade04-SMW_GlobalPalettes_Bowser, SMW_GlobalPalettes_Bowser_Fade05-SMW_GlobalPalettes_Bowser
	db SMW_GlobalPalettes_Bowser_Fade06-SMW_GlobalPalettes_Bowser, SMW_GlobalPalettes_Bowser_Fade07-SMW_GlobalPalettes_Bowser

UpdatePaletteAndLightningAnimation:
;$03DFCC
	PHX
	LDX.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	LDA.b #$10
	STA.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload,x
	STZ.w !RAM_SMW_Palettes_DynamicPaletteCGRAMAddress,x
	STZ.w !RAM_SMW_Palettes_DynamicPaletteColors,x
	STZ.w !RAM_SMW_Palettes_DynamicPaletteColors+$01,x
	TXY
	LDX.w !RAM_SMW_Palettes_LightningFlashColorIndex
	BNE.b CODE_03E01B
	LDA.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_EndOfBattleFlag
	BEQ.b CODE_03DFF0
	REP.b #$20
	LDA.w !RAM_SMW_Palettes_BackgroundColorLo
	BRA.b CODE_03E031

CODE_03DFF0:
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	BCC.b CODE_03E036
	DEC.w !RAM_SMW_Timer_WaitBeforeNextLightningFlash
	BNE.b CODE_03E036
	TAX
	LDA.l SMW_OverworldLightningAndRandomCloudSpawning_DATA_04F700+$08,x
	AND.b #$07
	TAX
	LDA.l SMW_OverworldLightningAndRandomCloudSpawning_DATA_04F6F8,x
	STA.w !RAM_SMW_Timer_WaitBeforeNextLightningFlash
	LDA.l SMW_OverworldLightningAndRandomCloudSpawning_DATA_04F700,x
	STA.w !RAM_SMW_Palettes_LightningFlashColorIndex
	TAX
	LDA.b #$08
	STA.w !RAM_SMW_Timer_LightningFrameDuration
	LDA.b #!Define_SMW_Sound1DFC_Thunder
	STA.w !RAM_SMW_IO_SoundCh3
CODE_03E01B:
	DEC.w !RAM_SMW_Timer_LightningFrameDuration
	BPL.b CODE_03E028
	DEC.w !RAM_SMW_Palettes_LightningFlashColorIndex
	LDA.b #$04
	STA.w !RAM_SMW_Timer_LightningFrameDuration
CODE_03E028:
	TXA
	ASL
	TAX
	REP.b #$20
	LDA.l SMW_GlobalPalettes_BowserLightningFlash,x
CODE_03E031:
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,y
	SEP.b #$20
CODE_03E036:
	LDX.w !RAM_SMW_NorSpr0A0_ActivateBowserBattle_PaletteIndex
	LDA.l BowserPaletteTableIndex,x
	TAX
	LDA.b #$0E
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_03E042:
	LDA.l SMW_GlobalPalettes_Bowser,x
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors+$02,y
	INX
	INY
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_03E042
	TYX
	STZ.w !RAM_SMW_Palettes_DynamicPaletteColors+$02,x
	INX
	INX
	INX
	INX
	STX.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	PLX
	RTL
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0A1_BowserBowlingBall_Status08(Address)
namespace SMW_NorSpr0A1_BowserBowlingBall_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $10,$F0

Bank03:
;$03B163
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03B1D4
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_03B186
	CLC
	ADC.b #$03
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	BRA.b CODE_03B18A

CODE_03B186:
	LDA.b #$40
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03B18A:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b CODE_03B1C5
	LDA.w !RAM_SMW_NorSpr_YPosHi,x					;\ Note: This sprite is hardcoded to "land" at a specific Y position regardless of whether there is ground there or not.
	BMI.b CODE_03B1C5						;|
	LDA.b !RAM_SMW_NorSpr_YPosLo,x					;|
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00	;|
	CMP.b #$C0							;|
else									;|
	CMP.b #$B0							;|
endif									;|
	BCC.b CODE_03B1C5						;|
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00	;|
	LDA.b #$C0							;|
else									;|
	LDA.b #$B0							;|
endif									;|
	STA.b !RAM_SMW_NorSpr_YPosLo,x					;/
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$3E
	BCC.b CODE_03B1AD
	LDY.b #!Define_SMW_Sound1DFC_YoshiStompsEnemy
	STY.w !RAM_SMW_IO_SoundCh3
	LDY.b #$20
	STY.w !RAM_SMW_Timer_ShakeLayer1
CODE_03B1AD:
	CMP.b #$08
	BCC.b CODE_03B1B6
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
CODE_03B1B6:
	JSR.w MakeBallBounce
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BNE.b CODE_03B1C5
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_03B1C5:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b Return03B1D4
	BMI.b CODE_03B1D1
	DEC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	DEC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
CODE_03B1D1:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
Return03B1D4:
	RTS

XDisp:
	db $F0,$00,$10,$F0,$00,$10,$F0,$00
	db $10,$00,$00,$F8

YDisp:
	db $E2,$E2,$E2,$F2,$F2,$F2,$02,$02
	db $02,$02,$02,$EA

Tiles:
	db $45,$47,$45,$65,$66,$65,$45,$47
	db $45,$39,$38,$63

Prop:
	db $0D,$0D,$4D,$0D,$0D,$4D,$8D,$8D
	db $CD,$0D,$0D,$0D

TileSize:
	db $02,$02,$02,$02,$02,$02,$02,$02
	db $02,$00,$00,$02

XDisp2:
	db $04,$0D,$10,$0D,$04,$FB,$F8,$FB

YDisp2:
	db $00,$FD,$F4,$EB,$E8,$EB,$F4,$FD

GFXRt:
	LDA.b #$70
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDX.b #$0B
CODE_03B22C:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03B22C
	PLX
	PHX
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	LSR
	AND.b #$07
	PHA
	TAX
	LDA.w SMW_OAMBuffer[$41].XDisp,y
	CLC
	ADC.w XDisp2,x
	STA.w SMW_OAMBuffer[$41].XDisp,y
	LDA.w SMW_OAMBuffer[$41].YDisp,y
	CLC
	ADC.w YDisp2,x
	STA.w SMW_OAMBuffer[$41].YDisp,y
	PLA
	CLC
	ADC.b #$02
	AND.b #$07
	TAX
	LDA.w SMW_OAMBuffer[$42].XDisp,y
	CLC
	ADC.w XDisp2,x
	STA.w SMW_OAMBuffer[$42].XDisp,y
	LDA.w SMW_OAMBuffer[$42].YDisp,y
	CLC
	ADC.w YDisp2,x
	STA.w SMW_OAMBuffer[$42].YDisp,y
	PLX
	LDA.b #$0B
	LDY.b #$FF
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr0A1_BowserBowlingBall_Status08(Address)
namespace SMW_NorSpr0A1_BowserBowlingBall_Status08
%InsertMacroAtXPosition(<Address>)

BounceYSpeed:
	db $00,$00,$00,$F8,$F8,$F8,$F8,$F8
	db $F8,$F7,$F6,$F5,$F4,$F3,$F2,$E8
	db $E8,$E8,$E8

	db $00,$00,$00,$00,$FE,$FC,$F8,$EC
	db $EC,$EC,$E8,$E4,$E0,$DC,$D8,$D4
	db $D0,$CC,$C8

MakeBallBounce:
;$03B7F8
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	PHA
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	PLA
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_NorSpr_SpriteID,x				;\ Optimization: Sprite 0A1 is the only sprite that calls this routine.
	CMP.b #!Define_SMW_SpriteID_NorSpr0A1_BowserBowlingBall		;| Perhaps Nintendo planned on having other sprites call this?
	BNE.b CODE_03B80C						;/
	TYA
	CLC
	ADC.b #$13
	TAY
CODE_03B80C:
	LDA.w BounceYSpeed,y
	LDY.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BMI.b Return03B816
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return03B816:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0A2_MechaKoopa_Status08(Address)
namespace SMW_NorSpr0A2_MechaKoopa_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $08,$F8

Bank03:
	JSL.l GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return03B306
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03B306
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b CODE_03B2E3
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr0A2_MechaKoopa_WaitBeforeTurningAround,x
	INC.b !RAM_SMW_NorSpr0A2_MechaKoopa_WaitBeforeTurningAround,x
	AND.b #$3F
	BNE.b CODE_03B2E3
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_03B2E3:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_03B2F9
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_03B2F9:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	AND.b #$0C
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
Return03B306:
	RTS

GFXRt:
	PHB
	PHK
	PLB
	JSR.w MechakoopaGFXRt
	PLB
	RTL

MechakoopaXDisp:
	db $F8,$08,$F8,$00,$08,$00,$10,$00

MechakoopaYDisp:
	db $F8,$F8,$08,$00,$F9,$F9,$09,$00
	db $F8,$F8,$08,$00,$F9,$F9,$09,$00
	db $FD,$00,$05,$00,$00,$00,$08,$00

MechakoopaTiles:
	db $40,$42,$60,$51,$40,$42,$60,$0A
	db $40,$42,$60,$0C,$40,$42,$60,$0E
	db $00,$02,$10,$01,$00,$02,$10,$01

MechakoopaProp:
	db $00,$00,$00,$00,$40,$40,$40,$40

MechakoopaTileSize:
	db $02,$00,$00,$02

MechakoopaPalette:
	db $0B,$05

MechakoopaGFXRt:
	LDA.b #$0B
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.w !RAM_SMW_NorSpr0A2_MechaKoopa_StunTimer,x
	BEQ.b CODE_03B37F
	LDY.b #$05
	CMP.b #$05
	BCC.b CODE_03B369
	CMP.b #$FA
	BCC.b CODE_03B36B
CODE_03B369:
	LDY.b #$04
CODE_03B36B:
	TYA
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr0A2_MechaKoopa_StunTimer,x
	CMP.b #$30
	BCS.b CODE_03B37F
	AND.b #$01
	TAY
	LDA.w MechakoopaPalette,y
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
CODE_03B37F:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	TYA
	CLC
	ADC.b #$0C
	TAY
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	ASL
	EOR.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$03
CODE_03B39F:
	PHX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w MechakoopaTileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	PLA
	PHA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w MechakoopaXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w MechakoopaProp,x
	ORA.b !RAM_SMW_Misc_ScratchRAM04
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	PHA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w MechakoopaTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w MechakoopaYDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PLX
	DEY
	DEY
	DEY
	DEY
	DEX
	BPL.b CODE_03B39F
	PLX
	LDY.b #$FF
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	JSR.w KeyGFXRt
	RTS

KeyXDisp:
	db $F9,$0F

KeyProp:
	db $4D,$0D

KeyTiles:
	db $70,$71,$72,$71

KeyGFXRt:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$10
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	AND.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w KeyXDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$00
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w KeyProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w KeyTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDY.b #$00
	LDA.b #$00
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT02_SMW_NorSpr0A3_GreyChainedPlatform_Status08(Address)
namespace SMW_NorSpr0A3_GreyChainedPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Sub:
	JSR.w SMW_SubOffscreen_Bank02_Entry4
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02D653
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LDY.b #$02
	AND.b #$10
	BNE.b CODE_02D63B
	LDY.b #$FE
CODE_02D63B:
	TYA
	LDY.b #$00
	CMP.b #$00
	BPL.b CODE_02D643
	DEY
CODE_02D643:
	CLC
	ADC.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleLo,x
	STA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleLo,x
	TYA
	ADC.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleHi,x
	AND.b #$01
	STA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleHi,x
CODE_02D653:
	LDA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0080
	AND.w #$01FF
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	SEP.b #$30
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_Multiplicand
	LDA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_ChainLength,x
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b CODE_02D6A3
	STA.w !REGISTER_Multiplier
	JSR.w DoNothing6Times
	ASL.w !REGISTER_ProductOrRemainderLo
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
CODE_02D6A3:
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b CODE_02D6AA
	EOR.b #$FF
	INC
CODE_02D6AA:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplicand
	LDA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_ChainLength,x
	LDY.b !RAM_SMW_Misc_ScratchRAM07
	BNE.b CODE_02D6C6
	STA.w !REGISTER_Multiplier
	JSR.w DoNothing6Times
	ASL.w !REGISTER_ProductOrRemainderLo
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
CODE_02D6C6:
	LSR.b !RAM_SMW_Misc_ScratchRAM03
	BCC.b CODE_02D6CD
	EOR.b #$FF
	INC
CODE_02D6CD:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	LDY.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_UnknownClusterSpriteRAM,x					; Note: Seems like a leftover or something. I don't think the value loaded in Y is actually used.
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_02D6E8
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_02D6E8:
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PHP
	PHA
	SEC
	SBC.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_PreviousXPos,x
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	PLA
	STA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_PreviousXPos,x
	PLP
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BPL.b CODE_02D70B
	DEC.b !RAM_SMW_Misc_ScratchRAM01
CODE_02D70B:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr09E_BallNChain
	BEQ.b CODE_02D750
	JSL.l SMW_SolidSpriteBlock_Main
	BCC.b CODE_02D73D
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_PlayerOnPlatformFlag,x
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b CODE_02D74B
	PHX
	JSL.l SMW_PlayerGFXRt_Main
	PLX
	LDA.b #$FF
	STA.b !RAM_SMW_Player_HidePlayerTileFlags
	BRA.b CODE_02D74B

CODE_02D73D:
	LDA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_PlayerOnPlatformFlag,x
	BEQ.b CODE_02D74B
	STZ.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_PlayerOnPlatformFlag,x
	PHX
	JSL.l SMW_PlayerGFXRt_Main
	PLX
CODE_02D74B:
	JSR.w CODE_02D848
	BRA.b CODE_02D757

CODE_02D750:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSR.w CODE_02D813
CODE_02D757:
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.b !RAM_SMW_NorSpr_XPosLo,x
	JSR.w CODE_02D870
	CLC
	ADC.b !RAM_SMW_NorSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b !RAM_SMW_NorSpr_YPosLo,x
	JSR.w CODE_02D870
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_NorSpr_Table7E15C4,x
	BNE.b Return02D806
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$10
	TAY
	PHX
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	TAX
	LDA.b #$E8
	CPX.b #!Define_SMW_SpriteID_NorSpr09E_BallNChain
	BEQ.b CODE_02D7AB
	LDA.b #$A2
CODE_02D7AB:
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDX.b #$01
CODE_02D7AF:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$33
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ROR.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0A
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM01
	ASL
	ROR.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM01
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02D7AF
	PLX
	LDY.b #$02
	LDA.b #$05
	JMP.w SMW_NorSpr070_Pokey_Status08_Bank02SpriteEntry

DoNothing6Times:
BallNChainTiles:
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
Return02D806:
	RTS

DATA_02D807:
	db $F8,$08,$F8,$08

DATA_02D80B:
	db $F8,$F8,$08,$08

DATA_02D80F:
	db $33,$73,$B3,$F3

CODE_02D813:
	JSR.w SMW_GetDrawInfo_Bank02
	PHX
	LDX.b #$03
CODE_02D819:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_02D807,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w DATA_02D80B,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w BallNChainTiles,x				; Note: The Ball N' Chain will get its own tile table in the optimized version of this sprite.
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w DATA_02D80F,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02D819
	PLX
	RTS

DATA_02D840:
	db $00,$F0,$00,$10

WoodPlatformTiles:
	db $A2,$60,$61,$62

CODE_02D848:
	JSR.w SMW_GetDrawInfo_Bank02
	PHX
	LDX.b #$03
CODE_02D84E:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_02D840,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w WoodPlatformTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$33
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02D84E
	PLX
	RTS

CODE_02D870:
	PHP
	BPL.b CODE_02D876
	EOR.b #$FF
	INC
CODE_02D876:
	STA.w !REGISTER_DividendHi
	STZ.w !REGISTER_DividendLo
	LDA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_ChainLength,x
	LSR
	STA.w !REGISTER_Divisor
	JSR.w DoNothing6Times
	LDA.w !REGISTER_QuotientLo
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.w !REGISTER_QuotientHi
	ASL.b !RAM_SMW_Misc_ScratchRAM0E
	ROL
	ASL.b !RAM_SMW_Misc_ScratchRAM0E
	ROL
	ASL.b !RAM_SMW_Misc_ScratchRAM0E
	ROL
	ASL.b !RAM_SMW_Misc_ScratchRAM0E
	ROL
	PLP
	BPL.b Return02D8A0
	EOR.b #$FF
	INC
Return02D8A0:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0A3_GreyChainedPlatform_Status08_Sub, SMW_NorSpr09E_BallNChain_Status08_Sub)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0A7_IggyBall_Status08(Address)
namespace SMW_NorSpr0A7_IggyBall_Status08
%InsertMacroAtXPosition(<Address>)

XFlip:
	db $40,$00

Tiles:
	db $4A,$4C,$4A,$4C

Prop:
	db $35,$35,$F5,$F5

XSpeed:
	db $10,$F0

Main:
	JSR.w SMW_GenericGFXRtDraw1Tile16x16_Sub_Entry1
	LDY.w !RAM_SMW_NorSpr0A7_IggyBall_HorizontalMovementDirection,x
	LDA.w XFlip,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	PHX
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01FAB3
	LDY.w !RAM_SMW_NorSpr0A7_IggyBall_HorizontalMovementDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_X
	JSR.w SMW_UpdateNormalSpritePositionBank01_Sub_Y
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_01FA9A
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01FA9A:
	JSR.w CheckForTiltingPlatformCollision
	BCC.b CODE_01FAA3
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01FAA3:
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$44
	BCC.b Return01FAB3
	CMP.b #$50
	BCS.b Return01FAB3
	JSR.w SMW_NorSprStatus02_Dead_SetNorSprStatus04_Main
Return01FAB3:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0A7_IggyBall_Status08(Address)
namespace SMW_NorSpr0A7_IggyBall_Status08
%InsertMacroAtXPosition(<Address>)

CheckForTiltingPlatformCollision:
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformXOffsetHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$0F
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Sprites_OnTiltingPlatformYOffsetHi
	PHX
	JSL.l SMW_CheckForTiltingPlatformCollision_Main
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0A8_Blargg_Status08(Address)
namespace SMW_NorSpr0A8_Blargg_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return039F56
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

BlarggPtrs:
	dw HidingInLava
	dw EyesEmerging
	dw LookAround
	dw RetractEyes
	dw Attack

Return039F56:
	RTS

HidingInLava:
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	ORA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	BNE.b Return039F8A
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$70
	CMP.b #$E0
	BCS.b Return039F8A
	LDA.b #$E3
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr0A8_Blargg_InitialXPosHi,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr0A8_Blargg_InitialXPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr0A8_Blargg_InitialYPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr0A8_Blargg_InitialYPosLo,x
	JSR.w CODE_039FC0
	INC.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
Return039F8A:
	RTS

EyesEmerging:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$10
	BMI.b CODE_039F9B
	LDA.b #$50
	STA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

CODE_039F9B:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	INC.b !RAM_SMW_NorSpr_YSpeed,x
	RTS

LookAround:
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	BNE.b CODE_039FB1
	INC.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	RTS

CODE_039FB1:
	CMP.b #$20
	BCC.b CODE_039FC0
	AND.b #$1F
	BNE.b Return039FC7
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	BRA.b CODE_039FC4

CODE_039FC0:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
CODE_039FC4:
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return039FC7:
	RTS

RetractEyes:
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	BEQ.b CODE_039FD6
	LDA.b #$20
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	RTS

CODE_039FD6:
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$E2
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w CODE_03A045
	INC.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
	RTS

XSpeed:
	db $10,$F0

Attack:
	STZ.w !RAM_SMW_NorSpr0A8_Blargg_AttackingAnimationFrame,x
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
	BEQ.b CODE_03A002
	DEC
	BNE.b CODE_03A038
	LDA.b #!Define_SMW_Sound1DF9_BlarggRoar
	STA.w !RAM_SMW_IO_SoundCh1
	JSR.w CODE_03A045
CODE_03A002:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$00
	BNE.b CODE_03A012
	INC.b !RAM_SMW_NorSpr_YSpeed,x
CODE_03A012:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$20
	BMI.b CODE_03A038
	JSR.w CODE_03A045
	STZ.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_InitialXPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_InitialXPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_InitialYPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_InitialYPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr0A8_Blargg_PhaseTimer,x
CODE_03A038:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.b #$06
	CMP.b #$0C
	BCS.b Return03A044
	INC.w !RAM_SMW_NorSpr0A8_Blargg_AttackingAnimationFrame,x
Return03A044:
	RTS

CODE_03A045:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.b #$0C
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_SpawnLavaSplash_Main
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	RTS

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.b !RAM_SMW_NorSpr0A8_Blargg_CurrentState,x
	BEQ.b CODE_03A038
	CMP.b #$04
	BEQ.b CODE_03A09D
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$A0
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$CF
	STA.w SMW_OAMBuffer[$40].Prop,y
	RTS

XDisp:
	db $F8,$08,$F8,$08,$18,$08,$F8,$08
	db $F8,$E8

YDisp:
	db $F8,$F8,$08,$08,$08

Tiles:
	db $A2,$A4,$C2,$C4,$A6,$A2,$A4,$E6
	db $C8,$A6

Prop:
	db $45,$05

CODE_03A09D:
	LDA.w !RAM_SMW_NorSpr0A8_Blargg_AttackingAnimationFrame,x
	ASL
	ASL
	ADC.w !RAM_SMW_NorSpr0A8_Blargg_AttackingAnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$04
CODE_03A0AF:
	PHX
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_03A0C3
	TXA
	CLC
	ADC.b #$05
	TAX
CODE_03A0C3:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_03A0AF
	PLX
	LDY.b #$02
	LDA.b #$04
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0A9_Reznor_Status01(Address)
namespace SMW_NorSpr0A9_Reznor_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l Bank03
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0A9_Reznor_Status01(Address)
namespace SMW_NorSpr0A9_Reznor_Status01
%InsertMacroAtXPosition(<Address>)

Bank03:
	CPX.b #!Define_SMW_MaxNormalSpriteSlot-$04
	BNE.b NotAlphaReznor
	LDA.b #$04
	STA.b !RAM_SMW_NorSpr0A9_Reznor_SpriteGFXToLoad,x
	JSL.l SMW_InitializeMode7TilemapsAndPalettes_Main
NotAlphaReznor:
	JSL.l SMW_GetRand_Main
	STA.w !RAM_SMW_NorSpr0A9_Reznor_WaitBeforeShootingFire,x
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0A9_Reznor_Status08(Address)
namespace SMW_NorSpr0A9_Reznor_Status08
%InsertMacroAtXPosition(<Address>)

ReznorStartPosLo:
	db $00,$80,$00,$80

ReznorStartPosHi:
	db $00,$00,$01,$01

ReboundSpeedX:
	db $20,$E0

Bank03:
	INC.w !RAM_SMW_Flag_ReznorRoomOAMIndexTimer
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b ReznorNotLocked
	JMP.w DrawReznor

ReznorNotLocked:
	CPX.b #!Define_SMW_MaxNormalSpriteSlot-$04
	BNE.b CODE_039910
	PHX
	JSL.l BreakReznorBridge
	LDA.b #$80
	STA.b !RAM_SMW_Mirror_M7CenterXPosLo
	STZ.b !RAM_SMW_Mirror_M7CenterXPosHi
	LDX.b #$00
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_XPosLo
	STZ.w !RAM_SMW_NorSpr_XPosHi
	LDA.b #$B2
	STA.b !RAM_SMW_NorSpr_YPosLo
	STZ.w !RAM_SMW_NorSpr_YPosHi
	LDA.b #$2C
	STA.w !RAM_SMW_Misc_Mode7TilemapIndex
	JSL.l SMW_UpdateMode7SpriteAnimations_Main
	PLX
	REP.b #$20
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.w #$0001
	AND.w #$01FF
	STA.b !RAM_SMW_Misc_M7RotationLo
	SEP.b #$20
	CPX.b #!Define_SMW_MaxNormalSpriteSlot-$04
	BNE.b CODE_039910
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_WaitBeforeEndingLevel,x
	BEQ.b ReznorNoLevelEnd
	DEC
	BNE.b CODE_039910
	DEC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
	LDA.b #!Define_SMW_LevelMusic_PassedBoss
	STA.w !RAM_SMW_IO_MusicCh1
	RTS

ReznorNoLevelEnd:
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$04)
	CLC
	ADC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$05)
	ADC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$06)
	ADC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$07)
	CMP.b #$04
	BNE.b CODE_039910
	LDA.b #$90
	STA.w !RAM_SMW_NorSpr0A9_Reznor_WaitBeforeEndingLevel,x
	JSL.l SMW_DespawnNonBossSprites_Main
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
	LDA.b #$00
CODE_03990A:
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	DEY
	BPL.b CODE_03990A
CODE_039910:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_03991A
	JMP.w DrawReznor

CODE_03991A:
	TXA
	AND.b #$03
	TAY
	LDA.b !RAM_SMW_Misc_M7RotationLo
	CLC
	ADC.w ReznorStartPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_M7RotationHi
	ADC.w ReznorStartPosHi,y
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	EOR.w #$01FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0080
	AND.w #$01FF
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	SEP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_Multiplicand
	LDA.b #$38
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b CODE_039978
	STA.w !REGISTER_Multiplier
	NOP #4
	ASL.w !REGISTER_ProductOrRemainderLo
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
CODE_039978:
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b CODE_03997F
	EOR.b #$FF
	INC
CODE_03997F:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplicand
	LDA.b #$38
	LDY.b !RAM_SMW_Misc_ScratchRAM07
	BNE.b CODE_03999B
	STA.w !REGISTER_Multiplier
	NOP #4
	ASL.w !REGISTER_ProductOrRemainderLo
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
CODE_03999B:
	LSR.b !RAM_SMW_Misc_ScratchRAM03
	BCC.b CODE_0399A2
	EOR.b #$FF
	INC
CODE_0399A2:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_0399B2
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0399B2:
	CLC
	ADC.b !RAM_SMW_Mirror_M7CenterXPosLo
	PHP
	CLC
	ADC.b #$40
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_M7CenterXPosHi
	ADC.b #$00
	PLP
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	SEC
	SBC.b !RAM_SMW_NorSpr_XPosLo,x
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BPL.b CODE_0399D7
	DEC.b !RAM_SMW_Misc_ScratchRAM01
CODE_0399D7:
	CLC
	ADC.b !RAM_SMW_Mirror_M7CenterYPosLo
	PHP
	ADC.b #$20
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_M7CenterYPosHi
	ADC.b #$00
	PLP
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag,x
	BEQ.b ReznorAlive
	JSL.l SMW_SolidSpriteBlock_Main
	JMP.w DrawReznor

ReznorAlive:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$00
	ORA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b NoSetRznrFireTime
	INC.w !RAM_SMW_NorSpr0A9_Reznor_WaitBeforeShootingFire,x
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_WaitBeforeShootingFire,x
	CMP.b #$00
	BNE.b NoSetRznrFireTime
	STZ.w !RAM_SMW_NorSpr0A9_Reznor_WaitBeforeShootingFire,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr0A9_Reznor_FiringAnimationTimer,x
NoSetRznrFireTime:
	TXA
	ASL
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	ORA.w !RAM_SMW_NorSpr0A9_Reznor_FiringAnimationTimer,x
	ORA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b NoSetRenrTurnTime
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	PLA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b NoSetRenrTurnTime
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
NoSetRenrTurnTime:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b DrawReznor
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b DrawReznor
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b !RAM_SMW_NorSpr_YPosLo,x
	CMP.b #$ED
	BMI.b HitReznor
	CMP.b #$F2
	BMI.b HitPlatSide
	LDA.b !RAM_SMW_Player_YSpeed
	BPL.b HitPlatSide
	LDA.b #!Define_SMW_NorSpr_1662Prop_SpriteClipping29
	STA.w !RAM_SMW_NorSpr_PropertyBits1662,x
	LDA.b #$0F
	STA.w !RAM_SMW_NorSpr0A9_Reznor_PlatformBounceTimer,x
	LDA.b #$10
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	BRA.b DrawReznor

HitPlatSide:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.w ReboundSpeedX,y
	STA.b !RAM_SMW_Player_XSpeed
	BRA.b DrawReznor

HitReznor:
	JSL.l SMW_DamagePlayer_Hurt
DrawReznor:
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b ReznorNoTurning
	CPY.b #$05
	BCC.b ReznorTurning
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
ReznorTurning:
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
ReznorNoTurning:
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_FiringAnimationTimer,x
	BEQ.b ReznorNoFiring
	CMP.b #$20
	BNE.b ReznorFiring
	JSR.w ReznorFireRt
ReznorFiring:
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
ReznorNoFiring:
	JSR.w GFXRt
	PLA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag,x
	BNE.b Return039AF7
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_PlatformBounceTimer,x
	CMP.b #$0C
	BNE.b Return039AF7
	LDA.b #!Define_SMW_Sound1DF9_KickShell
	STA.w !RAM_SMW_IO_SoundCh1
	STZ.w !RAM_SMW_NorSpr0A9_Reznor_FiringAnimationTimer,x
	INC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag,x
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return039AF7
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	PLX
Return039AF7:
	RTS

ReznorFireRt:
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_039AFA:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b FoundRznrFireSlot
	DEY
	BPL.b CODE_039AFA
	RTS

FoundRznrFireSlot:
	LDA.b #!Define_SMW_Sound1DF9_MagicShoot
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #!Define_SMW_SpriteID_ExtSpr02_ReznorFireball
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	SEC
	SBC.b #$08
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.b #$14
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$10
	JSR.w SMW_AimTowardsPlayer_Bank03
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ExtSpr_YSpeed,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_ExtSpr_XSpeed,y
	RTS

XDisp:
	db $00,$F0,$00,$F0,$F0,$00,$F0,$00

YDisp:
	db $E0,$E0,$F0,$F0

Tiles:
	db $40,$42,$60,$62,$44,$46,$64,$66
	db $28,$28,$48,$48

Prop:
	db $3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F
	db $7F,$3F,$7F,$3F

GFXRt:
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag,x
	BNE.b DrawReznorPlats
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$03
RznrGfxLoopStart:
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$08
	BCS.b CODE_039B99
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
CODE_039B99:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	CPX.b #$08
	BCS.b NoReznorGfxFlip
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b NoReznorGfxFlip
	EOR.b #$40
NoReznorGfxFlip:
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b RznrGfxLoopStart
	PLX
	LDY.b #$02
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus02_Dead
	BEQ.b Return039BE2
DrawReznorPlats:
	JSR.w PlatformGFXRt
Return039BE2:
	RTS

PlatformYDisp:
	db $00,$03,$04,$05,$05,$04,$03,$00

PlatformGFXRt:
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$10
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_PlatformBounceTimer,x
	LSR
	PHY
	TAY
	LDA.w PlatformYDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PLY
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$41].XDisp,y
	SEC
	SBC.b #$10
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	LDA.b #$4E
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$41].Tile,y
	LDA.b #$33
	STA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$40
	STA.w SMW_OAMBuffer[$41].Prop,y
	LDY.b #$02
	LDA.b #$01
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr0A9_Reznor_Status08(Address)
namespace SMW_NorSpr0A9_Reznor_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03D700:
	db $B0,$A0,$90,$80,$70,$60,$50,$40
	db $30,$20,$10,$00

BreakReznorBridge:
	PHX
	LDA.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$07)
	CLC
	ADC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$06)
	ADC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$05)
	ADC.w !RAM_SMW_NorSpr0A9_Reznor_IsDeadFlag+(!Define_SMW_MaxNormalSpriteSlot-$04)
	CMP.b #$02
	BCC.b CODE_03D757
	LDX.w !RAM_SMW_Counter_NumberOfBrokenReznorBridgeTiles
	CPX.b #$0C
	BCS.b CODE_03D757
	LDA.l DATA_03D700,x
	STA.b !RAM_SMW_Blocks_XPosLo
	STZ.b !RAM_SMW_Blocks_XPosHi
	LDA.b #$B0
	STA.b !RAM_SMW_Blocks_YPosLo
	STZ.b !RAM_SMW_Blocks_YPosHi
	LDA.w !RAM_SMW_Timer_ReznorBridgeBreaking
	BEQ.b CODE_03D74A
	CMP.b #$3C
	BNE.b CODE_03D757
	JSR.w CODE_03D77F
	JSR.w CODE_03D759
	JSR.w CODE_03D77F
	INC.w !RAM_SMW_Counter_NumberOfBrokenReznorBridgeTiles
	BRA.b CODE_03D757

CODE_03D74A:
	JSR.w CODE_03D766
	LDA.b #$40
	STA.w !RAM_SMW_Timer_ReznorBridgeBreaking
	LDA.b #!Define_SMW_Sound1DFC_BreakBlock
	STA.w !RAM_SMW_IO_SoundCh3
CODE_03D757:
	PLX
	RTL

CODE_03D759:
	REP.b #$20
	LDA.w #$0170
	SEC
	SBC.b !RAM_SMW_Blocks_XPosLo
	STA.b !RAM_SMW_Blocks_XPosLo
	SEP.b #$20
	RTS

CODE_03D766:
	JSR.w CODE_03D76C
	JSR.w CODE_03D759
CODE_03D76C:
	REP.b #$20
	LDA.b !RAM_SMW_Blocks_XPosLo
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.w #$0100
	SEP.b #$20
	BCS.b Return03D77E
	JSL.l SMW_SpawnSmokePuff_Main
Return03D77E:
	RTS

CODE_03D77F:
	LDA.b !RAM_SMW_Blocks_XPosLo
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	ORA.b !RAM_SMW_Blocks_YPosLo
	REP.b #$20
	AND.w #$00FF
	LDX.b !RAM_SMW_Blocks_XPosHi
	BEQ.b CODE_03D798
	CLC
	ADC.w #$01B0
	LDX.b #$04
CODE_03D798:
	STX.b !RAM_SMW_Misc_ScratchRAM00
	REP.b #$10
	TAX
	SEP.b #$20
	LDA.b #$25
	STA.l !RAM_SMW_Blocks_Map16TableLo,x
	LDA.b #$00
	STA.l !RAM_SMW_Blocks_Map16TableHi,x
	REP.b #$20
	LDA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	TAX
	LDA.w #$C05A
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.l SMW_StripeImageUploadTable[$00].LowByte,x
	ORA.w #$2000
	STA.l SMW_StripeImageUploadTable[$03].LowByte,x
	LDA.w #$0240
	STA.l SMW_StripeImageUploadTable[$01].LowByte,x
	STA.l SMW_StripeImageUploadTable[$04].LowByte,x
	LDA.w #$38FC
	STA.l SMW_StripeImageUploadTable[$02].LowByte,x
	STA.l SMW_StripeImageUploadTable[$05].LowByte,x
	LDA.w #$00FF
	STA.l SMW_StripeImageUploadTable[$06].LowByte,x
	TXA
	CLC
	ADC.w #$000C
	STA.l !RAM_SMW_Misc_StripeImageUploadIndexLo
	SEP.b #$30
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0AA_Fishbone_Status01(Address)
namespace SMW_NorSpr0AA_Fishbone_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JSL.l SMW_GetRand_Main
	AND.b #$1F
	STA.w !RAM_SMW_NorSpr0AA_Fishbone_PhaseTimer,x
	JMP.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0AA_Fishbone_Status08(Address)
namespace SMW_NorSpr0AA_Fishbone_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03972A
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	TXA
	ASL
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$7F
	BNE.b CODE_039720
	JSL.l SMW_GetRand_Main
	AND.b #$01
	BNE.b CODE_039720
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr0AA_Fishbone_BlinkAnimationTimer,x
CODE_039720:
	LDA.b !RAM_SMW_NorSpr0AA_Fishbone_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

FishbonePtrs:
	dw Boosting
	dw SlowingDown

Return03972A:
	RTS

MaxXSpeed:
	db $10,$F0

XAcceleration:
	db $01,$FF

Boosting:
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	NOP										;Optimization: It seems that Nintendo may have originally had the fishbone animate slower.
	LSR
	AND.b #$01
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr0AA_Fishbone_PhaseTimer,x
	BEQ.b CODE_039756
	AND.b #$01
	BNE.b Return039755
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BEQ.b Return039755
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
Return039755:
	RTS

CODE_039756:
	INC.b !RAM_SMW_NorSpr0AA_Fishbone_CurrentState,x
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr0AA_Fishbone_PhaseTimer,x
	RTS

SlowingDown:
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr0AA_Fishbone_PhaseTimer,x
	BEQ.b CODE_039776
	AND.b #$03
	BNE.b Return039775
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b Return039775
	BPL.b CODE_039773
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	RTS

CODE_039773:
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
Return039775:
	RTS

CODE_039776:
	STZ.b !RAM_SMW_NorSpr0AA_Fishbone_CurrentState,x
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr0AA_Fishbone_PhaseTimer,x
	RTS

XDisp:
	db $F8,$F8,$10,$10

YDisp:
	db $00,$08

Prop:
	db $4D,$CD,$0D,$8D

TailTiles:
	db $A3,$A3,$B3,$B3

GFXRt:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr0AA_Fishbone_BlinkAnimationTimer,x
	CMP.b #$01
	LDA.b #$A6
	BCC.b CODE_03979E
	LDA.b #$A8
CODE_03979E:
	STA.w SMW_OAMBuffer[$40].Tile,y
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_OAMIndex,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_NorSpr_OAMIndex,x
	TAY
	PHX
	LDX.b #$01
CODE_0397BD:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	PHA
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w TailTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_0397BD
	PLX
	LDY.b #$00
	LDA.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0AB_Rex_Status08(Address)
namespace SMW_NorSpr0AB_Rex_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $08,$F8,$10,$F0

Bank03:
;$039517
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return
	LDA.w !RAM_SMW_NorSpr0AB_Rex_ShowSquishedStateTimer,x
	BEQ.b RexAlive
	STA.w !RAM_SMW_NorSpr0AB_Rex_DisableCapeAndBounceSpriteContactTimer,x
	DEC
	BNE.b Return
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return:
	RTS

RexAlive:
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	INC.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LDA.w !RAM_SMW_NorSpr_AnimationFrameCounter,x
	LSR
	LSR
	LDY.b !RAM_SMW_NorSpr0AB_Rex_StompCounter,x
	BEQ.b CODE_03954A
	AND.b #$01
	CLC
	ADC.b #$03
	BRA.b CODE_03954D

CODE_03954A:
	LSR
	AND.b #$01
CODE_03954D:
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b RexInAir
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr0AB_Rex_StompCounter,x
	BEQ.b RexNoAdjustSpeed
	INY
	INY
RexNoAdjustSpeed:
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
RexInAir:
	LDA.w !RAM_SMW_NorSpr0AB_Rex_WaitAfterFirstStomp,x
	BNE.b RexHalfSmushed
	JSL.l SMW_HandleNormalSpriteGravity_Main
RexHalfSmushed:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_039581
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_039581:
	JSL.l SMW_CheckForNormalSpriteToNormalSpriteCollision_Main
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b NoRexContact
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b RexStarKill
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	BNE.b NoRexContact
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_Player_YSpeed
	CMP.b #$10
	BMI.b RexWins
	JSR.w RexPoints
	JSL.l SMW_BoostMarioSpeed_Main
	JSL.l SMW_SpawnContactEffectFromAbove_Main
	LDA.w !RAM_SMW_Player_SpinJumpFlag
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b RexSpinKill
	INC.b !RAM_SMW_NorSpr0AB_Rex_StompCounter,x
	LDA.b !RAM_SMW_NorSpr0AB_Rex_StompCounter,x
	CMP.b #$02
	BNE.b SmushRex
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr0AB_Rex_ShowSquishedStateTimer,x
	RTS

SmushRex:
	LDA.b #$0C
	STA.w !RAM_SMW_NorSpr0AB_Rex_WaitAfterFirstStomp,x
	STZ.w !RAM_SMW_NorSpr_PropertyBits1662,x
	RTS

RexWins:
	LDA.w !RAM_SMW_Timer_PlayerHurt
	ORA.w !RAM_SMW_Player_RidingYoshiFlag
	BNE.b NoRexContact
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	JSL.l SMW_DamagePlayer_Hurt
NoRexContact:
	RTS

RexSpinKill:
	LDA.b #!Define_SMW_NorSprStatus04_SpinJumpKill
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E1540,x
	JSL.l SMW_SpawnSpinJumpStars_Main
	LDA.b #!Define_SMW_Sound1DF9_SpinJumpKill
	STA.w !RAM_SMW_IO_SoundCh1
	RTS

RexStarKill:
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.w RexKilledSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	INC.w !RAM_SMW_Player_StarKillCount
	LDA.w !RAM_SMW_Player_StarKillCount
	CMP.b #$08
	BCC.b ADDR_039612
	LDA.b #$08
	STA.w !RAM_SMW_Player_StarKillCount
ADDR_039612:
	JSL.l SMW_GivePoints_Main
	LDY.w !RAM_SMW_Player_StarKillCount
	CPY.b #$08
	BCS.b Return039623
	LDA.w StompSounds-$01,y
	STA.w !RAM_SMW_IO_SoundCh1
Return039623:
	RTS

Return039624:
	RTS ; unused

RexKilledSpeed:
	db $F0,$10

Return039627:
	RTS ; unused

RexPoints:
	PHY
	LDA.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	CLC
	ADC.w !RAM_SMW_NorSpr_Table7E1626,x
	INC.w !RAM_SMW_Counter_ConsecutiveEnemiesStomped
	TAY
	INY
	CPY.b #$08
	BCS.b CODE_03963F
	LDA.w StompSounds-$01,y
	STA.w !RAM_SMW_IO_SoundCh1
CODE_03963F:
	TYA
	CMP.b #$08
	BCC.b CODE_039646
	LDA.b #$08
CODE_039646:
	JSL.l SMW_GivePoints_Main
	PLY
	RTS

XDisp:
	db $FC,$00,$FC,$00,$FE,$00,$00,$00
	db $00,$00,$00,$08,$04,$00,$04,$00
	db $02,$00,$00,$00,$00,$00,$08,$00

YDisp:
	db $F1,$00,$F0,$00,$F8,$00,$00,$00
	db $00,$00,$08,$08

Tiles:
	db $8A,$AA,$8A,$AC,$8A,$AA,$8C,$8C
	db $A8,$A8,$A2,$B2

Prop:
	db $47,$07

GFXRt:
	LDA.w !RAM_SMW_NorSpr0AB_Rex_ShowSquishedStateTimer,x
	BEQ.b Alive
	LDA.b #$05
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
Alive:
	LDA.w !RAM_SMW_NorSpr0AB_Rex_WaitAfterFirstStomp,x
	BEQ.b NotHalfSmushed
	LDA.b #$02
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
NotHalfSmushed:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$01
Loop:
	PHX
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	PHA
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b FaceLeft
	CLC
	ADC.b #$0C
FaceLeft:
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	CPX.b #$0A
	TAX
	LDA.b #$00
	BCS.b Set8x8Tile
	LDA.b #$02
Set8x8Tile:
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,x
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
	PLX
	LDY.b #$FF
	LDA.b #$01
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr0AB_Rex_Status08(Address)
namespace SMW_NorSpr0AB_Rex_Status08
%InsertMacroAtXPosition(<Address>)

StompSounds:
	%INLINEDATATABLE_SMW_StompSoundTable()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0AC_DownFirstWoodenSpike_Status01(Address)
namespace SMW_NorSpr0AC_DownFirstWoodenSpike_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$40
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0AC_DownFirstWoodenSpike_Status08(Address)
namespace SMW_NorSpr0AC_DownFirstWoodenSpike_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return039440
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSR.w CODE_039488
	LDA.b !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_CurrentState,x
	AND.b #$03
	JSL.l SMW_ExecutePtr_Absolute

DownFirstWoodenSpikePtrs:
	dw Retracting
	dw WaitingToExtend
	dw Extending
	dw WaitingToRetract

Return039440:
	RTS

Extending:
	LDA.w !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_WaitBeforeNextPhase,x
	BEQ.b CODE_03944A
	LDA.b #$20
	BRA.b CODE_039475

CODE_03944A:
	LDA.b #$30
	BRA.b SetTimerNextState

WaitingToExtend:
	LDA.w !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_WaitBeforeNextPhase,x
	BNE.b Return039457
	LDA.b #$18
	BRA.b SetTimerNextState

Return039457:
	RTS

Retracting:
	LDA.w !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_WaitBeforeNextPhase,x
	BEQ.b CODE_039463
	LDA.b #$F0
	JSR.w CODE_039475
	RTS

CODE_039463:
	LDA.b #$30
SetTimerNextState:
	STA.w !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_WaitBeforeNextPhase,x
	INC.b !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_CurrentState,x
	RTS

WaitingToRetract:
	LDA.w !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_WaitBeforeNextPhase,x
	BNE.b Return039474
	LDA.b #$2F
	BRA.b SetTimerNextState

Return039474:
	RTS

CODE_039475:
	LDY.w !RAM_SMW_NorSpr0AC_DownFirstWoodenSpike_InitialMovementDirection,x
	BEQ.b CODE_03947D
	EOR.b #$FF
	INC
CODE_03947D:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	RTS

DATA_039484:
	db $01,$FF

DATA_039486:
	db $00,$FF

CODE_039488:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return0394B0
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$04
	CMP.b #$08
	BCS.b CODE_03949F
	JSL.l SMW_DamagePlayer_Hurt
	RTS

CODE_03949F:
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.w DATA_039484,y
	STA.b !RAM_SMW_Player_XPosLo
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.w DATA_039486,y
	STA.b !RAM_SMW_Player_XPosHi
	STZ.b !RAM_SMW_Player_XSpeed
Return0394B0:
	RTS

YDisp:
	db $00,$10,$20,$30,$40
	db $40,$30,$20,$10,$00

Tiles:
	db $6A,$6A,$6A,$6A,$4A
	db $6A,$6A,$6A,$6A,$4A

Prop:
	db $81,$81,$81,$81,$81
	db $01,$01,$01,$01,$01

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	STZ.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0AD_UpDownFirstWoodenSpike
	BNE.b CODE_0394DE
	LDA.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0394DE:
	PHX
	LDX.b #$04
Loop:
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	PLX
	DEX
	BPL.b Loop
	PLX
	LDY.b #$02
	LDA.b #$04
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0AC_DownFirstWoodenSpike_Status08_Bank03, SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status08_Bank03)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status01(Address)
namespace SMW_NorSpr0AD_UpDownFirstWoodenSpike_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	JMP.w SMW_NorSpr01E_Lakitu_Status01_SetLakituType
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0AE_FishinBoo_Status08(Address)
namespace SMW_NorSpr0AE_FishinBoo_Status08
%InsertMacroAtXPosition(<Address>)

XAcceleration:
	db $01,$FF

MaxXSpeed:
	db $20,$E0

YAcceleration:
	db $01,$FF

MaxYSpeed:
	db $10,$F0

Bank03:
;$039065
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return0390EA
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BEQ.b CODE_039086
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
	CMP.b #$10
	BNE.b CODE_039086
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_039086:
	TXA
	ASL
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$3F
	ORA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b CODE_039099
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_039099:
	LDA.w !RAM_SMW_Timer_DisappearingSprite
	BEQ.b CODE_0390A2
	TYA
	EOR.b #$01
	TAY
CODE_0390A2:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BEQ.b CODE_0390AF
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0390AF:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_0390C9
	LDA.b !RAM_SMW_NorSpr0AE_FishinBoo_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_0390C9
	INC.b !RAM_SMW_NorSpr0AE_FishinBoo_VerticalDirection,x
CODE_0390C9:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	LDY.w !RAM_SMW_Timer_DisappearingSprite
	BNE.b CODE_0390DC
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	ASL
	ASL
	ASL
	CLC
	ADC.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0390DC:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	PLA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	JSR.w CODE_0390F3
Return0390EA:
	RTS

DATA_0390EB:
	db $1A,$14,$EE,$F8

DATA_0390EF:
	db $00,$00,$FF,$FF

CODE_0390F3:
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	ADC.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAY
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.w DATA_0390EB,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	ADC.w DATA_0390EF,y
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b #$47
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return03912D
	JSL.l SMW_DamagePlayer_Hurt
Return03912D:
	RTS

XDisp:
	db $FB,$05,$00,$F2,$FD,$03,$EA,$EA
	db $EA,$EA

	db $FB,$05,$00,$FA,$FD,$03,$F2,$F2
	db $F2,$F2

	db $FB,$05,$00,$0E,$03,$FD,$16,$16
	db $16,$16
	
	db $FB,$05,$00,$06,$03,$FD,$0E,$0E
	db $0E,$0E

YDisp:
	db $0B,$0B,$00,$03,$0F,$0F,$13,$23
	db $33,$43

Tiles1:
	db $60,$60,$64,$8A,$60,$60,$AC,$AC
	db $AC,$CE

Prop:
	db $04,$04,$0D,$09,$04,$04,$0D,$0D
	db $0D,$07

Tiles2:
	db $CC,$CE,$CC,$CE

DATA_039178:
	db $00,$00,$40,$40

DATA_03917C:
	db $00,$40,$C0,$80

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	PHY
	LDX.b #$09
CODE_039191:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STZ.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w Tiles1,x
	CPX.b #$09
	BNE.b CODE_0391B4
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	PHX
	AND.b #$03
	TAX
	LDA.w DATA_039178,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w Tiles2,x
	PLX
CODE_0391B4:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CMP.b #$01
	LDA.w Prop,x
	EOR.b !RAM_SMW_Misc_ScratchRAM03
	ORA.b !RAM_SMW_Sprites_TilePriority
	BCS.b CODE_0391C6
	EOR.b #$40
CODE_0391C6:
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BEQ.b CODE_0391D3
	TXA
	CLC
	ADC.b #$0A
	TAX
CODE_0391D3:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0391DC
	TXA
	CLC
	ADC.b #$14
	TAX
CODE_0391DC:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_039191
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$03
	TAX
	PLY
	LDA.w DATA_03917C,x
	EOR.w SMW_OAMBuffer[$44].Prop,y
	STA.w SMW_OAMBuffer[$44].Prop,y
	STA.w SMW_OAMBuffer[$49].Prop,y
	EOR.b #$C0
	STA.w SMW_OAMBuffer[$45].Prop,y
	STA.w SMW_OAMBuffer[$48].Prop,y
	PLX
	LDY.b #$02
	LDA.b #$09
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_ReflectingEnemy_Status01(Address)
namespace SMW_NorSprXXX_ReflectingEnemy_Status01
%InsertMacroAtXPosition(<Address>)

InitYSpeed:
	db $10,$F0

Main:
;$01834E
	JSR.w SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
	LDA.w InitYSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$F0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_ReflectingEnemy_Status01_Main, SMW_NorSpr0B0_ReflectingBooBuddies_Status01_Main)
	%SetDuplicateOrNullPointer(SMW_NorSprXXX_ReflectingEnemy_Status01_Main, SMW_NorSpr0B6_ReflectingPodoboo_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSprXXX_ReflectingEnemy_Status08(Address)
namespace SMW_NorSprXXX_ReflectingEnemy_Status08
%InsertMacroAtXPosition(<Address>)

BooStreamTiles:
	db $88,$8C,$8E,$A8,$AA,$AE,$88,$8C

ReflectingPodobooEntry:
	JSR.w ReflectingPodobooGFXRt
	BRA.b CODE_038FA4

ReflectingBooBuddiesEntry:
	LDA.b #$00
	LDY.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_038F81
	INC
CODE_038F81:
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LSR
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TXA
	AND.b #$03
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	PHX
	TAX
	LDA.w BooStreamTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
CODE_038FA4:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return038FF1
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038FF1
	TXA
	EOR.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	ORA.w !RAM_SMW_NorSpr_YOffscreenFlag,x
	BNE.b CODE_038FC2
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0B0_ReflectingBooBuddies
	BNE.b CODE_038FC2
	JSR.w SpawnTrailingBoo
CODE_038FC2:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_038FDC
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_038FDC:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$0C
	BEQ.b CODE_038FEA
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_038FEA:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	JSR.w SMW_SubOffscreen_Bank03_Entry1
Return038FF1:
	RTS

ReflectingPodobooGFXRt:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LDA.b #$04
	BCC.b +
	ASL
+:
	LDY.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b +
	EOR.b #$40
+:
	LDY.b !RAM_SMW_NorSpr_YSpeed,x
	BMI.b +
	EOR.b #$80
+:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$AC
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$31
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].Prop,y
	RTS

SpawnTrailingBoo:
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_039022:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_039037
	DEY
	BPL.b CODE_039022
	DEC.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
	BPL.b ADDR_039034
	LDA.b #!Define_SMW_MaxMinorExtendedSpriteSlot
	STA.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
ADDR_039034:
	LDY.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_039037:
	LDA.b #!Define_SMW_SpriteID_MExtSpr0A_BooStream
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.w !RAM_SMW_MExtSpr_YPosHi,y
	LDA.b #$30
	STA.w !RAM_SMW_MExtSpr_Timer,y
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.w !RAM_SMW_MExtSpr_XSpeed,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0B1_CreateEatBlock_Status01(Address)
namespace SMW_NorSpr0B1_CreateEatBlock_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$FF
	STA.w !RAM_SMW_Flag_ActiveCreateEatBlock
	BRA.b SMW_NorSpr01E_Lakitu_Status01_SetLakituType
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0B1_CreateEatBlock_Status08(Address)
namespace SMW_NorSpr0B1_CreateEatBlock_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $10,$F0,$00,$00,$00

YSpeed:
	db $00,$00,$10,$F0,$00

DATA_039279:
	db $00,$00,$01,$00,$02,$00,$00,$00
	db $03,$00,$00

Bank03:
;$039284
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	DEC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b #$2E
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$3F
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDY.b #$02
	LDA.b #$00
	JSL.l SMW_FinishOAMWrite_Main
	LDY.b #$04
	LDA.w !RAM_SMW_Flag_ActiveCreateEatBlock
	CMP.b #$FF
	BEQ.b CODE_0392C0
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_0392BD
	LDA.b #!Define_SMW_Sound1DFA_Grinder
	STA.w !RAM_SMW_IO_SoundCh2
CODE_0392BD:
	LDY.w !RAM_SMW_NorSpr0B1_CreateEatBlock_MovementDirection,x
CODE_0392C0:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03932B
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w YSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	STZ.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
	LDA.w !RAM_SMW_Flag_ActiveCreateEatBlock
	CMP.b #$FF
	BEQ.b Return03932B
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	ORA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$0F
	BNE.b Return03932B
	LDA.w !RAM_SMW_NorSpr0B1_CreateEatBlock_BlockType,x
	BNE.b CODE_03932C
	DEC.w !RAM_SMW_NorSpr0B1_CreateEatBlock_TilesRemainingInCurrentDirection,x
	BMI.b CODE_0392F8
	BNE.b CODE_03931F
CODE_0392F8:
	LDY.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	CMP.b #!Define_SMW_Overworld_MainMap+$01
	LDY.w !RAM_SMW_NorSpr0B1_CreateEatBlock_CreatePathIndex,x
	INC.w !RAM_SMW_NorSpr0B1_CreateEatBlock_CreatePathIndex,x
	LDA.w SubmapMovementData,y
	BCS.b CODE_03930E
	LDA.w MainMapMovementData,y
CODE_03930E:
	STA.w !RAM_SMW_NorSpr0B1_CreateEatBlock_CurrentMovementData,x
	PHA
	LSR
	LSR
	LSR
	LSR
	STA.w !RAM_SMW_NorSpr0B1_CreateEatBlock_TilesRemainingInCurrentDirection,x
	PLA
	AND.b #$03
	STA.w !RAM_SMW_NorSpr0B1_CreateEatBlock_MovementDirection,x
CODE_03931F:
	LDA.b #$0D
	JSR.w GenTileFromSpr1
	LDA.w !RAM_SMW_NorSpr0B1_CreateEatBlock_CurrentMovementData,x
	CMP.b #$FF
	BEQ.b CODE_039387
Return03932B:
	RTS

CODE_03932C:
	LDA.b #$02
	JSR.w GenTileFromSpr1
	LDA.b #$01
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	PHA
	LDA.b #$FF
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	PHA
	SEC
	SBC.b #$01
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	PHA
	SEC
	SBC.b #$01
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	PLA
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	PLA
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	PLA
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PLA
	ORA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	BEQ.b CODE_039387
	TAY
	LDA.w DATA_039279,y
	STA.w !RAM_SMW_NorSpr0B1_CreateEatBlock_MovementDirection,x
	RTS

CODE_039387:
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

GenTileFromSpr1:
	STA.b !RAM_SMW_Blocks_Map16ToGenerate
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	JSL.l SMW_GenerateTile_Main
	RTS

SubmapMovementData:
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0020) : %SMW_CreateEatBlockPath(DOWN, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(DOWN, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(DOWN, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(DOWN, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(DOWN, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(DOWN, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(DOWN, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $000D) : %SMW_CreateEatBlockPath(UP, $000C)

	%SMW_CreateEatBlockPath(LEFT, $0011) : %SMW_CreateEatBlockPath(DOWN, $0002)
	%SMW_CreateEatBlockPath(LEFT, $0023) : %SMW_CreateEatBlockPath(UP, $0004)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0033) : %SMW_CreateEatBlockPath(DOWN, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0006) : %SMW_CreateEatBlockPath(DOWN, $0003)
	%SMW_CreateEatBlockPath(LEFT, $0007) : %SMW_CreateEatBlockPath(DOWN, $0003)

	%SMW_CreateEatBlockPath(RIGHT, $0006) : %SMW_CreateEatBlockPath(DOWN, $0003)
	%SMW_CreateEatBlockPath(LEFT, $0006) : %SMW_CreateEatBlockPath(DOWN, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0007) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0003)

	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0010) : %SMW_CreateEatBlockPath(DOWN, $0014)

	%SMW_CreateEatBlockPath(END, $0000)

MainMapMovementData:
	%SMW_CreateEatBlockPath(RIGHT, $0008) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0006) : %SMW_CreateEatBlockPath(UP, $0002)
	%SMW_CreateEatBlockPath(RIGHT, $0002) : %SMW_CreateEatBlockPath(UP, $0002)
	%SMW_CreateEatBlockPath(RIGHT, $000B) : %SMW_CreateEatBlockPath(DOWN, $0002)
	%SMW_CreateEatBlockPath(LEFT, $000A) : %SMW_CreateEatBlockPath(DOWN, $0002)

	%SMW_CreateEatBlockPath(RIGHT, $000A) : %SMW_CreateEatBlockPath(DOWN, $0002)
	%SMW_CreateEatBlockPath(LEFT, $000A) : %SMW_CreateEatBlockPath(DOWN, $0002)
	%SMW_CreateEatBlockPath(RIGHT, $000C) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)

	%SMW_CreateEatBlockPath(RIGHT, $0001) : %SMW_CreateEatBlockPath(UP, $0001)
	%SMW_CreateEatBlockPath(RIGHT, $002D) : %SMW_CreateEatBlockPath(DOWN, $0005)
	%SMW_CreateEatBlockPath(RIGHT, $0005) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0005) : %SMW_CreateEatBlockPath(DOWN, $0003)

	%SMW_CreateEatBlockPath(RIGHT, $0005) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0005) : %SMW_CreateEatBlockPath(DOWN, $0002)
	%SMW_CreateEatBlockPath(RIGHT, $0005) : %SMW_CreateEatBlockPath(UP, $0003)
	%SMW_CreateEatBlockPath(RIGHT, $0014) : %SMW_CreateEatBlockPath(DOWN, $0008)

	%SMW_CreateEatBlockPath(END, $0000)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0B2_FallingSpike_Status08(Address)
namespace SMW_NorSpr0B2_FallingSpike_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$E0
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	DEC
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_NorSpr0B2_FallingSpike_ShakingTimer,x
	BEQ.b CODE_039237
	LSR
	LSR
	AND.b #$01
	CLC
	ADC.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$40].XDisp,y
CODE_039237:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_03926C
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.b !RAM_SMW_NorSpr0B2_FallingSpike_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

FallingSpikePtrs:
	dw Waiting
	dw ShakeOrFall

Waiting:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F					;\ Glitch: The spike will act like you're close to it if you're one screen away horizontally
	CLC									;| This should be 16-bit and CheckPlayerPositionRelativeToSprite_Bank03_X needs to check Mario's 16-bit position instead of 8-bit.
	ADC.b #$40								;|
	CMP.b #$80								;|
	BCS.b Return039261							;/
	INC.b !RAM_SMW_NorSpr0B2_FallingSpike_CurrentState,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) != $00
	LDA.b #$20
else
	LDA.b #$40
endif
	STA.w !RAM_SMW_NorSpr0B2_FallingSpike_ShakingTimer,x
Return039261:
	RTS

ShakeOrFall:
	LDA.w !RAM_SMW_NorSpr0B2_FallingSpike_ShakingTimer,x
	BNE.b CODE_03926C
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main			; Glitch: This sprite will not hurt Mario unless it's falling even though it looks like a spike
	RTS

CODE_03926C:
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0B3_BowserStatueFire_Status01(Address)
namespace SMW_NorSpr0B3_BowserStatueFire_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	BRA.b SMW_NorSprXXX_GenericEnemies_Status01_MakeSpriteFacePlayer_Main
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0B3_BowserStatueFire_Status08(Address)
namespace SMW_NorSpr0B3_BowserStatueFire_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $10,$F0

Bank03:
;$038EEC
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038F06
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
Return038F06:
	RTS

XDisp:
	db $08,$00,$00,$08

Tiles:
	db $32,$50,$33,$34,$32,$50,$33,$34

Prop:
	db $09,$09,$09,$09,$89,$89,$89,$89

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$03
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDX.b #$01
CODE_038F2F:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	TXA
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLA
	PHA
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_038F56
	EOR.b #$40
CODE_038F56:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_038F2F
	PLX
	LDY.b #$00
	LDA.b #$01
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0B4_NonLineGuideGrinder_Status08(Address)
namespace SMW_NorSpr0B4_NonLineGuideGrinder_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $18,$E8

Main:
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return01DB95
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return01DB95
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_01DB75
	LDA.b #!Define_SMW_Sound1DFA_Grinder
	STA.w !RAM_SMW_IO_SoundCh2
CODE_01DB75:
	JSR.w SMW_SubOffscreen_Bank01_Entry1
	JSR.w SMW_CheckForPlayerToNormalSpriteCollision_Sub
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSR.w SMW_HandleNormalSpriteGravity_Sub
	JSR.w SMW_CheckNormalSpriteLevelCollision_Floor
	BEQ.b CODE_01DB8D
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
CODE_01DB8D:
	JSR.w SMW_CheckNormalSpriteLevelCollision_Wall
	BEQ.b Return01DB95
	JSR.w SMW_ChangeNormalSpriteDirection_Main
Return01DB95:
	RTS

XDisp:
	db $F8,$08,$F8,$08

YDisp:
	db $00,$00,$10,$10

Prop:
	db $03,$43,$83,$C3

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank01
	PHX
	LDX.b #$03
CODE_01DBA8:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$02
	ORA.b #$6C
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_01DBA8
CODE_01DBD0:
	LDA.b #$03
	BRA.b SMW_NorSprXXX_LineGuidedSprites_Status08_CODE_01DC03
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08(Address)
namespace SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08
%InsertMacroAtXPosition(<Address>)

DATA_038BAA:
	db $20,$20,$20,$20,$20,$20,$20,$20
	db $20,$20,$20,$20,$20,$20,$20,$20
	db $20,$1F,$1E,$1D,$1C,$1B,$1A,$19
	db $18,$17,$16,$15,$14,$13,$12,$11
	db $10,$0F,$0E,$0D,$0C,$0B,$0A,$09
	db $08,$07,$06,$05,$04,$03,$02,$01
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00
	db $01,$02,$03,$04,$05,$06,$07,$08
	db $09,$0A,$0B,$0C,$0D,$0E,$0F,$10
	db $11,$12,$13,$14,$15,$16,$17,$18
	db $19,$1A,$1B,$1C,$1D,$1E,$1F,$20
	db $20,$20,$20,$20,$20,$20,$20,$20
	db $20,$20,$20,$20,$20,$20,$20,$20

DATA_038C2A:
	db $00,$F8,$00,$08

Return038C2E:
	RTS

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038C2E
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.w !RAM_SMW_NorSpr0B7_CarrotTopLiftUpperRight_MovementTimer,x
	BNE.b CODE_038C45
	INC.b !RAM_SMW_NorSpr_Table7E00C2,x
	LDA.b #$80
	STA.w !RAM_SMW_NorSpr0B7_CarrotTopLiftUpperRight_MovementTimer,x
CODE_038C45:
	LDA.b !RAM_SMW_NorSpr_Table7E00C2,x
	AND.b #$03
	TAY
	LDA.w DATA_038C2A,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr0B8_CarrotTopLiftUpperLeft
	BEQ.b CODE_038C5A
	EOR.b #$FF
	INC
CODE_038C5A:
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_Table7E151C,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSR.w CODE_038CE4
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return038CE3
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return038CE3
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.w !RAM_SMW_NorSpr_Table7E151C,x
	CLC
	ADC.b #$1C
	LDY.b !RAM_SMW_NorSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_NorSpr0B8_CarrotTopLiftUpperLeft
	BNE.b CODE_038C8C
	CLC
	ADC.b #$38
CODE_038C8C:
	TAY
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	CMP.b #$01
	LDA.b #$20
	BCC.b CODE_038C98
	LDA.b #$30
CODE_038C98:
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w DATA_038BAA,y
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b Return038CE3
	LDA.w !RAM_SMW_Player_RidingYoshiFlag
	CMP.b #$01
	LDA.b #$1D
	BCC.b CODE_038CB2
	LDA.b #$2D
CODE_038CB2:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.w DATA_038BAA,y
	PHP
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	PLP
	ADC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b #$01
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_PositionDisp
	BPL.b CODE_038CD9
	DEY
CODE_038CD9:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
Return038CE3:
	RTS

CODE_038CE4:
	LDA.b !RAM_SMW_Player_XPosLo
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_XPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$20
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_038D00
	LDA.b #$30
CODE_038D00:
	CLC
	ADC.b !RAM_SMW_Player_YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Player_YPosHi
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM09
	RTS

XDisp:
	db $10,$00,$10,$00,$10,$00

YDisp:
	db $00,$10,$10,$00,$10,$10

Tiles:
	db $E4,$E0,$E2,$E4,$E0,$E2

Prop:
	db $0B,$0B,$0B,$4B,$4B,$4B

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDA.b !RAM_SMW_NorSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_NorSpr0B8_CarrotTopLiftUpperLeft
	LDX.b #$02
	STX.b !RAM_SMW_Misc_ScratchRAM02
	BCC.b CODE_038D34
	LDX.b #$05
CODE_038D34:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_038D34
	PLX
	LDY.b #$02
	TYA
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0B7_CarrotTopLiftUpperRight_Status08_Bank03, SMW_NorSpr0B8_CarrotTopLiftUpperLeft_Status08_Bank03)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0B9_MessageBox_Status08(Address)
namespace SMW_NorSpr0B9_MessageBox_Status08
%InsertMacroAtXPosition(<Address>)

DATA_038D66:
	db $00,$04,$07,$08,$08,$07,$04,$00
	db $00

Bank03:
;$038D6F
	JSL.l SMW_SolidSpriteBlock_Main
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.w !RAM_SMW_NorSpr0B9_MessageBox_BounceAnimationTimer,x
	CMP.b #$01
	BNE.b DontDisplayMessageYet
	LDA.b #!Define_SMW_Sound1DFC_MessageBox
	STA.w !RAM_SMW_IO_SoundCh3
	STZ.w !RAM_SMW_NorSpr0B9_MessageBox_BounceAnimationTimer,x
	STZ.b !RAM_SMW_NorSpr0B9_MessageBox_HitFlag,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	LSR
	LSR
	LSR
	LSR
	AND.b #$01
	INC
	STA.w !RAM_SMW_Misc_DisplayMessage
DontDisplayMessageYet:
	LDA.w !RAM_SMW_NorSpr0B9_MessageBox_BounceAnimationTimer,x
	LSR
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PHA
	CLC
	ADC.w DATA_038D66,y
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PHA
	ADC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$C0
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0BA_TimedPlatform_Status01(Address)
namespace SMW_NorSpr0BA_TimedPlatform_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$3F
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	AND.b #$10
	BNE.b ShortTimer
	LDY.b #$FF
ShortTimer:
	TYA
	STA.w !RAM_SMW_NorSpr0BA_TimedPlatform_ClockTimer,x
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0BA_TimedPlatform_Status08(Address)
namespace SMW_NorSpr0BA_TimedPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038DEF
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.b !RAM_SMW_Counter_GlobalFrames				;\ Optimization: This will never branch.
	AND.b #$00							;|
	BNE.b CODE_038DD7						;/
	LDA.b !RAM_SMW_NorSpr0BA_TimedPlatform_ActivatedFlag,x
	BEQ.b CODE_038DD7
	LDA.w !RAM_SMW_NorSpr0BA_TimedPlatform_ClockTimer,x
	BEQ.b CODE_038DD7
	DEC.w !RAM_SMW_NorSpr0BA_TimedPlatform_ClockTimer,x
CODE_038DD7:
	LDA.w !RAM_SMW_NorSpr0BA_TimedPlatform_ClockTimer,x
	BEQ.b CODE_038DF0
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
	BCC.b Return038DEF
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr0BA_TimedPlatform_ActivatedFlag,x
Return038DEF:
	RTS

CODE_038DF0:
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_Sprites_PositionDisp
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
	RTS

XDisp:
	db $00,$10,$0C

YDisp:
	db $00,$00,$04

PlatformTiles:
	db $C4,$C4,$00

Prop:
	db $0B,$4B,$0B

TileSize:
	db $02,$02,$00

NumberTiles:
	db $B6,$B5,$B4,$B3

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr0BA_TimedPlatform_ClockTimer,x
	PHX
	PHA
	LSR
	LSR
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA.w NumberTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$02
	PLA
	CMP.b #$08
	BCS.b CODE_038E2E
	DEX
CODE_038E2E:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w PlatformTiles,x
	CPX.b #$02
	BNE.b CODE_038E49
	LDA.b !RAM_SMW_Misc_ScratchRAM02
CODE_038E49:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_038E2E
	PLX
	LDY.b #$FF
	LDA.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's offscreen

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0BB_MovingCastleStone_Status08(Address)
namespace SMW_NorSpr0BB_MovingCastleStone_Status08
%InsertMacroAtXPosition(<Address>)

XSpeed:
	db $00,$F0,$00,$10

MovementTiming:
	db $40,$50,$40,$50

Bank03:
;$038E79
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038EA7
	LDA.w !RAM_SMW_NorSpr0BB_MovingCastleStone_MovementTimer,x
	BNE.b CODE_038E92
	INC.b !RAM_SMW_NorSpr0BB_MovingCastleStone_MovementPhase,x
	LDA.b !RAM_SMW_NorSpr0BB_MovingCastleStone_MovementPhase,x
	AND.b #$03
	TAY
	LDA.w MovementTiming,y
	STA.w !RAM_SMW_NorSpr0BB_MovingCastleStone_MovementTimer,x
CODE_038E92:
	LDA.b !RAM_SMW_NorSpr0BB_MovingCastleStone_MovementPhase,x
	AND.b #$03
	TAY
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
Return038EA7:
	RTS

XDisp:
	db $00,$10,$00,$10

YDisp:
	db $00,$00,$10,$10

Tiles:
	db $CC,$CE,$EC,$EE

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDX.b #$03
CODE_038EBA:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$03
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_038EBA
	PLX
	LDY.b #$02
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0BC_BowserStatue_Status01(Address)
namespace SMW_NorSpr0BC_BowserStatue_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_NorSpr_FacingDirection,x
	JSR.w SMW_NorSpr04C_ExplodingBlock_Status01_Main
	STY.b !RAM_SMW_NorSpr0BC_BowserStatue_StatueType,x
	CPY.b #$02
	BNE.b Return018325
	LDA.b #$01
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
Return018325:
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0BC_BowserStatue_Status08(Address)
namespace SMW_NorSpr0BC_BowserStatue_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038A68
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.b !RAM_SMW_NorSpr0BC_BowserStatue_StatueType,x
	JSL.l SMW_ExecutePtr_Absolute

BowserStatuePtrs:
	dw DoNothing
	dw ShootFire
	dw Jump
	dw ShootFire

ShootFire:
	JSR.w CODE_038ACB
DoNothing:
	JSL.l SMW_SolidSpriteBlock_Main					; Glitch: If this sprite is hit below, 7E00C2 will be set to 1. Meaning, this sprite sort of has an "on" button on it's bottom that will cause an inactive statue to start spitting fire.
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x			;\ Glitch: Set AND.b #$04 to AND.b #$0C to fix the bug where jumping Bowser statues will get stuck inside ceilings.
	AND.b #$04							;|
	BEQ.b Return038A68						;/
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
Return038A68:
	RTS

Jump:
	ASL.w !RAM_SMW_NorSpr_PropertyBits167A,x			;\ Note: !Define_SMW_NorSpr_167AProp_UseNonDefaultPlayerInteraction
	LSR.w !RAM_SMW_NorSpr_PropertyBits167A,x			;/
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$10
	BPL.b CODE_038A7F
	INC.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_038A7F:
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_038A99
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_038A99:
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return038AC6
	LDA.b #$10
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr0BC_BowserStatue_WaitBeforeJumping,x
	BEQ.b CODE_038AC1
	DEC
	BNE.b Return038AC6
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	RTS

XSpeed:
	db $10,$F0

CODE_038AC1:
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr0BC_BowserStatue_WaitBeforeJumping,x
Return038AC6:
	RTS

FireSpawnXDispXLo:
	db $10,$F0

FireSpawnXDispXHi:
	db $00,$FF

CODE_038ACB:
	TXA
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$7F
	BNE.b Return038B24
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return038B24
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr0B3_BowserStatueFire
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PHX
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w FireSpawnXDispXLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w FireSpawnXDispXHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$02
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.w !RAM_SMW_NorSpr_FacingDirection,y
Return038B24:
	RTS

XDisp:
	db $08,$F8,$00,$00,$08,$00

YDisp:
	db $10,$F8,$00

Tiles:
	db $56,$30,$41,$56,$30,$35

TileSize:
	db $00,$02,$02

Prop:
	db $00,$00,$00,$40,$40,$40

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	EOR.b #$01
	DEC
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$02
CODE_038B57:
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_038B5F
	INX
	INX
	INX
CODE_038B5F:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w Prop,x
	ORA.b !RAM_SMW_Misc_ScratchRAM05
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BEQ.b CODE_038B84
	INX
	INX
	INX
CODE_038B84:
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	DEX
	CPX.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b CODE_038B57
	PLX
	LDY.b #$FF
	LDA.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status01(Address)
namespace SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$04
	BRA.b SMW_NorSpr09A_SumoBro_Status01_CODE_018379
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08(Address)
namespace SMW_NorSpr0BD_SlidingNakedBlueKoopa_Status08
%InsertMacroAtXPosition(<Address>)

MaxXSpeed:
	db $20,$E0

XAcceleration:
	db $02,$FE

Bank03:
;$038958
	LDA.b #$00
	LDY.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_038964
	BPL.b CODE_038961
	INC
CODE_038961:
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
CODE_038964:
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_NorSpr0BD_SlidingNakedBlueKoopa_WaitBeforeTurningIntoKoopa,x
	CMP.b #$01
	BNE.b CODE_038983
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	PHA
	LDA.b #!Define_SMW_SpriteID_NorSpr002_BlueNakedKoopa
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	SEC
CODE_038983:
	LDA.b #$86
	BCC.b CODE_038989
	LDA.b #$E0
CODE_038989:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return0389FE
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	ORA.w !RAM_SMW_NorSpr0BD_SlidingNakedBlueKoopa_WaitBeforeFalling,x
	ORA.w !RAM_SMW_NorSpr0BD_SlidingNakedBlueKoopa_WaitBeforeTurningIntoKoopa,x
	BNE.b Return0389FE
	JSL.l SMW_HandleNormalSpriteGravity_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b Return0389FE
	JSR.w CODE_0389FF
	LDY.b #$00
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b CODE_0389CC
	BPL.b CODE_0389BD
	EOR.b #$FF
	INC
CODE_0389BD:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	BEQ.b CODE_0389CC
	LDY.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b !RAM_SMW_NorSpr_XSpeed,x
	BPL.b CODE_0389CC
	LDY.b #$D0
CODE_0389CC:
	STY.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b Return0389FE
	LDA.w !RAM_SMW_NorSpr_SlopeSurfaceItsOn,x
	BNE.b CODE_0389EC
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BNE.b CODE_0389E3
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr0BD_SlidingNakedBlueKoopa_WaitBeforeTurningIntoKoopa,x
	RTS

CODE_0389E3:
	BPL.b CODE_0389E9
	INC.b !RAM_SMW_NorSpr_XSpeed,x
	INC.b !RAM_SMW_NorSpr_XSpeed,x
CODE_0389E9:
	DEC.b !RAM_SMW_NorSpr_XSpeed,x
	RTS

CODE_0389EC:
	ASL
	ROL
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BEQ.b Return0389FE
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
Return0389FE:
	RTS

CODE_0389FF:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	BEQ.b Return038A20
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return038A20
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$0A
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_CheckIfNormalSpriteOffScreen_Bank03
	BNE.b Return038A20
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_038A18:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_038A21
	DEY
	BPL.b CODE_038A18
Return038A20:
	RTS

CODE_038A21:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr03_TurnAroundSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$13
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0BE_Swooper_Status08(Address)
namespace SMW_NorSpr0BE_Swooper_Status08
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $AE,$C0,$E8

Bank03:
;$0388A3
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	PHX
	LDA.w !RAM_SMW_NorSpr_AnimationFrame,x
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_0388C0
	JMP.w SMW_NorSpr0C2_Blurp_Status08_FlipSpriteUpsideDown

CODE_0388C0:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return0388DF
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	LDA.b !RAM_SMW_NorSpr0BE_Swooper_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

SwooperPtrs:
	dw Waiting
	dw Swooping
	dw FlyStraight

Return0388DF:
	RTS

MaxXSpeed:
	db $10,$F0

XAcceleration:
	db $01,$FF

Waiting:
	LDA.w !RAM_SMW_NorSpr_XOffscreenFlag,x
	BNE.b Return038904
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	CLC
	ADC.b #$50
	CMP.b #$A0
	BCS.b Return038904
	INC.b !RAM_SMW_NorSpr0BE_Swooper_CurrentState,x
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b #$20
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_Sound1DFC_Swooper
	STA.w !RAM_SMW_IO_SoundCh3
Return038904:
	RTS

Swooping:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_038915
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_038915
	DEC.b !RAM_SMW_NorSpr_YSpeed,x
	BNE.b CODE_038915
	INC.b !RAM_SMW_NorSpr0BE_Swooper_CurrentState,x
CODE_038915:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_03892B
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BEQ.b CODE_03892B
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_03892B:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	LSR
	LSR
	INC
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

FlyStraight:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_038952
	LDA.w !RAM_SMW_NorSpr0BE_Swooper_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w SMW_NorSpr0C2_Blurp_Status08_YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w SMW_NorSpr0C2_Blurp_Status08_MaxYSpeed,y
	BNE.b CODE_038952
	INC.w !RAM_SMW_NorSpr0BE_Swooper_VerticalDirection,x
CODE_038952:
	BRA.b CODE_038915
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0BF_MegaMole_Status08(Address)
namespace SMW_NorSpr0BF_MegaMole_Status08
%InsertMacroAtXPosition(<Address>)

MegaMoleSpeed:
	db $10,$F0

Bank03:
;$038770
	JSR.w GFXRt
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b SMW_NorSpr0C0_SinkingLavaPlatform_Status08_Return038733
	JSR.w SMW_SubOffscreen_Bank03_Entry4
	LDY.w !RAM_SMW_NorSpr0BF_MegaMole_MovementDirection,x
	LDA.w MegaMoleSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b SMW_NorSpr0C0_SinkingLavaPlatform_Status08_Return038733
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	PHA
	JSL.l SMW_HandleNormalSpriteGravity_Main
	JSL.l SMW_CheckForNormalSpriteToNormalSpriteCollision_Main
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$04
	BEQ.b InAir
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
	PLA
	BRA.b OnGround

InAir:
	PLA
	BEQ.b WasInAir
	LDA.b #$0A
	STA.w !RAM_SMW_NorSpr0BF_MegaMole_WaitBeforeFalling,x
WasInAir:
	LDA.w !RAM_SMW_NorSpr0BF_MegaMole_WaitBeforeFalling,x
	BEQ.b OnGround
	STZ.b !RAM_SMW_NorSpr_YSpeed,x
OnGround:
	LDY.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	LDA.w !RAM_SMW_NorSpr_LevelCollisionFlags,x
	AND.b #$03
	BEQ.b CODE_0387CD
	CPY.b #$00
	BNE.b CODE_0387C5
	LDA.b #$10
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_0387C5:
	LDA.w !RAM_SMW_NorSpr0BF_MegaMole_MovementDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr0BF_MegaMole_MovementDirection,x
CODE_0387CD:
	CPY.b #$00
	BNE.b CODE_0387D7
	LDA.w !RAM_SMW_NorSpr0BF_MegaMole_MovementDirection,x
	STA.w !RAM_SMW_NorSpr0BF_MegaMole_FacingDirection,x
CODE_0387D7:
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b Return03882A
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_Y
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CMP.b #$D8
	BPL.b Contact
	LDA.b !RAM_SMW_Player_YSpeed
	BMI.b Return03882A
	LDA.b #$01
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	LDA.b #$06
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	STZ.b !RAM_SMW_Player_YSpeed
	LDA.b #$D6
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b NoYoshi
	LDA.b #$C6
NoYoshi:
	CLC
	ADC.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	ADC.b #$FF
	STA.b !RAM_SMW_Player_YPosHi
	LDY.b #$00
	LDA.w !RAM_SMW_Sprites_PositionDisp
	BPL.b CODE_038813
	DEY
CODE_038813:
	CLC
	ADC.b !RAM_SMW_Player_XPosLo
	STA.b !RAM_SMW_Player_XPosLo
	TYA
	ADC.b !RAM_SMW_Player_XPosHi
	STA.b !RAM_SMW_Player_XPosHi
	RTS

Contact:
	LDA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	ORA.w !RAM_SMW_NorSpr_OnYoshisTongue,x
	BNE.b Return03882A
	JSL.l SMW_DamagePlayer_Hurt
Return03882A:
	RTS

TileDispX:
	db $00,$10,$00,$10,$10,$00,$10,$00

TileDispY:
	db $F0,$F0,$00,$00

Tiles:
	db $C6,$C8,$E6,$E8,$CA,$CC,$EA,$EC

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.w !RAM_SMW_NorSpr0BF_MegaMole_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	NOP
	CLC
	ADC.w !RAM_SMW_NorSpr_CurrentSlotID
	AND.b #$01
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM03
	PHX
	LDX.b #$03
Loop:
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b FaceLeft
	INX
	INX
	INX
	INX
FaceLeft:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w TileDispX,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w TileDispY,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$01
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b NoFlip
	ORA.b #$40
NoFlip:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b Loop
	PLX
	LDY.b #$02
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0C0_SinkingLavaPlatform_Status01(Address)
namespace SMW_NorSpr0C0_SinkingLavaPlatform_Status01
%InsertMacroAtXPosition(<Address>)

Main:
	INC.b !RAM_SMW_NorSpr_YPosLo,x
	INC.b !RAM_SMW_NorSpr_YPosLo,x
Return:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0C0_SinkingLavaPlatform_Status01_Return, SMW_NorSpr0C6_Spotlight_Status01_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0C0_SinkingLavaPlatform_Status08(Address)
namespace SMW_NorSpr0C0_SinkingLavaPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038733
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.w !RAM_SMW_NorSpr0C0_SinkingLavaPlatform_DespawnTimer,x
	DEC
	BNE.b CODE_03871B
	LDY.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_LoadStatus,y
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	RTS

CODE_03871B:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	JSL.l SMW_SolidSpriteBlock_Main
	BCC.b Return038733
	LDA.w !RAM_SMW_NorSpr0C0_SinkingLavaPlatform_DespawnTimer,x
	BNE.b Return038733
	LDA.b #$06
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr0C0_SinkingLavaPlatform_DespawnTimer,x
Return038733:
	RTS

LavaPlatTiles:
	db $85,$86,$85

DATA_038737:
	db $43,$03,$03

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDX.b #$02
CODE_038740:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w LavaPlatTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w DATA_038737,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_038740
	PLX
	LDY.b #$02
	LDA.b #$02
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C1_WingedPlatform_Status08(Address)
namespace SMW_NorSpr0C1_WingedPlatform_Status08
%InsertMacroAtXPosition(<Address>)

FlyingBlockSpeedY:
	db $08,$F8

Bank03:
;$0385F6
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038675
	LDA.w !RAM_SMW_Flag_ActiveFastBackgroundScrollGenerator
	BEQ.b CODE_038629
	LDA.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerHi,x
	INC.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerHi,x
	AND.b #$01
	BNE.b CODE_03861E
	DEC.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerLo,x
	LDA.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerLo,x
	CMP.b #$FF
	BNE.b CODE_03861E
	LDA.b #$FF
	STA.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerLo,x
	INC.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalDirection,x
CODE_03861E:
	LDA.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.w FlyingBlockSpeedY,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_038629:
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	PHA
	LDY.w !RAM_SMW_NorSpr0C1_WingedPlatform_FlyDownInitiallyFlag,x
	BNE.b CODE_038636
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_038636:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	PLA
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w !RAM_SMW_Flag_ActiveFastBackgroundScrollGenerator
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	STA.w !RAM_SMW_NorSpr_PlayerXSpeedOffset,x
	JSL.l SMW_SolidSpriteBlock_Main
	BCC.b Return038675
	LDA.w !RAM_SMW_Flag_ActiveFastBackgroundScrollGenerator
	BNE.b Return038675
	LDA.b #$08
	STA.w !RAM_SMW_Flag_ActiveFastBackgroundScrollGenerator
	LDA.b #$7F
	STA.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerLo,x
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_038660:
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_03866C
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr0C1_WingedPlatform
	BEQ.b CODE_038670
CODE_03866C:
	DEY
	BPL.b CODE_038660
	INY								; Glitch: This should be an RTS! This will corrupt $7E1602!
CODE_038670:
	LDA.b #$7F
	STA.w !RAM_SMW_NorSpr0C1_WingedPlatform_VerticalMovementTimerLo,y
Return038675:
	RTS

XDisp:
	db $00,$10,$20,$F2,$2E,$00,$10,$20
	db $FA,$2E

YDisp:
	db $00,$00,$00,$F6,$F6,$00,$00,$00
	db $FE,$FE

Tiles:
	db $40,$40,$40,$C6,$C6,$40,$40,$40
	db $5D,$5D

Prop:
	db $32,$32,$32,$72,$32,$32,$32,$32
	db $72,$32

TileSize:
	db $02,$02,$02,$02,$02,$02,$02,$02
	db $00,$00

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x				; Optimization: GetDrawInfo already sets Y!
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	AND.b #$04
	BEQ.b CODE_0386B6
	INC
CODE_0386B6:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$04
CODE_0386BB:
	STX.b !RAM_SMW_Misc_ScratchRAM06
	TXA
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w YDisp,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	PHY
	TYA
	LSR
	LSR
	TAY
	LDA.w TileSize,x
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	INY
	INY
	INY
	INY
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	DEX
	BPL.b CODE_0386BB
	PLX
	LDY.b #$FF
	LDA.b #$04
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C2_Blurp_Status08(Address)
namespace SMW_NorSpr0C2_Blurp_Status08
%InsertMacroAtXPosition(<Address>)

MaxYSpeed:
	db $04,$FC

XSpeed:
	db $08,$F8

YAcceleration:
	db $01,$FF

Bank03:
;$0384CA
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.w !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	CLC
	ADC.w !RAM_SMW_NorSpr_CurrentSlotID
	LSR
	LDA.b #$A2
	BCC.b CODE_0384E2
	LDA.b #$EC
CODE_0384E2:
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BEQ.b CODE_0384F5
FlipSpriteUpsideDown:
	LDA.w SMW_OAMBuffer[$40].Prop,y
	ORA.b #$80
	STA.w SMW_OAMBuffer[$40].Prop,y
	RTS

CODE_0384F5:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03852A
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_038516
	LDA.b !RAM_SMW_NorSpr0C2_Blurp_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_038516
	INC.b !RAM_SMW_NorSpr0C2_Blurp_VerticalDirection,x
CODE_038516:
	LDY.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.w XSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
Return03852A:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C3_PorcuPuffer_Status08(Address)
namespace SMW_NorSpr0C3_PorcuPuffer_Status08
%InsertMacroAtXPosition(<Address>)

PorcuPuffAccel:
	db $01,$FF

PorcuPuffMaxSpeed:
	db $10,$F0

Bank03:
;$03852F
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038586
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return038586
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	JSL.l SMW_CheckForPlayerAndNormalSpriteCollisions_Main
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$03
	BNE.b CODE_03855E
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w PorcuPuffMaxSpeed,y
	BEQ.b CODE_03855E
	CLC
	ADC.w PorcuPuffAccel,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
CODE_03855E:
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	PHA
	LDA.w !RAM_SMW_Misc_Layer1XDisp
	ASL
	ASL
	ASL
	CLC
	ADC.b !RAM_SMW_NorSpr_XSpeed,x
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	PLA
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	JSL.l SMW_HandleNormalSpriteLevelCollision_Main
	LDY.b #$04
	LDA.w !RAM_SMW_NorSpr_InLiquidFlag,x
	BEQ.b CODE_038580
	LDY.b #$FC
CODE_038580:
	STY.b !RAM_SMW_NorSpr_YSpeed,x
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
Return038586:
	RTS

PocruPufferDispX:
	db $F8,$08,$F8,$08,$08,$F8,$08,$F8

PocruPufferDispY:
	db $F8,$F8,$08,$08

PocruPufferTiles:
	db $86,$C0,$A6,$C2,$86,$C0,$A6,$8A

PocruPufferGfxProp:
	db $0D,$0D,$0D,$0D,$4D,$4D,$4D,$4D

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHX
	LDX.b #$03
CODE_0385B4:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.w PocruPufferDispY,x
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0385C6
	TXA
	ORA.b #$04
	TAX
CODE_0385C6:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w PocruPufferDispX,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w PocruPufferGfxProp,x
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	PHA
	ORA.b !RAM_SMW_Misc_ScratchRAM03
	TAX
	LDA.w PocruPufferTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_0385B4
	PLX
	LDY.b #$02
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C4_GreyFallingPlatform_Status08(Address)
namespace SMW_NorSpr0C4_GreyFallingPlatform_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w GFXRt
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return038489
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BEQ.b CODE_038476
	LDA.w !RAM_SMW_NorSpr0C4_GreyFallingPlatform_WaitBeforeFall,x
	BNE.b CODE_038472
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_038472
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_NorSpr_YSpeed,x
CODE_038472:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
CODE_038476:
	JSL.l SMW_SolidSpriteBlock_Main
	BCC.b Return038489
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	BNE.b Return038489
	LDA.b #$03
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #$18
	STA.w !RAM_SMW_NorSpr0C4_GreyFallingPlatform_WaitBeforeFall,x
Return038489:
	RTS

XDisp:
	db $00,$10,$20,$30

Tiles:
	db $60,$61,$61,$62

GFXRt:
	JSR.w SMW_GetDrawInfo_Bank03
	PHX
	LDX.b #$03
CODE_038498:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w XDisp,x
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$03
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_038498
	PLX
	LDY.b #$02
	LDA.b #$03
	JSL.l SMW_FinishOAMWrite_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C5_BigBooBoss_Status08(Address)
namespace SMW_NorSpr0C5_BigBooBoss_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSL.l SMW_NormalSpriteBooGFXRt_Main
	JSL.l SMW_FadingBooPaletteAnimation_Main
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BNE.b CODE_0380A2
	INC.w !RAM_SMW_Misc_CurrentlyActiveBossEndCutscene
	LDA.b #$FF
	STA.w !RAM_SMW_Timer_EndLevel
	LDA.b #!Define_SMW_LevelMusic_PassedBoss
	STA.w !RAM_SMW_IO_MusicCh1
	RTS

CODE_0380A2:
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b Return0380D4
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return0380D4
	LDA.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	JSL.l SMW_ExecutePtr_Absolute

BigBooBossPtrs:
	dw StoppedBeforeFadeIn
	dw FadingIn
	dw FloatingAroundWhileVisible
	dw Hurt
	dw FadingOut
	dw FloatingAroundWhileInvisible
	dw Dying

StoppedBeforeFadeIn:
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	INC.w !RAM_SMW_NorSpr0C5_BigBooBoss_FadeInFrameCounter,x
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_FadeInFrameCounter,x
	CMP.b #$90
	BNE.b Return0380D4
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	INC.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
Return0380D4:
	RTS

FadingIn:
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	BNE.b Return0380F9
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	INC.w !RAM_SMW_Sprites_BigBooBossPaletteIndex
	LDA.w !RAM_SMW_Sprites_BigBooBossPaletteIndex
	CMP.b #$02
	BNE.b CODE_0380EE
	LDY.b #!Define_SMW_Sound1DF9_MagicShoot
	STY.w !RAM_SMW_IO_SoundCh1
CODE_0380EE:
	CMP.b #$07
	BNE.b Return0380F9
	INC.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
Return0380F9:
	RTS

XAcceleration:
	db $FF,$01

MaxXSpeed:
	db $F0,$10

MaxYSpeed:
	db $0C,$F4

YAcceleration:
	db $01,$FF

DATA_038102:
	db $01,$02,$02,$01

FloatingAroundWhileInvisible:
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	BNE.b CODE_038112
	STZ.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_FadeInFrameCounter,x
CODE_038112:
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	BRA.b CODE_03811F

FloatingAroundWhileVisible:
	STZ.w !RAM_SMW_NorSpr_AnimationFrame,x
	JSR.w CODE_0381E4
CODE_03811F:
	LDA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
	BNE.b CODE_038132
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_Bank03_X
	TYA
	CMP.w !RAM_SMW_NorSpr_FacingDirection,x
	BEQ.b CODE_03814A
	LDA.b #$1F
	STA.w !RAM_SMW_NorSpr_TurnAroundTimer,x
CODE_038132:
	CMP.b #$10
	BNE.b CODE_038140
	PHA
	LDA.w !RAM_SMW_NorSpr_FacingDirection,x
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	PLA
CODE_038140:
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_038102,y
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
CODE_03814A:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	BNE.b CODE_038166
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_HorizontalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_XSpeed,x
	CLC
	ADC.w XAcceleration,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	CMP.w MaxXSpeed,y
	BNE.b CODE_038166
	INC.w !RAM_SMW_NorSpr0C5_BigBooBoss_HorizontalDirection,x
CODE_038166:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$07
	BNE.b CODE_038182
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_VerticalDirection,x
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_NorSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	CMP.w MaxYSpeed,y
	BNE.b CODE_038182
	INC.w !RAM_SMW_NorSpr0C5_BigBooBoss_VerticalDirection,x
CODE_038182:
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_X
	JSL.l SMW_UpdateNormalSpritePositionBank01_Main_Y
	RTS

Hurt:
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	BNE.b CODE_0381AE
	INC.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_YXPPCCCTAndPropertyTables
	INC.w !RAM_SMW_NorSpr0C5_BigBooBoss_HitCounter,x
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_HitCounter,x
	CMP.b #$03
	BNE.b Return0381AD
	LDA.b #$06
	STA.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	JSL.l SMW_DespawnNonBossSprites_Main
Return0381AD:
	RTS

CODE_0381AE:
	AND.b #$0E
	EOR.w !RAM_SMW_NorSpr_YXPPCCCT,x
	STA.w !RAM_SMW_NorSpr_YXPPCCCT,x
	LDA.b #$03
	STA.w !RAM_SMW_NorSpr_AnimationFrame,x
	RTS

FadingOut:
	LDA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	BNE.b Return0381D2
	LDA.b #$08
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	DEC.w !RAM_SMW_Sprites_BigBooBossPaletteIndex
	BNE.b Return0381D2
	INC.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	LDA.b #$C0
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
Return0381D2:
	RTS

Dying:
	LDA.b #!Define_SMW_NorSprStatus02_Dead
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	STZ.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$D0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_Sound1DF9_LemmyWendyFall
	STA.w !RAM_SMW_IO_SoundCh1
	RTS

CODE_0381E4:
	LDY.b #!Define_SMW_MaxNormalSpriteSlot
CODE_0381E6:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus09_Stunned
	BEQ.b CODE_0381F5
	CMP.b #!Define_SMW_NorSprStatus0A_Kicked
	BEQ.b CODE_0381F5
CODE_0381F1:
	DEY
	BPL.b CODE_0381E6
	RTS

CODE_0381F5:
	PHX
	TYX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingB
	PLX
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetSpriteClippingA
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_0381F1
	LDA.b #$03
	STA.b !RAM_SMW_NorSpr0C5_BigBooBoss_CurrentState,x
	LDA.b #$40
	STA.w !RAM_SMW_NorSpr0C5_BigBooBoss_PhaseTimer,x
	PHX
	TYX
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b !RAM_SMW_NorSpr_XPosLo,x
	STA.b !RAM_SMW_Blocks_XPosLo
	LDA.w !RAM_SMW_NorSpr_XPosHi,x
	STA.b !RAM_SMW_Blocks_XPosHi
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	STA.b !RAM_SMW_Blocks_YPosLo
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	STA.b !RAM_SMW_Blocks_YPosHi
	PHB
	LDA.b #SMW_SpawnBrickPieces_Main>>16
	PHA
	PLB
	LDA.b #$FF
	JSL.l SMW_SpawnBrickPieces_Main
	PLB
	PLX
	LDA.b #!Define_SMW_Sound1DFC_StunEnemy
	STA.w !RAM_SMW_IO_SoundCh3
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_FadingBooPaletteAnimation(Address)
namespace SMW_FadingBooPaletteAnimation
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$24
	STY.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	LDA.w !RAM_SMW_Sprites_BigBooBossPaletteIndex
	CMP.b #$08
	DEC
	BCS.b CODE_03824A
	LDY.b #$34
	STY.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	INC
CODE_03824A:
	ASL
	ASL
	ASL
	ASL
	TAX
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
CODE_038254:
	LDA.l SMW_BooFadePalettes_Main,x
	STA.w !RAM_SMW_Palettes_DynamicPaletteColors,y
	INY
	INX
	INC.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$10
	BNE.b CODE_038254
	LDX.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	LDA.b #$10
	STA.w !RAM_SMW_Palettes_DynamicPaletteBytesToUpload,x
	LDA.b #$F0
	STA.w !RAM_SMW_Palettes_DynamicPaletteCGRAMAddress,x
	STZ.w !RAM_SMW_Palettes_DynamicPaletteColors+$10,x
	TXA
	CLC
	ADC.b #$12
	STA.w !RAM_SMW_Palettes_DynamicPaletteUploadIndex
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTL
namespace off
endmacro

;---------------------------------------------------------------------------

macro DATATABLE_SMW_BooFadePalettes(Address)
namespace SMW_BooFadePalettes
%InsertMacroAtXPosition(<Address>)

Main:
Fade07:
	incbin "palettes/FadingBoo.tpl":6-16
Fade06:
	incbin "palettes/FadingBoo.tpl":26-36
Fade05:
	incbin "palettes/FadingBoo.tpl":46-56
Fade04:
	incbin "palettes/FadingBoo.tpl":66-76
Fade03:
	incbin "palettes/FadingBoo.tpl":86-96
Fade02:
	incbin "palettes/FadingBoo.tpl":A6-B6
Fade01:
	incbin "palettes/FadingBoo.tpl":C6-D6
Normal:
	incbin "palettes/FadingBoo.tpl":E6-F6
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C6_Spotlight_Status08(Address)
namespace SMW_NorSpr0C6_Spotlight_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03C48F:
	db $01,$FF

DATA_03C491:
	db $FF,$90

Tiles:
	db $80,$82,$84,$86,$88,$8C,$C0,$C2
	db $C2

Prop:
	db $31,$33,$35,$37,$31,$33,$35,$37
	db $39

GFXRt:
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$78
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.b #$28
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHX
	LDA.b !RAM_SMW_NorSpr0C6_Spotlight_OnFlag,x
	LDX.b #$08
	AND.b #$01
	BEQ.b CODE_03C4C1
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	AND.b #$07
	TAX
CODE_03C4C1:
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w Prop,x
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLX
	RTS

DATA_03C4D8:
	db $10,$8C

DATA_03C4DA:
	db $42,$31

Bank03:
;$03C4DC
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_DeleteOtherSpotlightsFlag,x
	BNE.b CODE_03C500
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_03C4E3:
	CPY.w !RAM_SMW_NorSpr_CurrentSlotID
	BEQ.b CODE_03C4FA
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_03C4FA
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr0C6_Spotlight
	BNE.b CODE_03C4FA
	STZ.w !RAM_SMW_NorSpr_CurrentStatus,x
Return03C4F9:
	RTS

CODE_03C4FA:
	DEY
	BPL.b CODE_03C4E3
	INC.w !RAM_SMW_NorSpr0C6_Spotlight_DeleteOtherSpotlightsFlag,x
CODE_03C500:
	JSR.w GFXRt
	LDA.b #$FF
	STA.b !RAM_SMW_Mirror_ColorMathSelectAndEnable
	LDA.b #$20
	STA.b !RAM_SMW_Mirror_ColorMathInitialSettings
	LDA.b #$20
	STA.b !RAM_SMW_Mirror_ObjectAndColorWindowSettings
	LDA.b #$80
	STA.w !RAM_SMW_Mirror_HDMAEnable
	LDA.b !RAM_SMW_NorSpr0C6_Spotlight_OnFlag,x
	AND.b #$01
	TAY
	LDA.w DATA_03C4D8,y
	STA.w !RAM_SMW_Palettes_BackgroundColorLo
	LDA.w DATA_03C4DA,y
	STA.w !RAM_SMW_Palettes_BackgroundColorHi
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return03C4F9
	LDA.w !RAM_SMW_Flag_SkipSpotlightWindowInitialization
	BNE.b CODE_03C54D
	LDA.b #$00
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowXPosBottom
	LDA.b #$90
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowXPosBottom
	LDA.b #$78
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowXPosTop
	LDA.b #$87
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowXPosTop 
	LDA.b #$01							;\ Optimization: Could be removed to make $1486 free RAM
	STA.w !RAM_SMW_UnusedRAM_7E1486					;/
	STZ.w !RAM_SMW_NorSpr0C6_Spotlight_Direction
	INC.w !RAM_SMW_Flag_SkipSpotlightWindowInitialization
CODE_03C54D:
	LDY.w !RAM_SMW_NorSpr0C6_Spotlight_Direction
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowXPosBottom
	CLC
	ADC.w DATA_03C48F,y
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowXPosBottom
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowXPosBottom
	CLC
	ADC.w DATA_03C48F,y
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowXPosBottom
	CMP.w DATA_03C491,y
	BNE.b CODE_03C572
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_Direction
	INC
	AND.b #$01
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_Direction
CODE_03C572:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return03C4F9
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowXPosTop
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowScanlineXPos
	SEC
	SBC.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowXPosBottom
	BCS.b CODE_03C58A
	INY
	EOR.b #$FF
	INC
CODE_03C58A:
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_WidthOfLeftSideOfWindow
	STY.w !RAM_SMW_NorSpr0C6_Spotlight_BottomLeftWindowPosRelativeToTop
	STZ.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftLeftSideOfWindow
	LDY.b #$00
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowXPosTop 
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowScanlineXPos
	SEC
	SBC.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowXPosBottom
	BCS.b CODE_03C5A5
	INY
	EOR.b #$FF
	INC
CODE_03C5A5:
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_WidthOfRightSideOfWindow
	STY.w !RAM_SMW_NorSpr0C6_Spotlight_BottomRightWindowPosRelativeToTop
	STZ.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftRightSideOfWindow
	LDA.b !RAM_SMW_NorSpr0C6_Spotlight_OnFlag,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	PHX
	REP.b #$10
	LDX.w #$0000
CODE_03C5B8:
	CPX.w #$005F
	BCC.b CODE_03C607
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftLeftSideOfWindow
	CLC
	ADC.w !RAM_SMW_NorSpr0C6_Spotlight_WidthOfLeftSideOfWindow
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftLeftSideOfWindow
	BCS.b CODE_03C5CD
	CMP.b #$CF
	BCC.b CODE_03C5E0
CODE_03C5CD:
	SBC.b #$CF
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftLeftSideOfWindow
	INC.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowScanlineXPos
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_BottomLeftWindowPosRelativeToTop
	BNE.b CODE_03C5E0
	DEC.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowScanlineXPos
	DEC.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowScanlineXPos
CODE_03C5E0:
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftRightSideOfWindow
	CLC
	ADC.w !RAM_SMW_NorSpr0C6_Spotlight_WidthOfRightSideOfWindow
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftRightSideOfWindow
	BCS.b CODE_03C5F0
	CMP.b #$CF
	BCC.b CODE_03C603
CODE_03C5F0:
	SBC.b #$CF
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_ShiftRightSideOfWindow
	INC.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowScanlineXPos
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_BottomRightWindowPosRelativeToTop
	BNE.b CODE_03C603
	DEC.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowScanlineXPos
	DEC.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowScanlineXPos
CODE_03C603:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BNE.b CODE_03C60F
CODE_03C607:
	LDA.b #$01
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	DEC
	BRA.b CODE_03C618

CODE_03C60F:
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_LeftWindowScanlineXPos
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable,x
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_RightWindowScanlineXPos
CODE_03C618:
	STA.w !RAM_SMW_Misc_HDMAWindowEffectTable+$01,x
	INX
	INX
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	CPX.w #$01E0
else
	CPX.w #$01C0
endif
	BNE.b CODE_03C5B8
	SEP.b #$10
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

; Glitch: This sprite does not call SubOffscreen, so it will never be erased if it's offscreen unless it's touched.

;---------------------------------------------------------------------------

macro ROUTINE_RT01_SMW_NorSpr0C7_InvisibleMushroom_Status08(Address)
namespace SMW_NorSpr0C7_InvisibleMushroom_Status08
%InsertMacroAtXPosition(<Address>)

Bank03:
	JSR.w SMW_GetDrawInfo_Bank03
	JSL.l SMW_CheckForPlayerToNormalSpriteCollision_Main
	BCC.b PopupMushroom_Return
	LDA.b #!Define_SMW_SpriteID_NorSpr074_Mushroom
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b #$20
	STA.w !RAM_SMW_NorSpr_DecrementingTable7E154C,x
	LDA.b !RAM_SMW_NorSpr_YPosLo,x
	SEC
	SBC.b #$0F
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.w !RAM_SMW_NorSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
PopupMushroom:
.Main:
;$03C334
	LDA.b #$00
	LDY.b !RAM_SMW_Player_XSpeed
	BPL.b .CODE_03C33B
	INC
.CODE_03C33B:
	STA.w !RAM_SMW_NorSpr_Table7E157C,x
	LDA.b #$C0
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.b #!Define_SMW_Sound1DFC_HitItemBlock
	STA.w !RAM_SMW_IO_SoundCh3
.Return:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT01_SMW_NorSpr0C8_LightSwitch_Status08(Address)
namespace SMW_NorSpr0C8_LightSwitch_Status08
%InsertMacroAtXPosition(<Address>)

DATA_03C1EC:
	db $00,$04,$07,$08,$08,$07,$04,$00
	db $00

Bank03:
;$03C1F5
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_03C22B
	JSL.l SMW_SolidSpriteBlock_Main
	JSR.w SMW_SubOffscreen_Bank03_Entry1
	LDA.w !RAM_SMW_NorSpr0C8_LightSwitch_BounceAnimationTimer,x
	CMP.b #$05
	BNE.b CODE_03C22B
	STZ.b !RAM_SMW_NorSpr0C8_LightSwitch_HitFlag,x
	LDY.b #!Define_SMW_Sound1DF9_ONOFFSwitch
	STY.w !RAM_SMW_IO_SoundCh1
	PHA
	LDY.b #!Define_SMW_MaxNormalSpriteSlot-$02
CODE_03C211:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b CODE_03C227
	LDA.w !RAM_SMW_NorSpr_SpriteID,y
	CMP.b #!Define_SMW_SpriteID_NorSpr0C6_Spotlight
	BNE.b CODE_03C227
	LDA.w !RAM_SMW_NorSpr0C6_Spotlight_OnFlag,y
	EOR.b #$01
	STA.w !RAM_SMW_NorSpr0C6_Spotlight_OnFlag,y
CODE_03C227:
	DEY
	BPL.b CODE_03C211
	PLA
CODE_03C22B:
	LDA.w !RAM_SMW_NorSpr0C8_LightSwitch_BounceAnimationTimer,x
	LSR
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	PHA
	CLC
	ADC.w DATA_03C1EC,y
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PHA
	ADC.b #$00
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	JSL.l SMW_GenericGFXRtDraw1Tile16x16_Main
	LDY.w !RAM_SMW_NorSpr_OAMIndex,x
	LDA.b #$2A
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_OAMBuffer[$40].Prop,y
	AND.b #$BF
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PLA
	STA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_LoadShooter(Address)
namespace SMW_NorSprXXX_LoadShooter
%InsertMacroAtXPosition(<Address>)

Main:
	STX.b !RAM_SMW_Misc_ScratchRAM02
	DEY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDX.b #!Define_SMW_MaxShooterSpriteSlot
CODE_02AB81:
	LDA.w !RAM_SMW_ShooterSpr_SpriteID,x
	BEQ.b CODE_02AB9E
	DEX
	BPL.b CODE_02AB81
	DEC.w !RAM_SMW_ShooterSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_02AB93
	LDA.b #!Define_SMW_MaxShooterSpriteSlot
	STA.w !RAM_SMW_ShooterSpr_SlotToOverwriteWhenSlotsFull
CODE_02AB93:
	LDX.w !RAM_SMW_ShooterSpr_SlotToOverwriteWhenSlotsFull
	LDY.w !RAM_SMW_ShooterSpr_UnusedLevelListIndex,x
	LDA.b #$00
	STA.w !RAM_SMW_Sprites_LoadStatus,y
CODE_02AB9E:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	SEC
	SBC.b #$C8
	STA.w !RAM_SMW_ShooterSpr_SpriteID,x
	LDA.b !RAM_SMW_Misc_LevelLayoutFlags
	LSR
	BCC.b CODE_02ABC7
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.w !RAM_SMW_ShooterSpr_XPosLo,x
	PLA
	AND.b #$01
	STA.w !RAM_SMW_ShooterSpr_XPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ShooterSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_ShooterSpr_YPosHi,x
	BRA.b CODE_02ABDF

CODE_02ABC7:
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.w !RAM_SMW_ShooterSpr_YPosLo,x
	PLA
	AND.b #$01
	STA.w !RAM_SMW_ShooterSpr_YPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ShooterSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_ShooterSpr_XPosHi,x
CODE_02ABDF:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_ShooterSpr_UnusedLevelListIndex,x
	LDA.b #$10
	STA.w !RAM_SMW_ShooterSpr_ShootTimer,x
	INY
	INY
	INY
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	INX
	JMP.w SMW_ParseLevelSpriteList_LoadSpriteLoopStrt
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0DE_Load5Eeries(Address)
namespace SMW_NorSpr0DE_Load5Eeries
%InsertMacroAtXPosition(<Address>)

InitialXPosLo:
	db $E0,$F0,$00,$10,$20

InitialXPosHi:
	db $FF,$FF,$00,$00,$00

InitialYSpeed:
	db $17,$E9,$17,$E9,$17

InitialVerticalDirection:
	db $00,$01,$00,$01,$00

InitialXSpeed:
	db $10,$F0

Main:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM08
	PLA
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_02AFAF:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return02AFFD
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr039_WavyEerie
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w InitialXPosLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	ADC.w InitialXPosHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w InitialYSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDA.w InitialVerticalDirection,y
	STA.b !RAM_SMW_NorSprXXX_Eeries_VerticalMovementDirection,x
	CPY.b #$04
	BNE.b CODE_02AFF1
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
CODE_02AFF1:
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_CopyOfBank02_X
	LDA.w InitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_02AFAF
Return02AFFD:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0E0_Load3Platforms(Address)
namespace SMW_NorSpr0E0_Load3Platforms
%InsertMacroAtXPosition(<Address>)

InitialAngleLo:
	db $00,$AA,$54

InitialAngleHi:
	db $00,$00,$01

Main:
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM08
	PLA
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM04
CODE_02AF45:
	JSL.l SMW_FindFreeNormalSpriteSlot_HighPriority
	BMI.b Return02AF86
	TYX
	LDA.b #!Define_SMW_NorSprStatus01_Init
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr0A3_GreyChainedPlatform
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM09
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDY.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w InitialAngleLo,y
	STA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleLo,x
	LDA.w InitialAngleHi,y
	STA.w !RAM_SMW_NorSpr0A3_GreyChainedPlatform_CurrentAngleHi,x
	CPY.b #$02
	BNE.b CODE_02AF82
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_NorSpr_LoadStatusTableIndex,x
CODE_02AF82:
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_02AF45
Return02AF86:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0E1_LoadBooCeiling(Address)
namespace SMW_NorSpr0E1_LoadBooCeiling
%InsertMacroAtXPosition(<Address>)

CODE_02AABD:
	JMP.w SMW_NorSpr0E5_LoadDeathBatCeiling_Main

Main:
	LDY.b #$01
	STY.w !RAM_SMW_Flag_RunClusterSprites
	CMP.b #$E4
	BEQ.b CODE_02AABD
	CMP.b #$E6
	BEQ.b SMW_NorSpr0E6_LoadCandleFlames_Main
	CMP.b #$E5
	BEQ.b SMW_NorSpr0E5_LoadReappearingBoo_Main
	CMP.b #$E2
	BCS.b SMW_NorSprXXX_LoadBooRing_Main
	LDX.b #!Define_SMW_MaxClusterSpriteSlot
CODE_02AAD7:
	STZ.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E66,x
	STZ.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F86,x
	LDA.b #!Define_SMW_SpriteID_ClusterSpr03_BooCeiling
	STA.w !RAM_SMW_ClusterSpr_SpriteID,x
	JSL.l SMW_GetRand_Main
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F4A,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_XPosHi,x
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$3F
	ADC.b #$08
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
	DEX
	BPL.b CODE_02AAD7
	INC.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownRAM
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSprXXX_LoadBooRing(Address)
namespace SMW_NorSprXXX_LoadBooRing
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.w !RAM_SMW_ClusterSpr04_BooRing_RingIndex
	CPY.b #$02
	BCS.b Return02AB77
	LDY.b #$01
	CMP.b #$E2
	BEQ.b CODE_02AB20
	LDY.b #$FF
CODE_02AB20:
	STY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b #$09
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDX.b #!Define_SMW_MaxClusterSpriteSlot
CODE_02AB28:
	LDA.w !RAM_SMW_ClusterSpr_SpriteID,x
	BNE.b CODE_02AB71
	LDA.b #!Define_SMW_SpriteID_ClusterSpr04_BooRing
	STA.w !RAM_SMW_ClusterSpr_SpriteID,x
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_RingIndex
	STA.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F86,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	STA.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F72,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	STA.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F4A,x
	STZ.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_02AB6D
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	LDY.w !RAM_SMW_ClusterSpr04_BooRing_RingIndex
	PHA
	AND.b #$F0
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterYPosLo,y
	PLA
	AND.b #$01
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterYPosHi,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterXPosLo,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterXPosHi,y
	LDA.b #$00
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1OffscreenFlag,y
	LDA.b !RAM_SMW_Misc_ScratchRAM02					;\ Optimization: Boo rings are never killed, so this is useless.
	STA.w !RAM_SMW_ClusterSpr04_BooRing_UnusedRing1LevelListIndex,y		;/
CODE_02AB6D:
	DEC.b !RAM_SMW_Misc_ScratchRAM0E
	BMI.b CODE_02AB74
CODE_02AB71:
	DEX
	BPL.b CODE_02AB28
CODE_02AB74:
	INC.w !RAM_SMW_ClusterSpr04_BooRing_RingIndex
Return02AB77:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0E5_LoadDeathBatCeiling(Address)
namespace SMW_NorSpr0E5_LoadDeathBatCeiling
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxClusterSpriteSlot-$05
ADDR_02AA35:
	STZ.w !RAM_SMW_ClusterSpr08_DeathBatCeiling_UnknownTable7E1E66,x
	STZ.w !RAM_SMW_ClusterSpr08_DeathBatCeiling_UnknownTable7E0F86,x
	LDA.b #!Define_SMW_SpriteID_ClusterSpr08_DeathBatCeiling
	STA.w !RAM_SMW_ClusterSpr_SpriteID,x
	JSL.l SMW_GetRand_Main
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.w !RAM_SMW_ClusterSpr08_DeathBatCeiling_UnknownTable7E0F4A,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_XPosHi,x
	LDY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b [!RAM_SMW_Pointer_SpriteListDataLo],y
	PHA
	AND.b #$F0
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	PLA
	AND.b #$01
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
	DEX
	BPL.b ADDR_02AA35
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0E5_LoadReappearingBoo(Address)
namespace SMW_NorSpr0E5_LoadReappearingBoo
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Sprites_DisappearingBooFrameCounter
	LDX.b #!Define_SMW_MaxClusterSpriteSlot
CODE_02AA92:
	LDA.b #!Define_SMW_SpriteID_ClusterSpr07_ReappearingBoo
	STA.w !RAM_SMW_ClusterSpr_SpriteID,x
	LDA.w DATA_02AA0B,x
	PHA
	AND.b #$F0
	STA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E66,x
	PLA
	ASL
	ASL
	ASL
	ASL
	STA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E52,x
	LDA.w DATA_02AA1F,x
	PHA
	AND.b #$F0
	STA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E8E,x
	PLA
	ASL
	ASL
	ASL
	ASL
	STA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E7A,x
	DEX
	BPL.b CODE_02AA92
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0E5_LoadReappearingBoo(Address)
namespace SMW_NorSpr0E5_LoadReappearingBoo
%InsertMacroAtXPosition(<Address>)

DATA_02AA0B:
	db $31,$71,$A1,$43,$93,$C3,$14,$65
	db $E5,$36,$A7,$39,$99,$F9,$1A,$7A
	db $DA,$4C,$AD,$ED

DATA_02AA1F:
	db $01,$51,$91,$D1,$22,$62,$A2,$73
	db $E3,$C7,$88,$29,$5A,$AA,$EB,$2C
	db $8C,$CC,$FC,$5D
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0E6_LoadCandleFlames(Address)
namespace SMW_NorSpr0E6_LoadCandleFlames
%InsertMacroAtXPosition(<Address>)

InitialXPosLo:
	db $50,$90,$D0,$10

Main:
	LDA.b #!Define_SMW_NorSprStatus07_InLimbo			;\ Glitch: This causes the sprite in slot 03 to disappear and should be removed
	STA.w !RAM_SMW_NorSpr_CurrentStatus+$03				;/
	LDX.b #!Define_SMW_MaxClusterSpriteSlot-$10
CODE_02AA73:
	LDA.b #!Define_SMW_SpriteID_ClusterSpr05_CandleFlame
	STA.w !RAM_SMW_ClusterSpr_SpriteID,x
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l InitialXPosLo,x
else
	LDA.w InitialXPosLo,x
endif
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	LDA.b #$F0
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	TXA
	ASL
	ASL
	STA.w !RAM_SMW_ClusterSpr05_CandleFlame_UnknownTable7E0F4A,x
	DEX
	BPL.b CODE_02AA73
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0E7_SpecialAutoScroll(Address)
namespace SMW_NorSpr0E7_SpecialAutoScroll
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w L1AndL2ScrollID,y
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	LDA.w L1AndL2ScrollTypeIndex,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
Layer2:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	REP.b #$20
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	SEP.b #$20
	TXA
	LSR
	LSR
	TAX
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	BEQ.b CODE_05BD6E
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
CODE_05BD6E:
	LDA.w DATA_05CA61,y
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	LDA.w DATA_05CA68,y
	STA.w !RAM_SMW_L1ScrollSpr_Timer,x
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0E7_SpecialAutoScroll_Main, SMW_NorSpr0E8_SpecialAutoScroll_Main)
endmacro

macro ROUTINE_RT01_SMW_NorSpr0E7_SpecialAutoScroll(Address)
namespace SMW_NorSpr0E7_SpecialAutoScroll
%InsertMacroAtXPosition(<Address>)

L1AndL2ScrollID:
	db $01,$01		; Y = 00 Auto-Scroll 1 (set layer2+FG scroll to none)
	db $01,$00		; Y = 00 Auto-Scroll 2 (set FG scroll to none)
	db $01,$01		; Y = 00 Auto-Scroll 3 (set layer2+FG scroll to none)
	db $01,$00		; Y = 00 Auto-Scroll 4 (set FG scroll to none)
	db $01,$09		; Y = 10 Auto-Scroll 1 (set layer2+FG scroll to none)

L1AndL2ScrollTypeIndex:
	db $01,$00		; Y = 00 Auto-Scroll 1 (set layer2+FG scroll to none)
	db $02,$00		; Y = 00 Auto-Scroll 2 (set FG scroll to none)
	db $04,$03		; Y = 00 Auto-Scroll 3 (set layer2+FG scroll to none)
	db $05,$00		; Y = 00 Auto-Scroll 4 (set FG scroll to none)
	db $06,$00		; Y = 10 Auto-Scroll 1 (set layer2+FG scroll to none)
namespace off
endmacro

macro ROUTINE_RT02_SMW_NorSpr0E7_SpecialAutoScroll(Address)
namespace SMW_NorSpr0E7_SpecialAutoScroll
%InsertMacroAtXPosition(<Address>)

DATA_05CA61:
	db $01,$18,$1E,$29,$2D,$35,$47

DATA_05CA68:
	db $16,$05,$0A,$03,$07,$11,$09
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0E9_Layer2Smash(Address)
namespace SMW_NorSpr0E9_Layer2Smash
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w DATA_05C94F,y						;\ Glitch: Placing this sprite at any height besides #$0000 results in glitched Layer 2 Smash behavior.
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex			;|
	LDA.w DATA_05C952,y						;|
	STA.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex			;/
	REP.b #$20
	LDA.w #$0200
	JSR.w SMW_NorSpr0EC_UnusedSprite_CODE_05BFD2
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	CLC
	ADC.b #$0A
	TAX
	LDY.b #$01
	JSR.w SMW_Layer2SpecialScrolling02_Layer2Smash_CODE_05C95B
	REP.b #$20
	LDA.w !RAM_SMW_Misc_Layer2YPosLo
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	JMP.w SMW_Layer2SpecialScrolling04_Unused_CODE_05C32B		; Optimization: Change to SEP.b #$20 : RTS since that's what this JMP.w leads to.
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0E9_Layer2Smash(Address)
namespace SMW_NorSpr0E9_Layer2Smash
%InsertMacroAtXPosition(<Address>)

DATA_05C94F:
	db $00			; Y = 00 Layer 2 Smash 1
	db $0C			; Y = 00 Layer 2 Smash 2
	db $18			; Y = 00 Layer 2 Smash 3

DATA_05C952:
	db $05			; Y = 00 Layer 2 Smash 1
	db $05			; Y = 00 Layer 2 Smash 2
	db $05			; Y = 00 Layer 2 Smash 3
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0EA_Layer2Scroll(Address)
namespace SMW_NorSpr0EA_Layer2Scroll
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Flag_Layer2VerticalScrollLevelSetting
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w DATA_05CA48,y
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	LDA.w DATA_05CA52,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
CODE_05BF20:
	REP.b #$20
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b CODE_05BF30
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
CODE_05BF30:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w DirectionToStartMoving,y
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAX
	TYA
	ASL
	TAY
	LDA.w SMW_SharedScrollSpriteTables_DATA_05CBF5,y
	AND.w #$00FF
	CPX.b #$01
	BEQ.b CODE_05BF51
	EOR.w #$FFFF
	INC
CODE_05BF51:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	CLC
	ADC.w !RAM_SMW_Misc_Layer1YPosLo,x
	AND.w #$00FF
	STA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	JMP.w SMW_MostlyUnusedScrollSpriteRoutine_CODE_05BDCF
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0EA_Layer2Scroll(Address)
namespace SMW_NorSpr0EA_Layer2Scroll
%InsertMacroAtXPosition(<Address>)

DATA_05CA48:
	db $00,$03		; Y = 00 Layer 2 Scroll 1 (set BG init pos=0 if Y=0)
	db $00,$03		; Y = 00 Layer 2 Scroll 2
	db $00,$03		; Y = 00 Layer 2 Scroll 3 
	db $00,$03		; Y = 00 Layer 2 Scroll 4
	db $00,$03		; Y = 10 Layer 2 Scroll 1 (set BG init pos=0 if Y=0)

DATA_05CA52:
	db $00,$00		; Y = 00 Layer 2 Scroll 1 (set BG init pos=0 if Y=0)
	db $00,$01		; Y = 00 Layer 2 Scroll 2
	db $00,$02		; Y = 00 Layer 2 Scroll 3
	db $00,$03		; Y = 00 Layer 2 Scroll 4
	db $00,$04		; Y = 10 Layer 2 Scroll 1 (set BG init pos=0 if Y=0)

DirectionToStartMoving:
	db $01,$00,$00,$00,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0EB_UnusedSprite(Address)
namespace SMW_NorSpr0EB_UnusedSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w DATA_05CA08,y
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	LDA.w DATA_05CA0C,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
ADDR_05BDF0:
	REP.b #$20
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b ADDR_05BE00
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05BE00:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w DATA_05CA10,y
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	PHA
	TYA
	ASL
	TAY
	LDA.w DATA_05CA12,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	PLA
	TAY
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CPY.b #$01
	BEQ.b ADDR_05BE27
	EOR.w #$FFFF
	INC
ADDR_05BE27:
	CLC
	ADC.w !RAM_SMW_Misc_Layer1YPosLo,x
	STA.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	SEP.b #$20
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0EB_UnusedSprite(Address)
namespace SMW_NorSpr0EB_UnusedSprite
%InsertMacroAtXPosition(<Address>)

DATA_05CA08:
	db $00,$04,$00,$04

DATA_05CA0C:
	db $00,$00,$00,$01

DATA_05CA10:
	db $00,$01

DATA_05CA12:
	db $40,$01,$E0,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0EC_UnusedSprite(Address)
namespace SMW_NorSpr0EC_UnusedSprite
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	REP.b #$20
	STZ.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STZ.w !RAM_SMW_Misc_Layer2XPosLo
	LDA.w #$03C0
	STA.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.w !RAM_SMW_Misc_Layer2YPosLo
	STZ.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w #$0005
CODE_05BFD2:
	STZ.w !RAM_SMW_L1ScrollSpr_Timer
CODE_05BFD5:
	STZ.w !RAM_SMW_L1ScrollSpr_CurrentState
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L1ScrollSpr_SubXPosLo
	STZ.w !RAM_SMW_L1ScrollSpr_SubYPosLo
	STZ.w !RAM_SMW_L2ScrollSpr_XSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_SubXPosLo
	STZ.w !RAM_SMW_L2ScrollSpr_SubYPosLo
	SEP.b #$20
Return05BFF5:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_NorSpr0EC_UnusedSprite_Return05BFF5, SMW_Layer1SpecialScrolling07_DoNothing_Main)
	%SetDuplicateOrNullPointer(SMW_NorSpr0EC_UnusedSprite_Return05BFF5, SMW_Layer2SpecialScrolling07_DoNothing_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0ED_Layer2Falls(Address)
namespace SMW_NorSpr0ED_Layer2Falls
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	REP.b #$20
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.w !RAM_SMW_Misc_Layer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STZ.w !RAM_SMW_Misc_Layer2XPosLo
	LDA.w #$0600
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_SubYPosLo
	SEP.b #$20
	LDA.b #$60
	STA.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0EF_Layer2ScrollSOrL(Address)
namespace SMW_NorSpr0EF_Layer2ScrollSOrL
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w DATA_05CA3E,y
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	LDA.w DATA_05CA42,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	STZ.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STZ.w !RAM_SMW_Misc_Layer1XPosLo
	STZ.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STZ.w !RAM_SMW_Misc_Layer2XPosLo
CODE_05BEC6:
	REP.b #$20
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b CODE_05BED6
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
CODE_05BED6:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w DATA_05CA46,y
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAX
	TYA
	ASL
	TAY
	LDA.w SMW_SharedScrollSpriteTables_DATA_05CBED,y
	AND.w #$00FF
	CPX.b #$01
	BEQ.b CODE_05BEF7
	EOR.w #$FFFF
	INC
CODE_05BEF7:
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	CLC
	ADC.w !RAM_SMW_Misc_Layer1XPosLo,x
	AND.w #$00FF
	STA.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	JMP.w SMW_MostlyUnusedScrollSpriteRoutine_CODE_05BDC9
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0EF_Layer2ScrollSOrL(Address)
namespace SMW_NorSpr0EF_Layer2ScrollSOrL
%InsertMacroAtXPosition(<Address>)

DATA_05CA3E:
	db $00,$08,$00,$08

DATA_05CA42:
	db $00,$00,$00,$01

DATA_05CA46:
	db $01,$01
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0F1_UnusedSprite(Address)
namespace SMW_NorSpr0F1_UnusedSprite
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w DATA_05CA16,y
	STA.w !RAM_SMW_L1ScrollSpr_SpriteID
	LDA.w DATA_05CA1E,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
ADDR_05BE4D:
	REP.b #$20
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	BEQ.b ADDR_05BE5D
	LDY.w !RAM_SMW_L2ScrollSpr_ScrollTypeIndex
ADDR_05BE5D:
	LDA.w !RAM_SMW_ScrollSpr_LayerIndex
	AND.w #$00FF
	LSR
	LSR
	TAX
	LDA.w DATA_05CA26,y
	STA.w !RAM_SMW_L1ScrollSpr_CurrentState,x
	TAY
	LDX.w !RAM_SMW_ScrollSpr_LayerIndex
	LDA.w #$0F17
	CPY.b #$01
	BEQ.b ADDR_05BE7B
	EOR.w #$FFFF
	INC
ADDR_05BE7B:
	STA.w !RAM_SMW_L1ScrollSpr_SubYPosLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_XSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_YSpeedLo,x
	STZ.w !RAM_SMW_L1ScrollSpr_SubXPosLo,x
	SEP.b #$20
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0F1_UnusedSprite(Address)
namespace SMW_NorSpr0F1_UnusedSprite
%InsertMacroAtXPosition(<Address>)

DATA_05CA16:
	db $05,$00
	db $00,$05
	db $05,$02
	db $02,$05

DATA_05CA1E:
	db $00,$00
	db $00,$01
	db $02,$03
	db $04,$03

DATA_05CA26:
	db $01,$00,$01,$01,$00,$06,$00,$06
	db $00,$00,$00,$01,$00,$01,$08,$00
	db $00,$08,$00,$00,$00,$01,$01,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0F2_Layer2OnOffControlled(Address)
namespace SMW_NorSpr0F2_Layer2OnOffControlled
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDA.w #$0B00
	BRA.b SMW_NorSpr0EC_UnusedSprite_CODE_05BFD2
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0F3_RegularAutoScroll(Address)
namespace SMW_NorSpr0F3_RegularAutoScroll
%InsertMacroAtXPosition(<Address>)

DATA_05BFFD:
	db $00,$00
	db $02,$00

MaxXSpeed:
	dw $0080
	dw $0100

Main:
	STZ.w !RAM_SMW_Flag_Layer1HorizontalScrollLevelSetting
	LDA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	ASL
	TAY
	REP.b #$20
	LDA.w DATA_05BFFD,y
	STA.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w #$000C
	BRA.b SMW_NorSpr0EC_UnusedSprite_CODE_05BFD2
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_NorSpr0F4_FastBGScroll(Address)
namespace SMW_NorSpr0F4_FastBGScroll
%InsertMacroAtXPosition(<Address>)

Main:
	REP.b #$20
	LDA.w #$0D00
	JSR.w SMW_NorSpr0EC_UnusedSprite_CODE_05BFD2
CODE_05C022:
	STZ.w !RAM_SMW_Flag_Layer2HorizontalScrollLevelSetting
	REP.b #$20
	STZ.w !RAM_SMW_L2ScrollSpr_XSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_YSpeedLo
	STZ.w !RAM_SMW_L2ScrollSpr_SubXPosLo
	STZ.w !RAM_SMW_L2ScrollSpr_SubYPosLo
	SEP.b #$20
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_NorSpr0F5_Layer2ScrollWhenTouched(Address)
namespace SMW_NorSpr0F5_Layer2ScrollWhenTouched
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.w !RAM_SMW_L1ScrollSpr_ScrollTypeIndex
	LDA.w DATA_05C808,y
	STA.w !RAM_SMW_L1ScrollSpr_Timer
	LDA.w DATA_05C80B,y
	STA.w !RAM_SMW_L2ScrollSpr_Timer
	REP.b #$20
	LDA.w #$0E00
	JMP.w SMW_NorSpr0EC_UnusedSprite_CODE_05BFD5
namespace off
endmacro

macro ROUTINE_RT01_SMW_NorSpr0F5_Layer2ScrollWhenTouched(Address)
namespace SMW_NorSpr0F5_Layer2ScrollWhenTouched
%InsertMacroAtXPosition(<Address>)

DATA_05C808:
	db $00,$06,$08

DATA_05C80B:
	db $03,$01,$02
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr01_SmokePuff(Address)
namespace SMW_ExtSpr01_SmokePuff
%InsertMacroAtXPosition(<Address>)

EraseSprite1:
	JMP.w SMW_GenericExtendedSpriteGFXRt_EraseSprite

Tiles:
	db $66,$64,$60,$62
Prop:
	db $00,$40,$C0,$80

Main:
	LDA.w !RAM_SMW_ExtSpr01_SmokePuff_DespawnTimer,x
	BEQ.b EraseSprite1
	LDA.w !RAM_SMW_Flag_ReznorRoomOAMIndexTimer
	BNE.b CODE_02A362
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b CODE_02A362
	AND.b #$40
	BNE.b ADDR_02A3B1
CODE_02A362:
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	CPX.b #$08
	BCC.b CODE_02A36C
	LDY.w SMW_ExtSpr05_MarioFireball_DATA_029FAB-$08,x
CODE_02A36C:
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F8
	BCS.b EraseSprite2
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b EraseSprite2
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_ExtSpr01_SmokePuff_DespawnTimer,x
	LSR
	LSR
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

EraseSprite2:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	JML.l SMW_GenericExtendedSpriteGFXRt_EraseSprite
else
	JMP.w SMW_GenericExtendedSpriteGFXRt_EraseSprite
endif

ADDR_02A3B1:
	LDY.w SMW_ExtSpr05_MarioFireball_DATA_029FAD-$08,x
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F8
	BCS.b EraseSprite2
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b EraseSprite2
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_ExtSpr01_SmokePuff_DespawnTimer,x
	LSR
	LSR
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr02_ReznorFireball(Address)
namespace SMW_ExtSpr02_ReznorFireball
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $26,$2A,$26,$2A

Prop:
	db $35,$35,$F5,$F5

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b +
	JSR.w SMW_UpdateExtendedSpritePosition_X
	JSR.w SMW_UpdateExtendedSpritePosition_Y
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
+:
PiranhaFireballEntry:
	LDA.w !RAM_SMW_Misc_NMIToUseFlag			;\ Note: This is why reznor fireballs look like normal ones outside of their mode 7 room.
	BPL.b SMW_GenericExtendedSpriteGFXRt_Main		;/ Seems like a pointless check if you ask me.
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$03
	PHX
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w Prop,x
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr03_FlameRemnant(Address)
namespace SMW_ExtSpr03_FlameRemnant
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $AC,$AD

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02A22F
	INC.w !RAM_SMW_ExtSpr03_FlameRemnant_AnimationFrameCounter,x
	LDA.w !RAM_SMW_ExtSpr03_FlameRemnant_DespawnTimer,x
	BEQ.b SMW_GenericExtendedSpriteGFXRt_EraseSprite
	CMP.b #$50
	BCS.b CODE_02A22F
	AND.b #$01
	BNE.b Return02A253
	BEQ.b CODE_02A232
CODE_02A22F:
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
CODE_02A232:
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_ExtSpr03_FlameRemnant_AnimationFrameCounter,x
	LSR
	LSR
	AND.b #$01
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w SMW_OAMBuffer[$00].Prop,y
	AND.b #$3F
	ORA.b #$05
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
Return02A253:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr04_Hammer(Address)
namespace SMW_ExtSpr04_Hammer
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $08,$6D,$6D,$08,$08,$6D,$6D,$08

Prop:
	db $47,$47,$07,$07,$87,$87,$C7,$C7

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02A30C
	JSR.w SMW_UpdateExtendedSpritePosition_X
	JSR.w SMW_UpdateExtendedSpritePosition_Y
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	CMP.b #$40
	BPL.b CODE_02A306
	INC.w !RAM_SMW_ExtSpr_YSpeed,x
	INC.w !RAM_SMW_ExtSpr_YSpeed,x
CODE_02A306:
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
	INC.w !RAM_SMW_ExtSpr04_Hammer_AnimationFrameCounter,x
CODE_02A30C:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr0B_PiranhaFireball
	BNE.b +
	JSR.w SMW_ExtSpr02_ReznorFireball_PiranhaFireballEntry
	RTS

+:
ThrownBoneEntry:
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_ExtSpr04_Hammer_AnimationFrameCounter,x
	LSR
	LSR
	LSR
	AND.b #$07
	PHX
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	EOR.b #$40
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAX
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,x
	PLX
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtSpr04_Hammer_Main, SMW_ExtSpr0B_PiranhaFireball_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr05_MarioFireball(Address)
namespace SMW_ExtSpr05_MarioFireball
%InsertMacroAtXPosition(<Address>)

DATA_029F99:
	db $00,$B8,$C0,$C8,$D0,$D8,$E0,$E8
	db $F0

DATA_029FA2:
	db $00,$05,$03,$02,$02,$02,$02,$02
	db $02

DATA_029FAB:
	db $F8,$FC

DATA_029FAD:
	db $A0,$A4

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02A02C
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BEQ.b CODE_029FC2
	JMP.w SMW_GenericExtendedSpriteGFXRt_EraseSprite

CODE_029FC2:
	INC.w !RAM_SMW_ExtSpr_Table7E1765,x
	JSR.w SMW_CheckForPlayerFireballToNormalSpriteCollision_Main
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	CMP.b #$30
	BPL.b CODE_029FD8
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	CLC
	ADC.b #$04
	STA.w !RAM_SMW_ExtSpr_YSpeed,x
CODE_029FD8:
#LMBlockOffset_MarioFireball:
	JSR.w SMW_HandleExtendedSpriteLevelCollision_Main
	BCC.b CODE_02A010
	INC.w !RAM_SMW_ExtSpr05_MarioFireball_HitFlag,x
	LDA.w !RAM_SMW_ExtSpr05_MarioFireball_HitFlag,x
	CMP.b #$02
	BCS.b CODE_02A042
	LDA.w !RAM_SMW_ExtSpr_XSpeed,x
	BPL.b CODE_029FF3
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	EOR.b #$FF
	INC
	STA.b !RAM_SMW_Misc_ScratchRAM0B
CODE_029FF3:
	LDA.b !RAM_SMW_Misc_ScratchRAM0B			;\ Glitch: Conveyor slopes store #$08/#$F8 to !RAM_SMW_Misc_ScratchRAM0B, which underflows the Y index
	CLC						;| This is why fireballs teleport when fired into one.
	ADC.b #$04					;|
	TAY						;|
	LDA.w DATA_029F99,y				;|
	STA.w !RAM_SMW_ExtSpr_YSpeed,x			;|
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x			;|
	SEC						;|
	SBC.w DATA_029FA2,y				;/
	STA.w !RAM_SMW_ExtSpr_YPosLo,x
	BCS.b CODE_02A00E
	DEC.w !RAM_SMW_ExtSpr_YPosHi,x
CODE_02A00E:
	BRA.b CODE_02A013

CODE_02A010:
	STZ.w !RAM_SMW_ExtSpr05_MarioFireball_HitFlag,x
CODE_02A013:
	LDY.b #$00
	LDA.w !RAM_SMW_ExtSpr_XSpeed,x
	BPL.b CODE_02A01B
	DEY
CODE_02A01B:
	CLC
	ADC.w !RAM_SMW_ExtSpr_XPosLo,x
	STA.w !RAM_SMW_ExtSpr_XPosLo,x
	TYA
	ADC.w !RAM_SMW_ExtSpr_XPosHi,x
	STA.w !RAM_SMW_ExtSpr_XPosHi,x
	JSR.w SMW_UpdateExtendedSpritePosition_Y
CODE_02A02C:
	LDA.b !RAM_SMW_NorSpr_SpriteID+$07
	CMP.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	BEQ.b CODE_02A03B
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b CODE_02A03B
	AND.b #$40
	BNE.b ADDR_02A04F
CODE_02A03B:
	LDY.w DATA_029FAB-$08,x
	JSR.w SMW_GenericExtendedSpriteGFXRt_FireballEntry
	RTS

CODE_02A042:
	JSR.w CODE_02A02C
CODE_02A045:
	LDA.b #!Define_SMW_Sound1DF9_HitHead
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.b #$0F
	JMP.w SMW_CheckForMarioToExtendedSpriteCollision_CODE_02A4E0

ADDR_02A04F:
	LDY.w DATA_029FAD-$08,x
	LDA.w !RAM_SMW_ExtSpr_XSpeed,x
	AND.b #$80
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F8
	BCS.b ADDR_02A0A9
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b ADDR_02A0A9
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_ExtSpr05_MarioFireball_CurrentLayerPriority,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_Table7E1765,x
	LSR
	LSR
	AND.b #$03
	TAX
	LDA.w SMW_GenericExtendedSpriteGFXRt_FireballTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.w SMW_GenericExtendedSpriteGFXRt_DATA_02A15F,x
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b ADDR_02A09C
	AND.b #$CF
	ORA.b #$10
	STA.w SMW_OAMBuffer[$40].Prop,y
ADDR_02A09C:
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
Return02A0A8:
	RTS

ADDR_02A0A9:
	JMP.w SMW_GenericExtendedSpriteGFXRt_EraseSprite
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr06_ThrownBone(Address)
namespace SMW_ExtSpr06_ThrownBone
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02A26A
	JSR.w SMW_UpdateExtendedSpritePosition_X
	INC.w !RAM_SMW_ExtSpr06_ThrownBone_UnknownRAM7E1765,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_02A267
	INC.w !RAM_SMW_ExtSpr06_ThrownBone_UnknownRAM7E1765,x
CODE_02A267:
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
CODE_02A26A:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr0D_Baseball
	BNE.b CODE_02A2C3
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BEQ.b CODE_02A287
	EOR.w !RAM_SMW_ExtSpr_XSpeed,x
	BPL.b EraseSprite
	BMI.b Return02A2BE
CODE_02A287:
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BNE.b EraseSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$AD
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	ASL
	ASL
	ASL
	ASL
	AND.b #$C0
	ORA.b #$39
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
Return02A2BE:
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseExtendedSprite()

CODE_02A2C3:
	JSR.w SMW_ExtSpr04_Hammer_ThrownBoneEntry
	LDA.w SMW_OAMBuffer[$00].Tile,y
	CMP.b #$26
	LDA.b #$80
	BCS.b CODE_02A2D1
	LDA.b #$82
CODE_02A2D1:
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w SMW_OAMBuffer[$00].Prop,y
	AND.b #$F1
	ORA.b #$02
	STA.w SMW_OAMBuffer[$00].Prop,y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtSpr06_ThrownBone_Main, SMW_ExtSpr0D_Baseball_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr07_LavaSplash(Address)
namespace SMW_ExtSpr07_LavaSplash
%InsertMacroAtXPosition(<Address>)

Tiles:
	%INLINEDATATABLE_SMW_LavaSplashTileNumbers()

Main:
;$029E86
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029E9D
	JSR.w SMW_UpdateExtendedSpritePosition_X
	JSR.w SMW_UpdateExtendedSpritePosition_Y
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	CLC
	ADC.b #$02
	STA.w !RAM_SMW_ExtSpr_YSpeed,x
	CMP.b #$30
	BPL.b EraseSprite
CODE_029E9D:
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b EraseSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_ExtSpr07_LavaSplash_AnimationFrameCounter,x
	LSR
	LSR
	LSR
	NOP #2									;\ Note: It seems Nintendo may have originally had these particles animate slower.
										;/ Optimization: Of course, NOPs that serve a non-timing purpose are better off removed.
	AND.b #$03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$05
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseExtendedSprite()

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr08_LauncherArm(Address)
namespace SMW_ExtSpr08_LauncherArm
%InsertMacroAtXPosition(<Address>)

YSpeed:
	db $08,$00,$F8

EraseSprite:
	%INLINEROUTINE_SMW_EraseExtendedSprite()

Main:
	LDY.b #$00
	LDA.w !RAM_SMW_ExtSpr08_LauncherArm_VerticalDirectionTimer,x
	BEQ.b EraseSprite
	CMP.b #$60
	BCS.b CODE_029E4E
	INY
	CMP.b #$30
	BCS.b CODE_029E4E
	INY
CODE_029E4E:
	PHY
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029E5C
	LDA.w YSpeed,y
	STA.w !RAM_SMW_ExtSpr_YSpeed,x
	JSR.w SMW_UpdateExtendedSpritePosition_Y
CODE_029E5C:
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	PLA
	CMP.b #$01
	LDA.b #$84
	BCC.b CODE_029E6B
	LDA.b #$A4
CODE_029E6B:
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w SMW_OAMBuffer[$00].Prop,y
	AND.b #$00
	ORA.b #$13
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr09_Unused(Address)
namespace SMW_ExtSpr09_Unused
%InsertMacroAtXPosition(<Address>)

DATA_029D5E:
	db $00,$01,$02,$03,$02,$03,$02,$03
	db $03,$02,$03,$02,$03,$02,$01,$00

XDisp:
	db $10,$F8,$03,$10,$F8,$03,$10,$F0
	db $FF,$10,$F0,$FF

YDisp:
	db $02,$02,$EE,$02,$02,$EE,$FE,$FE
	db $E6,$FE,$FE,$E6

Tiles:
	db $B3,$B3,$B1,$B2,$B2,$B0,$8E,$8E
	db $A8,$8C,$8C,$88

Prop:
	db $69,$29,$29

TileSize:
	db $00,$00,$02,$02

EraseSprite:
	%INLINEROUTINE_SMW_EraseExtendedSprite()

Main:
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
	LDY.w !RAM_SMW_ExtSpr_XSpeed,x
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,y
	CMP.b #!Define_SMW_NorSprStatus08_Normal
	BNE.b EraseSprite
	LDA.w !RAM_SMW_ExtSpr_DecrementingTable7E176F,x
	BEQ.b EraseSprite
	LSR
	LSR
	NOP #2
	TAY
	LDA.w DATA_029D5E,y
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ExtSpr_Table7E1765,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	TAY
	STY.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	CLC
	ADC.w XDisp,y
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CLC
	ADC.w YDisp,y
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	CMP.b #$F0
	BCS.b SMW_ExtSpr08_LauncherArm_EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$10
	BCC.b SMW_ExtSpr08_LauncherArm_EraseSprite
	CMP.b #$F0
	BCS.b SMW_ExtSpr08_LauncherArm_EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_Table7E1765,x
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDX.b !RAM_SMW_Misc_ScratchRAM03
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDX.b !RAM_SMW_Misc_ScratchRAM0F
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l TileSize,x
else
	LDA.w TileSize,x
endif
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Player_OnScreenPosXLo
	CLC
	ADC.b #$04
	CMP.b #$08
	BCS.b Return029E35
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b !RAM_SMW_Player_OnScreenPosYLo
	SEC
	SBC.b #$10
	CLC
	ADC.b #$10
	CMP.b #$10
	BCS.b Return029E35
	JMP.w SMW_CheckForMarioToExtendedSpriteCollision_CODE_02A469

Return029E35:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr0A_CloudCoin(Address)
namespace SMW_ExtSpr0A_CloudCoin
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029CF8
	JSR.w SMW_UpdateExtendedSpritePosition_Y
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	CMP.b #$30
	BPL.b CODE_029CC9
	CLC
	ADC.b #$02
	STA.w !RAM_SMW_ExtSpr_YSpeed,x
CODE_029CC9:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr0E_WigglerFlower
	BNE.b ADDR_029CE3
	LDY.b #$08
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$08
	BEQ.b CODE_029CDA
	LDY.b #$F8
CODE_029CDA:
	TYA
	STA.w !RAM_SMW_ExtSpr_XSpeed,x
	JSR.w SMW_UpdateExtendedSpritePosition_X
	BRA.b CODE_029CF8

ADDR_029CE3:
	LDA.w !RAM_SMW_ExtSpr0A_CloudCoin_DisableBlockCollisionFlag,x
	BNE.b ADDR_029CF5
	JSR.w SMW_HandleExtendedSpriteLevelCollision_Main
	BCC.b ADDR_029CF5
	LDA.b #$D0
	STA.w !RAM_SMW_ExtSpr_YSpeed,x
	INC.w !RAM_SMW_ExtSpr0A_CloudCoin_DisableBlockCollisionFlag,x
ADDR_029CF5:
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
CODE_029CF8:
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b CODE_029D5A
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b Return029D5D
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	STY.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ExtSpr0E_WigglerFlower
	BNE.b ADDR_029D45
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	SEC
	SBC.b #$05
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$98
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$0B
CODE_029D36:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS

ADDR_029D45:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$C2
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$04
	JSR.w CODE_029D36
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS

CODE_029D5A:
	STZ.w !RAM_SMW_ExtSpr_SpriteID,x
Return029D5D:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtSpr0A_CloudCoin_Main, SMW_ExtSpr0E_WigglerFlower_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr0C_VolcanoLotusFire(Address)
namespace SMW_ExtSpr0C_VolcanoLotusFire
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_ExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b EraseSprite
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BEQ.b CODE_029B76
	BMI.b CODE_029BA5
	BPL.b EraseSprite
CODE_029B76:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CMP.b #$F0
	BCS.b CODE_029BA5
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$09
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	EOR.w !RAM_SMW_NorSpr_CurrentSlotID
	LSR
	LSR
	LDA.b #$A6
	BCC.b CODE_029B99
	LDA.b #$B6
CODE_029B99:
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
CODE_029BA5:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return029BD9
	JSR.w SMW_CheckForMarioToExtendedSpriteCollision_Main
	JSR.w SMW_UpdateExtendedSpritePosition_X
	JSR.w SMW_UpdateExtendedSpritePosition_Y
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_029BC2
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	CMP.b #$18
	BPL.b CODE_029BC2
	INC.w !RAM_SMW_ExtSpr_YSpeed,x
CODE_029BC2:
	LDA.w !RAM_SMW_ExtSpr_YSpeed,x
	BMI.b Return029BD9
	TXA
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_GlobalFrames
	LDY.b #$08
	AND.b #$08
	BNE.b CODE_029BD5
	LDY.b #$F8
CODE_029BD5:
	TYA
	STA.w !RAM_SMW_ExtSpr_XSpeed,x
Return029BD9:
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseExtendedSprite()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr0F_SmokeTrail(Address)
namespace SMW_ExtSpr0F_SmokeTrail
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $66,$64,$62,$60,$60,$60,$60,$60
	db $60,$60,$60

Main:
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_ExtSpr0F_SmokeTrail_DespawnTimer,x
	LSR
	PHX
	TAX
	LDA.b !RAM_SMW_Counter_LocalFrames
	ASL
	ASL
	ASL
	ASL
	AND.b #$C0
	ORA.b #$32
	STA.w SMW_OAMBuffer[$00].Prop,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	PLX
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return029C7E
	LDA.w !RAM_SMW_ExtSpr0F_SmokeTrail_DespawnTimer,x
	BEQ.b EraseSprite
	CMP.b #$06
	BNE.b CODE_029C7B
	LDA.w !RAM_SMW_ExtSpr_XSpeed,x
	ASL
	ROR.w !RAM_SMW_ExtSpr_XSpeed,x
CODE_029C7B:
	JSR.w SMW_UpdateExtendedSpritePosition_X
Return029C7E:
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseExtendedSprite()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr10_SpinJumpStars(Address)
namespace SMW_ExtSpr10_SpinJumpStars
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_ExtSpr10_SpinJumpStars_DespawnTimer,x
	BEQ.b SMW_ExtSpr0F_SmokeTrail_EraseSprite
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.b #$34
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDA.b #$EF
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return029CAF
	LDA.w !RAM_SMW_ExtSpr10_SpinJumpStars_DespawnTimer,x
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_029CB0,y
	BNE.b Return029CAF
	JSR.w SMW_UpdateExtendedSpritePosition_X
	JSR.w SMW_UpdateExtendedSpritePosition_Y
Return029CAF:
	RTS

DATA_029CB0:
	db $FF,$07,$01,$00,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr11_YoshiFireball(Address)
namespace SMW_ExtSpr11_YoshiFireball
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029F6E
	JSR.w SMW_UpdateExtendedSpritePosition_X
	JSR.w SMW_UpdateExtendedSpritePosition_Y
	JSR.w SMW_CheckForPlayerFireballToNormalSpriteCollision_Main
CODE_029F6E:
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.b #$04
	BCC.b CODE_029F7F
	LDA.b #$2B
CODE_029F7F:
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w !RAM_SMW_ExtSpr_XSpeed,x
	AND.b #$80
	EOR.b #$80
	LSR
	ORA.b #$35
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtSpr12_BreathBubble(Address)
namespace SMW_ExtSpr12_BreathBubble
%InsertMacroAtXPosition(<Address>)

XDisp:
	db $00,$01,$00,$FF

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029F2A
	INC.w !RAM_SMW_ExtSpr12_BreathBubble_AnimationFrameCounter,x
	LDA.w !RAM_SMW_ExtSpr12_BreathBubble_AnimationFrameCounter,x
	AND.b #$30
	BEQ.b CODE_029F08
	DEC.w !RAM_SMW_ExtSpr_YPosLo,x
	LDY.w !RAM_SMW_ExtSpr_YPosLo,x
	INY
	BNE.b CODE_029F08
	DEC.w !RAM_SMW_ExtSpr_YPosHi,x
CODE_029F08:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCS.b CODE_029F2A
	JSR.w SMW_HandleExtendedSpriteLevelCollision_Main
	BCS.b CODE_029F27
	LDA.b !RAM_SMW_Flag_UnderwaterLevel
	BNE.b CODE_029F2A
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.b #$06
	BCC.b CODE_029F2A
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_029F27
	LDA.b !RAM_SMW_Misc_ScratchRAM0D
	CMP.b #$06
	BCC.b CODE_029F2A
CODE_029F27:
	JMP.w SMW_GenericExtendedSpriteGFXRt_EraseSprite

CODE_029F2A:
	LDA.w !RAM_SMW_ExtSpr_YPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_ExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BNE.b CODE_029F27
	JSR.w SMW_GenericExtendedSpriteGFXRt_Main
	LDA.w !RAM_SMW_ExtSpr12_BreathBubble_AnimationFrameCounter,x
	AND.b #$0C
	LSR
	LSR
	TAY
	LDA.w XDisp,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.w SMW_ExtendedSpriteOAMIndexes_Main,x
	LDA.w SMW_OAMBuffer[$00].XDisp,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w SMW_OAMBuffer[$00].YDisp,y
	CLC
	ADC.b #$05
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$1C
	STA.w SMW_OAMBuffer[$00].Tile,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BounceSpr01_TurnBlock(Address)
namespace SMW_BounceSpr01_TurnBlock
%InsertMacroAtXPosition(<Address>)

YAcceleration:
	db $10,$00,$00,$F0

XAcceleration:
	db $00,$F0,$10,$00

DATA_0290D6:
	db $80,$80,$80,$00

DATA_0290DA:
	db $80,$E0,$20,$80

Main:
	JSR.w SMW_BounceSpriteGFXRt_Main
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b SMW_BounceSpr07_SpinningTurnBlock_Return0290CD
	LDA.w !RAM_SMW_BounceSpr_CurrentStatus,x
	BNE.b CODE_02910B
	INC.w !RAM_SMW_BounceSpr_CurrentStatus,x
	JSR.w SMW_GetBounceSpriteLevelCollisionMap16ID_Main
	JSR.w SMW_SpawnMap16TileFromBounceSprite_InvisibleSolidBlock
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	AND.b #$03
	TAY
	LDA.w DATA_0290D6,y
	CMP.b #$80
	BEQ.b CODE_029102
	STA.b !RAM_SMW_Player_YSpeed
CODE_029102:
	LDA.w DATA_0290DA,y
	CMP.b #$80
	BEQ.b CODE_02910B
	STA.b !RAM_SMW_Player_XSpeed
CODE_02910B:
	JSR.w SMW_UpdateBounceSpritePosition_Y
	JSR.w SMW_UpdateBounceSpritePosition_X
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	AND.b #$03
	TAY
	LDA.w !RAM_SMW_BounceSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.w !RAM_SMW_BounceSpr_YSpeed,x
	LDA.w !RAM_SMW_BounceSpr_XSpeed,x
	CLC
	ADC.w XAcceleration,y
	STA.w !RAM_SMW_BounceSpr_XSpeed,x
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	AND.b #$03
	CMP.b #$03
	BNE.b CODE_02915E
	LDA.b !RAM_SMW_Player_CurrentState
	CMP.b #!Define_SMW_PlayerState01_PowerDown
	BCS.b CODE_02915E
	LDA.b #$20
	LDY.w !RAM_SMW_Player_RidingYoshiFlag
	BEQ.b CODE_029143
	LDA.b #$30
CODE_029143:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Player_YPosLo
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b #$01
	STA.w !RAM_SMW_Misc_PlayerOnSolidSprite
	STA.w !RAM_SMW_Blocks_NoteBlockBounceFlag
	STZ.b !RAM_SMW_Player_YSpeed
CODE_02915E:
	LDA.w !RAM_SMW_BounceSpr_Timer,x
	BNE.b Return02919C
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	AND.b #$03
	CMP.b #$03
	BNE.b CODE_029182
	LDA.b #$A0
	STA.b !RAM_SMW_Player_YSpeed
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_Player_YPosLo
	LDA.b !RAM_SMW_Player_YPosHi
	SBC.b #$00
	STA.b !RAM_SMW_Player_YPosHi
	LDA.b #!Define_SMW_Sound1DFC_Springboard
	STA.w !RAM_SMW_IO_SoundCh3
CODE_029182:
	JSR.w SMW_SpawnMap16TileFromBounceSprite_MultiCoinBlock
	LDY.w !RAM_SMW_BounceSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_BounceSpr06_OnOffBlock
	BCC.b NotOnOffBlock
	LDA.b #!Define_SMW_Sound1DF9_ONOFFSwitch
	STA.w !RAM_SMW_IO_SoundCh1
	LDA.w !RAM_SMW_Flag_OnOffSwitch
	EOR.b #$01
	STA.w !RAM_SMW_Flag_OnOffSwitch
NotOnOffBlock:
	STZ.w !RAM_SMW_BounceSpr_SpriteID,x
Return02919C:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_BounceSpr01_TurnBlock_Main, SMW_BounceSpr02_NoteBlock_Main)
	%SetDuplicateOrNullPointer(SMW_BounceSpr01_TurnBlock_Main, SMW_BounceSpr03_QuestionBlock_Main)
	%SetDuplicateOrNullPointer(SMW_BounceSpr01_TurnBlock_Main, SMW_BounceSpr04_SidewaysMovingBlock_Main)
	%SetDuplicateOrNullPointer(SMW_BounceSpr01_TurnBlock_Main, SMW_BounceSpr05_GlassBlock_Main)
	%SetDuplicateOrNullPointer(SMW_BounceSpr01_TurnBlock_Main, SMW_BounceSpr06_OnOffBlock_Main)
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_GetBounceSpriteLevelCollisionMap16ID(Address)
namespace SMW_GetBounceSpriteLevelCollisionMap16ID
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$01
	LDY.w !RAM_SMW_BounceSpr_Properties,x
	STY.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b CODE_02926F
	ASL
CODE_02926F:
	AND.b !RAM_SMW_Misc_LevelLayoutFlags
	BEQ.b CODE_0292CA
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	SEC
	SBC.b #$03
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	SBC.b #$00
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b Return0292C9
	STA.b !RAM_SMW_Misc_ScratchRAM03
	AND.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.w !RAM_SMW_BounceSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_BounceSpr_XPosHi,x
	CMP.b #$02
	BCS.b Return0292C9
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_0292B2						; Glitch: This should be BPL.b, not BEQ.b. Otherwise, bounce sprites can collect coins that are not on the same layer as the block or 16 screens away.
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Vertical_L2,x
CODE_0292B2:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_0292C3						; Glitch: Same as above
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Vertical_L2,x
CODE_0292C3:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
	BRA.b CODE_02931A

Return0292C9:
	RTS

CODE_0292CA:
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	SEC
	SBC.b #$03
	AND.b #$F0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	SBC.b #$00
	CMP.b #$02
	BCS.b Return0292C9
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_BounceSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_BounceSpr_XPosHi,x
	CMP.b !RAM_SMW_Misc_ScreensInLvl
	BCS.b Return0292C9
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	LSR
	LSR
	LSR
	LSR
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM03
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_029305						; Glitch: Same as above
	LDA.l SMW_LevelDataLayoutTables_EightBitLo_Horizontal_L2,x
CODE_029305:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L1,x
	LDY.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_029316						; Glitch: Same as above
	LDA.l SMW_LevelDataLayoutTables_EightBitHi_Horizontal_L2,x
CODE_029316:
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM06
CODE_02931A:
	LDA.b #!RAM_SMW_Blocks_Map16TableLo>>16
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	STA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	INC.b !RAM_SMW_Misc_ScratchRAM07
	LDA.b [!RAM_SMW_Misc_ScratchRAM05]
	BNE.b Return029355						; Glitch: This routine does not JSL.l to SMW_ModifyMap16IDForSpecialBlocks_Main, which means coin/used block interaction is incorrect when a P-switch is active.
	LDA.w !RAM_SMW_Blocks_CurrentlyProcessedMap16TileLo
	CMP.b #$2B
	BNE.b Return029355
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	PHA
	SBC.b #$03
	AND.b #$F0
	STA.w !RAM_SMW_BounceSpr_YPosLo,x
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	PHA
	SBC.b #$00
	STA.w !RAM_SMW_BounceSpr_YPosHi,x
	JSR.w SMW_SpawnMap16TileFromBounceSprite_InvisibleSolidBlock	;\ Glitch: This causes a bug where coins collected by hitting the block below causes the space occupied by the coin to become solid.
									;/ The fix for this would be to load #$02 into A, then JSR.w to SMW_SpawnMap16TileFromBounceSprite_Main
	JSR.w ADDR_029356
	PLA
	STA.w !RAM_SMW_BounceSpr_YPosHi,x
	PLA
	STA.w !RAM_SMW_BounceSpr_YPosLo,x
Return029355:
	RTS

ADDR_029356:
	LDY.b #!Define_SMW_MaxSpinningCoinSpriteSlot
ADDR_029358:
	LDA.w !RAM_SMW_BlockCoinSpr_SlotID,y
	BEQ.b ADDR_029361
	DEY
	BPL.b ADDR_029358
	INY
ADDR_029361:
	LDA.b #$01
	STA.w !RAM_SMW_BlockCoinSpr_SlotID,y
	JSL.l SMW_GiveCoins_OneCoin
	LDA.w !RAM_SMW_BounceSpr_XPosLo,x
	STA.w !RAM_SMW_BlockCoinSpr_XPosLo,y
	LDA.w !RAM_SMW_BounceSpr_XPosHi,x
	STA.w !RAM_SMW_BlockCoinSpr_XPosHi,y
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	STA.w !RAM_SMW_BlockCoinSpr_YPosLo,y
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	STA.w !RAM_SMW_BlockCoinSpr_YPosHi,y
	LDA.w !RAM_SMW_BounceSpr_Properties,x
	ASL
	ROL
	AND.b #$01
	STA.w !RAM_SMW_BlockCoinSpr_LayerIndex,y
	LDA.b #$D0
	STA.w !RAM_SMW_BlockCoinSpr_YSpeed,y
Return029391:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_BounceSpr07_SpinningTurnBlock(Address)
namespace SMW_BounceSpr07_SpinningTurnBlock
%InsertMacroAtXPosition(<Address>)

YAcceleration:
	db $13,$00,$00,$ED

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return0290CD
	LDA.w !RAM_SMW_BounceSpr_CurrentStatus,x
	BNE.b CODE_029085
	INC.w !RAM_SMW_BounceSpr_CurrentStatus,x
	JSR.w SMW_SpawnMap16TileFromBounceSprite_InvisibleSolidBlock
CODE_029085:
	LDA.w !RAM_SMW_BounceSpr_Timer,x
	BEQ.b CODE_0290BB
	CMP.b #$01
	BNE.b CODE_0290A8
	LDA.w !RAM_SMW_BounceSpr_YPosLo,x
	CLC
	ADC.b #$08
	AND.b #$F0
	STA.w !RAM_SMW_BounceSpr_YPosLo,x
	LDA.w !RAM_SMW_BounceSpr_YPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_BounceSpr_YPosHi,x
	LDA.b #$05
	JSR.w SMW_SpawnMap16TileFromBounceSprite_Main
	BRA.b CODE_0290BB

CODE_0290A8:
	JSR.w SMW_UpdateBounceSpritePosition_Y
	LDY.w !RAM_SMW_BounceSpr_Properties,x
	LDA.w !RAM_SMW_BounceSpr_YSpeed,x
	CLC
	ADC.w YAcceleration,y
	STA.w !RAM_SMW_BounceSpr_YSpeed,x
	JSR.w SMW_BounceSpriteGFXRt_Main
CODE_0290BB:
	LDA.w !RAM_SMW_BounceSpr07_SpinningTurnBlock_DespawnTimer,x
	BEQ.b CODE_0290C4
	DEC.w !RAM_SMW_BounceSpr07_SpinningTurnBlock_DespawnTimer,x
	RTS

CODE_0290C4:
	LDA.w !RAM_SMW_BounceSpr_Map16TileToSpawn,x
	JSR.w SMW_SpawnMap16TileFromBounceSprite_Main
	STZ.w !RAM_SMW_BounceSpr_SpriteID,x
Return0290CD:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ProcessScoreSprites(Address)
namespace SMW_ProcessScoreSprites
%InsertMacroAtXPosition(<Address>)

LeftTiles:
	db $00		; N/A
	db $83		; 10 Points
	db $83		; 20 Points
	db $83		; 40 Points
	db $83		; 80 Points
	db $44		; 100 Points
	db $54		; 200 Points
	db $46		; 400 Points
	db $47		; 800 Points
	db $44		; 1000 Points
	db $54		; 2000 Points
	db $46		; 4000 Points
	db $47		; 8000 Points
	db $56		; 1-Up
	db $29		; 2-Up
	db $39		; 3-Up
	db $38		; 5-Up
	db $5E		; 5 Coins
	db $5E		; 10 Coins
	db $5E		; 15 Coins
	db $5E		; 20 Coins
	db $5E		; 25 Coins

RightTiles:
	db $00		; N/A
	db $44		; 10 Points
	db $54		; 20 Points
	db $46		; 40 Points
	db $47		; 80 Points
	db $45		; 100 Points
	db $45		; 200 Points
	db $45		; 400 Points
	db $45		; 800 Points
	db $55		; 1000 Points
	db $55		; 2000 Points
	db $55		; 4000 Points
	db $55		; 8000 Points
	db $57		; 1-Up
	db $57		; 2-Up
	db $57		; 3-Up
	db $57		; 5-Up
	db $4E		; 5 Coins
	db $44		; 10 Coins
	db $4F		; 15 Coins
	db $54		; 20 Coins
	db $5D		; 25 Coins

PointMultiplierLo:
	db $00		; N/A
	db $01		; 10 Points
	db $02		; 20 Points
	db $04		; 40 Points
	db $08		; 80 Points
	db $0A		; 100 Points
	db $14		; 200 Points
	db $28		; 400 Points
	db $50		; 800 Points
	db $64		; 1000 Points
	db $C8		; 2000 Points
	db $90		; 4000 Points
	db $20		; 8000 Points
	db $00		; 1-Up
	db $00		; 2-Up
	db $00		; 3-Up
	db $00		; 5-Up

PointMultiplierHi:
	db $00		; N/A
	db $00		; 10 Points
	db $00		; 20 Points
	db $00		; 40 Points
	db $00		; 80 Points
	db $00		; 100 Points
	db $00		; 200 Points
	db $00		; 400 Points
	db $00		; 800 Points
	db $00		; 1000 Points
	db $00		; 2000 Points
	db $01		; 4000 Points
	db $03		; 8000 Points
	db $00		; 1-Up
	db $00		; 2-Up
	db $00		; 3-Up
	db $00		; 5-Up

UpdateSpeedFrameIndex:
	db $03,$01,$00,$00

OAMIndex:
	db $B0,$B8,$C0,$C8,$D0,$D8

Main:
;$02ADA4
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_02ADB8
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b Return02ADC8
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$01].YDisp
	STA.w SMW_OAMBuffer[$02].YDisp
CODE_02ADB8:
	LDX.b #!Define_SMW_MaxScoreSpriteSlot
CODE_02ADBA:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_ScoreSpr_SpriteID,x
	BEQ.b CODE_02ADC5
	JSR.w Sub
CODE_02ADC5:
	DEX
	BPL.b CODE_02ADBA
Return02ADC8:
	RTS

Sub:
;$02ADC9
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BEQ.b CODE_02ADD0
	JMP.w CODE_02AE5B

CODE_02ADD0:
	LDA.w !RAM_SMW_ScoreSpr_YSpeed,x
	BNE.b CODE_02ADE4
	STZ.w !RAM_SMW_ScoreSpr_SpriteID,x
	RTS

LivesToGive:
	db $01		; 1up
	db $02		; 2up
	db $03		; 3up
	db $05		; 5up

CoinsToGive:
	db $05		; 5 Coins
	db $0A		; 10 Coins
	db $0F		; 15 Coins
	db $14		; 20 Coins
	db $19		; 25 Coins

TwoUp3UpProp:						;\ Glitch: The 5-up sprite has garbage properties due to this table not being 3 bytes
	db $04,$06					;/ If you're wondering, it used #$DE, which is the hex value of the DEC.w absolute,x opcode below.

CODE_02ADE4:
	DEC.w !RAM_SMW_ScoreSpr_YSpeed,x
	CMP.b #$2A
	BNE.b CODE_02AE38
	LDY.w !RAM_SMW_ScoreSpr_SpriteID,x
	CPY.b #$0D
	BCC.b CODE_02AE12
	CPY.b #$11
	BCC.b CODE_02AE03
	PHX
	PHY
	LDA.w CoinsToGive-$11,y
	JSL.l SMW_GiveCoins_MultipleCoins
	PLY
	PLX
	BRA.b CODE_02AE12

CODE_02AE03:
	LDA.w LivesToGive-$0D,y
	CLC
	ADC.w !RAM_SMW_Misc_1upHandler
	STA.w !RAM_SMW_Misc_1upHandler
	STZ.w !RAM_SMW_Timer_Give1up
	BRA.b CODE_02AE35

CODE_02AE12:
	LDA.w !RAM_SMW_Player_CurrentCharacter
	ASL
	ADC.w !RAM_SMW_Player_CurrentCharacter
	TAX
	LDA.w !RAM_SMW_Player_MarioScoreLo,x
	CLC
	ADC.w PointMultiplierLo,y
	STA.w !RAM_SMW_Player_MarioScoreLo,x
	LDA.w !RAM_SMW_Player_MarioScoreMid,x
	ADC.w PointMultiplierHi,y
	STA.w !RAM_SMW_Player_MarioScoreMid,x
	LDA.w !RAM_SMW_Player_MarioScoreHi,x
	ADC.b #$00
	STA.w !RAM_SMW_Player_MarioScoreHi,x
CODE_02AE35:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
CODE_02AE38:
	LDA.w !RAM_SMW_ScoreSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w UpdateSpeedFrameIndex,y
	BNE.b CODE_02AE5B
	LDA.w !RAM_SMW_ScoreSpr_YPosLo,x
	TAY
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$04
	BCC.b CODE_02AE5B
	DEC.w !RAM_SMW_ScoreSpr_YPosLo,x
	TYA
	BNE.b CODE_02AE5B
	DEC.w !RAM_SMW_ScoreSpr_YPosHi,x
CODE_02AE5B:
	LDA.w !RAM_SMW_ScoreSpr_LayerIndex,x
	ASL
	ASL
	TAY
	REP.b #$20
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Mirror_CurrentLayer1XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	SEP.b #$20
	LDA.w !RAM_SMW_ScoreSpr_XPosLo,x
	CLC
	ADC.b #$0C
	PHP
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_ScoreSpr_XPosHi,x
	SBC.b !RAM_SMW_Misc_ScratchRAM05
	PLP
	ADC.b #$00
	BNE.b Return02AEFB
	LDA.w !RAM_SMW_ScoreSpr_XPosLo,x
	CMP.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_ScoreSpr_XPosHi,x
	SBC.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b Return02AEFB
	LDA.w !RAM_SMW_ScoreSpr_YPosLo,x
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_ScoreSpr_YPosHi,x
	SBC.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b Return02AEFB
	LDY.w OAMIndex,x
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_02AEA5
	LDY.b #$04
CODE_02AEA5:
	LDA.w !RAM_SMW_ScoreSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].YDisp,y
	STA.w SMW_OAMBuffer[$01].YDisp,y
	LDA.w !RAM_SMW_ScoreSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	STA.w SMW_OAMBuffer[$00].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$01].XDisp,y
	PHX
	LDA.w !RAM_SMW_ScoreSpr_SpriteID,x
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l LeftTiles,x
else
	LDA.w LeftTiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l RightTiles,x
else
	LDA.w RightTiles,x
endif
	STA.w SMW_OAMBuffer[$01].Tile,y
	PLX
	PHY
	LDY.w !RAM_SMW_ScoreSpr_SpriteID,x
	CPY.b #$0E
	LDA.b #$08
	BCC.b CODE_02AEDF
	LDA.w TwoUp3UpProp-$0E,y
CODE_02AEDF:
	PLY
	ORA.b #$30
	STA.w SMW_OAMBuffer[$00].Prop,y
	STA.w SMW_OAMBuffer[$01].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,y
	LDA.w !RAM_SMW_ScoreSpr_SpriteID,x
	CMP.b #$11
	BCS.b ADDR_02AEFC
Return02AEFB:
	RTS

ADDR_02AEFC:
	LDY.b #$4C
	LDA.w !RAM_SMW_ScoreSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	SEC
	SBC.b #$08
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ScoreSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$5F
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$04
	ORA.b #$30
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS

ADDR_02AF29:								; Note: Unused code
	STZ.w !RAM_SMW_ScoreSpr_SpriteID,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SmokeSpr01_PuffOfSmoke(Address)
namespace SMW_SmokeSpr01_PuffOfSmoke
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $66,$66,$64,$62,$60,$62,$60

EraseSprite2:
	%INLINEROUTINE_SMW_EraseSmokeSprite()

Main:
;$0296E3
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	BEQ.b EraseSprite2
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,x				;\ Note: Smoke sprite 81 is this sprite during the get cape animation.
	BMI.b CODE_0296F1						;/
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_0296F4
CODE_0296F1:
	DEC.w !RAM_SMW_SmokeSpr_Timer,x
CODE_0296F4:
	LDA.b !RAM_SMW_NorSpr_SpriteID+$07
	CMP.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	BEQ.b CODE_02974A
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	AND.b #$40
	BEQ.b CODE_02974A
	LDY.w SMW_SmokeSpriteOAMIndexes_Two,x
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F4
	BCS.b EraseSprite2
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$E0
	BCS.b EraseSprite2
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	CMP.b #$08
	LDA.b #$00
	BCS.b CODE_02972D
	ASL
	ASL
	ASL
	ASL
	AND.b #$40
CODE_02972D:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	PHY
	LSR
	LSR
	TAY
	LDA.w Tiles,y
	PLY
	STA.w SMW_OAMBuffer[$40].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	RTS

CODE_02974A:
	LDY.w SMW_SmokeSpriteOAMIndexes_One,x
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F4
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$E0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	CMP.b #$08
	LDA.b #$00
	BCS.b CODE_029776
	ASL
	ASL
	ASL
	ASL
	AND.b #$40
CODE_029776:
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	PHY
	LSR
	LSR
	TAY
	LDA.w Tiles,y
	PLY
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseSmokeSprite()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SmokeSpr02_ContactEffect(Address)
namespace SMW_SmokeSpr02_ContactEffect
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	BEQ.b SMW_SmokeSpr01_PuffOfSmoke_EraseSprite
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_0297A3
	DEC.w !RAM_SMW_SmokeSpr_Timer,x
CODE_0297A3:
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_0297B2
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	CMP.b #$C1
	BEQ.b CODE_0297B2
	JMP.w CODE_029838

CODE_0297B2:
	LDY.b #$F0
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F0
	BCS.b SMW_SmokeSpr01_PuffOfSmoke_EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	STA.w SMW_OAMBuffer[$02].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$01].XDisp,y
	STA.w SMW_OAMBuffer[$03].XDisp,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,y
	STA.w SMW_OAMBuffer[$01].YDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$02].YDisp,y
	STA.w SMW_OAMBuffer[$03].YDisp,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	ASL
	ASL
	ASL
	ASL
	ASL
	AND.b #$40
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	STA.w SMW_OAMBuffer[$01].Prop,y
	EOR.b #$C0
	STA.w SMW_OAMBuffer[$02].Prop,y
	STA.w SMW_OAMBuffer[$03].Prop,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	AND.b #$02
	BNE.b CODE_029815
	LDA.b #$7C
	STA.w SMW_OAMBuffer[$00].Tile,y
	STA.w SMW_OAMBuffer[$03].Tile,y
	LDA.b #$7D
	STA.w SMW_OAMBuffer[$01].Tile,y
	STA.w SMW_OAMBuffer[$02].Tile,y
	BRA.b CODE_029825					; Optimization: Move this BRA.b to before the "LDA.b #$7D" and point it 11 bytes ahead to save 6 bytes.

CODE_029815:
	LDA.b #$7D
	STA.w SMW_OAMBuffer[$00].Tile,y
	STA.w SMW_OAMBuffer[$03].Tile,y
	LDA.b #$7C
	STA.w SMW_OAMBuffer[$01].Tile,y
	STA.w SMW_OAMBuffer[$02].Tile,y
CODE_029825:
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$02].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$03].Slot,y
	RTS

CODE_029838:
	LDY.b #$90
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$42].XDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$41].XDisp,y
	STA.w SMW_OAMBuffer[$43].XDisp,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$41].YDisp,y
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$42].YDisp,y
	STA.w SMW_OAMBuffer[$43].YDisp,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	ASL
	ASL
	ASL
	ASL
	ASL
	AND.b #$40
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$41].Prop,y
	EOR.b #$C0
	STA.w SMW_OAMBuffer[$42].Prop,y
	STA.w SMW_OAMBuffer[$43].Prop,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	AND.b #$02
	BNE.b CODE_02989B
	LDA.b #$7C
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$43].Tile,y
	LDA.b #$7D
	STA.w SMW_OAMBuffer[$41].Tile,y
	STA.w SMW_OAMBuffer[$42].Tile,y
	BRA.b CODE_0298AB					; Optimization: Move this BRA.b to before the "LDA.b #$7D" and point it 11 bytes ahead to save 6 bytes.

CODE_02989B:
	LDA.b #$7D
	STA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$43].Tile,y
	LDA.b #$7C
	STA.w SMW_OAMBuffer[$41].Tile,y
	STA.w SMW_OAMBuffer[$42].Tile,y
CODE_0298AB:
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$41].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$42].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$43].Slot,y
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseSmokeSprite()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SmokeSpr03_TurnAroundSmoke(Address)
namespace SMW_SmokeSpr03_TurnAroundSmoke
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $66,$66,$64,$62,$62

Main:
;$029927
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	BNE.b CODE_029941
	BIT.w !RAM_SMW_Misc_NMIToUseFlag
	BVC.b CODE_02993E
	LDA.w !RAM_SMW_Flag_ReznorRoomOAMIndexTimer
	BNE.b CODE_02993E
	LDY.w SMW_SmokeSpriteOAMIndexes_Two,x
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$40].YDisp,y
CODE_02993E:
	JMP.w SMW_SmokeSpr01_PuffOfSmoke_EraseSprite

CODE_029941:
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02994F
	DEC.w !RAM_SMW_SmokeSpr_Timer,x
	AND.b #$07
	BNE.b CODE_02994F
	DEC.w !RAM_SMW_SmokeSpr_YPosLo,x
CODE_02994F:
	LDA.b !RAM_SMW_NorSpr_SpriteID+$07
	CMP.b #!Define_SMW_SpriteID_NorSpr0A9_Reznor
	BEQ.b CODE_02996C
	LDA.w !RAM_SMW_Flag_ReznorRoomOAMIndexTimer
	BNE.b CODE_02996C
	LDA.w !RAM_SMW_Misc_NMIToUseFlag
	BPL.b CODE_02996C
	CMP.b #$C1
	BEQ.b CODE_029967
	AND.b #$40
	BNE.b CODE_02999F
CODE_029967:
	LDY.w SMW_SmokeSpriteOAMIndexes_Two,x
	BRA.b CODE_02996F

CODE_02996C:
	LDY.w SMW_SmokeSpriteOAMIndexes_One,x
CODE_02996F:
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	LSR
	LSR
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS

CODE_02999F:
	LDY.w SMW_SmokeSpriteOAMIndexes_Two,x
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$40].Prop,y
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	LSR
	LSR
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	STA.w SMW_OAMBuffer[$40].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_SmokeSpr05_Glitter(Address)
namespace SMW_SmokeSpr05_Glitter
%InsertMacroAtXPosition(<Address>)

DATA_0298C2:
	db $04,$08,$04,$00

DATA_0298C6:
	db $FC,$04,$0C,$04

Main:
;$0298CA
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	BEQ.b SMW_SmokeSpr02_ContactEffect_EraseSprite
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return029921
	DEC.w !RAM_SMW_SmokeSpr_Timer,x
	AND.b #$03
	BNE.b Return029921
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
CODE_0298DC:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b CODE_0298F1
	DEY
	BPL.b CODE_0298DC
	DEC.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
	BPL.b CODE_0298EE
	LDA.b #!Define_SMW_MaxMinorExtendedSpriteSlot
	STA.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_0298EE:
	LDY.w !RAM_SMW_MExtSpr_SlotToOverwriteWhenSlotsFull
CODE_0298F1:
	LDA.b #!Define_SMW_SpriteID_MExtSpr02_SmallStar
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	LDA.w !RAM_SMW_SmokeSpr_YPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_SmokeSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_SmokeSpr_Timer,x
	LSR
	LSR
	AND.b #$03
	PHX
	TAX
	LDA.w DATA_0298C2,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.w DATA_0298C6,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	PLX
	LDA.b #$17
	STA.w !RAM_SMW_MExtSpr_Timer,y
Return029921:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_MExtSpr01_BrickPiece(Address)
namespace SMW_MExtSpr01_BrickPiece
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_028FCA
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BEQ.b CODE_028FAB
	LDY.b #$00
	LDA.w !RAM_SMW_MExtSpr_XSpeed,x
	BPL.b CODE_028F9D
	DEY
CODE_028F9D:
	CLC
	ADC.w !RAM_SMW_MExtSpr_XPosLo,x
	STA.w !RAM_SMW_MExtSpr_XPosLo,x
	TYA
	ADC.w !RAM_SMW_MExtSpr_XPosHi,x
	STA.w !RAM_SMW_MExtSpr_XPosHi,x
CODE_028FAB:
	LDY.b #$00
	LDA.w !RAM_SMW_MExtSpr_YSpeed,x
	BPL.b CODE_028FB3
	DEY
CODE_028FB3:
	CLC
	ADC.w !RAM_SMW_MExtSpr_YPosLo,x
	STA.w !RAM_SMW_MExtSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_MExtSpr_YPosHi,x
	STA.w !RAM_SMW_MExtSpr_YPosHi,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_028FCA
	INC.w !RAM_SMW_MExtSpr_YSpeed,x
CODE_028FCA:
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_MExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BEQ.b CODE_028FDD
	BPL.b SMW_MExtSpr04_PodobooFire_EraseSprite
	BMI.b Return02902C							; Optimization: RTS?

CODE_028FDD:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b SMW_MExtSpr04_PodobooFire_EraseSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$F0
	BCS.b SMW_MExtSpr04_PodobooFire_EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	PHA
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	CLC
	ADC.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	AND.b #$07
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	PLA
	BEQ.b CODE_029018
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$0E
CODE_029018:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	EOR.l Flip,x
else
	EOR.w Flip,x
endif
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
Return02902C:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_MExtSpr01_BrickPiece(Address)
namespace SMW_MExtSpr01_BrickPiece
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $3C,$3D,$3D,$3C,$3C,$3D,$3D,$3C

Flip:
	db $00,$00,$80,$80,$80,$C0,$40,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr02_SmallStar(Address)
namespace SMW_MExtSpr02_SmallStar
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $66,$6E,$FF,$6D,$6C,$5C

Main:
;$028ED2
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	BNE.b CODE_028EDA
EraseSprite:
	JMP.w SMW_MExtSpr04_PodobooFire_EraseSprite

CODE_028EDA:
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_028EE1
	DEC.w !RAM_SMW_MExtSpr_Timer,x
CODE_028EE1:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_MExtSpr_SpriteID,x
	PHA
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	LSR
	LSR
	LSR
	TAX
	PLA
	CMP.b #!Define_SMW_SpriteID_MExtSpr05_SmallStar
	BNE.b CODE_028F11
	INX
	INX
	INX
CODE_028F11:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$06
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_MExtSpr02_SmallStar_Main, SMW_MExtSpr05_SmallStar_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr03_EggShell(Address)
namespace SMW_MExtSpr03_EggShell
%InsertMacroAtXPosition(<Address>)

UNK_028E7A:							;\ Note: Seems like this may have been tile Property data for some sprite.
	db $03,$43,$83,$C3					;/

Main:
	DEC.w !RAM_SMW_MExtSpr_Timer,x
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	AND.b #$3F
	BEQ.b SMW_MExtSpr02_SmallStar_EraseSprite
	JSR.w SMW_UpdateMinorExtendedSpritePosition_X
	JSR.w SMW_UpdateMinorExtendedSpritePosition_Y
	INC.w !RAM_SMW_MExtSpr_YSpeed,x
	INC.w !RAM_SMW_MExtSpr_YSpeed,x
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b SMW_MExtSpr02_SmallStar_EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F8
	BCS.b SMW_MExtSpr02_SmallStar_EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b #$6F
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	AND.b #$C0
	ORA.b #$03
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr04_PodobooFire(Address)
namespace SMW_MExtSpr04_PodobooFire
%InsertMacroAtXPosition(<Address>)

Tiles:
	%INLINEDATATABLE_SMW_LavaSplashTileNumbers()

Main:
;$028F2F
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b EraseSprite
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	BEQ.b EraseSprite
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_028F4D
	DEC.w !RAM_SMW_MExtSpr_Timer,x
	JSR.w SMW_UpdateMinorExtendedSpritePosition_Y
	INC.w !RAM_SMW_MExtSpr_YSpeed,x
CODE_028F4D:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	CMP.b #$F0
	BCS.b EraseSprite
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	LSR
	LSR
	LSR
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$05
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseMinorExtendedSprite()
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr06_RipVanFishZ(Address)
namespace SMW_MExtSpr06_RipVanFishZ
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $F1,$F0,$E1,$E0

Main:
;$028DDB
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_028E20
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	BEQ.b CODE_028DE7
	DEC.w !RAM_SMW_MExtSpr_Timer,x
CODE_028DE7:
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	AND.b #$00							;\ Optimization: I don't think this will ever branch...
	BNE.b CODE_028DFE						;/
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	INC.w !RAM_SMW_MExtSpr_XSpeed,x
	AND.b #$10
	BNE.b CODE_028DFE
	DEC.w !RAM_SMW_MExtSpr_XSpeed,x
	DEC.w !RAM_SMW_MExtSpr_XSpeed,x
CODE_028DFE:
	LDA.w !RAM_SMW_MExtSpr_XSpeed,x
	PHA
	LDY.w !RAM_SMW_MExtSpr_SpriteID,x
	CPY.b #!Define_SMW_SpriteID_MExtSpr09_UnusedMusicNote
	BNE.b CODE_028E0F
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_MExtSpr_XSpeed,x
CODE_028E0F:
	JSR.w SMW_UpdateMinorExtendedSpritePosition_X
	PLA
	STA.w !RAM_SMW_MExtSpr_XSpeed,x
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	AND.b #$03
	BNE.b CODE_028E20
	DEC.w !RAM_SMW_MExtSpr_YPosLo,x
CODE_028E20:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$08
	BCC.b EraseSprite
	CMP.b #$FC
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$03
	STA.w SMW_OAMBuffer[$00].Prop,y
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	CMP.b #$14
	BEQ.b EraseSprite
	LDA.w !RAM_SMW_MExtSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_MExtSpr08_UnusedMusicNote
	LDA.b #$7F
	BCS.b CODE_028E66
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	LSR
	LSR
	LSR
	LSR
	LSR
	AND.b #$03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
CODE_028E66:
	STA.w SMW_OAMBuffer[$00].Tile,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	RTS

EraseSprite:
	%INLINEROUTINE_SMW_EraseMinorExtendedSprite()
namespace off
	%SetDuplicateOrNullPointer(SMW_MExtSpr06_RipVanFishZ_Main, SMW_MExtSpr08_UnusedMusicNote_Main)
	%SetDuplicateOrNullPointer(SMW_MExtSpr06_RipVanFishZ_Main, SMW_MExtSpr09_UnusedMusicNote_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr07_WaterSplash(Address)
namespace SMW_MExtSpr07_WaterSplash
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $68,$68,$6A,$6A,$6A,$62,$62,$62
	db $64,$64,$64,$64,$66

Main:
;$028D4F
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b EraseSprite
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	CMP.b #$20
	BNE.b CODE_028D66
EraseSprite:
	%INLINEROUTINE_SMW_EraseMinorExtendedSprite()

CODE_028D66:
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$10
	BCC.b CODE_028D8B
	AND.b #$01
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_028D75
	INC.w !RAM_SMW_MExtSpr_YPosLo,x
CODE_028D75:
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	SEC
	SBC.b #$10
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BCC.b CODE_028D89
	EOR.b #$FF
	INC
CODE_028D89:
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_028D8B:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CMP.b #$F0
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$E8
	BCS.b EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	LSR
	TAX
	CPX.b #$0C
	BCC.b CODE_028DB6
	LDX.b #$0C
CODE_028DB6:
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedMiscSprite
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$02
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b Return028DD6
	INC.w !RAM_SMW_MExtSpr_Timer,x
Return028DD6:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr0A_BooStream(Address)
namespace SMW_MExtSpr0A_BooStream
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $88,$A8,$AA,$8C,$8E,$AE,$88,$A8
	db $AA,$8C,$8E,$AE

Main:
;$028CC4
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_028CFF
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.w !RAM_SMW_MExtSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STA.b !RAM_SMW_Misc_ScratchRAM07
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b CODE_028CFA
	JSL.l SMW_DamagePlayer_Hurt
CODE_028CFA:
	DEC.w !RAM_SMW_MExtSpr_Timer,x
	BEQ.b SMW_MExtSpr07_WaterSplash_EraseSprite
CODE_028CFF:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b Return028D41
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CMP.b #$F0
	BCS.b SMW_MExtSpr07_WaterSplash_EraseSprite
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.w !RAM_SMW_MExtSpr_XSpeed,x
	LSR
	AND.b #$40
	EOR.b #$40
	ORA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$0F
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
Return028D41:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_MExtSpr0B_UnusedYoshiSmoke(Address)
namespace SMW_MExtSpr0B_UnusedYoshiSmoke
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	BNE.b ADDR_028C61
	LDA.w !RAM_SMW_MExtSpr_XSpeed,x
	BEQ.b EraseSprite
	BPL.b ADDR_028C20
	CLC
	ADC.b #$08
	BRA.b ADDR_028C23

ADDR_028C20:
	SEC
	SBC.b #$08
ADDR_028C23:
	STA.w !RAM_SMW_MExtSpr_XSpeed,x
	JSR.w SMW_UpdateMinorExtendedSpritePosition_X
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return028C60
	LDY.b #!Define_SMW_MaxMinorExtendedSpriteSlot
ADDR_028C32:
	LDA.w !RAM_SMW_MExtSpr_SpriteID,y
	BEQ.b ADDR_028C3B
	DEY
	BPL.b ADDR_028C32
	RTS

ADDR_028C3B:
	LDA.b #!Define_SMW_SpriteID_MExtSpr0B_UnusedYoshiSmoke
	STA.w !RAM_SMW_MExtSpr_SpriteID,y
	STA.w !RAM_SMW_MExtSpr_YSpeed,y
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	STA.w !RAM_SMW_MExtSpr_XPosLo,y
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	STA.w !RAM_SMW_MExtSpr_XPosHi,y
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	STA.w !RAM_SMW_MExtSpr_YPosLo,y
	LDA.w !RAM_SMW_MExtSpr_YPosHi,x
	STA.w !RAM_SMW_MExtSpr_YPosHi,y
	LDA.b #$10
	STA.w !RAM_SMW_MExtSpr_Timer,y
Return028C60:
	RTS

ADDR_028C61:
	DEC.w !RAM_SMW_MExtSpr_Timer,x
	BNE.b ADDR_028C6E
EraseSprite:
	%INLINEROUTINE_SMW_EraseMinorExtendedSprite()

Tiles:
	db $66,$66,$64,$62

ADDR_028C6E:
	LDY.w SMW_MinorExtendedSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_MExtSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_MExtSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b EraseSprite
	LDA.w !RAM_SMW_MExtSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_MExtSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BNE.b EraseSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,y
	PHX
	LDA.w !RAM_SMW_MExtSpr_Timer,x
	LSR
	LSR
	TAX
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	PLX
	LDA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$08
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ClusterSpr01_1up(Address)
namespace SMW_ClusterSpr01_1up
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_UpdateClusterSpritePosition_Y
	LDA.w !RAM_SMW_ClusterSpr01_1up_YSpeed,x
	CMP.b #$40
	BPL.b CODE_02FDCC
	CLC
	ADC.b #$03
	STA.w !RAM_SMW_ClusterSpr01_1up_YSpeed,x
CODE_02FDCC:
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	BEQ.b CODE_02FDE0
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	CMP.b #$80
	BCC.b CODE_02FDE0
	AND.b #$F0
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	STZ.w !RAM_SMW_ClusterSpr01_1up_YSpeed,x
CODE_02FDE0:
if !Define_Global_ROMToAssemble&(!ROM_SMW_E1|!ROM_SMW_E2|!ROM_SMASW_E) == $00
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	LSR
	BCC.b CODE_02FE48
endif
	LDA.w !RAM_SMW_ClusterSpr01_1up_YSpeed,x
	BNE.b CODE_02FE10
	LDA.w !RAM_SMW_ClusterSpr01_1up_XSpeed,x
	CLC
	ADC.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	EOR.w !RAM_SMW_ClusterSpr01_1up_XSpeed,x
	BPL.b CODE_02FE10
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	CLC
	ADC.b #$20
	CMP.b #$30
	BCS.b CODE_02FE10
	LDA.w !RAM_SMW_ClusterSpr01_1up_XSpeed,x
	EOR.b #$FF
	INC
	STA.w !RAM_SMW_ClusterSpr01_1up_XSpeed,x
CODE_02FE10:
	LDA.b !RAM_SMW_Player_XPosLo
	SEC
	SBC.w !RAM_SMW_ClusterSpr_XPosLo,x
	CLC
	ADC.b #$0C
	CMP.b #$1E
	BCS.b CODE_02FE48
	LDA.b #$20
	LDY.b !RAM_SMW_Player_DuckingFlag
	BNE.b CODE_02FE29
	LDY.b !RAM_SMW_Player_CurrentPowerUp
	BEQ.b CODE_02FE29
	LDA.b #$30
CODE_02FE29:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Player_YPosLo
	SEC
	SBC.w !RAM_SMW_ClusterSpr_YPosLo,x
	CLC
	ADC.b #$20
	CMP.b !RAM_SMW_Misc_ScratchRAM00
	BCS.b CODE_02FE48
	STZ.w !RAM_SMW_ClusterSpr_SpriteID,x
	JSR.w SpawnScoreSprite
	DEC.w !RAM_SMW_Counter_RemainingBonusGame1ups
	BNE.b CODE_02FE48
	LDA.b #$58
	STA.w !RAM_SMW_Timer_BonusGameEnd
CODE_02FE48:
	LDY.w OAMIndex,x
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$24
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$3A
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_ClusterSpr01_1up(Address)
namespace SMW_ClusterSpr01_1up
%InsertMacroAtXPosition(<Address>)

OAMIndex:
	db $90,$94,$98,$9C,$A0,$A4,$A8,$AC

SpawnScoreSprite:
;$02FF6C
	JSL.l SMW_CheckForAvailableScoreSpriteSlot_Main
	LDA.b #$0D
	STA.w !RAM_SMW_ScoreSpr_SpriteID,y
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	SEC
	SBC.b #$08
	STA.w !RAM_SMW_ScoreSpr_YPosLo,y
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ScoreSpr_YPosHi,y
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.w !RAM_SMW_ScoreSpr_XPosLo,y
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,x
	STA.w !RAM_SMW_ScoreSpr_XPosHi,y
	LDA.b #$30
	STA.w !RAM_SMW_ScoreSpr_YSpeed,y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClusterSpr03_BooCeiling(Address)
namespace SMW_ClusterSpr03_BooCeiling
%InsertMacroAtXPosition(<Address>)

DATA_02FBBB:
	db $01,$FF

DATA_02FBBD:
	db $08,$F8

BooCeilingTiles:
	db $88,$8C,$A8,$8E,$AA,$AE,$88,$8C

Main:
;$02FBC7
	CPX.b #$00
	BEQ.b CODE_02FBCE
	JMP.w CODE_02FC41

CODE_02FBCE:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$07
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02FC3E
	JSL.l SMW_GetRand_Main
	AND.b #$1F
	CMP.b #$14
	BCC.b CODE_02FBE2
	SBC.b #$14
CODE_02FBE2:
	TAX
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F86,x
	BNE.b CODE_02FC3E
	INC.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F86,x
	LDA.b #$20
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F9A,x
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	PHP
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.b !RAM_SMW_NorSpr_XPosLo
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	PLP
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	STA.b !RAM_SMW_NorSpr_YPosLo
	AND.b #$FC
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F72,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi
	PHX
	LDX.b #$00
	LDA.b #$10
	JSR.w SMW_AimTowardsPlayer_Bank02
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ADC.b #$09
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E52,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E66,x
CODE_02FC3E:
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID

CODE_02FC41:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02FC4D
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F9A,x
	BEQ.b CODE_02FC4D
	DEC.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F9A,x
CODE_02FC4D:
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F86,x
	BNE.b CODE_02FC55
	JMP.w CODE_02FCE2

CODE_02FC55:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02FC8D
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F9A,x
	BNE.b CODE_02FC78
	JSR.w SMW_UpdateClusterSpritePosition_X
	JSR.w SMW_UpdateClusterSpritePosition_Y
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_02FC78
	JSR.w SMW_CheckForPlayerToEnemyClusterSpriteCollision_Main
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E52,x
	CMP.b #$E1
	BMI.b CODE_02FC78
	DEC.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E52,x
CODE_02FC78:
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	AND.b #$FC
	CMP.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F72,x
	BNE.b CODE_02FC8D
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E52,x
	BPL.b CODE_02FC8D
	STZ.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F86,x
	STZ.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E66,x
CODE_02FC8D:
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0040
	CMP.w #$0180
	SEP.b #$20
	BCS.b Return02FCD8
	LDA.b #$02
	JSR.w DrawClusterSpriteBoo
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	CLC
	ADC.b #$10
	PHP
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	PLP
	ADC.b #$00
	BNE.b CODE_02FCD9
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BEQ.b Return02FCD8
	LDA.w SMW_ClusterSpriteOAMIndexes_Main,x
	LSR
	LSR
	TAY
	LDA.b #$03
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
Return02FCD8:
	RTS

CODE_02FCD9:
	LDY.w SMW_ClusterSpriteOAMIndexes_Main,x
	LDA.b #$F0
	STA.w SMW_OAMBuffer[$40].YDisp,y
	RTS

CODE_02FCE2:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02FD46
	LDA.w !RAM_SMW_ClusterSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ClusterSpr08_DeathBatCeiling
	BEQ.b CODE_02FD46
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F9A,x
	BNE.b CODE_02FD1A
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$01
	BNE.b CODE_02FD1A
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F4A,x
	AND.b #$01
	TAY
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E66,x
	CLC
	ADC.w DATA_02FBBB,y
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E66,x
	CMP.w DATA_02FBBD,y
	BNE.b CODE_02FD1A
	INC.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F4A,x
	LDA.w !RAM_SMW_Misc_RandomByte1
	AND.b #$FF
	ORA.b #$3F
	STA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F9A,x
CODE_02FD1A:
	JSR.w SMW_UpdateClusterSpritePosition_X
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b CODE_02FD46
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #$01
	TXA
	ASL
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$40
	BEQ.b CODE_02FD36
	LDY.b #$FF
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_02FD36:
	TYA
	CLC
	ADC.w !RAM_SMW_ClusterSpr_YPosLo,x
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	ADC.w !RAM_SMW_ClusterSpr_YPosHi,x
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
CODE_02FD46:
	LDA.b #$0E

DrawClusterSpriteBoo:
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDY.w SMW_ClusterSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	LSR
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TXA
	AND.b #$03
	ASL
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	PHX
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l BooCeilingTiles,x
else
	LDA.w BooCeilingTiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
	PLX
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E1E66,x
	ASL
	LDA.b #$00
	BCS.b CODE_02FD81
	LDA.b #$40
CODE_02FD81:
	ORA.b #$31
	ORA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$40].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	LDA.w !RAM_SMW_ClusterSpr_SpriteID,x
	CMP.b #!Define_SMW_SpriteID_ClusterSpr08_DeathBatCeiling
	BNE.b Return02FDB7
	LDY.w SMW_ClusterSpriteOAMIndexes_Main,x
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	LSR
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr03_BooCeiling_UnknownTable7E0F86,x
	ASL
	ORA.b !RAM_SMW_Misc_ScratchRAM00
	PHX
	TAX
	LDA.w BatCeilingTiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b #$37
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
Return02FDB7:
	RTS

BatCeilingTiles:
	db $AE,$AE,$C0,$EB
namespace off
	%SetDuplicateOrNullPointer(SMW_ClusterSpr03_BooCeiling_Main, SMW_ClusterSpr08_DeathBatCeiling_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClusterSpr04_BooRing(Address)
namespace SMW_ClusterSpr04_BooRing
%InsertMacroAtXPosition(<Address>)

DATA_02FA84:
	db $00,$00,$28,$00,$50,$00,$78,$00
	db $A0,$00,$C8,$00,$F0,$00,$18,$01
	db $40,$01,$68,$01

Main:
;$02FA98
	LDY.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F86,x
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1OffscreenFlag,y
	BEQ.b CODE_02FAA4
	STZ.w !RAM_SMW_ClusterSpr_SpriteID,x
	RTS

CODE_02FAA4:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02FAF0
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F4A,x
	BEQ.b CODE_02FAF0
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_02FAB3
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_02FAB3:
	CLC
	ADC.w !RAM_SMW_ClusterSpr04_BooRing_Ring1AngleLo,y
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1AngleLo,y
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1AngleHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$01
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1AngleHi,y
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterXPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterXPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM01
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w #$0080
	CMP.w #$0200
	SEP.b #$20
	BCC.b CODE_02FAF0
	LDA.b #$01
	STA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1OffscreenFlag,y
	PHX									;\ Optimization: Boo rings are never killed, so this is useless.
	LDX.w !RAM_SMW_ClusterSpr04_BooRing_UnusedRing1LevelListIndex,y		;|
	STZ.w !RAM_SMW_Sprites_LoadStatus,x					;|
	PLX									;/
	DEC.w !RAM_SMW_ClusterSpr04_BooRing_RingIndex
CODE_02FAF0:
	PHX
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F72,x
	ASL
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_02FA84,x
else
	LDA.w DATA_02FA84,x
endif
	CLC
	ADC.w !RAM_SMW_ClusterSpr04_BooRing_Ring1AngleLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l DATA_02FA84+$01,x
else
	LDA.w DATA_02FA84+$01,x
endif
	ADC.w !RAM_SMW_ClusterSpr04_BooRing_Ring1AngleHi,y
	AND.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	PLX
	REP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0080
	AND.w #$01FF
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	AND.w #$00FF
	ASL
	TAX
	LDA.l SMW_CircleCoordinates_Main,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	SEP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !REGISTER_Multiplicand
	LDA.b #$50
	LDY.b !RAM_SMW_Misc_ScratchRAM05
	BNE.b CODE_02FB4D
	STA.w !REGISTER_Multiplier
	NOP #4
	ASL.w !REGISTER_ProductOrRemainderLo
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
CODE_02FB4D:
	LSR.b !RAM_SMW_Misc_ScratchRAM01
	BCC.b CODE_02FB54
	EOR.b #$FF
	INC
CODE_02FB54:
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	STA.w !REGISTER_Multiplicand
	LDA.b #$50
	LDY.b !RAM_SMW_Misc_ScratchRAM07
	BNE.b CODE_02FB70
	STA.w !REGISTER_Multiplier
	NOP #4
	ASL.w !REGISTER_ProductOrRemainderLo
	LDA.w !REGISTER_ProductOrRemainderHi
	ADC.b #$00
CODE_02FB70:
	LSR.b !RAM_SMW_Misc_ScratchRAM03
	BCC.b CODE_02FB77
	EOR.b #$FF
	INC
CODE_02FB77:
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDY.w !RAM_SMW_ClusterSpr04_BooRing_UnknownTable7E0F86,x
	STZ.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	BPL.b CODE_02FB87
	DEC.b !RAM_SMW_Misc_ScratchRAM00
CODE_02FB87:
	CLC
	ADC.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterXPosLo,y
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterXPosHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_ClusterSpr_XPosHi,x
	STZ.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	BPL.b CODE_02FB9E
	DEC.b !RAM_SMW_Misc_ScratchRAM01
CODE_02FB9E:
	CLC
	ADC.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterYPosLo,y
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	LDA.w !RAM_SMW_ClusterSpr04_BooRing_Ring1CenterYPosHi,y
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
	JSR.w SMW_ClusterSpr03_BooCeiling_CODE_02FC8D
CODE_02FBB0:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return02FBBA
	JSR.w SMW_CheckForPlayerToEnemyClusterSpriteCollision_Main
Return02FBBA:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClusterSpr05_CandleFlame(Address)
namespace SMW_ClusterSpr05_CandleFlame
%InsertMacroAtXPosition(<Address>)

DATA_02FA02:
	db $03,$07,$07,$07,$0F,$07,$07,$0F


OAMIndex:
	db $F0,$F4,$F8,$FC

Tiles:
	db $E2,$E4,$E2,$E4

Prop:
	db $09,$09,$49,$49

Main:
;$02FA16
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02FA2B
	JSL.l SMW_GetRand_Main
	AND.b #$07
	TAY
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.w DATA_02FA02,y
	BNE.b CODE_02FA2B
	INC.w !RAM_SMW_ClusterSpr05_CandleFlame_UnknownTable7E0F4A,x
CODE_02FA2B:
	LDY.w OAMIndex,x
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer2XPosLo
	STA.w SMW_OAMBuffer[$40].XDisp,y
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer2YPosLo
	STA.w SMW_OAMBuffer[$40].YDisp,y
	PHY
	PHX
	LDA.w !RAM_SMW_ClusterSpr05_CandleFlame_UnknownTable7E0F4A,x
	AND.b #$03
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Tiles,x
else
	LDA.w Tiles,x
endif
	STA.w SMW_OAMBuffer[$40].Tile,y
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l Prop,x
else
	LDA.w Prop,x
endif
	STA.w SMW_OAMBuffer[$40].Prop,y
	PLX
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$40].Slot,y
	PLY
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	CMP.b #$F0
	BCC.b Return02FA83
	LDA.w SMW_OAMBuffer[$40].XDisp,y
	STA.w SMW_OAMBuffer[$7B].XDisp
	LDA.w SMW_OAMBuffer[$40].YDisp,y
	STA.w SMW_OAMBuffer[$7B].YDisp
	LDA.w SMW_OAMBuffer[$40].Tile,y
	STA.w SMW_OAMBuffer[$7B].Tile
	LDA.w SMW_OAMBuffer[$40].Prop,y
	STA.w SMW_OAMBuffer[$7B].Prop
	LDA.b #$03
	STA.w SMW_OAMTileSizeBuffer[$7B].Slot
Return02FA83:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClusterSpr06_SumoBroFlame(Address)
namespace SMW_ClusterSpr06_SumoBroFlame
%InsertMacroAtXPosition(<Address>)

DATA_02F8FC:
	db $00,$10,$00,$10,$08,$10,$FF,$10

Tiles:
	db $DC,$EC,$CC,$EC,$CC,$DC,$00,$CC

DATA_02F90C:
	db $03,$03,$03,$03,$02,$01,$00,$00
	db $00,$00,$00,$00,$01,$02,$03,$03

Main:
;$02F91C
	LDA.w !RAM_SMW_ClusterSpr06_SumoBroFlame_DespawnTimer,x
	BEQ.b CODE_02F93C
	LDY.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02F928
	DEC.w !RAM_SMW_ClusterSpr06_SumoBroFlame_DespawnTimer,x
CODE_02F928:
	LSR
	LSR
	LSR
	TAY
	LDA.w DATA_02F90C,y
	ASL
	STA.w !RAM_SMW_Sprites_SumoBroFlameScratchRAM7E185E
	JSR.w CheckForPlayerContact
	PHX
	JSR.w CODE_02F940
	PLX
	RTS

CODE_02F93C:
	STZ.w !RAM_SMW_ClusterSpr_SpriteID,x
	RTS

CODE_02F940:								;\ Glitch: What is this? Is this why the Sumo Bro Flames cause the graphical glitches it does?
	TXA								;|
	ASL								;|
	TAY								;|
	LDA.w SMW_ClusterSpriteOAMIndexes_Main,y			;|
	STA.w !RAM_SMW_NorSpr_OAMIndex					;|
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x				;|
	STA.b !RAM_SMW_NorSpr_XPosLo					;|
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,x				;|
	STA.w !RAM_SMW_NorSpr_XPosHi					;|
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x				;|
	STA.b !RAM_SMW_NorSpr_YPosLo					;|
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x				;|
	STA.w !RAM_SMW_NorSpr_YPosHi					;|
	TAY								;|
	LDX.b #$00							;|
	JSR.w SMW_GetDrawInfo_Bank02					;|
	LDX.b #$01							;|
CODE_02F967:								;/
	PHX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$40].XDisp,y
	TXA
	ORA.w !RAM_SMW_Sprites_SumoBroFlameScratchRAM7E185E
	TAX
	LDA.w DATA_02F8FC,x
	BMI.b CODE_02F993
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$40].YDisp,y
	LDA.w Tiles,x
	STA.w SMW_OAMBuffer[$40].Tile,y
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$04
	ASL
	ASL
	ASL
	ASL
	NOP								; Optimization: Useless NOP
	ORA.b !RAM_SMW_Sprites_TilePriority
	ORA.b #$05
	STA.w SMW_OAMBuffer[$40].Prop,y
CODE_02F993:
	PLX
	INY
	INY
	INY
	INY
	DEX
	BPL.b CODE_02F967
	LDX.b #$00
	LDY.b #$02
	LDA.b #$01
	JSL.l SMW_FinishOAMWrite_Main					; Note: It's not everyday you see a non-Normal sprite call this routine.
	RTS

CODE_02F9A6:
	STZ.w !RAM_SMW_ClusterSpr_SpriteID,x
	RTS

DATA_02F9AA:
	db $02,$0A,$12,$1A

CheckForPlayerContact:
	TXA
	EOR.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$03
	BNE.b Return02F9FE
	LDA.w !RAM_SMW_ClusterSpr06_SumoBroFlame_DespawnTimer,x
	CMP.b #$10
	BCC.b Return02F9FE
	LDA.w !RAM_SMW_ClusterSpr_XPosLo,x
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_ClusterSpr_XPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	LDA.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDY.w !RAM_SMW_Sprites_SumoBroFlameScratchRAM7E185E		; Glitch: Mario can be hurt by these flames when far below them because of this. The Extended No Sprite Tile Limits patch fixes this by AND.b #$03 to $185E and transfering the result in Y.
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	CLC
	ADC.w DATA_02F9AA,y
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDA.b #$14
	STA.b !RAM_SMW_Misc_ScratchRAM07
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM0B
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_GetMarioClipping
	JSL.l SMW_StandardSpriteToSpriteCollisionChecks_CheckForContact
	BCC.b Return02F9FE
	LDA.w !RAM_SMW_Timer_StarPower
	BNE.b CODE_02F9A6
CODE_02F9F5:								;\ Optimization: Replace this with:
	LDA.w !RAM_SMW_Player_RidingYoshiFlag				;|	JMP.w SMW_CheckForMarioToExtendedSpriteCollision_CODE_02A46E
	BNE.b CODE_02F9FF						;|Return02F9FE:
	JSL.l SMW_DamagePlayer_Hurt					;|	RTS
Return02F9FE:								;|
	RTS								;|
									;|
CODE_02F9FF:								;|
	JMP.w SMW_CheckForMarioToExtendedSpriteCollision_LoseYoshi	;/
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ClusterSpr07_ReappearingBoo(Address)
namespace SMW_ClusterSpr07_ReappearingBoo
%InsertMacroAtXPosition(<Address>)

DATA_02F837:
	db $01,$FF

DATA_02F839:
	db $00,$FF,$02,$0E

Main:
;$02F83D
	LDA.w !RAM_SMW_Sprites_DisappearingBooFrameCounter
	STA.w !RAM_SMW_Sprites_CopyOfDisappearingBooFrameCounter
	TXY
	BNE.b CODE_02F855
	DEC.w !RAM_SMW_Sprites_DisappearingBooFrameCounter
	CMP.b #$00
	BNE.b CODE_02F855
	INC.w !RAM_SMW_ClusterSpr07_ReappearingBoo_BooSet
	LDY.b #$FF
	STY.w !RAM_SMW_Sprites_DisappearingBooFrameCounter
CODE_02F855:
	CMP.b #$00
	BNE.b CODE_02F89E
	LDA.w !RAM_SMW_Timer_DisappearingSprite
	BEQ.b CODE_02F865
	STZ.w !RAM_SMW_ClusterSpr_SpriteID,x
	STZ.w !RAM_SMW_ClusterSpr07_ReappearingBoo_BooSet
	RTS

CODE_02F865:
	LDA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E66,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E52,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_BooSet
	AND.b #$01
	BNE.b CODE_02F880
	LDA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E8E,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_ClusterSpr07_ReappearingBoo_UnknownTable7E1E7A,x
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_02F880:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_ClusterSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_XPosHi,x
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
CODE_02F89E:
	TXA
	ASL
	ASL
	ADC.b !RAM_SMW_Counter_LocalFrames
	STA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$07
	ORA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_02F8C8
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	AND.b #$20
	LSR
	LSR
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_ClusterSpr_YPosLo,x
	CLC
	ADC.w DATA_02F837,y
	STA.w !RAM_SMW_ClusterSpr_YPosLo,x
	LDA.w !RAM_SMW_ClusterSpr_YPosHi,x
	ADC.w DATA_02F839,y
	STA.w !RAM_SMW_ClusterSpr_YPosHi,x
CODE_02F8C8:
	LDY.w !RAM_SMW_Sprites_CopyOfDisappearingBooFrameCounter
	CPY.b #$20
	BCC.b Return02F8FB
	CPY.b #$40
	BCS.b CODE_02F8D8
	TYA
	SBC.b #$1F
	BRA.b CODE_02F8E2

CODE_02F8D8:
	CPY.b #$E0
	BCC.b CODE_02F8E6
	TYA
	SBC.b #$E0
	EOR.b #$1F
	INC
CODE_02F8E2:
	LSR
	LSR
	BRA.b CODE_02F8EB

CODE_02F8E6:
	JSR.w SMW_ClusterSpr04_BooRing_CODE_02FBB0
	LDA.b #$08
CODE_02F8EB:
	STA.w !RAM_SMW_Sprites_BigBooBossPaletteIndex
	CPX.b #$00
	BNE.b CODE_02F8F6
	JSL.l SMW_FadingBooPaletteAnimation_Main
CODE_02F8F6:
	LDA.b #$0F
	JSR.w SMW_ClusterSpr03_BooCeiling_DrawClusterSpriteBoo
Return02F8FB:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr01_GenerateEerie(Address)
namespace SMW_GenSpr01_GenerateEerie
%InsertMacroAtXPosition(<Address>)

InitialXLo:
	db $F0,$FF

InitialXHi:
	db $FF,$00

InitialXSpeed:
	db $10,$F0

Main:
;$02B2D6
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	BNE.b Return02B31E
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B31E
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr038_StraightEerie
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSL.l SMW_GetRand_Main
	AND.b #$7F
	ADC.b #$40
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$01
	TAY
	LDA.w InitialXLo,y
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.w InitialXHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w InitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
Return02B31E:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSprXX_GenerateParachuteEnemies(Address)
namespace SMW_GenSprXX_GenerateParachuteEnemies
%InsertMacroAtXPosition(<Address>)

SpriteToSpawn:
	db !Define_SMW_SpriteID_NorSpr03F_ParachuteGoomba
	db !Define_SMW_SpriteID_NorSpr040_ParachuteBobOmb

	db !Define_SMW_SpriteID_NorSpr03F_ParachuteGoomba
	db !Define_SMW_SpriteID_NorSpr03F_ParachuteGoomba

	db !Define_SMW_SpriteID_NorSpr040_ParachuteBobOmb
	db !Define_SMW_SpriteID_NorSpr040_ParachuteBobOmb

InitialXSpeed:
	db $FA,$FB,$FC,$FD

Main:
;$02B329
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$7F
	BNE.b Return02B386
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B386
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	JSL.l SMW_GetRand_Main
	LSR
	LDY.w !RAM_SMW_GenSpr_SpriteID
	BCC.b CODE_02B348
	INY
	INY
	INY
CODE_02B348:
	LDA.w SpriteToSpawn-!Define_SMW_SpriteID_GenSpr02_GenParachuteEnemy,y
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	SEC
	SBC.b #$20
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.w !RAM_SMW_Misc_RandomByte1
	AND.b #$FF
	CLC
	ADC.b #$30
	PHP
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	PHP
	AND.b #$0E
	STA.w !RAM_SMW_NorSprXXX_ParachutingEnemy_CurrentAngle,x
	LSR
	AND.b #$03
	TAY
	LDA.w InitialXSpeed,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	PLP
	ADC.b #$00
	PLP
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
Return02B386:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_GenSprXX_GenerateParachuteEnemies_Main, SMW_GenSpr02_GenParachuteEnemy_Main)
	%SetDuplicateOrNullPointer(SMW_GenSprXX_GenerateParachuteEnemies_Main, SMW_GenSpr03_GenParachuteGoomba_Main)
	%SetDuplicateOrNullPointer(SMW_GenSprXX_GenerateParachuteEnemies_Main, SMW_GenSpr04_GenParachuteBobOmb_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSprXX_GenerateDolphins(Address)
namespace SMW_GenSprXX_GenerateDolphins
%InsertMacroAtXPosition(<Address>)

InitialXLo:
	db $10,$E0

InitialXHi:
	db $01,$FF

InitialXSpeed:
	db $E8,$18

InitialYSpeed:
	db $F0,$E0,$00,$10

DATA_02B268:
	db !Define_SMW_MaxNormalSpriteSlot-$07,!Define_SMW_MaxNormalSpriteSlot-$02

DATA_02B26A:
	db !NullSpriteSlot,!Define_SMW_MaxNormalSpriteSlot-$07

Main:
;$02B26C
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$1F
	BNE.b Return02B2CF
	LDY.w !RAM_SMW_GenSpr_SpriteID
	LDX.w DATA_02B268-!Define_SMW_SpriteID_GenSpr05_GenerateLeftDolphins,y
	LDA.w DATA_02B26A-!Define_SMW_SpriteID_GenSpr05_GenerateLeftDolphins,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_02B27D:
	LDA.w !RAM_SMW_NorSpr_CurrentStatus,x
	BEQ.b CODE_02B288
	DEX
	CPX.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_02B27D
	RTS

CODE_02B288:
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr041_LongJumpDolphin
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSL.l SMW_GetRand_Main
	AND.b #$7F
	ADC.b #$40
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_GetRand_Main
	AND.b #$03
	TAY
	LDA.w InitialYSpeed,y
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	LDY.w !RAM_SMW_GenSpr_SpriteID
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w InitialXLo-!Define_SMW_SpriteID_GenSpr05_GenerateLeftDolphins,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.w InitialXHi-!Define_SMW_SpriteID_GenSpr05_GenerateLeftDolphins,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w InitialXSpeed-!Define_SMW_SpriteID_GenSpr05_GenerateLeftDolphins,y
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	INC.w !RAM_SMW_NorSprXXX_Dolphins_NoTurnAroundFlag,x
Return02B2CF:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_GenSprXX_GenerateDolphins_Main, SMW_GenSpr05_GenerateLeftDolphins_Main)
	%SetDuplicateOrNullPointer(SMW_GenSprXX_GenerateDolphins_Main, SMW_GenSpr06_GenerateRightDolphins_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr07_GenerateFish(Address)
namespace SMW_GenSpr07_GenerateFish
%InsertMacroAtXPosition(<Address>)

DATA_02B153:
	db $10,$18,$20,$28

DATA_02B157:
	db $18,$1A,$1C,$1E

Main:
;$02B15B
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$1F
	BNE.b Return02B1B7
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B1B7
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr017_GeneratorCheepCheep
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	CLC
	ADC.b #$C0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	JSL.l SMW_GetRand_Main
	CMP.b #$00
	PHP
	PHP
	AND.b #$03
	TAY
	LDA.w DATA_02B153,y
	PLP
	BPL.b CODE_02B196
	EOR.b #$FF
CODE_02B196:
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	LDA.w !RAM_SMW_Misc_RandomByte2
	AND.b #$03
	TAY
	LDA.w DATA_02B157,y
	PLP
	BPL.b CODE_02B1B1
	EOR.b #$FF
	INC
CODE_02B1B1:
	STA.b !RAM_SMW_NorSpr_XSpeed,x
	LDA.b #$B8
	STA.b !RAM_SMW_NorSpr_YSpeed,x
Return02B1B7:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr08_TurnOffRespawningSprite(Address)
namespace SMW_GenSpr08_TurnOffRespawningSprite
%InsertMacroAtXPosition(<Address>)

Main:
	INC.w !RAM_SMW_Timer_DisappearingSprite
	STZ.w !RAM_SMW_Timer_RespawnSprite
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr09_GenerateSuperKoopa(Address)
namespace SMW_GenSpr09_GenerateSuperKoopa
%InsertMacroAtXPosition(<Address>)

InitialXLo:
	db $E0,$10

InitialXHi:
	db $FF,$01

Main:
;$02B1BC
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$3F
	BNE.b Return02B206
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B206
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr071_RedCapeSuperKoopa
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSL.l SMW_GetRand_Main
	PHA
	AND.b #$3F
	ADC.b #$20
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b #$28
	STA.b !RAM_SMW_NorSpr_YSpeed,x
	PLA
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w InitialXLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.w InitialXHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
Return02B206:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr0A_GenerateBubbles(Address)
namespace SMW_GenSpr0A_GenerateBubbles
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$7F
	BNE.b Return02B259
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B259
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr09D_BubbleWithSprite
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSL.l SMW_GetRand_Main
	PHA
	AND.b #$3F
	ADC.b #$20
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w SMW_GenSpr09_GenerateSuperKoopa_InitialXLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.w SMW_GenSpr09_GenerateSuperKoopa_InitialXHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	TYA
	STA.w !RAM_SMW_NorSpr09D_BubbleWithSprite_HorizontalDirection,x
	JSL.l SMW_GetRand_Main
	AND.b #$03
	TAY
	LDA.w DATA_02B25A,y
	STA.b !RAM_SMW_NorSpr09D_BubbleWithSprite_Contents,x
Return02B259:
	RTS

DATA_02B25A:
	db $00,$01,$02,$00
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr0B_GenerateBullet(Address)
namespace SMW_GenSpr0B_GenerateBullet
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$7F
	BNE.b Return02B0C8
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B0C8
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	TYX
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr01C_BulletBill
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSL.l SMW_GetRand_Main
	PHA
	AND.b #$7F
	ADC.b #$20
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	PLA
	AND.b #$01
	TAY
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.w SMW_GenSpr09_GenerateSuperKoopa_InitialXLo,y
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.w SMW_GenSpr09_GenerateSuperKoopa_InitialXHi,y
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	TYA
	STA.b !RAM_SMW_NorSpr01C_BulletBill_FiringDirection,x
Return02B0C8:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr0C_GenerateSurroundingBullets(Address)
namespace SMW_GenSpr0C_GenerateSurroundingBullets
%InsertMacroAtXPosition(<Address>)

DATA_02B0C9:
	db !Define_SMW_MaxNormalSpriteSlot-$07,!Define_SMW_MaxNormalSpriteSlot-$03

DATA_02B0CB:
	db !Define_SMW_MaxNormalSpriteSlot-$07,!Define_SMW_MaxNormalSpriteSlot-$08

Main:
;$02B0CD
	LDA.b !RAM_SMW_Counter_LocalFrames
	LSR
	BCS.b Return02B0F9
	LDA.w !RAM_SMW_Sprites_SpecialBulletGeneratorTimer
	INC.w !RAM_SMW_Sprites_SpecialBulletGeneratorTimer
	CMP.b #$A0
	BNE.b Return02B0F9
	STZ.w !RAM_SMW_Sprites_SpecialBulletGeneratorTimer
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDY.w !RAM_SMW_GenSpr_SpriteID
	LDA.w DATA_02B0C9-!Define_SMW_SpriteID_GenSpr0C_GenerateSurroundingBullets,y
	LDX.w DATA_02B0CB-!Define_SMW_SpriteID_GenSpr0C_GenerateSurroundingBullets,y
	STA.b !RAM_SMW_Misc_ScratchRAM0D
CODE_02B0EF:
	PHX
	JSR.w GEN_MULTI_BULLET
	DEC.b !RAM_SMW_Misc_ScratchRAM0D
	PLX
	DEX
	BPL.b CODE_02B0EF
Return02B0F9:
	RTS

InitialXLo:
	db $00,$00,$40,$C0,$F0,$00,$00,$F0
	db $F0

InitialYLo:
	db $50,$B0,$E0,$E0,$80,$00,$E0,$E0
	db $00

InitialFiringDirection:
	db $00,$00,$02,$02,$01,$05,$04,$07
	db $06

GEN_MULTI_BULLET:
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B152
	LDA.b #!Define_SMW_SpriteID_NorSpr01C_BulletBill
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM0D
	LDA.w InitialXLo,x
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.w InitialYLo,x
	CLC
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	LDA.w InitialFiringDirection,x
	STA.w !RAM_SMW_NorSpr01C_BulletBill_FiringDirection,y
Return02B152:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_GenSpr0C_GenerateSurroundingBullets_Main, SMW_GenSpr0D_GenerateDiagnalBullets_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr0E_GenerateFire(Address)
namespace SMW_GenSpr0E_GenerateFire
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Counter_LocalFrames
	AND.b #$7F
	BNE.b Return02B07B
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B07B
	TYX
	LDA.b #!Define_SMW_Sound1DFC_FireSpit
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,x
	LDA.b #!Define_SMW_SpriteID_NorSpr0B3_BowserStatueFire
	STA.b !RAM_SMW_NorSpr_SpriteID,x
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSL.l SMW_GetRand_Main
	AND.b #$7F
	ADC.b #$20
	ADC.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	AND.b #$F0
	STA.b !RAM_SMW_NorSpr_YPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$FF
	STA.b !RAM_SMW_NorSpr_XPosLo,x
	LDA.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	ADC.b #$00
	STA.w !RAM_SMW_NorSpr_XPosHi,x
	INC.w !RAM_SMW_NorSpr_FacingDirection,x
Return02B07B:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GenSpr0F_TurnOffGenerator(Address)
namespace SMW_GenSpr0F_TurnOffGenerator
%InsertMacroAtXPosition(<Address>)

Main:
	STZ.w !RAM_SMW_GenSpr_SpriteID
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ShooterSpr01_BulletBillShooter(Address)
namespace SMW_ShooterSpr01_BulletBillShooter
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_ShooterSpr_ShootTimer,x
	BNE.b Return02B4DD
	LDA.b #$60
	STA.w !RAM_SMW_ShooterSpr_ShootTimer,x
	LDA.w !RAM_SMW_ShooterSpr_YPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_ShooterSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BNE.b Return02B4DD
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_ShooterSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b Return02B4DD
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$10
	CMP.b #$10
	BCC.b Return02B4DD
	LDA.b !RAM_SMW_Player_XPosLo
	SBC.w !RAM_SMW_ShooterSpr_XPosLo,x
	CLC
	ADC.b #$11
	CMP.b #$22
	BCC.b Return02B4DD
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B4DD
	LDA.b #!Define_SMW_Sound1DFC_BulletShoot
	STA.w !RAM_SMW_IO_SoundCh3
	LDA.b #!Define_SMW_NorSprStatus01_Init
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr01C_BulletBill
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_ShooterSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.w !RAM_SMW_ShooterSpr_YPosLo,x
	SEC
	SBC.b #$01
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_ShooterSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	PLX
	JSR.w ShowShooterSmoke
Return02B4DD:
	RTS

ShowShooterSmoke:
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
Loop:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b SetShooterSmoke
	DEY
	BPL.b Loop
	RTS

ShooterSmokeDispX:
	db $F4,$0C

SetShooterSmoke:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr01_PuffOfSmoke
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.w !RAM_SMW_ShooterSpr_YPosLo,x
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$1B
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	PHA
	LDA.b !RAM_SMW_Player_XPosLo
	CMP.w !RAM_SMW_ShooterSpr_XPosLo,x
	LDA.b !RAM_SMW_Player_XPosHi
	SBC.w !RAM_SMW_ShooterSpr_XPosHi,x
	LDX.b #$00
	BCC.b CODE_02B50E
	INX
CODE_02B50E:
	PLA
	CLC
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	ADC.l ShooterSmokeDispX,x
else
	ADC.w ShooterSmokeDispX,x
endif
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDX.w !RAM_SMW_NorSpr_CurrentSlotID
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ShooterSpr02_TorpedoShooter(Address)
namespace SMW_ShooterSpr02_TorpedoShooter
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_ShooterSpr_ShootTimer,x
	BNE.b Return02B42C
	LDA.b #$50
	STA.w !RAM_SMW_ShooterSpr_ShootTimer,x
	LDA.w !RAM_SMW_ShooterSpr_YPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1YPosLo
	LDA.w !RAM_SMW_ShooterSpr_YPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1YPosHi
	BNE.b SMW_ProcessShooterSprites_Return02B3AA
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	CMP.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	LDA.w !RAM_SMW_ShooterSpr_XPosHi,x
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosHi
	BNE.b SMW_ProcessShooterSprites_Return02B3AA
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Mirror_CurrentLayer1XPosLo
	CLC
	ADC.b #$10
	CMP.b #$20
	BCC.b Return02B42C
	JSL.l SMW_FindFreeNormalSpriteSlot_LowPriority
	BMI.b Return02B42C
	LDA.b #!Define_SMW_NorSprStatus08_Normal
	STA.w !RAM_SMW_NorSpr_CurrentStatus,y
	LDA.b #!Define_SMW_SpriteID_NorSpr044_TorpedoTed
	STA.w !RAM_SMW_NorSpr_SpriteID,y
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	STA.w !RAM_SMW_NorSpr_XPosLo,y
	LDA.w !RAM_SMW_ShooterSpr_XPosHi,x
	STA.w !RAM_SMW_NorSpr_XPosHi,y
	LDA.w !RAM_SMW_ShooterSpr_YPosLo,x
	STA.w !RAM_SMW_NorSpr_YPosLo,y
	LDA.w !RAM_SMW_ShooterSpr_YPosHi,x
	STA.w !RAM_SMW_NorSpr_YPosHi,y
	PHX
	TYX
	JSL.l SMW_InitializeNormalSpriteRAMTables_Main
	JSR.w SMW_CheckPlayerPositionRelativeToSprite_CopyOfBank02_X
	TYA
	STA.w !RAM_SMW_NorSpr_FacingDirection,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$30
	STA.w !RAM_SMW_NorSpr044_TorpedoTed_ReleaseAnimationTimer,x
	PLX
	LDY.b #!Define_SMW_MaxExtendedSpriteSlot-$02
CODE_02B424:
	LDA.w !RAM_SMW_ExtSpr_SpriteID,y
	BEQ.b CODE_02B42D
	DEY
	BPL.b CODE_02B424
Return02B42C:
	RTS

CODE_02B42D:
	LDA.b #!Define_SMW_SpriteID_ExtSpr08_LauncherArm
	STA.w !RAM_SMW_ExtSpr_SpriteID,y
	LDA.w !RAM_SMW_ShooterSpr_XPosLo,x
	CLC
	ADC.b #$08
	STA.w !RAM_SMW_ExtSpr_XPosLo,y
	LDA.w !RAM_SMW_ShooterSpr_XPosHi,x
	ADC.b #$00
	STA.w !RAM_SMW_ExtSpr_XPosHi,y
	LDA.w !RAM_SMW_ShooterSpr_YPosLo,x
	SEC
	SBC.b #$09
	STA.w !RAM_SMW_ExtSpr_YPosLo,y
	LDA.w !RAM_SMW_ShooterSpr_YPosHi,x
	SBC.b #$00
	STA.w !RAM_SMW_ExtSpr_YPosHi,y
	LDA.b #$90
	STA.w !RAM_SMW_ExtSpr08_LauncherArm_VerticalDirectionTimer,y
	PHX
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w InitialXSpeed,x							;\ Note: The launcher arm doesn't move horizontally, but this seems to have a purpose. Check SMW_GenericExtendedSpriteGFXRt_Main.
	STA.w !RAM_SMW_ExtSpr_XSpeed,y						;/
	PLX
	RTS

InitialXSpeed:
	db $01,$FF

namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_ProcessSpinningCoinSprites(Address)
namespace SMW_ProcessSpinningCoinSprites
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #!Define_SMW_MaxSpinningCoinSpriteSlot
CODE_0299D4:
	STX.w !RAM_SMW_NorSpr_CurrentSlotID
	LDA.w !RAM_SMW_BlockCoinSpr_SlotID,x
	BEQ.b CODE_0299DF
	JSR.w Sub
CODE_0299DF:
	DEX
	BPL.b CODE_0299D4
	RTS

CODE_0299E3:
	LDA.b #$00
	STA.w !RAM_SMW_BlockCoinSpr_SlotID,x
	RTS

DATA_0299E9:
	db $30,$38,$40,$48,$EC,$EA,$E8,$EC

Sub:
	LDA.b !RAM_SMW_Flag_SpritesLocked
	BNE.b CODE_029A08
	JSR.w UpdateSpinningCoinSpriteYPosition
	LDA.w !RAM_SMW_BlockCoinSpr_YSpeed,x
	CLC
	ADC.b #$03
	STA.w !RAM_SMW_BlockCoinSpr_YSpeed,x
	CMP.b #$20
	BMI.b CODE_029A08
	JMP.w CODE_029AA8

CODE_029A08:
	LDA.w !RAM_SMW_BlockCoinSpr_LayerIndex,x
	ASL
	ASL
	TAY
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_Mirror_CurrentLayer1XPosLo,y
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.w !RAM_SMW_Mirror_CurrentLayer1YPosHi,y
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	CMP.b !RAM_SMW_Misc_ScratchRAM02
	LDA.w !RAM_SMW_BlockCoinSpr_YPosHi,x
	SBC.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b Return029A6D
	LDA.w !RAM_SMW_BlockCoinSpr_XPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$F8
	BCS.b CODE_0299E3
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	SEC
	SBC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDY.w DATA_0299E9,x
	STY.b !RAM_SMW_Misc_ScratchRAM0F							;\ Optimization: Store Y into !RAM_SMW_Misc_ScratchRAM0F, then load !RAM_SMW_Misc_ScratchRAM0F into Y?
	LDY.b !RAM_SMW_Misc_ScratchRAM0F							;/
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$00].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.w SMW_OAMBuffer[$00].YDisp,y
	LDA.b #$E8
	STA.w SMW_OAMBuffer[$00].Tile,y
	LDA.b #$04
	ORA.b !RAM_SMW_Sprites_TilePriority
	STA.w SMW_OAMBuffer[$00].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$02
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	TXA											;\ Optimization: If this were moved to be before the TYA, then storing to !RAM_SMW_Misc_ScratchRAM0F would be unncessary
	CLC											;|
	ADC.b !RAM_SMW_Counter_LocalFrames							;|
	LSR											;|
	LSR											;|
	AND.b #$03										;|
	BNE.b GFXRt										;/
Return029A6D:
	RTS

RollingCoinTiles:
	db $EA,$FA,$EA

GFXRt:
	LDY.b !RAM_SMW_Misc_ScratchRAM0F							; Optimization: This !RAM_SMW_Misc_ScratchRAM0F could be removed if the above optimization is done
	PHX
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.b #$04
	STA.w SMW_OAMBuffer[$00].XDisp,y
	STA.w SMW_OAMBuffer[$01].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	CLC
	ADC.b #$08
	STA.w SMW_OAMBuffer[$01].YDisp,y
	LDA.l RollingCoinTiles-$01,x
	STA.w SMW_OAMBuffer[$00].Tile,y
	STA.w SMW_OAMBuffer[$01].Tile,y
	LDA.w SMW_OAMBuffer[$00].Prop,y
	ORA.b #$80
	STA.w SMW_OAMBuffer[$01].Prop,y
	TYA
	LSR
	LSR
	TAY
	LDA.b #$00
	STA.w SMW_OAMTileSizeBuffer[$00].Slot,y
	STA.w SMW_OAMTileSizeBuffer[$01].Slot,y
	PLX
	RTS

CODE_029AA8:
	JSL.l SMW_CheckForAvailableScoreSpriteSlot_Main
	LDA.b #$01
	STA.w !RAM_SMW_ScoreSpr_SpriteID,y
	LDA.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	STA.w !RAM_SMW_ScoreSpr_YPosLo,y
	LDA.w !RAM_SMW_BlockCoinSpr_YPosHi,x
	STA.w !RAM_SMW_ScoreSpr_YPosHi,y
	LDA.w !RAM_SMW_BlockCoinSpr_XPosLo,x
	STA.w !RAM_SMW_ScoreSpr_XPosLo,y
	LDA.w !RAM_SMW_BlockCoinSpr_XPosHi,x
	STA.w !RAM_SMW_ScoreSpr_XPosHi,y
	LDA.b #$30
	STA.w !RAM_SMW_ScoreSpr_YSpeed,y
	LDA.w !RAM_SMW_BlockCoinSpr_LayerIndex,x
	STA.w !RAM_SMW_ScoreSpr_LayerIndex,y
	JSR.w CODE_029ADA
	JMP.w CODE_0299E3

CODE_029ADA:
	LDY.b #!Define_SMW_MaxSmokeSpriteSlot
CODE_029ADC:
	LDA.w !RAM_SMW_SmokeSpr_SpriteID,y
	BEQ.b CODE_029AE5
	DEY
	BPL.b CODE_029ADC
	RTS

CODE_029AE5:
	LDA.b #!Define_SMW_SpriteID_SmokeSpr05_Glitter
	STA.w !RAM_SMW_SmokeSpr_SpriteID,y
	LDA.w !RAM_SMW_BlockCoinSpr_LayerIndex,x
	LSR
	PHP
	LDA.w !RAM_SMW_BlockCoinSpr_XPosLo,x
	BCC.b CODE_029AF6
	SBC.b !RAM_SMW_Misc_SecondLevelLayerXPosLo
CODE_029AF6:
	STA.w !RAM_SMW_SmokeSpr_XPosLo,y
	LDA.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	PLP
	BCC.b CODE_029B01
	SBC.b !RAM_SMW_Misc_SecondLevelLayerYPosLo
CODE_029B01:
	STA.w !RAM_SMW_SmokeSpr_YPosLo,y
	LDA.b #$10
	STA.w !RAM_SMW_SmokeSpr_Timer,y
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_ProcessSpinningCoinSprites(Address)
namespace SMW_ProcessSpinningCoinSprites
%InsertMacroAtXPosition(<Address>)

UpdateSpinningCoinSpriteYPosition:
	LDA.w !RAM_SMW_BlockCoinSpr_YSpeed,x
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC.w !RAM_SMW_BlockCoinSpr_SubYPos,x
	STA.w !RAM_SMW_BlockCoinSpr_SubYPos,x
	PHP
	LDY.b #$00
	LDA.w !RAM_SMW_BlockCoinSpr_YSpeed,x
	LSR
	LSR
	LSR
	LSR
	CMP.b #$08
	BCC.b +
	ORA.b #$F0
	DEY
+:
	PLP
	ADC.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	STA.w !RAM_SMW_BlockCoinSpr_YPosLo,x
	TYA
	ADC.w !RAM_SMW_BlockCoinSpr_YPosHi,x
	STA.w !RAM_SMW_BlockCoinSpr_YPosHi,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_OWSpr01_Lakitu(Address)
namespace SMW_OWSpr01_Lakitu
%InsertMacroAtXPosition(<Address>)

DATA_04F8A6:
	db $01,$01,$03,$01,$01,$01,$01,$02

DATA_04F8AE:
	db $0C,$0C,$12,$12,$12,$12,$0C,$0C

DATA_04F8B6:
	db $10,$00,$08,$00,$20,$00,$20,$00

DATA_04F8BE:
	db $10,$00,$30,$00,$08,$00,$10,$00

Acceleration:
	db $01,$FF

XYSpeedCap:
	db $10,$F0

ZSpeedCap:
	db $10,$F0

Main:
;$04F8CC
	JSR.w SMW_UpdateOverworldSpritePosition_Main
	CLC
	JSR.w SMW_DrawOverworldSpriteShadow_Main
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM04
	SEP.b #$20
	JSR.w SMW_SetOverworldSpriteFrameIndex_Main
	LDX.b #$06
	AND.b #$10
	BEQ.b ADDR_04F8E8
	INX
ADDR_04F8E8:
	STX.b !RAM_SMW_Misc_ScratchRAM06
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_04F8A6,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b ADDR_04F8F6
	INC.b !RAM_SMW_Misc_ScratchRAM01
ADDR_04F8F6:
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	CLC
	ADC.w DATA_04F8AE,x
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	ADC.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b #$32
	XBA
	LDA.b #$28
	JSR.w SMW_OWSpr05_Cloud_CODE_04FB7B
	LDX.b !RAM_SMW_Misc_ScratchRAM06
	DEX
	DEX
	BPL.b ADDR_04F8E8
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	LDA.b #$32
	XBA
	LDA.b #$26
	JSR.w SMW_OWSpr05_Cloud_CODE_04FB7A
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E15,x
	BEQ.b ADDR_04F928
	JMP.w CalculateOverworldLakitusSpeed

ADDR_04F928:
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E05,x
	AND.b #$01
	TAY
	LDA.w !RAM_SMW_OWSpr_ZSpeed,x
	CLC
	ADC.w Acceleration,y
	STA.w !RAM_SMW_OWSpr_ZSpeed,x
	CMP.w ZSpeedCap,y
	BNE.b ADDR_04F945
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E05,x
	EOR.b #$01
	STA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E05,x
ADDR_04F945:
	JSR.w SMW_CheckForPlayerToOverworldSpriteCollision_SubOverworldHorizAndVertPos
	LDY.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0DF5,x
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0DF5+$0F,x
	ASL
	EOR.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_04F95D
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CMP.w DATA_04F8B6,y
	LDA.w #$0040
	BCS.b ADDR_04F96D
ADDR_04F95D:
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0DF5+$0F,x
	EOR.b !RAM_SMW_Misc_ScratchRAM02
	ASL
	BCC.b ADDR_04F96D
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	CMP.w DATA_04F8BE,y
	LDA.w #$0080
ADDR_04F96D:
	SEP.b #$20
	BCC.b ADDR_04F97F
	EOR.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E05,x
	STA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E05,x
	JSR.w SMW_SetOverworldSpriteFrameIndex_Main
	AND.b #$06
	STA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0DF5,x
ADDR_04F97F:
	TXA
	CLC
	ADC.b #!Define_SMW_MaxOverworldSpriteSlot+$01
	TAX
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0DF5,x
	ASL
	JSR.w ADDR_04F993
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	LDA.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E05,x
	ASL
	ASL
ADDR_04F993:
	LDY.b #$00
	BCS.b ADDR_04F998
	INY
ADDR_04F998:
	LDA.w !RAM_SMW_OWSpr_XSpeed,x
	CLC
	ADC.w Acceleration,y
	CMP.w XYSpeedCap,y
	BEQ.b Return04F9A7
	STA.w !RAM_SMW_OWSpr_XSpeed,x
Return04F9A7:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_OWSpr01_Lakitu(Address)
namespace SMW_OWSpr01_Lakitu
%InsertMacroAtXPosition(<Address>)

CalculateOverworldLakitusSpeed:
	JSR.w SMW_CheckForPlayerToOverworldSpriteCollision_SubOverworldHorizAndVertPos
	LSR.b !RAM_SMW_Misc_ScratchRAM06
	LSR.b !RAM_SMW_Misc_ScratchRAM08
	SEP.b #$20
	LDA.w !RAM_SMW_OWSpr_ZPosLo,x
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM0A
	STZ.b !RAM_SMW_Misc_ScratchRAM05
	LDY.b #$04
	CMP.b !RAM_SMW_Misc_ScratchRAM08
	BCS.b ADDR_04FF49
	LDY.b #$02
	LDA.b !RAM_SMW_Misc_ScratchRAM08
ADDR_04FF49:
	CMP.b !RAM_SMW_Misc_ScratchRAM06
	BCS.b ADDR_04FF51
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM06
ADDR_04FF51:
	CMP.b #$01
	BCS.b ADDR_04FF67
	STZ.w !RAM_SMW_OWSpr01_Lakitu_UnknownTable7E0E15,x
	STZ.w !RAM_SMW_OWSpr_XSpeed,x
	STZ.w !RAM_SMW_OWSpr_YSpeed,x
	STZ.w !RAM_SMW_OWSpr_ZSpeed,x
	LDA.b #$40
	STA.w !RAM_SMW_OWSpr_ZPosLo,x
	RTS

ADDR_04FF67:
	STY.b !RAM_SMW_Misc_ScratchRAM0C
	LDX.b #$04
ADDR_04FF6B:
	CPX.b !RAM_SMW_Misc_ScratchRAM0C
	BNE.b ADDR_04FF73
	LDA.b #$20
	BRA.b ADDR_04FF91

ADDR_04FF73:
	STZ.w !REGISTER_DividendLo
	LDA.b !RAM_SMW_Misc_ScratchRAM06,x
	STA.w !REGISTER_DividendHi
	LDA.w !RAM_SMW_Misc_ScratchRAM06,y
	STA.w !REGISTER_Divisor
	NOP #6
	REP.b #$20
	LDA.w !REGISTER_QuotientLo
	LSR
	LSR
	LSR
	SEP.b #$20
ADDR_04FF91:
	BIT.b !RAM_SMW_Misc_ScratchRAM01,x
	BMI.b ADDR_04FF98
	EOR.b #$FF
	INC
ADDR_04FF98:
	STA.b !RAM_SMW_Misc_ScratchRAM00,x
	DEX
	DEX
	BPL.b ADDR_04FF6B
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w !RAM_SMW_OWSpr_XSpeed,x
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w !RAM_SMW_OWSpr_YSpeed,x
	LDA.b !RAM_SMW_Misc_ScratchRAM04
	STA.w !RAM_SMW_OWSpr_ZSpeed,x
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr02_BlueBird(Address)
namespace SMW_OWSpr02_BlueBird
%InsertMacroAtXPosition(<Address>)

DATA_04F9A8:
	db $4E,$4F,$5E,$4F

DATA_04F9AC:
	db $08,$07,$04,$07

DATA_04F9B0:
	db $00,$01,$04,$01

DATA_04F9B4:
	db $01,$07,$09,$07

Main:
;$04F9B8
	CLC
	JSR.w SMW_DrawOverworldSpriteShadow_Main
	JSR.w SMW_CheckForPlayerToOverworldSpriteCollision_SubOverworldHorizAndVertPos
	SEP.b #$20
	LDY.b #$00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b ADDR_04F9C8
	INY
ADDR_04F9C8:
	LDA.w !RAM_SMW_OWSpr_XSpeed,x
	CLC
	ADC.w SMW_OWSpr01_Lakitu_Acceleration,y
	CMP.w SMW_OWSpr01_Lakitu_XYSpeedCap,y
	BEQ.b ADDR_04F9D7
	STA.w !RAM_SMW_OWSpr_XSpeed,x
ADDR_04F9D7:
	LDY.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LDA.w !RAM_SMW_Overworld_MarioYPosLo,y
	STA.w !RAM_SMW_OWSpr_YPosLo,x
	LDA.w !RAM_SMW_Overworld_MarioYPosHi,y
	STA.w !RAM_SMW_OWSpr_YPosHi,x
	JSR.w SMW_UpdateOverworldSpritePosition_Main
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	LDA.b #$36
	LDY.w !RAM_SMW_OWSpr_XSpeed,x
	BMI.b ADDR_04F9F5
	ORA.b #$40
ADDR_04F9F5:
	PHA
	XBA
	LDA.b #$4C
	JSR.w SMW_OWSpr05_Cloud_CODE_04FB7A
	PLA
	XBA
	JSR.w SMW_SetOverworldSpriteFrameIndex_Main
	LSR
	LSR
	LSR
	AND.b #$03
	TAY
	LDA.w DATA_04F9AC,y
	BIT.w !RAM_SMW_OWSpr_XSpeed,x
	BMI.b ADDR_04FA12
	LDA.w DATA_04F9B0,y
ADDR_04FA12:
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b ADDR_04FA1B
	INC.b !RAM_SMW_Misc_ScratchRAM01
ADDR_04FA1B:
	LDA.w DATA_04F9B4,y
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BCC.b ADDR_04FA27
	INC.b !RAM_SMW_Misc_ScratchRAM03
ADDR_04FA27:
	LDA.w DATA_04F9A8,y
	CLC
	JMP.w SMW_OWSpr05_Cloud_CODE_04FB7B
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr03_CheepCheep(Address)
namespace SMW_OWSpr03_CheepCheep
%InsertMacroAtXPosition(<Address>)

DATA_04FA2E:
	db $70,$50,$B0

DATA_04FA31:
	db $00,$01,$00

DATA_04FA34:
	db $CF,$8F,$7F

DATA_04FA37:
	db $00,$00,$01

DATA_04FA3A:
	db $73,$72,$63,$62

Main:
;$04FA3E
	LDA.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0DF5,x
	BNE.b CODE_04FA83
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	SEC
	SBC.b #$4E
	CMP.b #$03
	BCS.b Return04FA82
	TAY
	LDA.w DATA_04FA2E,y
	STA.w !RAM_SMW_OWSpr_XPosLo,x
	LDA.w DATA_04FA31,y
	STA.w !RAM_SMW_OWSpr_XPosHi,x
	LDA.w DATA_04FA34,y
	STA.w !RAM_SMW_OWSpr_YPosLo,x
	LDA.w DATA_04FA37,y
	STA.w !RAM_SMW_OWSpr_YPosHi,x
	JSR.w SMW_SetOverworldSpriteFrameIndex_Main
	LSR
	ROR
	LSR
	AND.b #$40
	ORA.b #$12
	STA.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0DF5,x
	LDA.b #$24
	STA.w !RAM_SMW_OWSpr_ZSpeed,x
	LDA.b #!Define_SMW_Sound1DF9_Swim
	STA.w !RAM_SMW_IO_SoundCh1
CODE_04FA7D:
	LDA.b #$0F
	STA.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0E25,x
Return04FA82:
	RTS

CODE_04FA83:
	DEC.w !RAM_SMW_OWSpr_ZSpeed,x
	LDA.w !RAM_SMW_OWSpr_ZSpeed,x
	CMP.b #$E4
	BNE.b CODE_04FA90
	JSR.w CODE_04FA7D
CODE_04FA90:
	JSR.w SMW_UpdateOverworldSpritePosition_Main
	LDA.w !RAM_SMW_OWSpr_ZPosLo,x
	ORA.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0E25,x
	BNE.b CODE_04FA9E
	STZ.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0DF5,x
CODE_04FA9E:
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	LDA.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0DF5,x
	LDY.b #$08
	BIT.w !RAM_SMW_OWSpr_ZSpeed,x
	BPL.b CODE_04FAAF
	EOR.b #$C0
	LDY.b #$10
CODE_04FAAF:
	XBA
	TYA
	LDY.b #$4A
	AND.b !RAM_SMW_Counter_GlobalFrames
	BEQ.b CODE_04FAB9
	LDY.b #$48
CODE_04FAB9:
	TYA
	JSR.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Main
	JSR.w SMW_AddZPositionToTempYPos_Main
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_04FAC9
	DEC.b !RAM_SMW_Misc_ScratchRAM03
CODE_04FAC9:
	LDA.b #$36
	XBA
	LDA.w !RAM_SMW_OWSpr03_CheepCheep_UnknownTable7E0E25,x
	BEQ.b Return04FA82
	LSR
	LSR
	PHY
	TAY
	LDA.w DATA_04FA3A,y
	PLY
	PHA
	JSR.w SMW_OWSpr03_CheepCheep_GenericOverworldSpriteGFXRt_Draw8x8
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0008
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	LDA.b #$76
	XBA
	PLA
GenericOverworldSpriteGFXRt_Draw8x8:
	CLC
	JMP.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Entry2
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr04_PiranhaPlant(Address)
namespace SMW_OWSpr04_PiranhaPlant
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_CheckForPlayerToOverworldSpriteCollision_Main			; Note: This sprite doesn't do anything special when it touches Mario or Luigi.
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	JSR.w SMW_SetOverworldSpriteFrameIndex_Main
	LDY.b #$2A
	AND.b #$08
	BEQ.b CODE_04FB02
	LDY.b #$2C
CODE_04FB02:
	LDA.b #$32
	XBA
	TYA
GenericOverworldSpriteGFXRt:
.Main:
;$04FB06
	SEC
	LDY.w SMW_OverworldSpriteOAMIndexes_Main,x
.Entry2:
	STA.w SMW_OAMBuffer[$10].Tile,y
	XBA
	STA.w SMW_OAMBuffer[$10].Prop,y
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b .Return04FB36
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.w SMW_OAMBuffer[$10].XDisp,y
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	BNE.b .Return04FB36
	PHP
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.w SMW_OAMBuffer[$10].YDisp,y
	TYA
	LSR
	LSR
	PLP
	PHY
	TAY
	ROL
	ASL
	AND.b #$03
	STA.w SMW_OAMTileSizeBuffer[$10].Slot,y
	PLY
	DEY
	DEY
	DEY
	DEY
.Return04FB36:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr05_Cloud(Address)
namespace SMW_OWSpr05_Cloud
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$02
	STA.w !RAM_SMW_OWSpr_XSpeed,x
	LDA.b #$FF
	STA.w !RAM_SMW_OWSpr_YSpeed,x
	JSR.w SMW_UpdateOverworldSpritePosition_Main
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0020
	CMP.w #$0140
	BCS.b CODE_04FB5D
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w #$0080
	CMP.w #$01A0
CODE_04FB5D:
	SEP.b #$20
	BCC.b CODE_04FB64
	STZ.w !RAM_SMW_OWSpr_SpriteID,x
CODE_04FB64:
	LDA.b #$32
	JSR.w CODE_04FB77
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w #$0010
	STA.b !RAM_SMW_Misc_ScratchRAM00
	SEP.b #$20
	LDA.b #$72
CODE_04FB77:
	XBA
	LDA.b #$44
CODE_04FB7A:
	SEC
CODE_04FB7B:
	LDY.w !RAM_SMW_Sprites_StartingOAMIndexForOverworldSprites
	JSR.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Entry2
	STY.w !RAM_SMW_Sprites_StartingOAMIndexForOverworldSprites
Return04FB84:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr06_KoopaKid(Address)
namespace SMW_OWSpr06_KoopaKid
%InsertMacroAtXPosition(<Address>)

DATA_04FB85:
	db $80,$40,$20

InitialXLo:
	db $30,$10,$C0

InitialXHi:
	db $01,$01,$01

InitialYLo:
	db $7F,$7F,$8F

InitialYHi:
	db $01,$00

DATA_04FB93:
	db $01,$08

DATA_04FB95:
	db $02,$0F,$00

Main:
;$04FB98
	LDA.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0DF5,x
	BNE.b ADDR_04FBD8
	LDA.w !RAM_SMW_Overworld_TilePlayerIsStandingdOnLo
	SEC
	SBC.b #!Define_SMW_OWSpr06_KoopaKid_LowestTriggerTile			; LM: "Koopa Kid Tile Numbers" in "Edit Sprites List"
	CMP.b #$03
	BCS.b SMW_OWSpr05_Cloud_Return04FB84
	TAY
	STA.w !RAM_SMW_OWSpr06_KoopaKid_TileIndex
	LDA.w !RAM_SMW_OWSpr06_KoopaKid_ActivateFlag
	AND.w DATA_04FB85,y
	BNE.b SMW_OWSpr05_Cloud_Return04FB84
	LDA.w InitialXLo,y
	STA.w !RAM_SMW_OWSpr_XPosLo,x
	LDA.w InitialXHi,y
	STA.w !RAM_SMW_OWSpr_XPosHi,x
	LDA.w InitialYLo,y
	STA.w !RAM_SMW_OWSpr_YPosLo,x
	LDA.w InitialYHi,y
	STA.w !RAM_SMW_OWSpr_YPosHi,x
	LDA.b #$02
	STA.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0DF5,x
	LDA.b #$F0
	STA.w !RAM_SMW_OWSpr_XSpeed,x
	STZ.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0E25,x
ADDR_04FBD8:
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	LDA.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0E25,x
	BNE.b ADDR_04FC00
	INC.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0E05,x
	JSR.w SMW_UpdateOverworldSpritePosition_X
	LDY.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0DF5,x
	LDA.w !RAM_SMW_OWSpr_XPosLo,x
	AND.b #$0F
	CMP.w DATA_04FB95,y
	BNE.b ADDR_04FC00
	DEC.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0DF5,x
	LDA.b #$04
	STA.w !RAM_SMW_OWSpr_XSpeed,x
	LDA.b #$60
	STA.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0E25,x
ADDR_04FC00:
	LDA.w DATA_04FB93,y
	LDY.b #$22
	AND.w !RAM_SMW_OWSpr06_KoopaKid_UnknownTable7E0E05,x
	BNE.b ADDR_04FC0C
	LDY.b #$62
ADDR_04FC0C:
	TYA
	XBA
	LDA.b #$6A
	JSR.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Main
	JSR.w SMW_CheckForPlayerToOverworldSpriteCollision_Main
	BCS.b Return04FC1D
	ORA.b #$80
	STA.w !RAM_SMW_Overworld_EnterLevelFlag
Return04FC1D:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr07_Smoke(Address)
namespace SMW_OWSpr07_Smoke
%InsertMacroAtXPosition(<Address>)

DATA_04FC1E:
	dw $0038,$0068

DATA_04FC22:
	dw $018A,$006A

DATA_04FC26:
	db $01,$02,$03,$04,$03,$02,$01,$00
	db $01,$02,$03,$04,$03,$02,$01,$00

DATA_04FC36:
	db $FF,$FF,$FE,$FD,$FD,$FC,$FB,$FB
	db $FA,$F9,$F9,$F8,$F7,$F7,$F6,$F5

Main:
;$04FC46
	LDA.w !RAM_SMW_Player_CurrentCharacterX4Lo
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	ASL
	TAY
	LDA.w DATA_04FC1E,y
	STA.w !RAM_SMW_OWSpr_XPosLo,x
	LDA.w DATA_04FC1E+$01,y
	STA.w !RAM_SMW_OWSpr_XPosHi,x
	LDA.w DATA_04FC22,y
	STA.w !RAM_SMW_OWSpr_YPosLo,x
	LDA.w DATA_04FC22+$01,y
	STA.w !RAM_SMW_OWSpr_YPosHi,x
	LDA.b !RAM_SMW_Counter_GlobalFrames
	AND.b #$0F
	BNE.b CODE_04FC7C
	LDA.w !RAM_SMW_OWSpr_Table7E0DF5,x
	INC
	CMP.b #$0C
	BCC.b CODE_04FC79
	LDA.b #$00
CODE_04FC79:
	STA.w !RAM_SMW_OWSpr_Table7E0DF5,x
CODE_04FC7C:
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b !RAM_SMW_Counter_GlobalFrames
	STA.b !RAM_SMW_Misc_ScratchRAM06
	STZ.b !RAM_SMW_Misc_ScratchRAM07
	LDY.w SMW_OverworldSpriteOAMIndexes_Main,x
	LDA.w !RAM_SMW_OWSpr_Table7E0DF5,x
	TAX
CODE_04FC8D:
	PHY
	PHX
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	PLX
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	CLC
	ADC.w DATA_04FC36,x
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	BCS.b CODE_04FCA5
	DEC.b !RAM_SMW_Misc_ScratchRAM03
CODE_04FCA5:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w DATA_04FC26,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	BCC.b CODE_04FCB1
	INC.b !RAM_SMW_Misc_ScratchRAM01
CODE_04FCB1:
	TXA
	CLC
	ADC.b #$0C
	CMP.b #$10
	AND.b #$0F
	TAX
	BCC.b CODE_04FCC2
	LDA.b !RAM_SMW_Misc_ScratchRAM07
	SBC.b #$0C
	STA.b !RAM_SMW_Misc_ScratchRAM07
CODE_04FCC2:
	LDA.b #$30
	XBA
	LDY.b #$28
	LDA.b !RAM_SMW_Misc_ScratchRAM06
	CLC
	ADC.b #$0A
	STA.b !RAM_SMW_Misc_ScratchRAM06
	AND.b #$20
	BEQ.b CODE_04FCD4
	LDY.b #$5F
CODE_04FCD4:
	TYA
	PLY
	JSR.w SMW_OWSpr03_CheepCheep_GenericOverworldSpriteGFXRt_Draw8x8
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_04FC8D
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr08_BowserSign(Address)
namespace SMW_OWSpr08_BowserSign
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.b #$6F
	STA.b !RAM_SMW_Misc_ScratchRAM05
	LDY.w SMW_OverworldSpriteOAMIndexes_Main,x
CODE_04FCEF:
	LDA.b !RAM_SMW_Counter_GlobalFrames
	LSR
	AND.b #$06
	ORA.b #$30
	XBA
	LDA.b !RAM_SMW_Misc_ScratchRAM05
	JSR.w SMW_OWSpr03_CheepCheep_GenericOverworldSpriteGFXRt_Draw8x8
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM05
	DEC.b !RAM_SMW_Misc_ScratchRAM04
	BNE.b CODE_04FCEF
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr09_Bowser(Address)
namespace SMW_OWSpr09_Bowser
%InsertMacroAtXPosition(<Address>)

DATA_04FD0A:
	db $07,$07,$03,$03,$5F,$5F

DATA_04FD10:
	db $01,$FF,$01,$FF,$01,$FF,$01,$FF
	db $01,$FF

DATA_04FD1A:
	db $18,$E8,$0A,$F6,$08,$F8,$03,$FD

DATA_04FD22:									; Note: This label is not referenced in the Overworld Bowser code, but rather from a bit of code that shouldn't be referencing this.
	db $01,$FF

Main:
;$04FD24
	JSR.w SMW_UpdateOverworldSpritePosition_Main
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main				;\ Optimization: Why is this called twice?
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main				;/
	LDA.b #$00
	LDY.w !RAM_SMW_OWSpr_XSpeed,x
	BMI.b CODE_04FD36
	LDA.b #$40
CODE_04FD36:
	XBA
	LDA.b #$68
	JSR.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Main
	INC.w !RAM_SMW_OWSpr09_Bowser_UnknownTable7E0E15,x
	LDA.w !RAM_SMW_OWSpr09_Bowser_UnknownTable7E0E15,x
	LSR
	BCS.b Return04FD6F
	LDA.w !RAM_SMW_OWSpr09_Bowser_UnknownTable7E0E05,x
	ORA.b #$02
	TAY
	TXA
	ADC.b #!Define_SMW_MaxOverworldSpriteSlot+$01
	TAX
	JSR.w CODE_04FD55
	LDY.w !RAM_SMW_OWSpr09_Bowser_UnknownTable7E0DF5,x
CODE_04FD55:
	LDA.w !RAM_SMW_OWSpr_XSpeed,x
	CLC
	ADC.w DATA_04FD10,y
	STA.w !RAM_SMW_OWSpr_XSpeed,x
	CMP.w DATA_04FD1A,y
	BNE.b CODE_04FD68
	TYA
	EOR.b #$01
	TAY
CODE_04FD68:
	TYA
	STA.w !RAM_SMW_OWSpr09_Bowser_UnknownTable7E0DF5,x
	LDX.w !RAM_SMW_Sprites_CurrentlyProcessedOverworldSprite
Return04FD6F:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_OWSpr0A_Boo(Address)
namespace SMW_OWSpr0A_Boo
%InsertMacroAtXPosition(<Address>)

Main:
	JSR.w SMW_UpdateOverworldSpritePosition_Main
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main				;\ Optimization: Why is this called twice?
	JSR.w SMW_GetOverworldSpriteOnScreenPosition_Main				;/
	LDY.w !RAM_SMW_Player_CurrentCharacter
	LDA.w !RAM_SMW_Overworld_MarioMap,y
	BEQ.b CODE_04FDA5							; Note: !Define_SMW_Overworld_MainMap
	CPX.b #$0F
	BNE.b CODE_04FD8E
	LDA.w !RAM_SMW_Overworld_EventFlags+$05
	AND.b #$12
	BNE.b CODE_04FD8E
	STX.b !RAM_SMW_Misc_ScratchRAM03
CODE_04FD8E:
	TXA
	ASL
	TAY
	REP.b #$20
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CLC
	ADC.w SMW_LoadOverworldSprites_SubmapBooXPosOffset-$1A,y
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.w SMW_LoadOverworldSprites_SubmapBooYPosOffset-$1A,y
	STA.b !RAM_SMW_Misc_ScratchRAM02
	SEP.b #$20
CODE_04FDA5:
	LDA.b #$34
	LDY.w !RAM_SMW_OWSpr_XSpeed,x
	BMI.b CODE_04FDAE
	LDA.b #$44
CODE_04FDAE:
	XBA
	LDA.b #$60
	JSR.w SMW_OWSpr04_PiranhaPlant_GenericOverworldSpriteGFXRt_Main
	LDA.w !RAM_SMW_OWSpr0A_Boo_UnknownTable7E0E25,x
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.w !RAM_SMW_OWSpr0A_Boo_UnknownTable7E0E25,x
	TXA
	CLC
	ADC.b #((!Define_SMW_MaxOverworldSpriteSlot+$01)*$02)
	TAX
	LDA.b #$08
	JSR.w CODE_04FDD2
	TXA
	CLC
	ADC.b #!Define_SMW_MaxOverworldSpriteSlot+$01
	TAX
	LDA.b #$06
	JSR.w CODE_04FDD2
	LDA.b #$04
CODE_04FDD2:
	ORA.w !RAM_SMW_OWSpr0A_Boo_UnknownTable7E0DF5,x
	TAY
	LDA.w SMW_OWSpr09_Bowser_DATA_04FD0A-$04,y
	AND.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b SMW_OWSpr09_Bowser_CODE_04FD68
	JMP.w SMW_OWSpr09_Bowser_CODE_04FD55
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj00_ScreenExit(Address)			; Optimization: Poorly optimized routine. Can be shrunk down considerably.
namespace SMW_ExtendedObj00_ScreenExit
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b #$00
	LDA.b [!RAM_SMW_Pointer_Layer1DataLo],y
	STA.b !RAM_SMW_Blocks_ObjectNumber
	INY
	TYA
	CLC
	ADC.b !RAM_SMW_Pointer_Layer1DataLo
	STA.b !RAM_SMW_Pointer_Layer1DataLo
	LDA.b !RAM_SMW_Pointer_Layer1DataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_Layer1DataHi
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$1F
	TAX
	LDA.b !RAM_SMW_Blocks_ObjectNumber
	STA.w !RAM_SMW_Misc_SubscreenExitEntranceNumberLo,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	AND.b #$01
	STA.w !RAM_SMW_Misc_SubscreenExitProperties,x
	LDA.b !RAM_SMW_Misc_ScratchRAM0B
	LSR
	STA.w !RAM_SMW_Flag_UseSecondaryEntrance
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj01_ScreenJump(Address)
namespace SMW_ExtendedObj01_ScreenJump
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$1F
	STA.w !RAM_SMW_Blocks_ScreenToPlaceCurrentObject
	STA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObjXX_Generic1TileObject(Address)
namespace SMW_ExtendedObjXX_Generic1TileObject
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $1F				; Small door (small mario only)
	db $22				; Invisible 1-UP question block
	db $24				; Invisible note block
	db $42				; Top left corner edge tile 1
	db $43				; Top right corner edge tile 1
	db $27				; Small invisible POW door (small mario only)
	db $29				; Invisible POW question block
	db $25				; Unused (?)
	db $6E				; 3-Up moon
	db $6F				; Invisible 1-Up point #1
	db $70				; Invisible 1-Up point #2
	db $71				; Invisible 1-Up point #3
	db $72				; Invisible 1-Up point #4 (check point)
	db $45				; Red berry
	db $46				; Pink berry
	db $47				; Green berry
	db $48				; Always-turning turn block
	db $36				; Bottom right of midway point (not used?)
	db $37				; Bottom right of midway point (not used?)
	db $11				; Note block, flower/feather/star inside
	db $12				; ON/OFF block, use SP4=3 or 5
	db $14				; Question block with direction coins
	db $15				; Note block, bounce on top & bottom
	db $16				; Note block, bounce on all sides!
	db $17				; Turn block with flower inside
	db $18				; Turn block with feather inside
	db $19				; Turn block with star inside
	db $1A				; Turn block, coin(star 2)/1-UP/vine (X/3)
	db $1B				; Turn block with multiple coins inside
	db $1C				; Turn block with coin inside
	db $29				; Turn block with "nothing" inside
	db $1D				; Turn block with blue/silver POW inside (X/2)
	db $1F				; Question block with flower inside
	db $20				; Question block with feather inside
	db $21				; Question block with star inside
	db $22				; Question block with coin(star 2) inside
	db $23				; Question block with multiple coins inside
	db $25				; Question block, key/wings/balloon/shell (X/4)
	db $26				; Question block with Yoshi/1-UP inside
	db $27				; Question block with green turtle shell inside
	db $28				; Question block with green turtle shell inside
	db $2A				; Unbreakable turn block, side feather inside
	db $DE				; Top left corner edge tile 2
	db $E0				; Top right corner edge tile 2
	db $E2				; Top left corner edge tile 3
	db $E4				; Top right corner edge tile 3
	db $EC				; Top left corner edge tile 4
	db $ED				; Top right corner edge tile 4
	db $2C				; Translucent block, use SP4=4
	db $25				; Unused (?)
	db $2D				; Green Star Block 

Main:
	TXA
	SEC
	SBC.b #$10
CODE_0DA57F:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	CPX.b #$18
	BCC.b CODE_0DA5B1
	CPX.b #$1D
	BCS.b CODE_0DA5B1
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	AND.b #$07
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	CMP.b #$08
	BNE.b CODE_0DA5A7
	LDA.w !RAM_SMW_Flag_CollectedMoons,y
	AND.l SMW_BitTable_Bank0D,x
	BEQ.b CODE_0DA5B1
	BRA.b Return0DA5B0

CODE_0DA5A7:
	LDA.w !RAM_SMW_Flag_Collected1upCheckpoints,y
	AND.l SMW_BitTable_Bank0D,x
	BEQ.b CODE_0DA5B1
Return0DA5B0:
	RTS

CODE_0DA5B1:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	CPX.b #$13
	BMI.b CODE_0DA5BF
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DA5BF:
	LDA.l Tiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	CPX.b #$01
	BEQ.b CODE_0DA5F0
	CPX.b #$07
	BEQ.b CODE_0DA5F0
	CPX.b #$32
	BEQ.b CODE_0DA5F0
	CPX.b #$26
	BEQ.b CODE_0DA5F0
	CPX.b #$1B
	BNE.b CODE_0DA648
	TYA
	AND.b #$0F
	CMP.b #$01
	BEQ.b CODE_0DA5F0
	CMP.b #$04
	BEQ.b CODE_0DA5F0
	CMP.b #$07
	BEQ.b CODE_0DA5F0
	CMP.b #$0A
	BEQ.b CODE_0DA5F0
	CMP.b #$0D
	BNE.b CODE_0DA648
CODE_0DA5F0:
	TXA
	PHA
	TYA
	PHA
	LDX.w !RAM_SMW_Misc_ItemMemorySetting
	LDA.b #$F8
	CLC
	ADC.l SMW_Bank0DItemMemoryIndexes_Lo,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$19
	ADC.l SMW_Bank0DItemMemoryIndexes_Hi,x
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$10
	BEQ.b CODE_0DA61B
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0DA61B:
	TYA
	AND.b #$08
	BEQ.b CODE_0DA626
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0DA626:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	AND.b #$07
	TAX
#LM171Hijack_ItemMemory3Revamp2:
	LDY.b !RAM_SMW_Misc_ScratchRAM0E				;\ LM: Hijacks here to make item memory index 3 not track items collected (1.71+)
	LDA.b (!RAM_SMW_Misc_ScratchRAM08),y				;/
	AND.l SMW_BitTable_Bank0D,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	PLA
	TAY
	PLA
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_0DA648
	CPX.b #$07
	BEQ.b Return0DA64C
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$32
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_0DA648:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
Return0DA64C:
	RTS

GreenStarBlockEntry:
	LDA.b #$32
	JMP.w CODE_0DA57F

namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj10_SmallDoor_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj11_Invisible1upBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj12_InvisibleNoteBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj13_TopLeftCornerEdge1_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj14_TopRightCornerEdge1_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj15_SmallPSwitchDoor_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj16_InvisiblePSwitchBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj18_3upMoon_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj19_1upCheckpoint1_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj1A_1upCheckpoint2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj1B_1upCheckpoint3_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj1C_1upCheckpoint4_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj1D_RedBerry_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj1E_PinkBerry_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj1F_GreenBerry_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj20_SpinningTurnBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj21_BottomRightMidwayGateTile_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj22_BottomRightMidwayGateTile_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj23_NoteBlockWithPowerUp_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj24_ONOFFBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj25_DirectionalCoinBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj26_NoteBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj27_4WayNoteBlock_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj28_TurnBlockWithFlower_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj29_TurnBlockWithFeather_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj2A_TurnBlockWithStar_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj2B_TurnBlockWithCoinStar21upVine_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj2C_TurnBlockWithMultipleCoins_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj2D_TurnBlockWithCoin_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj2E_TurnBlockWithNothing_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj2F_TurnBlockWithPSwitch_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj30_QuestionBlockWithFlower_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj31_QuestionBlockWithFeather_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj32_QuestionBlockWithStar_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj33_QuestionBlockWithCoinStar2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj34_QuestionBlockWithMultipleCoins_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj35_QuestionBlockWithKeyWingsBalloonShell_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj36_QuestionBlockWithYoshi_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj37_QuestionBlockWithShell_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj38_QuestionBlockWithShell_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj39_SolidTurnBlockWithSideFeather_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj3A_TopLeftCornerEdge2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj3B_TopRightCornerEdge2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj3C_TopLeftCornerEdge3_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj3D_TopRightCornerEdge3_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj3E_TopLeftCornerEdge4_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj3F_TopRightCornerEdge4_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_Main, SMW_ExtendedObj40_GlassBlock_Main)

	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_Generic1TileObject_GreenStarBlockEntry, SMW_ExtendedObj17_GreenStarBlock_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj41_YoshiCoin(Address)
namespace SMW_ExtendedObj41_YoshiCoin
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	LSR
	LSR
	LSR
	TAY
	LDA.w !RAM_SMW_Overworld_LevelNumberLo
	AND.b #$07
	TAX
	LDA.w !RAM_SMW_Flag_Collected5YoshiCoins,y
	AND.l SMW_BitTable_Bank0D,x
	BNE.b SMW_StandardObj15_MidwayAndGoalPoint_Return0DB2C9
	LDX.w !RAM_SMW_Misc_ItemMemorySetting
	LDA.b #$F8
	CLC
	ADC.l SMW_Bank0DItemMemoryIndexes_Lo,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$19
	ADC.l SMW_Bank0DItemMemoryIndexes_Hi,x
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$10
	BEQ.b CODE_0DB307
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0DB307:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TYA
	AND.b #$08
	BEQ.b CODE_0DB314
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0DB314:
	TYA
	AND.b #$07
	TAX
#LM171Hijack_ItemMemory3Revamp4:
	LDY.b !RAM_SMW_Misc_ScratchRAM0E					;\ LM: Hijacks here to make item memory index 3 not track items collected (1.71+)
	LDA.b (!RAM_SMW_Misc_ScratchRAM08),y					;/
	AND.l SMW_BitTable_Bank0D,x
	BNE.b Return0DB335
	LDY.b !RAM_SMW_Blocks_SubScrPos
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$2D
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$2E
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
Return0DB335:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj42_TopLeftSlope(Address)
namespace SMW_ExtendedObj42_TopLeftSlope
%InsertMacroAtXPosition(<Address>)

LeftTiles:
	db $D8		; Top left slope
	db $DB		; Top right slope

RightTiles:
	db $DA		; Top left slope
	db $DC		; Top right slope

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TXA
	SEC
	SBC.b #$42
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l LeftTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	LDA.l RightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj42_TopLeftSlope_Main, SMW_ExtendedObj43_TopRightSlope_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObjXX_PurpleTriangle(Address)
namespace SMW_ExtendedObjXX_PurpleTriangle
%InsertMacroAtXPosition(<Address>)

TriangleTiles:
	db $B4,$B5

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TXA
	SEC
	SBC.b #$44
	TAX
	LDA.l TriangleTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b #$EB
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_PurpleTriangle_Main, SMW_ExtendedObj44_LeftFacingTriangle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_PurpleTriangle_Main, SMW_ExtendedObj45_RightFacingTriangle_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj46_MidwayBar(Address)
namespace SMW_ExtendedObj46_MidwayBar
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.w !RAM_SMW_Overworld_LevelNumberLo
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w !RAM_SMW_Overworld_LevelTileSettings,x
else
	LDA.l !RAM_SMW_Overworld_LevelTileSettings,x
endif
	AND.b #$40
	BNE.b Return0DA6B0
	LDA.w !RAM_SMW_Flag_GotMidpoint
	BNE.b Return0DA6B0
	LDY.b !RAM_SMW_Blocks_SubScrPos
	DEY								; Glitch: This causes the midway bar to break on subscreen boundries.
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$35
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$38
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
Return0DA6B0:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj47_Door(Address)
namespace SMW_ExtendedObj47_Door
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $1F		; Door
	db $27		; Invisible POW door

BottomTiles:
	db $20		; Door
	db $28		; Invisible POW door

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TXA
	SEC
	SBC.b #$47
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l TopTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj48_PSwitchDoor_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj98_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj99_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj9A_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj9B_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj9C_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj9D_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj9E_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObj9F_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA0_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA1_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA2_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA3_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA4_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA5_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA6_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA7_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA8_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjA9_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjAA_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjAB_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjAC_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjAD_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjAE_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjAF_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB0_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB1_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB2_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB3_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB4_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB5_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB6_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB7_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB8_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjB9_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjBA_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjBB_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjBC_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjBD_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjBE_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjBF_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC0_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC1_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC2_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC3_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC4_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC5_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC6_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC7_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC8_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjC9_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjCA_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjCB_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjCC_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjCD_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjCE_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjCF_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD0_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD1_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD2_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD3_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD4_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD5_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD6_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD7_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD8_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjD9_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjDA_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjDB_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjDC_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjDD_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjDE_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjDF_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE0_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE1_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE2_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE3_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE4_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE5_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE6_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE7_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE8_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjE9_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjEA_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjEB_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjEC_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjED_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjEE_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjEF_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF0_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF1_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF2_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF3_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF4_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF5_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF6_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF7_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF8_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjF9_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjFA_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjFB_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjFC_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjFD_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjFE_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj47_Door_Main, SMW_ExtendedObjFF_Unused_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj49_GhostHouseExit(Address)
namespace SMW_ExtendedObj49_GhostHouseExit
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $A5,$A5,$A4,$A5,$A5,$A4
	db $A7,$A8,$A4,$A7,$A8,$A4
	db $AC,$AD,$A4,$AC,$AD,$A4
	db $AE,$AF,$A4,$AE,$AF,$A4
	db $B0,$B1,$A4,$B0,$B1,$A4
	db $A7,$A8,$A4,$A7,$A8,$A4
	db $A5,$A5,$A5,$A5,$A5,$A4
	db $B4,$B4,$B4,$B4,$B4,$A4
	db $AC,$B2,$AD,$B4,$B4,$A4
	db $B0,$B3,$B1,$B4,$B4,$A4
	db $C1,$C2,$C6,$B4,$B4,$A4
	db $C1,$C2,$C6,$A5,$A5,$A4
	db $C1,$C2,$C6,$A7,$A8,$A4

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
CODE_0DEAC3:
	LDA.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DEAC7:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DEAC7
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$4E
	BNE.b CODE_0DEAC3
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj4A_ClimbingNetDoor(Address)
namespace SMW_ExtendedObj4A_ClimbingNetDoor
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $10,$11,$11,$12
	db $13,$0B,$0B,$15
	db $13,$0B,$0B,$15
	db $16,$17,$17,$18

Main:											; Glitch: This object doesn't set the high byte!
											; Placing it over tiles outside of page 00 will draw the wrong tiles.
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DA7C8:
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DA7CC:
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DA7CC
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$10
	BNE.b CODE_0DA7C8
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj4B_ConveyorEndTile1(Address)
namespace SMW_ExtendedObj4B_ConveyorEndTile1
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $07
	db $08

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$4B
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj4B_ConveyorEndTile1_Main, SMW_ExtendedObj4C_ConveyorEndTile2_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObjXX_LineGuideQuarterLargeCircle(Address)
namespace SMW_ExtendedObjXX_LineGuideQuarterLargeCircle
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $7A,$7B	;\ Line guide, top left 1/4 large circle
	db $7C,$25	;/

	db $7E,$7F	;\ Line guide, top right 1/4 large circle
	db $25,$7D	;/

	db $82,$25	;\ Line guide, bottom left 1/4 large circle
	db $80,$81	;/

	db $25,$83	;\ Line guide, bottom right 1/4 large circle
	db $84,$85	;/

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$4D
	ASL
	ASL
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DCE74:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	TXA
	AND.b #$01
	BNE.b CODE_0DCE74
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	TXA
	AND.b #$03
	BNE.b CODE_0DCE74
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterLargeCircle_Main, SMW_ExtendedObj4D_LineGuideTopLeftQuarterLargeCircle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterLargeCircle_Main, SMW_ExtendedObj4E_LineGuideTopRightQuarterLargeCircle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterLargeCircle_Main, SMW_ExtendedObj4F_LineGuideBottomLeftQuarterLargeCircle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterLargeCircle_Main, SMW_ExtendedObj50_LineGuideBottomRightQuarterLargeCircle_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObjXX_LineGuideQuarterSmallCircle(Address)
namespace SMW_ExtendedObjXX_LineGuideQuarterSmallCircle
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $76		; Line guide, top left 1/4 small circle
	db $77		; Line guide, top right 1/4 small circle
	db $78		; Line guide, bottom left 1/4 small circle
	db $79		; Line guide, bottom right 1/4 small circle

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$51
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterSmallCircle_Main, SMW_ExtendedObj51_LineGuideTopLeftQuarterSmallCircle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterSmallCircle_Main, SMW_ExtendedObj52_LineGuideTopRightQuarterSmallCircle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterSmallCircle_Main, SMW_ExtendedObj53_LineGuideBottomLeftQuarterSmallCircle_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LineGuideQuarterSmallCircle_Main, SMW_ExtendedObj54_LineGuideBottomRightQuarterSmallCircle_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj55_HorizontalLineGuideEnd(Address)
namespace SMW_ExtendedObj55_HorizontalLineGuideEnd
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $96
	db $97

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LDX.b #$00
CODE_0DCEC6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INX
	CPX.b #$02
	BNE.b CODE_0DCEC6
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj56_VerticalLineGuideEnd(Address)
namespace SMW_ExtendedObj56_VerticalLineGuideEnd
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $98,$99

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LDX.b #$00
CODE_0DCEE0:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	CPX.b #$02
	BNE.b CODE_0DCEE0
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner(Address)
namespace SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $73		; Switch palace bottom right corner tile
	db $74		; Switch palace bottom left corner tile
	db $75		; Switch palace top right corner tile
	db $76		; Switch palace top left corner tile
	db $93		; Bit of brick background tile 1
	db $94		; Bit of brick background tile 2
	db $95		; Bit of brick background tile 3
	db $96		; Bit of brick background tile 4

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$57
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj58_SwitchPalaceBottomLeftInnerCorner_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj59_SwitchPalaceTopRightInnerCorner_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj5A_SwitchPalaceTopLeftInnerCorner_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj5B_BitOfBrickBackground1_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj5C_BitOfBrickBackground2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj5D_BitOfBrickBackground3_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj57_SwitchPalaceBottomRightInnerCorner_Main, SMW_ExtendedObj5E_BitOfBrickBackground4_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj5F_LargeBackgroundArea(Address)
namespace SMW_ExtendedObj5F_LargeBackgroundArea
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b #$00
ADDR_0DE977:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$77
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	INY
	BNE.b ADDR_0DE977
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_0DE977
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj60_CaveLavaInnerCorner(Address)
namespace SMW_ExtendedObj60_CaveLavaInnerCorner
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FE
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj61_GhostHouseClock(Address)
namespace SMW_ExtendedObj61_GhostHouseClock
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $97,$98,$99		;\ Ghost house clock
	db $9A,$9B,$9C		;|
	db $9D,$9E,$9F		;/

	db $86,$87,$25		;\ Ghost house top left to bottom right beam 1
	db $25,$86,$87		;|
	db $25,$25,$86		;/

	db $25,$84,$85		;\ Ghost house top right to bottom left beam 1
	db $84,$85,$25		;|
	db $85,$25,$25		;/

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$61
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	ASL
	CLC
	ADC.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DE9C3:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DE9C3
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DE9C3
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj61_GhostHouseClock_Main, SMW_ExtendedObj62_GhostHouseTopLeftToBottomRightBeam1_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj61_GhostHouseClock_Main, SMW_ExtendedObj63_GhostHouseTopRightToBottomLeftBeam1_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj64_TopRightCobweb(Address)
namespace SMW_ExtendedObj64_TopRightCobweb
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $8C,$8D	;\ Ghost house cobweb, top right
	db $25,$8E	;/	

	db $90,$91	;\ Ghost house cobweb, top left
	db $8F,$25	;/

	db $FC,$FD	;\ Ghost house window (8F)
	db $FE,$FF	;/

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$64
	ASL
	ASL
	TAX
GhostHouseWindowEntry:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DEA00:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DEA00
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DEA00
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj64_TopRightCobweb_Main, SMW_ExtendedObj65_TopLeftCobweb_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj66_GhostHouseTopRightToBottomLeftBeam2(Address)
namespace SMW_ExtendedObj66_GhostHouseTopRightToBottomLeftBeam2
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $25,$25,$7A,$7B	;\ Ghost house top right to bottom left beam 2
	db $25,$7C,$7D,$25	;|
	db $7C,$7D,$25,$25	;|
	db $7D,$25,$25,$25	;/

	db $7E,$7F,$25,$25	;\ Ghost house top left to bottom right beam 2
	db $25,$80,$81,$25	;|
	db $25,$25,$80,$81	;|
	db $25,$25,$25,$80	;/

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$66
	ASL
	ASL
	ASL
	ASL
	TAX
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
ADDR_0DEA53:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_0DEA53
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b ADDR_0DEA53
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj66_GhostHouseTopRightToBottomLeftBeam2_Main, SMW_ExtendedObj67_GhostHouseTopLeftToBottomRightBeam2_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj68_CloudFringeBottomAndRightEdge(Address)
namespace SMW_ExtendedObj68_CloudFringeBottomAndRightEdge
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $91		; Cloud fringe, bottom and right edge
	db $92		; Cloud fringe, bottom and left edge
	db $96		; Cloud fringe, bottom right
	db $97		; Cloud fringe, bottom left
	db $9A		; Cloud fringe on white, bottom and right edge
	db $9B		; Cloud fringe on white, bottom and left edge
	db $9F		; Cloud fringe on white, bottom right
	db $A0		; Cloud fringe on white, bottom left

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$68
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj69_CloudFringeBottomAndLeftEdge_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj6A_CloudFringeBottomRight_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj6B_CloudFringeBottomLeft_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj6C_CloudFringeOnWhiteBottomAndRightEdge_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj6D_CloudFringeOnWhiteBottomAndLeftEdge_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj6E_CloudFringeOnWhiteBottomRight_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj68_CloudFringeBottomAndRightEdge_Main, SMW_ExtendedObj6F_CloudFringeOnWhiteBottomLeft_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj70_BitOfCanvas1(Address)
namespace SMW_ExtendedObj70_BitOfCanvas1
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$51
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$84
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$85
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj71_Canvas1(Address)
namespace SMW_ExtendedObj71_Canvas1
%InsertMacroAtXPosition(<Address>)

Tiles:
.Canvas1:
	db $5C,$5D,$5E,$60
	db $73,$74,$75
	db $73,$74,$75
	db $73,$74,$75
	db $73,$74,$75
	db $76,$76,$76
.Canvas2:
	db $5C,$5D,$5E,$60
	db $77,$78,$79
	db $7A,$7B,$7C
	db $77,$78,$79
	db $7A,$7B,$7C
	db $76,$76,$76
.Canvas3:
	db $5C,$5D,$5E,$60
	db $73,$7D,$75
	db $73,$7E,$75
	db $73,$74,$75
	db $7F,$74,$75
	db $76,$76,$76
.Canvas4:
	db $5C,$5D,$5E,$60
	db $77,$82,$83
	db $7A,$85,$86
	db $81,$78,$79
	db $84,$7B,$7C
	db $76,$76,$76

TileIndex:
	db SMW_ExtendedObj71_Canvas1_Tiles_Canvas1-SMW_ExtendedObj71_Canvas1_Tiles
	db SMW_ExtendedObj71_Canvas1_Tiles_Canvas2-SMW_ExtendedObj71_Canvas1_Tiles
	db SMW_ExtendedObj71_Canvas1_Tiles_Canvas3-SMW_ExtendedObj71_Canvas1_Tiles
	db SMW_ExtendedObj71_Canvas1_Tiles_Canvas4-SMW_ExtendedObj71_Canvas1_Tiles

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$71
	TAX
	LDA.l TileIndex,x
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DE0C6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DE0C6
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
CODE_0DE0DB:
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DE0DF:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DE0DF
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DE0DB
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DE0FC:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DE0FC
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5F
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
CODE_0DE11C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DE11C
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj71_Canvas1_Main, SMW_ExtendedObj72_Canvas2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj71_Canvas1_Main, SMW_ExtendedObj73_Canvas3_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj71_Canvas1_Main, SMW_ExtendedObj74_Canvas4_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj75_CanvasTile1(Address)
namespace SMW_ExtendedObj75_CanvasTile1
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $7D		; Canvas Tile 1
	db $7E		; Canvas Tile 2
	db $7F		; Canvas Tile 3
	db $80		; Canvas Tile 4
	db $81		; Canvas Tile 5
	db $82		; Canvas Tile 6
	db $83		; Canvas Tile 7

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$75
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj75_CanvasTile1_Main, SMW_ExtendedObj76_CanvasTile2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj75_CanvasTile1_Main, SMW_ExtendedObj77_CanvasTile3_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj75_CanvasTile1_Main, SMW_ExtendedObj78_CanvasTile4_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj75_CanvasTile1_Main, SMW_ExtendedObj79_CanvasTile5_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj75_CanvasTile1_Main, SMW_ExtendedObj7A_CanvasTile6_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj75_CanvasTile1_Main, SMW_ExtendedObj7B_CanvasTile7_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj7C_BitOfCanvas1(Address)
namespace SMW_ExtendedObj7C_BitOfCanvas1
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $81		; Bit of canvas 2
	db $82		; Bit of canvas 3
	db $83		; Bit of canvas 4

BottomTiles:
	db $84		; Bit of canvas 2
	db $85		; Bit of canvas 3
	db $86		; Bit of canvas 4

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$7C
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l TopTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj7C_BitOfCanvas1_Main, SMW_ExtendedObj7D_BitOfCanvas2_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj7C_BitOfCanvas1_Main, SMW_ExtendedObj7E_BitOfCanvas3_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj7F_TorpedoLauncher(Address)
namespace SMW_ExtendedObj7F_TorpedoLauncher
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $66,$67
	db $68,$69

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DDAA9:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	TXA
	AND.b #$01
	BNE.b CODE_0DDAA9
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$04
	BNE.b CODE_0DDAA9
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj80_GhostHouseEntrance(Address)
namespace SMW_ExtendedObj80_GhostHouseEntrance
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $A4,$A6,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
	db $A4,$A5,$A5,$A5,$A5,$A5,$A5,$A5,$A5,$A5
	db $A4,$C0,$A8,$A8,$A8,$A8,$AB,$AB,$A8,$A8
	db $A4,$A6,$AC,$AD,$C0,$AC,$AD,$A6,$AC,$AD
	db $A4,$A6,$AE,$AF,$A6,$AE,$AF,$BF,$AE,$AF
	db $A4,$BF,$B0,$B1,$AB,$B0,$B1,$A6,$B0,$B1
	db $A4,$A6,$AB,$A8,$A9,$A8,$AB,$A9,$A8,$A8
	db $A4,$A5,$A5,$A5,$B5,$B6,$B7,$B8,$B9,$A5
	db $A4,$A7,$A8,$AB,$BA,$BB,$BC,$BD,$BE,$A8
	db $A4,$C0,$AC,$AD,$A6,$AC,$B2,$AD,$BF,$AC
	db $A4,$A7,$AE,$AF,$C0,$AE,$B3,$AF,$AB,$AE
	db $A4,$BF,$B0,$B1,$A6,$C1,$C2,$C3,$A6,$B0
	db $A4,$A5,$A5,$A5,$A5,$C1,$C2,$C3,$C4,$C4
	db $A4,$B4,$B4,$B4,$B4,$C1,$C2,$C3,$C5,$C5

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
CODE_0DEB6E:
	LDA.b #$09
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DEB72:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DEB72
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	INX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$8C
	BNE.b CODE_0DEB6E
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj81_Seaweed(Address)
namespace SMW_ExtendedObj81_Seaweed
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $C9
	db $CA

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
ADDR_0DEC6C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INX
	CPX.b #$02
	BNE.b ADDR_0DEC6C
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObjXX_LargeBush(Address)
namespace SMW_ExtendedObjXX_LargeBush
%InsertMacroAtXPosition(<Address>)

BigBushTiles:
	db $25,$25,$25,$4B,$4D,$4E,$25,$25,$25
	db $25,$25,$54,$49,$49,$5F,$63,$25,$25
	db $25,$25,$57,$49,$49,$52,$4A,$5D,$25
	db $25,$5A,$49,$49,$50,$51,$4A,$60,$25
	db $5A,$49,$49,$49,$53,$4A,$4A,$4A,$63

BigBushEntry:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DA72A:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DA72E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BigBushTiles,x
	JSR.w HandleOverlappingBigBushTiles
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DA72E
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DA72A
	RTS

SmallBushTiles:
	db $25,$25,$4B,$4C,$25,$25
	db $25,$54,$49,$5F,$63,$25
	db $25,$57,$49,$52,$4A,$5D
	db $5A,$49,$49,$49,$4F,$60

SmallBushEntry:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DA76F:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DA773:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l SmallBushTiles,x
	JSR.w HandleOverlappingBigBushTiles
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DA773
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DA76F
	RTS

HandleOverlappingBigBushTiles:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	CMP.b #$25
	BNE.b CODE_0DA796
	JMP.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2

CODE_0DA796:
	CMP.b #$49
	BCC.b CODE_0DA7AC
	CMP.b #$54
	BCC.b CODE_0DA7AC
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$25
	BEQ.b CODE_0DA7AC
	CMP.b #$49
	BEQ.b CODE_0DA7AA
	INC.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DA7AA:
	INC.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DA7AC:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	JMP.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LargeBush_BigBushEntry, SMW_ExtendedObj82_BigBush1_Main)

	%SetDuplicateOrNullPointer(SMW_ExtendedObjXX_LargeBush_SmallBushEntry, SMW_ExtendedObj83_BigBush2_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj84_CastleEntrance(Address)
namespace SMW_ExtendedObj84_CastleEntrance
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $73,$74,$75,$73,$74,$74,$7B,$79,$7A
	db $79,$7A,$7B,$79,$7A,$7B,$73,$74,$75
	db $73,$74,$74,$74,$75,$73,$77,$77,$78
	db $76,$77,$77,$7A,$7B,$79,$7A,$7A,$7B
	db $79,$7A,$7B,$73,$74,$74,$75,$73,$74
	db $73,$75,$73,$77,$7A,$7A,$7B,$79,$7A
	db $79,$7B,$79,$7B,$7C,$7D,$7D,$7D,$7D
	db $25,$73,$74,$75,$7E,$7F,$7F,$7F,$7F
	db $25,$76,$77,$78,$80,$81,$81,$81,$81
	db $25,$76,$77,$78,$82,$82,$82,$82,$7C
	db $25,$79,$7A,$7B,$83,$84,$84,$85,$80
	db $25,$73,$74,$75,$83,$84,$84,$85,$7C
	db $25,$76,$77,$78,$83,$84,$84,$85,$7E
	db $25,$79,$7A,$7B,$83,$84,$84,$85,$80

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
CODE_0DC2ED:
	LDA.b #$08
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC2F1:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	CMP.b #$25
	BEQ.b CODE_0DC2FE
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DC2FE:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DC2F1
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	INX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$7E
	BNE.b CODE_0DC2ED
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj85_YoshisHouse(Address)
namespace SMW_ExtendedObj85_YoshisHouse
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$CB,$CC,$25,$25,$25
	db $25,$CD,$CE,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$CF,$D0,$D1,$25
	db $25,$D2,$EB,$D3,$D3,$D3,$EB,$D3,$D3,$D3,$D3,$EB,$D3,$D3,$D4,$25
	db $25,$D5,$D3,$EB,$D3,$D3,$D3,$D3,$D3,$EB,$D3,$D3,$D3,$EB,$D6,$25
	db $25,$D5,$D3,$D3,$D3,$D3,$D3,$EB,$D3,$D3,$D3,$D3,$D3,$D3,$D6,$25
	db $25,$D7,$D8,$D9,$D8,$D8,$D9,$D8,$D8,$D9,$D8,$DA,$DB,$D8,$DC,$25
	db $25,$25,$25,$DD,$25,$25,$DD,$25,$25,$DD,$25,$CB,$CC,$25,$25,$25
	db $25,$25,$DE,$DD,$25,$25,$DD,$25,$25,$DD,$25,$CB,$CC,$25,$25,$25
	db $25,$DF,$E0,$E1,$25,$25,$DD,$25,$25,$DD,$25,$E2,$E3,$E4,$25,$25
	db $E5,$E5,$E6,$DD,$E5,$E5,$DD,$E5,$E5,$DD,$E5,$E7,$E8,$E9,$E5,$E5

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
CODE_0DEC37:
	LDA.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DEC3B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DEC3B
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	INX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$A0
	BNE.b CODE_0DEC37
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj86_GoalSign(Address)
namespace SMW_ExtendedObj86_GoalSign
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $66,$67
	db $68,$69

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DA7EE:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	TXA
	AND.b #$01
	BNE.b CODE_0DA7EE
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$04
	BNE.b CODE_0DA7EE
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj88_RightTreeBranch(Address)
namespace SMW_ExtendedObj88_RightTreeBranch
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $C1,$C2

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$88
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj88_RightTreeBranch_Main, SMW_ExtendedObj89_LeftTreeBranch_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj8A_GreenSwitchPalaceSwitch(Address)
namespace SMW_ExtendedObj8A_GreenSwitchPalaceSwitch
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $EC,$ED
	db $EE,$EF

	db $F0,$F1
	db $F2,$F3

	db $F4,$F5
	db $F6,$F7

	db $F8,$F9
	db $FA,$FB

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	SEC
	SBC.b #$8A
	TAX
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.w !RAM_SMW_Flag_ActivatedGreenSwitch,x
else
	LDA.l !RAM_SMW_Flag_ActivatedGreenSwitch,x
endif
	BNE.b Return0DECC0
	TXA
	ASL
	ASL
	TAX
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DECA6:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DECAA:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DECAA
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DECA6
Return0DECC0:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj8A_GreenSwitchPalaceSwitch_Main, SMW_ExtendedObj8B_YellowSwitchPalaceSwitch_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj8A_GreenSwitchPalaceSwitch_Main, SMW_ExtendedObj8C_BlueSwitchPalaceSwitch_Main)
	%SetDuplicateOrNullPointer(SMW_ExtendedObj8A_GreenSwitchPalaceSwitch_Main, SMW_ExtendedObj8D_RedSwitchPalaceSwitch_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj8E_YellowSwitchBlock(Address)
namespace SMW_ExtendedObj8E_YellowSwitchBlock
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$01
	BNE.b CODE_0DB58D 		; Note: Probably an NES coding leftover, considering that the SNES has a BRA.b instruction.

ActiveTiles:
	db $6A				; Green switch block (always feather)
	db $6B				; Yellow switch block (always mushroom)

InactiveTiles:
	db $6A				; Green switch block (always feather)
	db $6B				; Yellow switch block (always mushroom)

GreenSwitchBlockEntry:
	LDX.b #$00
CODE_0DB58D:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.w !RAM_SMW_Flag_ActivatedGreenSwitch,x
	BNE.b CODE_0DB59E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l InactiveTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS

CODE_0DB59E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ActiveTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj8E_YellowSwitchBlock_GreenSwitchBlockEntry, SMW_ExtendedObj87_GreenSwitchBlock_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj8F_GhostHouseWindow(Address)
namespace SMW_ExtendedObj8F_GhostHouseWindow
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$08
	JMP.w SMW_ExtendedObj64_TopRightCobweb_GhostHouseWindowEntry
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj90_LargeBossDoor(Address)
namespace SMW_ExtendedObj90_LargeBossDoor
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $98,$99
	db $9A,$9B
	db $9C,$9C

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC326:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DC32A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DC32A
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$06
	BNE.b CODE_0DC326
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj91_VerticalLevelSteepLeftSlope(Address)
namespace SMW_ExtendedObj91_VerticalLevelSteepLeftSlope
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $AA		; Steep left slope (vertical level compatible)
	db $AF		; Steep right slope (vertical level compatible)

BottomTiles:
	db $E2		; Steep left slope (vertical level compatible)
	db $E4		; Steep right slope (vertical level compatible)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TXA
	SEC
	SBC.b #$91
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_VerticalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj91_VerticalLevelSteepLeftSlope_Main, SMW_ExtendedObj92_VerticalLevelSteepRightSlope_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj93_VerticalLevelNormalLeftSlope(Address)
namespace SMW_ExtendedObj93_VerticalLevelNormalLeftSlope
%InsertMacroAtXPosition(<Address>)

TopLeftTiles:
	db $96		; Normal left slope (vertical level compatible)
	db $A0		; Normal right slope (vertical level compatible)

TopRightTiles:
	db $9B		; Normal left slope (vertical level compatible)
	db $A5		; Normal right slope (vertical level compatible)

BottomLeftTiles:
	db $DE		; Normal left slope (vertical level compatible)
	db $E6		; Normal right slope (vertical level compatible)

BottomRightTiles:
	db $E6		; Normal left slope (vertical level compatible)
	db $E0		; Normal right slope (vertical level compatible)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TXA
	SEC
	SBC.b #$93
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopLeftTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopRightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_VerticalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomLeftTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomRightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj93_VerticalLevelNormalLeftSlope_Main, SMW_ExtendedObj94_VerticalLevelNormalRightSlope_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj95_VerticalLevelVerySteepLeftSlope(Address)
namespace SMW_ExtendedObj95_VerticalLevelVerySteepLeftSlope
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $CA		; Very steep left slope (vertical level compatible)
	db $CC		; Very steep right slope (vertical level compatible)

MiddleTiles:
	db $CB		; Very steep left slope (vertical level compatible)
	db $CD		; Very steep right slope (vertical level compatible)

BottomTiles:
	db $F1		; Very steep left slope (vertical level compatible)
	db $F2		; Very steep right slope (vertical level compatible)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	TXA
	SEC
	SBC.b #$95
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_VerticalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l MiddleTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_VerticalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_ExtendedObj95_VerticalLevelVerySteepLeftSlope_Main, SMW_ExtendedObj96_VerticalLevelVerySteepRightSlope_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_ExtendedObj97_SwitchPalaceRightAndBottomEdgeTile(Address)
namespace SMW_ExtendedObj97_SwitchPalaceRightAndBottomEdgeTile
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$10
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_StandardObjXX_Generic1RepeatedTileObject(Address)
namespace SMW_StandardObjXX_Generic1RepeatedTileObject
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $02			; Water tiles 1, dark blue
	db $21			; Invisible coin blocks
	db $23			; Invisible jumping note blocks
	db $2A			; Invisible POW coins
	db $2B			; Coins
	db $3F			; Walk-through dirt
	db $03			; Water tiles 2, variable color
	db $13			; Jumping note blocks
	db $1E			; Turn blocks
	db $24			; Coin question blocks
	db $2E			; Throw blocks
	db $2F			; Black piranha plant
	db $30			; Grey cement blocks
	db $32			; Brown "used" blocks
	db $65			; Icy turn blocks

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DA8D8:
	CPX.b #$04
	BNE.b CODE_0DA92E
	TXA								;\ Optimization: NES code. Use PHX : PHY instead.
	PHA								;|
	TYA								;|
	PHA								;/
	LDX.w !RAM_SMW_Misc_ItemMemorySetting
	LDA.b #$F8
	CLC
	ADC.l SMW_Bank0DItemMemoryIndexes_Lo,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$19
	ADC.l SMW_Bank0DItemMemoryIndexes_Hi,x
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$10
	BEQ.b CODE_0DA907
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0DA907:
	TYA
	AND.b #$08
	BEQ.b CODE_0DA912
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
CODE_0DA912:
	TYA
	AND.b #$07
	TAX
#LM171Hijack_ItemMemory3Revamp3:
	LDY.b !RAM_SMW_Misc_ScratchRAM0E				;\ LM: Hijacks here to make item memory index 3 not track items collected (1.71+)
	LDA.b (!RAM_SMW_Misc_ScratchRAM08),y				;/
	AND.l SMW_BitTable_Bank0D,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	PLA								;\ Optimization: NES code. Use PLY : PLX instead.
	TAY								;|
	PLA								;|
	TAX								;/
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b CODE_0DA92E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2
	JMP.w CODE_0DA943

CODE_0DA92E:
	LDA.l Tiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$07
	BMI.b CODE_0DA93E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DA93E:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DA943:
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DA8D8
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b Return0DA95A
	JMP.w CODE_0DA8D8

Return0DA95A:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj01_DarkBlueWater_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj02_InvisibleCoinBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj03_InvisibleNoteBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj04_InvisiblePSwitchCoins_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj05_Coins_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj06_WalkThroughDirt_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj07_VariableColorWater_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj08_NoteBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj09_TurnBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj0A_CoinBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj0B_ThrowBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj0C_Munchers_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj0D_CementBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_Main, SMW_StandardObj0E_UsedBlocks_Main)
namespace off
endmacro

macro ROUTINE_RT01_SMW_StandardObjXX_Generic1RepeatedTileObject(Address)
namespace SMW_StandardObjXX_Generic1RepeatedTileObject
%InsertMacroAtXPosition(<Address>)

IcyTurnBlockEntry:
	LDX.b #$0E
	JMP.w Main

namespace off
	%SetDuplicateOrNullPointer(SMW_StandardObjXX_Generic1RepeatedTileObject_IcyTurnBlockEntry, SMW_GrasslandObj31_IcyTurnBlocks_Main)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj0F_VerticalPipes(Address)
namespace SMW_StandardObj0F_VerticalPipes
%InsertMacroAtXPosition(<Address>)

TopLeftPipeEndTiles:
	db $33		; Vertical pipe, end on top...
	db $37		; ...with exit enabled
	db $39		; Vertical pipe, double ended
	db $00		; Vertical pipe, end on bottom...
	db $00		; ...eith exit enabled

TopRightPipeEndTiles:
	db $34		; Vertical pipe, end on top...
	db $38		; ...with exit enabled
	db $3A		; Vertical pipe, double ended
	db $00		; Vertical pipe, end on bottom...
	db $00		; ...eith exit enabled

BottomLeftPipeEndTiles:
	db $00		; Vertical pipe, end on top...
	db $00		; ...eith exit enabled
	db $39		; Vertical pipe, double ended
	db $33		; Vertical pipe, end on bottom...
	db $37		; ...eith exit enabled

BottomRightPipeEndTiles:
	db $00		; Vertical pipe, end on top...
	db $00		; ...eith exit enabled
	db $3A		; Vertical pipe, double ended
	db $34		; Vertical pipe, end on bottom...
	db $38		; ...eith exit enabled

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	CPX.b #$03
	BPL.b CODE_0DAA52
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopLeftPipeEndTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopRightPipeEndTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JMP.w CODE_0DAA77

CODE_0DAA52:
	CPX.b #$05
	BNE.b CODE_0DAA68
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$68								; Note: Set this to #$35 to make the "Vertical pipe, no end" object use non-tileset specific pipe tiles.
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$69								; Note: Set this to #$36 to make the "Vertical pipe, no end" object use non-tileset specific pipe tiles.
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JMP.w CODE_0DAA77

CODE_0DAA68:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$35
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$36
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DAA77:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$05
	BEQ.b CODE_0DAA85
	CPX.b #$02
	BPL.b CODE_0DAA8C
CODE_0DAA85:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DAA52
	JMP.w Return0DAAA3

CODE_0DAA8C:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DAA68
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomLeftPipeEndTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomRightPipeEndTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
Return0DAAA3:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj10_HorizontalPipes(Address)
namespace SMW_StandardObj10_HorizontalPipes
%InsertMacroAtXPosition(<Address>)

EndTiles:
	db $3B		;\ Horizontal pipe, end on left
	db $3C		;/

	db $3B		;\ ...with exit enabled
	db $3F		;/

	db $3B		;\ Horizontal pipe, end on right
	db $3C		;/

	db $3B		;\ ...with exit enabled
	db $3F		;/

ShaftTiles:
	db $3D		;\ Horizontal pipe, end on left
	db $3E		;/

	db $3D		;\ ...with exit enabled
	db $3E		;/

	db $3D		;\ Horizontal pipe, end on right
	db $3E		;/

	db $3D		;\ ...with exit enabled
	db $3E		;/

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$F0
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DAAC9:
	CPX.b #$04
	BPL.b CODE_0DAADA
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l EndTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DAAE4

CODE_0DAADA:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ShaftTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DAAE4:
	CPX.b #$04
	BPL.b CODE_0DAAEF
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DAADA
	JMP.w CODE_0DAAFC

CODE_0DAAEF:
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0DAAC9
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l EndTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DAAFC:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INX
	TXA
	AND.b #$01
	BNE.b CODE_0DAAC9
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj11_BulletShooter(Address)
namespace SMW_StandardObj11_BulletShooter
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$41
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEX
	BMI.b Return0DAB3D
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$42
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEX
	BMI.b Return0DAB3D
CODE_0DAB30:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$43
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEX
	BPL.b CODE_0DAB30
Return0DAB3D:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_StandardObj12_Slopes(Address)
namespace SMW_StandardObj12_Slopes
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
CODE_0DAB42:
	CMP.b #$0A
	BMI.b CODE_0DAB4C
	SEC
	SBC.b #$0A
	JMP.w CODE_0DAB42

CODE_0DAB4C:
	JSL.l SMW_ExecutePtr_Long

SlopesPtrs:
	dl NormalLeftSlope
	dl SteepLeftSlope
	dl GradualLeftSlope
	dl NormalRightSlope
	dl SteepRightSlope
	dl GradualRightSlope
	dl UpsideDownNormalLeftSlope
	dl UpsideDownNormalRightSlope
	dl UpsideDownSteepLeftSlope
	dl UpsideDownSteepRightSlope

NormalLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DAB83:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$96
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$9B
	JSR.w SMW_FillInSlopeTileAir_Main
	DEX
	DEX
	BMI.b CODE_0DABB8
CODE_0DAB99:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$DE
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	JMP.w CODE_0DABB5

CODE_0DABAD:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DABB5:
	DEX
	BPL.b CODE_0DABAD
CODE_0DABB8:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DABEC
	BPL.b CODE_0DABC8
	JMP.w Return0DABF6

CODE_0DABC8:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0E
	TAY
	BCC.b CODE_0DABD3
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DABD3:
	TYA
	AND.b #$0F
	CMP.b #$0E
	BMI.b CODE_0DABE7
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DABE4
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DABE4:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DABE7:
	STY.b !RAM_SMW_Blocks_SubScrPos
	JMP.w CODE_0DAB83

CODE_0DABEC:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEX
	DEX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DAB99

Return0DABF6:
	RTS
namespace off
endmacro

macro ROUTINE_RT01_SMW_StandardObj12_Slopes(Address)
namespace SMW_StandardObj12_Slopes
%InsertMacroAtXPosition(<Address>)

SteepLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DAC34:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$AA
	JSR.w SMW_FillInSlopeTileAir_Main
CODE_0DAC3E:
	DEX
	BMI.b CODE_0DAC57
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E2
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DAC54

CODE_0DAC4C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DAC54:
	DEX
	BPL.b CODE_0DAC4C
CODE_0DAC57:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DAC89
	BPL.b CODE_0DAC65
	JMP.w Return0DAC91

CODE_0DAC65:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0F
	TAY
	BCC.b CODE_0DAC70
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DAC70:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BNE.b CODE_0DAC84
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DAC81
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DAC81:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DAC84:
	STY.b !RAM_SMW_Blocks_SubScrPos
	JMP.w CODE_0DAC34

CODE_0DAC89:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DAC3E

Return0DAC91:
	RTS

GradualLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DACA7:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$6E
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$73
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$78
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$7D
	JSR.w SMW_FillInSlopeTileAir_Main
	DEX
	DEX
	DEX
	DEX
	BMI.b CODE_0DAD00
CODE_0DACCF:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D8
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$DA
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	DEX
	DEX
	JMP.w CODE_0DACFD

CODE_0DACF5:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DACFD:
	DEX
	BPL.b CODE_0DACF5
CODE_0DAD00:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DAD37
	BPL.b CODE_0DAD13
	JMP.w Return0DAD43

CODE_0DAD13:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0C
	TAY
	BCC.b CODE_0DAD1E
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DAD1E:
	TYA
	AND.b #$0F
	CMP.b #$0C
	BMI.b CODE_0DAD32
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DAD2F
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DAD2F:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DAD32:
	STY.b !RAM_SMW_Blocks_SubScrPos
	JMP.w CODE_0DACA7

CODE_0DAD37:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEX
	DEX
	DEX
	DEX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DACCF

Return0DAD43:
	RTS

NormalRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$01
	STX.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w CODE_0DAD7F

CODE_0DAD5C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
CODE_0DAD65:
	CPX.b #$03
	BNE.b CODE_0DAD5C
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E0
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	DEX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return0DAD9F
CODE_0DAD7F:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$A0
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$A5
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DADA0
Return0DAD9F:
	RTS

CODE_0DADA0:
	JMP.w CODE_0DAD65

SteepRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
	STX.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w CODE_0DADD0

CODE_0DADBB:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
CODE_0DADC4:
	CPX.b #$01
	BNE.b CODE_0DADBB
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E4
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DADD0:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return0DADEA
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$AF
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INC.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DADC4
Return0DADEA:
	RTS

GradualRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$03
	STX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w CODE_0DAE36

CODE_0DAE01:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
CODE_0DAE0A:
	CPX.b #$07
	BNE.b CODE_0DAE01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$DB
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$DC
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	DEX
	DEX
	DEX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return0DAE69
CODE_0DAE36:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$82
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$87
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$8C
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$91
	JSR.w SMW_FillInSlopeTileAir_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	CLC
	ADC.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DAE6A
Return0DAE69:
	RTS

CODE_0DAE6A:
	JMP.w CODE_0DAE0A

UpsideDownNormalLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JMP.w CODE_0DAE9E

CODE_0DAE88:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$C6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$C7
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	DEX
	BMI.b CODE_0DAEBD
CODE_0DAE9E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$EE
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$F0
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	JMP.w CODE_0DAEBA

CODE_0DAEB2:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$65
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DAEBA:
	DEX
	BPL.b CODE_0DAEB2
CODE_0DAEBD:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0DAECC
	INC.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DAEF2

CODE_0DAECC:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$12
	TAY
	BCC.b CODE_0DAEDE
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DAEDE:
	TYA
	AND.b #$0F
	CMP.b #$02
	BPL.b CODE_0DAEF2
	TYA
	SEC
	SBC.b #$10
	TAY
	BCS.b ADDR_0DAEEF
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DAEEF:
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DAEF2:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DAEFB
	JMP.w CODE_0DAE88

Return0DAEFB:
	RTS

UpsideDownNormalRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JMP.w CODE_0DAF20

CODE_0DAF17:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$65
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
CODE_0DAF20:
	CPX.b #$04
	BPL.b CODE_0DAF17
	CPX.b #$02
	BMI.b CODE_0DAF3C
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$F0
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$EF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_0DAF4C
CODE_0DAF3C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$C8
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$C9
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DAF4C:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TAX
	INC.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DAF20
	RTS

UpsideDownSteepLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JMP.w CODE_0DAF88

CODE_0DAF7B:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$C4
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BMI.b CODE_0DAF9E
CODE_0DAF88:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$EC
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DAF9B

CODE_0DAF93:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$65
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DAF9B:
	DEX
	BPL.b CODE_0DAF93
CODE_0DAF9E:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0DAFAF
	INC.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DAFD5

CODE_0DAFAF:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	SEC
	SBC.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$11
	TAY
	BCC.b CODE_0DAFC1
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DAFC1:
	TYA
	AND.b #$0F
	CMP.b #$01
	BPL.b CODE_0DAFD5
	TYA
	SEC
	SBC.b #$10
	TAY
	BCS.b CODE_0DAFD2
	JSR.w CODE_0DAFDF
CODE_0DAFD2:
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DAFD5:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DAFDE
	JMP.w CODE_0DAF7B

Return0DAFDE:
	RTS

CODE_0DAFDF:
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	SBC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	STA.b !RAM_SMW_Misc_ScratchRAM05
	RTS

UpsideDownSteepRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JMP.w CODE_0DB00B

CODE_0DB002:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$65
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
CODE_0DB00B:
	CPX.b #$02
	BPL.b CODE_0DB002
	CPX.b #$01
	BMI.b CODE_0DB01F
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$ED
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_0DB027
CODE_0DB01F:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$C5
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB027:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEX
	STX.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB00B
	RTS
namespace off
endmacro

;---------------------------------------------------------------------------

macro ROUTINE_SMW_FillInSlopeTileAir(Address)
namespace SMW_FillInSlopeTileAir
%InsertMacroAtXPosition(<Address>)

DATA_0DABF7:
	db $3F,$01,$03

DATA_0DABFA:
	db $01,$03,$04

Main:
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	TXA									;\ Optimization: NES style coding
	PHA									;/
	LDX.b #$02
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DAC05:
	CMP.l DATA_0DABF7,x
	BEQ.b CODE_0DAC11
	DEX
	BPL.b CODE_0DAC05
	JMP.w CODE_0DAC1A

CODE_0DAC11:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	CLC
	ADC.l DATA_0DABFA,x
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_0DAC1A:
	PLA									;\ Optimization: NES style coding
	TAX									;/
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	JMP.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj13_GroundEdgesAndVine(Address)
namespace SMW_StandardObj13_GroundEdgesAndVine
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $40		; Left edge
	db $41		; Right edge
	db $06		; Vine
	db $45		; Solid left and top edge
	db $4B		; Solid left edge
	db $48		; Solid right and top edge
	db $4C		; Solid right edge
	db $01		; Left edge with solid top
	db $03		; Right edge with solid top
	db $B6		; Solid left, very steep top left slope
	db $B7		; Solid right, very steep top left slope
	db $45		; Solid left + top, left facing bottom edge
	db $4B		; Solid left, left facing bottom edge
	db $48		; Solid right + top, right facing bottom edge
	db $4C		; Solid right, right facing bottom edge

MiddleTiles1:
	db $40		; Left edge
	db $41		; Right edge
	db $06		; Vine
	db $4B		; Solid left and top edge
	db $4B		; Solid left edge
	db $4C		; Solid right and top edge
	db $4C		; Solid right edge
	db $40		; Left edge with solid top
	db $41		; Right edge with solid top
	db $4B		; Solid left, very steep top left slope
	db $4C		; Solid right, very steep top left slope
	db $4B		; Solid left + top, left facing bottom edge
	db $4B		; Solid left, left facing bottom edge
	db $4C		; Solid right + top, right facing bottom edge
	db $4C		; Solid right, right facing bottom edge

MiddleTiles2:
	db $40		; Left edge
	db $41		; Right edge
	db $06		; Vine
	db $4B		; Solid left and top edge
	db $4B		; Solid left edge
	db $4C		; Solid right and top edge
	db $4C		; Solid right edge
	db $40		; Left edge with solid top
	db $41		; Right edge with solid top
	db $4B		; Solid left, very steep top left slope
	db $4C		; Solid right, very steep top left slope
	db $4B		; Solid left + top, left facing bottom edge
	db $4B		; Solid left, left facing bottom edge
	db $4C		; Solid right + top, right facing bottom edge
	db $4C		; Solid right, right facing bottom edge

BottomTiles:
	db $FF		; Left edge
	db $FF		; Right edge
	db $FF		; Vine
	db $FF		; Solid left and top edge
	db $FF		; Solid left edge
	db $FF		; Solid right and top edge
	db $FF		; Solid right edge
	db $FF		; Left edge with solid top
	db $FF		; Right edge with solid top
	db $FF		; Solid left, very steep top left slope
	db $FF		; Solid right, very steep top left slope
	db $E2		; Solid left + top, left facing bottom edge
	db $E2		; Solid left, left facing bottom edge
	db $E4		; Solid right + top, right facing bottom edge
	db $E4		; Solid right, right facing bottom edge

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$03
	BMI.b CODE_0DB08E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DB08E:
	LDA.l TopTiles,x
	JSR.w CODE_0DB114
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_0DB0E2
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$09
	BPL.b CODE_0DB0AD
	CPX.b #$07
	BPL.b CODE_0DB0B0
	CPX.b #$03
	BMI.b CODE_0DB0B0
CODE_0DB0AD:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DB0B0:
	LDA.l MiddleTiles1,x
	JSR.w CODE_0DB198
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_0DB0E2
CODE_0DB0C0:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$09
	BPL.b CODE_0DB0CF
	CPX.b #$07
	BPL.b CODE_0DB0D2
	CPX.b #$03
	BMI.b CODE_0DB0D2
CODE_0DB0CF:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DB0D2:
	LDA.l MiddleTiles2,x
	JSR.w CODE_0DB198
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB0C0
CODE_0DB0E2:
	CPX.b #$0B
	BMI.b Return0DB0EF
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
Return0DB0EF:
	RTS

DATA_0DB0F0:
	db $7D,$7E,$82,$83,$9B,$9C,$A0,$A1
	db $AA,$AB,$AF,$B0,$D8,$DC,$DE,$E0
	db $E2,$E4

DATA_0DB102:
	db $B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
	db $C0,$C1,$C2,$C3,$D9,$DD,$DF,$E1
	db $E3,$E5

CODE_0DB114:
	CPX.b #$03
	BMI.b CODE_0DB120
	CPX.b #$09
	BMI.b CODE_0DB120
	CPX.b #$0B
	BMI.b Return0DB15B
CODE_0DB120:
	CPX.b #$02
	BEQ.b Return0DB15B
	STX.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDX.b #$11
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DB12C:
	CMP.l DATA_0DB0F0,x
	BEQ.b CODE_0DB152
	DEX
	BPL.b CODE_0DB12C
	CMP.b #$25
	BEQ.b CODE_0DB14D
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	CMP.b #$01
	BEQ.b CODE_0DB14B
	CMP.b #$03
	BEQ.b CODE_0DB14B
	CMP.b #$45
	BEQ.b CODE_0DB14B
	CMP.b #$48
	BNE.b CODE_0DB14D
CODE_0DB14B:
	INC.b !RAM_SMW_Misc_ScratchRAM0C
CODE_0DB14D:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	JMP.w CODE_0DB159

CODE_0DB152:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l DATA_0DB102,x
CODE_0DB159:
	LDX.b !RAM_SMW_Misc_ScratchRAM0B
Return0DB15B:
	RTS

DATA_0DB15C:
	db $6E,$6F,$73,$74,$78,$79,$7D,$7E
	db $82,$83,$87,$88,$8C,$8D,$91,$92
	db $96,$97,$9B,$9C,$A0,$A1,$A5,$A6
	db $AA,$AB,$AF,$B0,$E2,$E4

DATA_0DB17A:
	db $70,$70,$75,$75,$7A,$7A,$7F,$7F
	db $84,$84,$89,$89,$8E,$8E,$93,$93
	db $98,$98,$9D,$9D,$A2,$A2,$A7,$A7
	db $AC,$AC,$B1,$B1,$E9,$EA

CODE_0DB198:
	CPX.b #$03
	BMI.b CODE_0DB1A4
	CPX.b #$07
	BMI.b Return0DB1C7
	CPX.b #$09
	BPL.b Return0DB1C7
CODE_0DB1A4:
	CPX.b #$02
	BEQ.b Return0DB1C7
	STX.b !RAM_SMW_Misc_ScratchRAM0B
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDX.b #$1D
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DB1B0:
	CMP.l DATA_0DB15C,x
	BEQ.b CODE_0DB1BE
	DEX
	BPL.b CODE_0DB1B0
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	JMP.w CODE_0DB1C5

CODE_0DB1BE:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l DATA_0DB17A,x
CODE_0DB1C5:
	LDX.b !RAM_SMW_Misc_ScratchRAM0B
Return0DB1C7:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj15_MidwayAndGoalPoint(Address)
namespace SMW_StandardObj15_MidwayAndGoalPoint
%InsertMacroAtXPosition(<Address>)

TopMidwayTiles:
	db $2F,$25,$32

MiddleMidwayTiles:
	db $30,$25,$33

BottomMidwayTiles:
	db $31,$25,$34

TopGoalTiles:
	db $39,$25,$3C

MiddleGoalTiles:
	db $3A,$25,$3D

BottomGoalTiles:
	db $3B,$25,$3E						; Glitch: These map16 tiles show garbage.

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b #$00
CODE_0DB23B:
	LDA.l TopMidwayTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_0DB24B
	LDA.l TopGoalTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_0DB24B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DB261
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DB261:
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_0DB28F
CODE_0DB265:
	LDA.l MiddleMidwayTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_0DB275
	LDA.l MiddleGoalTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_0DB275:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DB28B
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DB28B:
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0DB265
CODE_0DB28F:
	LDA.l BottomMidwayTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_0DB29F
	LDA.l BottomGoalTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_0DB29F:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$01
	TAY
	AND.b #$0F
	BNE.b CODE_0DB2BB
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	AND.b #$F0
	TAY
CODE_0DB2BB:
	STY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	INX
	CPX.b #$03
	BEQ.b Return0DB2C9
	JMP.w CODE_0DB23B

Return0DB2C9:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj16_PurpleCoins(Address)
namespace SMW_StandardObj16_PurpleCoins
%InsertMacroAtXPosition(<Address>)

; Optimization: This object could have easily been combined with "StandardObjXX_Generic1RepeatedTileObject" with some minor changes to that routine.

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
ADDR_0DB34A:
	TYA									;\ Optimization: NES style coding
	PHA									;|
	TXA									;|
	PHA									;/
	LDX.w !RAM_SMW_Misc_ItemMemorySetting
	LDA.b #$F8
	CLC
	ADC.l SMW_Bank0DItemMemoryIndexes_Lo,x
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$19
	ADC.l SMW_Bank0DItemMemoryIndexes_Hi,x
	STA.b !RAM_SMW_Misc_ScratchRAM09
	LDA.w !RAM_SMW_Blocks_ScreenToPlaceNextObject
	ASL
	ASL
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	LDA.b !RAM_SMW_Misc_ScratchRAM0A
	AND.b #$10
	BEQ.b ADDR_0DB375
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM0E
ADDR_0DB375:
	TYA
	AND.b #$08
	BEQ.b ADDR_0DB380
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	ORA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM0E
ADDR_0DB380:
	TYA
	AND.b #$07
	TAX
#LM171Hijack_ItemMemory3Revamp5:
	LDY.b !RAM_SMW_Misc_ScratchRAM0E					;\ LM: Hijacks here to make item memory index 3 not track items collected (1.71+)
	LDA.b (!RAM_SMW_Misc_ScratchRAM08),y					;/
	AND.l SMW_BitTable_Bank0D,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	PLA									;\ Optimization: NES style coding
	TAX									;|
	PLA									;|
	TAY									;/
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$2C
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	BEQ.b ADDR_0DB3A3
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
	JMP.w ADDR_0DB3A8

ADDR_0DB3A3:
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
ADDR_0DB3A8:
	DEX
	BPL.b ADDR_0DB34A
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b Return0DB3BA
	JMP.w ADDR_0DB34A

Return0DB3BA:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj17_RopeAndCloudLine(Address)
namespace SMW_StandardObj17_RopeAndCloudLine
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $05			; Rope
	db $06			; Clouds

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DB3CC:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB3CC
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj18_WaterWithAnimatedSurface(Address)
namespace SMW_StandardObj18_WaterWithAnimatedSurface
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $00		; Water with animated surface
	db $01		; Water with normal surface
	db $04		; Mud/lava with animated surface
	db $08		; Climbing net with top edge

BottomTiles:
	db $02		; Water with animated surface
	db $03		; Water with normal surface
	db $05		; Mud/lava with animated surface
	db $0B		; Climbing net with top edge

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TXA
	SEC
	SBC.b #$17
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DB3FD:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l TopTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB3FD
	JMP.w CODE_0DB41C

CODE_0DB40E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BottomTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB40E
CODE_0DB41C:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DB40E
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj19_WaterWithNormalSurface_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj1A_CastleLavaWithAnimatedSurface_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj1B_ClimbingNetWithTopEdge_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj22_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj23_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj24_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj25_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj26_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj27_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj28_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj29_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj2A_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj2B_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj2C_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_StandardObj2D_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_GrasslandObj2E_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_GrasslandObj2F_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_CastleObj2E_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_CastleObj2F_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_CastleObj30_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_CastleObj31_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_CastleObj32_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_CastleObj33_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_RopeObj2E_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_RopeObj2F_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_RopeObj30_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_RopeObj31_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_UndergroundObj2E_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_UndergroundObj2F_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_UndergroundObj30_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_UndergroundObj31_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_UndergroundObj32_Unused_Main)
	%SetDuplicateOrNullPointer(SMW_StandardObj18_WaterWithAnimatedSurface_Main, SMW_UndergroundObj33_Unused_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj1C_DonutBridge(Address)
namespace SMW_StandardObj1C_DonutBridge
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $26
	db $44

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b #$00
CODE_0DB43C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$00
	BEQ.b CODE_0DB446
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DB446:
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DB43C
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	INX
	CPX.b #$02
	BNE.b CODE_0DB43C
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj1D_ClimbingNetWithBottomEdge(Address)
namespace SMW_StandardObj1D_ClimbingNetWithBottomEdge
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DB490
CODE_0DB479:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$0B
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DB479
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DB479
CODE_0DB490:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$0E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DB490
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj1E_ClimbingNetWithSideEdge(Address)
namespace SMW_StandardObj1E_ClimbingNetWithSideEdge
%InsertMacroAtXPosition(<Address>)

SideTiles:
	db $0A
	db $0C

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.l SideTiles,x
	JSR.w CODE_0DB4D9
	JMP.w CODE_0DB4C0

CODE_0DB4B7:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l SideTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DB4C0:
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DB4CA
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DB4CA:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DB4B7
	LDA.l SideTiles,x
	JMP.w CODE_0DB4FE

TopCornerTiles:
	db $07,$09

TopInnerCornerTiles:
	db $1A,$19

CODE_0DB4D9:
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$08
	BNE.b CODE_0DB4E8
	LDA.l TopCornerTiles,x
	JMP.w CODE_0DB4F0

CODE_0DB4E8:
	CMP.b #$0E
	BNE.b CODE_0DB4F2
	LDA.l TopInnerCornerTiles,x
CODE_0DB4F0:
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_0DB4F2:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS

BottomCornerTiles:
	db $0D,$0F

BottomInnerCornerTiles:
	db $1C,$1B

CODE_0DB4FE:
	STA.b !RAM_SMW_Misc_ScratchRAM0C
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$0E
	BNE.b CODE_0DB50D
	LDA.l BottomCornerTiles,x
	JMP.w CODE_0DB515

CODE_0DB50D:
	CMP.b #$08
	BNE.b CODE_0DB517
	LDA.l BottomInnerCornerTiles,x
CODE_0DB515:
	STA.b !RAM_SMW_Misc_ScratchRAM0C
CODE_0DB517:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM0C
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj1F_SkinnyVerticalPipeBoneLog(Address)
namespace SMW_StandardObj1F_SkinnyVerticalPipeBoneLog
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$F0
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$53
	JMP.w CODE_0DB537

CODE_0DB532:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$54
CODE_0DB537:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEX
	BNE.b CODE_0DB532
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$55
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj20_SkinnyHorizontalPipeBoneLog(Address)
namespace SMW_StandardObj20_SkinnyHorizontalPipeBoneLog
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$56
	JMP.w CODE_0DB55B

CODE_0DB556:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$57
CODE_0DB55B:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b CODE_0DB556
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$58
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_StandardObj21_WideScaleGroundLedge(Address)
namespace SMW_StandardObj21_WideScaleGroundLedge
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JMP.w CODE_0DB1E3

StandardLedgeEntry:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DB1E3:
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDY.b !RAM_SMW_Blocks_SubScrPos
CODE_0DB1E8:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$00
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	CPX.b #$FF
	BNE.b CODE_0DB1E8
	JMP.w CODE_0DB205

CODE_0DB1F8:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	CPX.b #$FF
	BNE.b CODE_0DB1F8
CODE_0DB205:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB1F8
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_StandardObj21_WideScaleGroundLedge_StandardLedgeEntry, SMW_StandardObj14_Ledge_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj30_IcyVerticalPipe(Address)
namespace SMW_GrasslandObj30_IcyVerticalPipe
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$61
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$62
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JMP.w CODE_0DBB59

CODE_0DBB4A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$63
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$64
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DBB59:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEX
	BPL.b CODE_0DBB4A
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj32_BlueSwitchBlocks(Address)
namespace SMW_GrasslandObj32_BlueSwitchBlocks
%InsertMacroAtXPosition(<Address>)

Main:
	LDX.b #$00
	BEQ.b CODE_0DB920 		; Note: More NES coding

InactiveTiles:
	db $6C				; Blue switch blocks
	db $6D				; Red switch blocks

ActiveTiles:
	db $6C				; Blue switch blocks
	db $6D				; Red switch blocks

RedSwitchBlockEntry:
	LDX.b #$01
CODE_0DB920:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DB930:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DB937:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l InactiveTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.w !RAM_SMW_Flag_ActivatedBlueSwitch,x
	BEQ.b CODE_0DB94E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ActiveTiles,x
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DB94E:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB937
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DB930
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_RedSwitchBlockEntry, SMW_GrasslandObj38_RedSwitchBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_Main, SMW_CastleObj39_BlueSwitchBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_RedSwitchBlockEntry, SMW_CastleObj3A_RedSwitchBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_Main, SMW_RopeObj33_BlueSwitchBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_RedSwitchBlockEntry, SMW_RopeObj34_RedSwitchBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_Main, SMW_UndergroundObj34_BlueSwitchBlocks_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObj32_BlueSwitchBlocks_RedSwitchBlockEntry, SMW_UndergroundObj35_RedSwitchBlocks_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj33_ForestTreeTop(Address)
namespace SMW_GrasslandObj33_ForestTreeTop
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
	db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
	db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4,$B5,$B3,$B5,$B3
	db $B3,$B4,$B4,$B5,$B3,$B4,$B4,$B4,$B4,$B5,$B3,$B5,$B6,$B1,$B6,$B1
	db $B1,$B3,$B5,$B6,$B1,$B3,$B5,$B3,$B5,$B6,$B1,$B6,$25,$25,$25,$25
	db $25,$B1,$B6,$25,$25,$B1,$B6,$B1,$B6,$25,$25,$25,$25,$25,$25,$25

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DBAE0:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	TAY
	LDX.b #$00
	LDA.b #$05
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDA.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DBAF2:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DBAF6:
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DBAF6
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM0E
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Misc_ScratchRAM0E
	TAY
	BCC.b CODE_0DBB12
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DBB12:
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DBAF2
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataLo					;\ LM: Modifies this code so this object doesn't glitch up when placed outside a specific Y range. (3.02+)
	CLC										;|
	ADC.b #$B0									;|
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo					;|
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo					;|
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi					;|
	ADC.b #$00									;/
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	DEC.b !RAM_SMW_Misc_ScratchRAM0F
	BPL.b CODE_0DBAE0
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj34_ForestGroundEdges(Address)
namespace SMW_GrasslandObj34_ForestGroundEdges
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $5F				; Solid left and top edge (forest)
	db $5E				; Solid right and top edge (forest)
	db $10				; Right edge with solid top (forest)
	db $0F				; Left edge with solid top (forest)

BottomTiles:
	db $60				; Solid left and top edge (forest)
	db $5D				; Solid right and top edge (forest)
	db $C5				; Right edge with solid top (forest)
	db $C4				; Left edge with solid top (forest)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JMP.w CODE_0DBA74

CODE_0DBA67:
	CPX.b #$02
	BPL.b CODE_0DBA6E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DBA6E:
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DBA74:
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DBA67
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj35_ForestGround(Address)
namespace SMW_GrasslandObj35_ForestGround
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DBA1E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DBA1E
	JMP.w CODE_0DBA37

CODE_0DBA2C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$B8
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DBA2C
CODE_0DBA37:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DBA2C
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj36_LargeTreeTrunk(Address)
namespace SMW_GrasslandObj36_LargeTreeTrunk
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DB9CA:
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b #$B9
	JSR.w CODE_0DB9F6
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DB9F5
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$BB
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$BC
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB9CA
Return0DB9F5:
	RTS

CODE_0DB9F6:
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$0E
	BNE.b CODE_0DBA01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDX.b #$0B
CODE_0DBA01:
	TXA
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	TXA
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj37_SmallTreeTrunk(Address)
namespace SMW_GrasslandObj37_SmallTreeTrunk
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $BD		; Small tree trunk (forest)
	db $BF		; ...go under tree enabled

BottomTiles:
	db $BE		; Small tree trunk (forest)
	db $C0		; ...go under tree enabled

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DB975:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l TopTiles,x
	JSR.w CODE_0DB997
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DB996
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BottomTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB975
Return0DB996:
	RTS

CODE_0DB997:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	CPX.b #$01
	BNE.b CODE_0DB9AE
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$B1
	BEQ.b CODE_0DB9A7
	CMP.b #$B6
	BNE.b CODE_0DB9BB
CODE_0DB9A7:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	INC.b !RAM_SMW_Misc_ScratchRAM0F
	JMP.w CODE_0DB9BB

CODE_0DB9AE:
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$0E
	BNE.b CODE_0DB9BB
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0D
	STA.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DB9BB:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj39_RightFacingDiagonalPipe(Address)
namespace SMW_GrasslandObj39_RightFacingDiagonalPipe
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $C4,$C5
	db $C7,$EC,$ED,$C6
	db $C7,$EE,$59,$5A,$EF
	db $C7,$EE,$59,$5B,$5C

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DB752:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DB756:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB756
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_GoDownLeftAndUpdateLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM01
	INC.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_0DB79F
	CPX.b #$06
	BNE.b CODE_0DB752
	DEC.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DB779:
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DB77D:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB77D
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_GoDownLeftAndUpdateLevelDataPointerInObjects_Main
	CPX.b #$10
	BNE.b CODE_0DB79B
	TXA
	SEC
	SBC.b #$05
	TAX
CODE_0DB79B:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB779
CODE_0DB79F:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$EB
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObjXX_DiagonalLedge(Address)
namespace SMW_GrasslandObjXX_DiagonalLedge
%InsertMacroAtXPosition(<Address>)

LeftFacingDiagonalLedgeEntry:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b #$01
	STX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$AA
	JSR.w SMW_FillInSlopeTileAir_Main
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l SMW_SetMap16HighByteForCurrentObject_Page00		;\ Glitch: This should be a JSR.w!
else									;|
	LDA.w SMW_SetMap16HighByteForCurrentObject_Page00		;/
endif
	LDA.b #$A1
	JSR.w AddDiagonalBlackLinesToDirt
	JMP.w CODE_0DB7FD

CODE_0DB7D6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$AA
	JSR.w SMW_FillInSlopeTileAir_Main
	DEX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E2
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DB7F2

CODE_0DB7EA:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB7F2:
	DEX
	BNE.b CODE_0DB7EA
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A6
	JSR.w AddDiagonalBlackLinesToDirt
CODE_0DB7FD:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_GoDownLeftAndUpdateLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM01
	INC.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB7D6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2
	STY.b !RAM_SMW_Blocks_SubScrPos
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	DEX
	STX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$F7
	JSR.w SMW_FillInSlopeTileAir_Main
	JMP.w CODE_0DB836

CODE_0DB823:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A3
	JSR.w AddDiagonalBlackLinesToDirt
	JMP.w CODE_0DB836

CODE_0DB82E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB836:
	DEX
	BNE.b CODE_0DB82E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A6
	JSR.w AddDiagonalBlackLinesToDirt
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_GoDownRightAndUpdateLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_0DB823
	RTS

AddDiagonalBlackLinesToDirt:
	STA.b !RAM_SMW_Misc_ScratchRAM0F
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$25
	BEQ.b CODE_0DB85E
	CMP.b #$3F
	BEQ.b CODE_0DB85C
	INC.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DB85C:
	INC.b !RAM_SMW_Misc_ScratchRAM0F
CODE_0DB85E:
	LDA.b !RAM_SMW_Misc_ScratchRAM0F
	JMP.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main

RightFacingDiagonalLedgeEntry:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b #$01
	STX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
	LDA.l SMW_SetMap16HighByteForCurrentObject_Page00		;\ Glitch: This should be a JSR.w!
else									;|
	LDA.w SMW_SetMap16HighByteForCurrentObject_Page00		;/
endif
	LDA.b #$AF
	JSR.w AddDiagonalBlackLinesToDirt
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$AF
	JSR.w SMW_FillInSlopeTileAir_Main
	JMP.w CODE_0DB8B7

CODE_0DB88F:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A9
	JSR.w AddDiagonalBlackLinesToDirt
	JMP.w CODE_0DB8A2

CODE_0DB89A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB8A2:
	DEX
	CPX.b #$01
	BNE.b CODE_0DB89A
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$E4
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$AF
	JSR.w SMW_FillInSlopeTileAir_Main
CODE_0DB8B7:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_GoDownLeftAndUpdateLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM01
	INC.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DB88F
	DEX
	STX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A9
	JSR.w AddDiagonalBlackLinesToDirt
	JMP.w CODE_0DB8DD

CODE_0DB8D5:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB8DD:
	DEX
	BNE.b CODE_0DB8D5
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$F9
	JSR.w AddDiagonalBlackLinesToDirt
	JMP.w CODE_0DB909

CODE_0DB8EB:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A9
	JSR.w AddDiagonalBlackLinesToDirt
	JMP.w CODE_0DB8FE

CODE_0DB8F6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB8FE:
	DEX
	BNE.b CODE_0DB8F6
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$AC
	JSR.w AddDiagonalBlackLinesToDirt
CODE_0DB909:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_GoDownLeftAndUpdateLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_0DB8EB
	RTS

namespace off
	%SetDuplicateOrNullPointer(SMW_GrasslandObjXX_DiagonalLedge_LeftFacingDiagonalLedgeEntry, SMW_GrasslandObj3A_LeftFacingDiagonalLedge_Main)
	%SetDuplicateOrNullPointer(SMW_GrasslandObjXX_DiagonalLedge_RightFacingDiagonalLedgeEntry, SMW_GrasslandObj3B_RightFacingDiagonalLedge_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj3C_ArchLedge(Address)
namespace SMW_GrasslandObj3C_ArchLedge
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $07,$0A,$0A,$08,$0A,$0A,$09
	db $81,$82,$83,$81,$82,$83,$81
	db $81,$25,$84,$81,$25,$84,$81
	db $81,$25,$84,$81,$25,$84,$81

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM03
	LDX.b #$00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DB61D:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DB61D
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_0DB652
CODE_0DB630:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles+$01,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles+$02,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0DB630
CODE_0DB652:
	TXA
	CLC
	ADC.b #$03
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DB6B2

CODE_0DB664:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DB66E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DB66E
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BEQ.b CODE_0DB6A3
CODE_0DB681:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles+$01,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles+$02,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0DB681
CODE_0DB6A3:
	TXA
	CLC
	ADC.b #$03
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DB6B2:
	INX
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BMI.b Return0DB6C0
	JMP.w CODE_0DB664

Return0DB6C0:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj3D_TopCloudFridge(Address)
namespace SMW_GrasslandObj3D_TopCloudFridge
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $93		; Top cloud fringe
	db $9C		; Top cloud fringe on white

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DB6D2:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DB6D2
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj3E_SideCloudFridges(Address)
namespace SMW_GrasslandObj3E_SideCloudFridges
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $94		; Left cloud fridge 1
	db $8F		; Left cloud fridge 2
	db $9D		; Left cloud fridge 1 on white
	db $98		; Left cloud fridge 2 on white
	db $95		; Right cloud fridge 1
	db $90		; Right cloud fridge 2
	db $9E		; Right cloud fridge 1 on white
	db $99		; Right cloud fridge 2 on white

BottomTiles:
	db $8F		; Left cloud fridge 1
	db $8F		; Left cloud fridge 2
	db $98		; Left cloud fridge 1 on white
	db $98		; Left cloud fridge 2 on white
	db $90		; Right cloud fridge 1
	db $90		; Right cloud fridge 2
	db $99		; Right cloud fridge 1 on white
	db $99		; Right cloud fridge 2 on white

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l TopTiles,x
	JMP.w ADDR_0DB725

ADDR_0DB71E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BottomTiles,x
ADDR_0DB725:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_0DB71E
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GrasslandObj3F_SmallBushes(Address)
namespace SMW_GrasslandObj3F_SmallBushes
%InsertMacroAtXPosition(<Address>)

LeftTiles:
	db $73		; Bush 1
	db $7A		; Bush 2
	db $85		; Bush 3
	db $88		; Bush 4 (not used?)
	db $C3		; Bush 5 (not used?)

MiddleTiles:
	db $74		; Bush 1
	db $7B		; Bush 2
	db $86		; Bush 3
	db $89		; Bush 4 (not used?)
	db $C3		; Bush 5 (not used?)

RightTiles:
	db $79		; Bush 1
	db $80		; Bush 2
	db $87		; Bush 3
	db $8E		; Bush 4 (not used?)
	db $C3		; Bush 5 (not used?)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l LeftTiles,x
	JMP.w CODE_0DB5D7

CODE_0DB5D0:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l MiddleTiles,x
CODE_0DB5D7:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DB5D0
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l RightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj34_VerticalDoubleEndedPipe(Address)
namespace SMW_CastleObj34_VerticalDoubleEndedPipe
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$33
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$34
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JMP.w CODE_0DC606

CODE_0DC5F7:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00				;\ Note: Change this JSR to point to SetMap16HighByteForCurrentObject_Page01 and the #$9D to #$35 to use the standard vertical pipe tiles instead of the castle tileset specific ones that lack solidity.
	LDA.b #$9D								;/
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00				;\ Note: Change this JSR to point to SetMap16HighByteForCurrentObject_Page01 and the #$9E to #$36 to use the standard vertical pipe tiles instead of the castle tileset specific ones that lack solidity.
	LDA.b #$9E								;/
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DC606:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DC5F7
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$33
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$34
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj35_RockWallBackground(Address)
namespace SMW_CastleObj35_RockWallBackground
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DC59D:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC59F:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$94
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$95
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DC59F
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC5BA:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$96
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$97
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DC5BA
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DC59D
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj36_LargeSpikedPillar(Address)
namespace SMW_CastleObj36_LargeSpikedPillar
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	CPX.b #$00
	BEQ.b CODE_0DC51E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$87
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$88
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
CODE_0DC51E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$89
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$66
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$67
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8A
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b CODE_0DC572
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8B
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$68
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$69
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8C
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DC51E
CODE_0DC572:
	CPX.b #$00
	BNE.b Return0DC589
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Entry2
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8D
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
Return0DC589:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj37_HorizontalLineGuide(Address)
namespace SMW_CastleObj37_HorizontalLineGuide
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $92,$93

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DCF21:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DCF21
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_CastleObj37_HorizontalLineGuide_Main, SMW_RopeObj38_HorizontalLineGuide_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj38_VerticalLineGuide(Address)
namespace SMW_CastleObj38_VerticalLineGuide
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $90			; Vertical left guide line
	db $91			; Vertical right guide line
	db $A2			; Vertical column (Rope Tileset only)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DCF42:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DCF42
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_CastleObj38_VerticalLineGuide_Main, SMW_RopeObj39_VerticalLineGuideAndMushroomStalk_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj3B_GrassLedge(Address)
namespace SMW_CastleObj3B_GrassLedge
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
endif
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC4D3:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$09
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DC4D3
if !Define_Global_ROMToAssemble&(!ROM_SMW_E2|!ROM_SMASW_E) != $00
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
endif
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC4E3:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$86
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DC4E3
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj3C_StoneBlock(Address)
namespace SMW_CastleObj3C_StoneBlock
%InsertMacroAtXPosition(<Address>)

LeftTiles:
	db $5D,$60,$63

MiddleTiles:
	db $5E,$61,$64

RightTiles:
	db $5F,$62,$65

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b #$00
CODE_0DC48D:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l LeftTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DC4A8

CODE_0DC49E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l MiddleTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DC4A8:
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0DC49E
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l RightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b #$01
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b Return0DC4C8
	BNE.b CODE_0DC4C5
	LDX.b #$02
CODE_0DC4C5:
	JMP.w CODE_0DC48D

Return0DC4C8:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj3D_Escalator(Address)
namespace SMW_CastleObj3D_Escalator
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$02
	LSR
	JSL.l SMW_ExecutePtr_Long

EscalatorPtrs:
	dl LeftSlope
	dl RightSlope

ConveyorTiles:
	db $CE			; Left facing up conveyor
	db $D1			; Left facing down conveyor
	db $CF			; Right facing down conveyor
	db $D0			; Right facing up conveyor

ConveyorCornerTiles:
	db $F3			; Left facing up conveyor
	db $F6			; Left facing down conveyor
	db $F4			; Right facing down conveyor
	db $F5			; Right facing up conveyor

LeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$03
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DC370:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM03
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ConveyorTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DC37E:
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BMI.b CODE_0DC39B
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ConveyorCornerTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DC397

CODE_0DC38F:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DC397:
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BPL.b CODE_0DC38F
CODE_0DC39B:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DC3CD
	BPL.b CODE_0DC3A9
	JMP.w Return0DC3D7

CODE_0DC3A9:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0F
	TAY
	BCC.b CODE_0DC3B4
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DC3B4:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BNE.b CODE_0DC3C8
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DC3C5
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DC3C5:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DC3C8:
	STY.b !RAM_SMW_Blocks_SubScrPos
	JMP.w CODE_0DC370

CODE_0DC3CD:
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM03
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DC37E

Return0DC3D7:
	RTS

RightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$03
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w CODE_0DC40D

CODE_0DC3F3:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM03
CODE_0DC3FD:
	LDA.b !RAM_SMW_Misc_ScratchRAM03
	CMP.b #$01
	BNE.b CODE_0DC3F3
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ConveyorCornerTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DC40D:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return0DC42B
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ConveyorTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INC.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM03
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DC3FD
Return0DC42B:
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_CastleObj3D_Escalator_Main, SMW_RopeObj37_SlopedConveyorRope_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj3E_HorizontalLineOfSpikes(Address)
namespace SMW_CastleObj3E_HorizontalLineOfSpikes
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $5A		; Horizontal down facing spikes
	db $59		; Horizontal up facing spikes

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DC43D:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DC43D
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_CastleObj3F_VerticalLineOfSpikes(Address)
namespace SMW_CastleObj3F_VerticalLineOfSpikes
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $5B		; Vertical right facing spikes
	db $5C		; Vertical left facing spikes
	db $53		; Vertical column

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
CODE_0DC45E:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DC45E
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj32_LogBridge(Address)
namespace SMW_RopeObj32_LogBridge
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $A3
	db $0E

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b #$00
CODE_0DD25D:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$00
	BEQ.b CODE_0DD267
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DD267:
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DD25D
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM01
	INX
	CPX.b #$02
	BNE.b CODE_0DD25D
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj35_ColumnWithPlantOnTop(Address)
namespace SMW_RopeObj35_ColumnWithPlantOnTop
%InsertMacroAtXPosition(<Address>)

LeftPlantTiles:
	db $9A				; Green plant on column
	db $9C				; Orange plant on column
	db $9E				; Yellow plant on column
	db $A0				; Purple plant on column

RightPlantTiles:
	db $9B				; Green plant on column
	db $9D				; Orange plant on column
	db $9F				; Yellow plant on column
	db $A1				; Purple plant on column

ColumnTiles:
	db $61,$62
	db $63,$64
	db $65,$66

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l LeftPlantTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l RightPlantTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DD205
	JMP.w Return0DD24B

CODE_0DD205:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$60
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DD24B
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b #$00
CODE_0DD226:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ColumnTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l ColumnTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	INX
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	CPX.b #$06
	BNE.b CODE_0DD247
	LDX.b #$00
CODE_0DD247:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DD226
Return0DD24B:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj36_HorizontalConveyorRope(Address)
namespace SMW_RopeObj36_HorizontalConveyorRope
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $0C,$0D

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
ADDR_0DCF01:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_0DCF01
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj3A_SlopedLineGuide(Address)
namespace SMW_RopeObj3A_SlopedLineGuide
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSL.l SMW_ExecutePtr_Long

SlopedLineGuidePtrs:
	dl NormalLeftSlope
	dl SteepLeftSlope
	dl NormalRightSlope
	dl SteepRightSlope
	dl ONOFFLeftSlope
	dl ONOFFRightSlope

NormalLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DCF7A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8C
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8D
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0E
	TAY
	BCC.b CODE_0DCF97
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DCF97:
	TYA
	AND.b #$0F
	CMP.b #$0E
	BMI.b CODE_0DCFAB
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DCFA8
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DCFA8:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DCFAB:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEX
	BPL.b CODE_0DCF7A
	RTS

SteepLeftSlope:
ONOFFLeftSlope:
	LDA.b #$86
	CPX.b #$04
	BNE.b CODE_0DCFB9
	LDA.b #$94
CODE_0DCFB9:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DCFC4:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0F
	TAY
	BCC.b CODE_0DCFD6
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DCFD6:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BMI.b CODE_0DCFEA
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DCFE7
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DCFE7:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DCFEA:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEX
	BPL.b CODE_0DCFC4
	RTS

NormalRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
ADDR_0DCFFC:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8F
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DD019
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DD019:
	TYA
	CLC
	ADC.b #$02
	TAY
	AND.b #$0F
	CMP.b #$02
	BPL.b ADDR_0DD02E
	TYA
	SEC
	SBC.b #$10
	AND.b #$F1
	TAY
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
ADDR_0DD02E:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEX
	BPL.b ADDR_0DCFFC
	RTS

SteepRightSlope:
ONOFFRightSlope:
	LDA.b #$87
	CPX.b #$05
	BNE.b CODE_0DD03C
	LDA.b #$95
CODE_0DD03C:
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DD047:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DD059
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DD059:
	TYA
	CLC
	ADC.b #$01
	TAY
	AND.b #$0F
	BNE.b CODE_0DD06A
	DEY
	TYA
	AND.b #$F0
	TAY
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DD06A:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEX
	BPL.b CODE_0DD047
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj3B_VerySteepSlopedLineGuide(Address)
namespace SMW_RopeObj3B_VerySteepSlopedLineGuide
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	JSL.l SMW_ExecutePtr_Long

VerySteepSlopedLineGuidePtrs:
	dl VerySteepLeftSlope
	dl VerySteepRightSlope

VerySteepLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
ADDR_0DD087:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$88
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DD098
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DD098:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8A
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$0F
	TAY
	BCC.b ADDR_0DD0A9
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DD0A9:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BNE.b ADDR_0DD0BD
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DD0BA
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DD0BA:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
ADDR_0DD0BD:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEX
	BPL.b ADDR_0DD087
	RTS

VerySteepRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
ADDR_0DD0CA:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$89
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DD0DB
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DD0DB:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$8B
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b ADDR_0DD0EC
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
ADDR_0DD0EC:
	TYA
	CLC
	ADC.b #$01
	TAY
	AND.b #$0F
	BNE.b ADDR_0DD0FD
	DEY
	TYA
	AND.b #$F0
	TAY
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
ADDR_0DD0FD:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEX
	BPL.b ADDR_0DD0CA
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj3C_MushroomTop(Address)
namespace SMW_RopeObj3C_MushroomTop
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDX.b #$07
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$73
	BMI.b CODE_0DD11C
	CMP.b #$76
	BPL.b CODE_0DD11C
	LDX.b #$0A
CODE_0DD11C:
	TXA
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DD12B

CODE_0DD123:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$08
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DD12B:
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DD123
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDX.b #$09
	LDA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	CMP.b #$73
	BMI.b CODE_0DD140
	CMP.b #$76
	BPL.b CODE_0DD140
	LDX.b #$0B
CODE_0DD140:
	TXA
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj3D_MushroomColumn(Address)
namespace SMW_RopeObj3D_MushroomColumn
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DD158:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$73
	JMP.w CODE_0DD167

CODE_0DD162:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$74
CODE_0DD167:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b CODE_0DD162
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$75
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DD158
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj3E_HorizontalLog(Address)
namespace SMW_RopeObj3E_HorizontalLog
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$59
	JMP.w ADDR_0DD196

ADDR_0DD191:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5A
ADDR_0DD196:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b ADDR_0DD191
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5B
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_RopeObj3F_VerticalLog(Address)
namespace SMW_RopeObj3F_VerticalLog
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5C
	JMP.w ADDR_0DD1BB

ADDR_0DD1B6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5D
ADDR_0DD1BB:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEX
	BNE.b ADDR_0DD1B6
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5E
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj36_4SidedGround(Address)
namespace SMW_UndergroundObj36_4SidedGround
%InsertMacroAtXPosition(<Address>)

LeftTiles:
	db $45
	db $50
	db $4D

MiddleTiles:
	db $00
	db $F0
	db $4E

RightTiles:
	db $48
	db $51
	db $4F

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b #$00
CODE_0DE14A:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l LeftTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DE165

CODE_0DE15B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l MiddleTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DE165:
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0DE15B
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l RightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b #$01
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b Return0DE185
	BNE.b CODE_0DE182
	LDX.b #$02
CODE_0DE182:
	JMP.w CODE_0DE14A

Return0DE185:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj37_LargeCanvas(Address)
namespace SMW_UndergroundObj37_LargeCanvas
%InsertMacroAtXPosition(<Address>)

CanvasTiles:
	db $5C,$5D,$5E,$60
	db $73,$74,$75
	db $62,$63,$64,$5F
	db $76,$76,$76

CanvasPosLo:
	db !RAM_SMW_Blocks_Map16TableLo+$50,!RAM_SMW_Blocks_Map16TableLo+$58
	db !RAM_SMW_Blocks_Map16TableLo+$94,!RAM_SMW_Blocks_Map16TableLo+$9C
	db !RAM_SMW_Blocks_Map16TableLo+$D0,!RAM_SMW_Blocks_Map16TableLo+$D8
	db !RAM_SMW_Blocks_Map16TableLo+$14,!RAM_SMW_Blocks_Map16TableLo+$1C

CanvasPosHi:
	db !RAM_SMW_Blocks_Map16TableLo>>8,!RAM_SMW_Blocks_Map16TableLo>>8
	db !RAM_SMW_Blocks_Map16TableLo>>8,!RAM_SMW_Blocks_Map16TableLo>>8
	db !RAM_SMW_Blocks_Map16TableLo>>8,!RAM_SMW_Blocks_Map16TableLo>>8
	db (!RAM_SMW_Blocks_Map16TableLo+$01B0)>>8,(!RAM_SMW_Blocks_Map16TableLo+$01B0)>>8

ScreenPosLo:
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$00)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$01)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$02)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$03)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$04)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$05)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$06)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$07)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$08)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$09)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0A)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0B)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0C)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0D)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0E)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0F)

ScreenPosHi:
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$00)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$01)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$02)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$03)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$04)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$05)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$06)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$07)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$08)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$09)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0A)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0B)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0C)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0D)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0E)
	dw !RAM_SMW_Blocks_Map16TableLo+($01B0*$0F)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Blocks_SizeOrType
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDY.b #$50
	STY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$04
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DDF4F:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DDF51:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$61
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DDF51
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$40
	STA.b !RAM_SMW_Blocks_SubScrPos
	TAY
	BCC.b CODE_0DDF6C
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDF6C:
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DDF4F
	LDA.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataLo
	STA.b !RAM_SMW_Misc_ScratchRAM04
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataLo
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b #$07
	STA.b !RAM_SMW_Misc_ScratchRAM03
CODE_0DDF80:
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.l CanvasPosLo,x
	STA.b !RAM_SMW_Blocks_SubScrPos
	TAY
	LDA.l CanvasPosHi,x
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Misc_ScratchRAM05
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b #$00
CODE_0DDF9D:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l CanvasTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DDF9D
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
CODE_0DDFB2:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l CanvasTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l CanvasTiles+$01,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l CanvasTiles+$02,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DDFB2
	INX
	INX
	INX
	LDA.b #$03
	STA.b !RAM_SMW_Misc_ScratchRAM02
CODE_0DDFDD:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l CanvasTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DDFDD
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
CODE_0DDFF6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l CanvasTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	INX
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DDFF6
	DEC.b !RAM_SMW_Misc_ScratchRAM03
	BMI.b CODE_0DE00E
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w CODE_0DDF80

CODE_0DE00E:
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM08
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM09
CODE_0DE016:
	REP.b #$30
	LDA.b !RAM_SMW_Misc_ScratchRAM08
	ASL
	TAX
	LDA.l ScreenPosLo,x
	STA.b !RAM_SMW_Misc_ScratchRAM04
	LDA.l ScreenPosHi,x
	STA.b !RAM_SMW_Misc_ScratchRAM06
	LDA.w #$01B0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #!RAM_SMW_Blocks_Map16TableLo
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHB
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDY.b !RAM_SMW_Misc_ScratchRAM04
	MVN !RAM_SMW_Blocks_Map16TableLo>>16,!RAM_SMW_Blocks_Map16TableLo>>16
	PLB
	LDA.w #$01B0
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.w #!RAM_SMW_Blocks_Map16TableHi
	STA.b !RAM_SMW_Misc_ScratchRAM02
	PHB
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	LDY.b !RAM_SMW_Misc_ScratchRAM06
	MVN !RAM_SMW_Blocks_Map16TableHi>>16,!RAM_SMW_Blocks_Map16TableHi>>16
	PLB
	SEP.b #$30
	DEC.b !RAM_SMW_Blocks_SizeOrType
	BEQ.b Return0DE05D
	INC.b !RAM_SMW_Misc_ScratchRAM08
	JMP.w CODE_0DE016

Return0DE05D:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj38_RightLavaEdge(Address)
namespace SMW_UndergroundObj38_RightLavaEdge
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $5A			; Right facing mud/lava with top
	db $5B			; Right facing mud/lava

MiddleTiles:
	db $5B			; Right facing mud/lava with top
	db $5B			; Right facing mud/lava

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopTiles,x
	JMP.w CODE_0DDAE8

CODE_0DDAE1:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l MiddleTiles,x						; Optimization: Save a couple bytes by changing this to LDA.b #$5B and removing this table.
CODE_0DDAE8:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DDAE1
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj39_SlopedCaveLava(Address)
namespace SMW_UndergroundObj39_SlopedCaveLava
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$03
	JSL.l SMW_ExecutePtr_Long

SlopedCaveLavaPtrs:
	dl NormalLeftSlope
	dl SteepLeftSlope
	dl NormalRightSlope
	dl SteepRightSlope

NormalLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$01
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DDB1B:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D2
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D3
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	DEX
	BMI.b CODE_0DDB50
CODE_0DDB31:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FB
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	JMP.w CODE_0DDB4D

CODE_0DDB45:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DDB4D:
	DEX
	BPL.b CODE_0DDB45
CODE_0DDB50:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DDB84
	BPL.b CODE_0DDB60
	JMP.w Return0DDB8E

CODE_0DDB60:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0E
	TAY
	BCC.b CODE_0DDB6B
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDB6B:
	TYA
	AND.b #$0F
	CMP.b #$0E
	BMI.b CODE_0DDB7F
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDB7C
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDB7C:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DDB7F:
	STY.b !RAM_SMW_Blocks_SubScrPos
	JMP.w CODE_0DDB1B

CODE_0DDB84:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEX
	DEX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DDB31

Return0DDB8E:
	RTS

SteepLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b #$00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	STA.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DDBA4:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D6
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DDBAE:
	DEX
	BMI.b CODE_0DDBC7
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FD
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JMP.w CODE_0DDBC4

CODE_0DDBBC:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DDBC4:
	DEX
	BPL.b CODE_0DDBBC
CODE_0DDBC7:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	INC.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DDBF9
	BPL.b CODE_0DDBD5
	JMP.w Return0DDC01

CODE_0DDBD5:
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$0F
	TAY
	BCC.b CODE_0DDBE0
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDBE0:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BNE.b CODE_0DDBF4
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDBF1
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDBF1:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DDBF4:
	STY.b !RAM_SMW_Blocks_SubScrPos
	JMP.w CODE_0DDBA4

CODE_0DDBF9:
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	JMP.w CODE_0DDBAE

Return0DDC01:
	RTS

NormalRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$01
	STX.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w ADDR_0DDC3D

ADDR_0DDC1A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
ADDR_0DDC23:
	CPX.b #$03
	BNE.b ADDR_0DDC1A
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FC
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	DEX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return0DDC5D
ADDR_0DDC3D:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D4
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D5
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INC.b !RAM_SMW_Misc_ScratchRAM02
	INC.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b ADDR_0DDC5E
Return0DDC5D:
	RTS

ADDR_0DDC5E:
	JMP.w ADDR_0DDC23

SteepRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDX.b #$00
	STX.b !RAM_SMW_Misc_ScratchRAM02
	STX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	INC.b !RAM_SMW_Misc_ScratchRAM00
	JMP.w CODE_0DDC8E

CODE_0DDC79:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
CODE_0DDC82:
	CPX.b #$01
	BNE.b CODE_0DDC79
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FE
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
CODE_0DDC8E:
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b Return0DDCA8
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$D7
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	INC.b !RAM_SMW_Misc_ScratchRAM02
	LDX.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DDC82
Return0DDCA8:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj3A_CaveLavaWithTop(Address)
namespace SMW_UndergroundObj3A_CaveLavaWithTop
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	TXA
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	SEC
	SBC.b #$39
	BNE.b CODE_0DDCD2
CODE_0DDCC4:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$59
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DDCC4
	JMP.w CODE_0DDCDD

CODE_0DDCD2:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$FF
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DDCD2
CODE_0DDCDD:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DDCD2
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_UndergroundObj3A_CaveLavaWithTop_Main, SMW_UndergroundObj3B_CaveLava_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj3C_VerySteepSlope(Address)
namespace SMW_UndergroundObj3C_VerySteepSlope
%InsertMacroAtXPosition(<Address>)

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	AND.b #$01
	JSL.l SMW_ExecutePtr_Long

VerySteepSlopePtrs:
	dl VerySteepLeftSlope
	dl VerySteepRightSlope

VerySteepLeftSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DDDA7:
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$CA
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDDC2
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDDC2:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$CB
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDDD8
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDDD8:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$F1
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDDEE
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDDEE:
	DEX
	DEX
	JMP.w CODE_0DDE09

CODE_0DDDF3:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDE09
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDE09:
	DEX
	BPL.b CODE_0DDDF3
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$1F
	TAY
	BCC.b CODE_0DDE1A
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDE1A:
	TYA
	AND.b #$0F
	CMP.b #$0F
	BNE.b CODE_0DDE2E
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDE2B
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDE2B:
	JSR.w SMW_GoBackOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DDE2E:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DDE3B
	JMP.w CODE_0DDDA7

Return0DDE3B:
	RTS

VerySteepRightSlope:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	CLC
	ADC.b #$02
	STA.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DDE4A:
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$CC
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDE65
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDE65:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$CD
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDE7B
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDE7B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$F2
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDE91
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDE91:
	DEX
	DEX
	JMP.w CODE_0DDEAC

CODE_0DDE96:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$3F
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DDEAC
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	ADC.b #$00
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DDEAC:
	DEX
	BPL.b CODE_0DDE96
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$20
	TAY
	BCC.b CODE_0DDEBD
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DDEBD:
	TYA
	CLC
	ADC.b #$01
	TAY
	AND.b #$0F
	BNE.b CODE_0DDECE
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
	DEY
	TYA
	AND.b #$F0
	TAY
CODE_0DDECE:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DDEDB
	JMP.w CODE_0DDE4A

Return0DDEDB:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj3D_CeilingLedge(Address)
namespace SMW_UndergroundObj3D_CeilingLedge
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DDD18
CODE_0DDD01:
	LDX.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DDD03:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$65
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DDD03
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DDD01
CODE_0DDD18:
	LDX.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DDD1A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$4E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DDD1A
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj3E_CeilingEdges(Address)
namespace SMW_UndergroundObj3E_CeilingEdges 
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $50			; Left facing edge with bottom
	db $50			; Left facing edge
	db $51			; Right facing edge with bottom
	db $51			; Right facing edge

BottomTiles:
	db $4D			; Left facing edge with bottom
	db $50			; Left facing edge
	db $4F			; Right facing edge with bottom
	db $51			; Right facing edge

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DDD51
CODE_0DDD41:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l TopTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DDD41
CODE_0DDD51:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l BottomTiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_UndergroundObj3F_SolidDirt(Address)
namespace SMW_UndergroundObj3F_SolidDirt
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DDD6F:
	LDX.b !RAM_SMW_Misc_ScratchRAM01
CODE_0DDD71:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$65
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DDD71
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DDD6F
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj2E_HorizontalLineOfSpikes(Address)
namespace SMW_GhostHouseObj2E_HorizontalLineOfSpikes
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $59

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
CODE_0DF07B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DF07B
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj30_GrassLedge1(Address)
namespace SMW_GhostHouseObj30_GrassLedge1
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DF040:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0F
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DF040
	JMP.w CODE_0DF05B

CODE_0DF04E:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DF050:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$EA
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DF050
CODE_0DF05B:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DF04E
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj31_WoodCrate(Address)
namespace SMW_GhostHouseObj31_WoodCrate
%InsertMacroAtXPosition(<Address>)

LeftEdgeTiles:
	db $63
	db $65

MiddleTiles:
	db $C7
	db $C8

RightEdgeTiles:
	db $64,$6A

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$61
	BNE.b CODE_0DEFCB
CODE_0DEFC6:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0D
CODE_0DEFCB:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0DEFC6
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$62
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	LDX.b #$01
	JMP.w CODE_0DEFFE

CODE_0DEFDE:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l LeftEdgeTiles,x
	BNE.b CODE_0DEFEE
CODE_0DEFE7:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l MiddleTiles,x
CODE_0DEFEE:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	BNE.b CODE_0DEFE7
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l RightEdgeTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
CODE_0DEFFE:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	TXA
	EOR.b #$01
	TAX
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0DEFDE
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$6B
	BNE.b CODE_0DF01C
CODE_0DF017:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$6C
CODE_0DF01C:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DF017
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$6D
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj32_GrassLedge2(Address)
namespace SMW_GhostHouseObj32_GrassLedge2
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DEF7C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0E
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEF7C
CODE_0DEF87:
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BMI.b Return0DEFA1
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DEF93:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A3
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEF93
	JMP.w CODE_0DEF87

Return0DEFA1:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj33_Cloud(Address)
namespace SMW_GhostHouseObj33_Cloud
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A0
	JMP.w CODE_0DEF59

CODE_0DEF54:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A1
CODE_0DEF59:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b CODE_0DEF54
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$A2
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj34_WoodLedgeOnColumn(Address)
namespace SMW_GhostHouseObj34_WoodLedgeOnColumn
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	ASL
	ASL
	CLC
	ADC.b #$02
	TAX
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	JSR.w SMW_GhostHouseObj38_WoodenLedge_WoodLedgeOnColumnEntry
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$01
	TAY
	AND.b #$0F
	BNE.b CODE_0DEEF1
	LDA.b !RAM_SMW_Blocks_SubScrPos
	AND.b #$F0
	TAY
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DEEF1:
	TYA
	CLC
	ADC.b #$10
	STA.b !RAM_SMW_Blocks_SubScrPos
	TAY
	BCC.b CODE_0DEEFD
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel_Entry2
CODE_0DEEFD:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$78
	JMP.w CODE_0DEF0F

CODE_0DEF0A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.b #$79
CODE_0DEF0F:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	TYA
	CLC
	ADC.b #$10
	TAY
	BCC.b CODE_0DEF21
	LDA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	CLC
	ADC.b #$01
	STA.b !RAM_SMW_Pointer_LoMap16BlockDataHi
	STA.b !RAM_SMW_Pointer_HiMap16BlockDataHi
CODE_0DEF21:
	DEX
	BNE.b CODE_0DEF0A
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	LDA.b !RAM_SMW_Blocks_SubScrPos
	CLC
	ADC.b #$04
	TAY
	AND.b #$0F
	CMP.b #$04
	BPL.b CODE_0DEF3B
	TYA
	SEC
	SBC.b #$10
	TAY
	JSR.w SMW_GoForwardOneScreenAndUpdateLevelDataPointerInObjects_Main
CODE_0DEF3B:
	STY.b !RAM_SMW_Blocks_SubScrPos
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BMI.b Return0DEF44
	JMP.w CODE_0DEEFD

Return0DEF44:
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_RT00_SMW_GhostHouseObj35_BrickBackground(Address)
namespace SMW_GhostHouseObj35_BrickBackground
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $92			; Grey bricks background
	db $5E			; Wooden blocks
	db $82			; Log background

Main:
	TXA
	SEC
	SBC.b #$34
	TAX
CODE_0DECCE:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DECE3:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	CPX.b #$01
	BNE.b CODE_0DECED
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
CODE_0DECED:
	LDA.l Tiles,x
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM02
	LDA.b !RAM_SMW_Misc_ScratchRAM02
	BPL.b CODE_0DECE3
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDA.b !RAM_SMW_Misc_ScratchRAM00
	STA.b !RAM_SMW_Misc_ScratchRAM02
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DECE3
	RTS
namespace off
	%SetDuplicateOrNullPointer(SMW_GhostHouseObj35_BrickBackground_Main, SMW_GhostHouseObj36_WoodenBlocks_Main)
endmacro

macro ROUTINE_RT01_SMW_GhostHouseObj35_BrickBackground(Address)
namespace SMW_GhostHouseObj35_BrickBackground
%InsertMacroAtXPosition(<Address>)

LogBackgroundEntry:
	LDX.b #$02
	JMP.w CODE_0DECCE
namespace off
	%SetDuplicateOrNullPointer(SMW_GhostHouseObj35_BrickBackground_LogBackgroundEntry, SMW_GhostHouseObj2F_LogBackground_Main)
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj37_HorizontalBackgroundLogAndRailing(Address)
namespace SMW_GhostHouseObj37_HorizontalBackgroundLogAndRailing
%InsertMacroAtXPosition(<Address>)

LeftTiles:
	db $82			; Horizontal log background
	db $89			; Top of hand rail
	db $88			; Bottom of hand rail

MiddleTiles:
	db $82			; Horizontal log background
	db $8A			; Top of hand rail
	db $88			; Bottom of hand rail

RightTiles:
	db $82			; Horizontal log background
	db $8B			; Top of hand rail
	db $88			; Bottom of hand rail

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l LeftTiles,x
	JMP.w CODE_0DED32

CODE_0DED2B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l MiddleTiles,x
CODE_0DED32:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BNE.b CODE_0DED2B
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l RightTiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj38_WoodenLedge(Address)
namespace SMW_GhostHouseObj38_WoodenLedge
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
WoodLedgeOnColumnEntry:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0A
	JMP.w CODE_0DED57

CODE_0DED52:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0B
CODE_0DED57:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b CODE_0DED52
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$0C
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj39_VerticalBackgroundLog(Address)
namespace SMW_GhostHouseObj39_VerticalBackgroundLog
%InsertMacroAtXPosition(<Address>)

TopTiles:
	db $83			; Vertical log background 1
	db $78			; Vertical log background 2
	db $79			; Vertical log background 3

BottomTiles:
	db $83			; Vertical log background 1
	db $79			; Vertical log background 2
	db $79			; Vertical log background 3

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l TopTiles,x
	JMP.w CODE_0DED8B

CODE_0DED84:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page00
	LDA.l BottomTiles,x
CODE_0DED8B:
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DED84
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj3A_SolidBrickWallAndVerticalLineOfSpikes(Address)
namespace SMW_GhostHouseObj3A_SolidBrickWallAndVerticalLineOfSpikes
%InsertMacroAtXPosition(<Address>)

Tiles:
	db $5F			; Solid brick left edge
	db $60			; Solid brick right edge
	db $5A			; Vertical right facing thin spikes
	db $5B			; Vertical left facing thin spikes

Main:
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DEDA8:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.l Tiles,x
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	DEC.b !RAM_SMW_Misc_ScratchRAM00
	BPL.b CODE_0DEDA8
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj3B_BonusGameLedge(Address)
namespace SMW_GhostHouseObj3B_BonusGameLedge
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	TAX
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$07
	JMP.w CODE_0DEDCD

CODE_0DEDC8:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$08
CODE_0DEDCD:
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b CODE_0DEDC8
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$09
	STA.b [!RAM_SMW_Pointer_LoMap16BlockDataLo],y
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj3C_SwitchPalaceCeiling(Address)
namespace SMW_GhostHouseObj3C_SwitchPalaceCeiling
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Misc_ScratchRAM01
	BEQ.b CODE_0DEE0B
CODE_0DEDF4:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$53
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEDF4
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BNE.b CODE_0DEDF4
CODE_0DEE0B:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$54
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEE0B
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj3D_SwitchPalaceLedge(Address)
namespace SMW_GhostHouseObj3D_SwitchPalaceLedge
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM00
CODE_0DEE2C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5D
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEE2C
	JMP.w CODE_0DEE45

CODE_0DEE3A:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$53
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEE3A
CODE_0DEE45:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DEE3A
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj3E_SwitchPalaceRightFacingWall(Address)
namespace SMW_GhostHouseObj3E_SwitchPalaceRightFacingWall
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DEE65:
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DEE74
CODE_0DEE69:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$53
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BNE.b CODE_0DEE69
CODE_0DEE74:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$55
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DEE65
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro ROUTINE_SMW_GhostHouseObj3F_SwitchPalaceLeftFacingWall(Address)
namespace SMW_GhostHouseObj3F_SwitchPalaceLeftFacingWall
%InsertMacroAtXPosition(<Address>)

Main:
	LDY.b !RAM_SMW_Blocks_SubScrPos
	LDA.b !RAM_SMW_Blocks_SizeOrType
	AND.b #$0F
	STA.b !RAM_SMW_Misc_ScratchRAM00
	LDA.b !RAM_SMW_Blocks_SizeOrType
	LSR
	LSR
	LSR
	LSR
	STA.b !RAM_SMW_Misc_ScratchRAM01
	JSR.w SMW_PreserveLevelDataPointerInObjects_Main
CODE_0DEE9C:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$5C
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	BEQ.b CODE_0DEEB3
CODE_0DEEA8:
	JSR.w SMW_SetMap16HighByteForCurrentObject_Page01
	LDA.b #$53
	JSR.w SMW_HandleHorizontalSubScreenCrossingForCurrentObject_Main
	DEX
	BPL.b CODE_0DEEA8
CODE_0DEEB3:
	JSR.w SMW_RestoreLevelDataPointerInObjects_Main
	JSR.w SMW_HandleVerticalSubScreenCrossingForCurrentObject_HorizontalLevel
	LDX.b !RAM_SMW_Misc_ScratchRAM00
	DEC.b !RAM_SMW_Misc_ScratchRAM01
	BPL.b CODE_0DEE9C
	RTS
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro DATATABLE_RT00_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

; LM: These MWLs are a bit different from what you'd normally extract from a clean SMW ROM. This is because Lunar Magic will actually modify the original level data during the extraction process to comply with certain ASM hacks it makes:
; - Extended Object 00 (Screen Exit) - Changes one of the bytes to store the exit properties.
; - Extended Object 01 (Screen Jump) - Removes

LEVEL_L1_Test:
	%SMW_InsertOriginalLevelData(Level025_TestLevel, SMW_U, LAYER_1)
UnusedLevelData_RideAmongTheCloudsL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_RideAmongTheClouds, SMW_U, LAYER_1)
UnusedLevelData_MushroomScalesL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_MushroomScales, SMW_U, LAYER_1)
UnusedLevelData_BossTestL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_BossTest, SMW_U, LAYER_1)
LEVEL_L1_09B:
	%SMW_InsertOriginalLevelData(Level09B_BowserBattle, SMW_U, LAYER_1)
LEVEL_L1_095:
	%SMW_InsertOriginalLevelData(Level095_ReznorBattle, SMW_U, LAYER_1)
LEVEL_L1_096:
	%SMW_InsertOriginalLevelData(Level096_LarryBattle, SMW_U, LAYER_1)
UnusedLevelData_LavaCaveL2:
	%SMW_InsertOriginalLevelData(UnusedLevel_LavaCave, SMW_U, LAYER_2)
UnusedLevelData_LavaCaveL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_LavaCave, SMW_U, LAYER_1)
UnusedLevelData_FollowTestL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_FollowTest, SMW_U, LAYER_1)
UnusedLevelData_OldWendysCastleL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_OldWendysCastle, SMW_U, LAYER_1)
UnusedLevelData_OldWendysCastleL2:
	%SMW_InsertOriginalLevelData(UnusedLevel_OldWendysCastle, SMW_U, LAYER_2)
UnusedLevelData_GhostGroundL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_GhostHouseGround, SMW_U, LAYER_1)
LEVEL_L1_093:
	%SMW_InsertOriginalLevelData(Level093_LemmyBattle, SMW_U, LAYER_1)
LEVEL_L1_094:
	%SMW_InsertOriginalLevelData(Level094_WendyBattle, SMW_U, LAYER_1)
LEVEL_L1_0C7:
	%SMW_InsertOriginalLevelData(Level0C7_TitleScreen, SMW_U, LAYER_1)
LEVEL_L1_0C5:
	%SMW_InsertOriginalLevelData(Level0C5_IntroLevel, SMW_U, LAYER_1)
LEVEL_L2_0C4:
	%SMW_InsertOriginalLevelData(Level0C4_UnusedGhostHouseExit, SMW_U, LAYER_2)
LEVEL_L1_0EB:
	%SMW_InsertOriginalLevelData(Level0EB_DonutGhostHouse_NormalExit, SMW_U, LAYER_1)
LEVEL_L1_0CC:
	%SMW_InsertOriginalLevelData(Level0CC_RoyBattle, SMW_U, LAYER_1)
LEVEL_L1_0FF:
	%SMW_InsertOriginalLevelData(Level0FF_DonutPlains2_NormalExit, SMW_U, LAYER_1)
LEVEL_L1_000:
	%SMW_InsertOriginalLevelData(Level000_BonusGame, SMW_U, LAYER_1)
UnusedLevelData_GhostHouseExitL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_GhostHouseExit1, SMW_U, LAYER_1)
LEVEL_L1_1EB:
	%SMW_InsertOriginalLevelData(1EB, SMW_U, LAYER_1)
LEVEL_L1_014:
	%SMW_InsertOriginalLevelData(014, SMW_U, LAYER_1)
LEVEL_L1_11B:
	%SMW_InsertOriginalLevelData(11B, SMW_U, LAYER_1)
LEVEL_L1_121:
	%SMW_InsertOriginalLevelData(121, SMW_U, LAYER_1)
LEVEL_L1_008:
	%SMW_InsertOriginalLevelData(008, SMW_U, LAYER_1)
LEVEL_L1_0CA:
	%SMW_InsertOriginalLevelData(0CA, SMW_U, LAYER_1)
LEVEL_L1_1D8:
	%SMW_InsertOriginalLevelData(1D8, SMW_U, LAYER_1)
LEVEL_L1_1D7:
	%SMW_InsertOriginalLevelData(1D7, SMW_U, LAYER_1)
LEVEL_L1_0C9:
	%SMW_InsertOriginalLevelData(0C9, SMW_U, LAYER_1)
LEVEL_L1_003:
	%SMW_InsertOriginalLevelData(003, SMW_U, LAYER_1)
LEVEL_L1_105:
	%SMW_InsertOriginalLevelData(105, SMW_U, LAYER_1)
LEVEL_L1_1CB:
	%SMW_InsertOriginalLevelData(1CB, SMW_U, LAYER_1)
LEVEL_L1_106:
	%SMW_InsertOriginalLevelData(106, SMW_U, LAYER_1)
LEVEL_L1_1CA:
	%SMW_InsertOriginalLevelData(1CA, SMW_U, LAYER_1)
LEVEL_L1_103:
	%SMW_InsertOriginalLevelData(103, SMW_U, LAYER_1)
LEVEL_L1_1FD:
	%SMW_InsertOriginalLevelData(1FD, SMW_U, LAYER_1)
LEVEL_L1_102:
	%SMW_InsertOriginalLevelData(102, SMW_U, LAYER_1)
LEVEL_L1_1FF:
	%SMW_InsertOriginalLevelData(1FF, SMW_U, LAYER_1)
LEVEL_L1_1BE:
	%SMW_InsertOriginalLevelData(Level1BE_YoshisIsland4_SideArea, SMW_U, LAYER_1)
LEVEL_L1_101:
	%SMW_InsertOriginalLevelData(101, SMW_U, LAYER_1)
LEVEL_L1_1FC:
	%SMW_InsertOriginalLevelData(1FC, SMW_U, LAYER_1)
LEVEL_L1_015:
	%SMW_InsertOriginalLevelData(015, SMW_U, LAYER_1)
LEVEL_L1_0FD:
	%SMW_InsertOriginalLevelData(0FD, SMW_U, LAYER_1)
LEVEL_L1_0E3:
	%SMW_InsertOriginalLevelData(0E3, SMW_U, LAYER_1)
LEVEL_L2_009:
	%SMW_InsertOriginalLevelData(Level009_DonutPlains2_Main, SMW_U, LAYER_2)
LEVEL_L1_009:
	%SMW_InsertOriginalLevelData(Level009_DonutPlains2_Main, SMW_J, LAYER_1)
LEVEL_L1_0E9:
	%SMW_InsertOriginalLevelData(0E9, SMW_U, LAYER_1)
LEVEL_L1_004:
	%SMW_InsertOriginalLevelData(004, SMW_U, LAYER_1)
LEVEL_L1_0FA:
	%SMW_InsertOriginalLevelData(0FA, SMW_U, LAYER_1)
LEVEL_L1_0DE:
	%SMW_InsertOriginalLevelData(0DE, SMW_U, LAYER_1)
LEVEL_L1_0FE:
	%SMW_InsertOriginalLevelData(0FE, SMW_U, LAYER_1)
LEVEL_L1_0C4:
	%SMW_InsertOriginalLevelData(Level0C4_UnusedGhostHouseExit, SMW_U, LAYER_1)
LEVEL_L1_005:
	%SMW_InsertOriginalLevelData(005, SMW_U, LAYER_1)
LEVEL_L1_0F4:
	%SMW_InsertOriginalLevelData(0F4, SMW_U, LAYER_1)
LEVEL_L1_006:
	%SMW_InsertOriginalLevelData(006, SMW_U, LAYER_1)
LEVEL_L1_0D2:
	%SMW_InsertOriginalLevelData(0D2, SMW_U, LAYER_1)
LEVEL_L1_0C3:
	%SMW_InsertOriginalLevelData(0C3, SMW_U, LAYER_1)
LEVEL_L1_007:
	%SMW_InsertOriginalLevelData(007, SMW_U, LAYER_1)
LEVEL_L1_0E8:
	%SMW_InsertOriginalLevelData(0E8, SMW_U, LAYER_1)
LEVEL_L2_0E7:
	%SMW_InsertOriginalLevelData(0E7, SMW_U, LAYER_2)
LEVEL_L1_0E7:
	%SMW_InsertOriginalLevelData(0E7, SMW_U, LAYER_1)
LEVEL_L1_0E6:
	%SMW_InsertOriginalLevelData(0E6, SMW_U, LAYER_1)
LEVEL_L1_00A:
	%SMW_InsertOriginalLevelData(00A, SMW_U, LAYER_1)
LEVEL_L1_0C2:
	%SMW_InsertOriginalLevelData(0C2, SMW_U, LAYER_1)
LEVEL_L1_013:
	%SMW_InsertOriginalLevelData(Level013_DonutSecretHouse_Main, SMW_J, LAYER_1)
LEVEL_L1_0ED:
	%SMW_InsertOriginalLevelData(Level0ED_DonutSecretHouse_SecondRoom, SMW_J, LAYER_1)
LEVEL_L1_0F1:
	%SMW_InsertOriginalLevelData(0F1, SMW_U, LAYER_1)
LEVEL_L1_0E4:
	%SMW_InsertOriginalLevelData(0E4, SMW_U, LAYER_1)
LEVEL_L1_10B:
	%SMW_InsertOriginalLevelData(10B, SMW_U, LAYER_1)
LEVEL_L1_1C6:
	%SMW_InsertOriginalLevelData(1C6, SMW_U, LAYER_1)
namespace off
endmacro

macro DATATABLE_RT01_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

LEVEL_L1_11A:
	%SMW_InsertOriginalLevelData(Level11A_VanillaDome1_Main, SMW_J, LAYER_1)
LEVEL_L1_1EF:
	%SMW_InsertOriginalLevelData(1EF, SMW_U, LAYER_1)
LEVEL_L2_1EF:
	%SMW_InsertOriginalLevelData(1EF, SMW_U, LAYER_2)
LEVEL_L1_118:
	%SMW_InsertOriginalLevelData(118, SMW_U, LAYER_1)
LEVEL_L1_1C3:
	%SMW_InsertOriginalLevelData(1C3, SMW_U, LAYER_1)
LEVEL_L1_107:
	%SMW_InsertOriginalLevelData(107, SMW_U, LAYER_1)
LEVEL_L1_1EA:
	%SMW_InsertOriginalLevelData(1EA, SMW_U, LAYER_1)
LEVEL_L1_10A:
	%SMW_InsertOriginalLevelData(10A, SMW_U, LAYER_1)
LEVEL_L1_1C2:
	%SMW_InsertOriginalLevelData(1C2, SMW_U, LAYER_1)
LEVEL_L1_1F7:
	%SMW_InsertOriginalLevelData(1F7, SMW_U, LAYER_1)
LEVEL_L1_119:
	%SMW_InsertOriginalLevelData(119, SMW_U, LAYER_1)
LEVEL_L1_1F5:
	%SMW_InsertOriginalLevelData(1F5, SMW_U, LAYER_1)
LEVEL_L1_11C:
	%SMW_InsertOriginalLevelData(Level11C_LemmysCastle_Main, SMW_J, LAYER_1)
LEVEL_L1_1F4:
	%SMW_InsertOriginalLevelData(1F4, SMW_U, LAYER_1)
LEVEL_L1_1F3:
	%SMW_InsertOriginalLevelData(1F3, SMW_U, LAYER_1)
LEVEL_L2_1F3:
	%SMW_InsertOriginalLevelData(1F3, SMW_U, LAYER_2)
LEVEL_L1_1F2:
	%SMW_InsertOriginalLevelData(1F2, SMW_U, LAYER_1)
LEVEL_L1_109:
	%SMW_InsertOriginalLevelData(109, SMW_U, LAYER_1)
LEVEL_L1_1F1:
	%SMW_InsertOriginalLevelData(1F1, SMW_U, LAYER_1)
LEVEL_L1_1F0:
	%SMW_InsertOriginalLevelData(1F0, SMW_U, LAYER_1)
LEVEL_L1_001:
	%SMW_InsertOriginalLevelData(001, SMW_U, LAYER_1)
LEVEL_L1_0D8:
	%SMW_InsertOriginalLevelData(0D8, SMW_U, LAYER_1)
LEVEL_L1_002:
	%SMW_InsertOriginalLevelData(002, SMW_U, LAYER_1)
LEVEL_L1_0CB:
	%SMW_InsertOriginalLevelData(0CB, SMW_U, LAYER_1)
LEVEL_L1_00B:
	%SMW_InsertOriginalLevelData(00B, SMW_U, LAYER_1)
LEVEL_L1_0E0:
	%SMW_InsertOriginalLevelData(0E0, SMW_U, LAYER_1)
LEVEL_L1_00F:
	%SMW_InsertOriginalLevelData(00F, SMW_U, LAYER_1)
LEVEL_L1_0BF:
	%SMW_InsertOriginalLevelData(0BF, SMW_U, LAYER_1)
LEVEL_L1_010:
	%SMW_InsertOriginalLevelData(010, SMW_U, LAYER_1)
LEVEL_L1_0C1:
	%SMW_InsertOriginalLevelData(0C1, SMW_U, LAYER_1)
LEVEL_L1_00E:
	%SMW_InsertOriginalLevelData(00E, SMW_U, LAYER_1)
LEVEL_L2_00E:
	%SMW_InsertOriginalLevelData(00E, SMW_U, LAYER_2)
LEVEL_L1_0DC:
	%SMW_InsertOriginalLevelData(0DC, SMW_U, LAYER_1)
LEVEL_L2_0DC:
	%SMW_InsertOriginalLevelData(0DC, SMW_U, LAYER_2)
LEVEL_L1_0DB:
	%SMW_InsertOriginalLevelData(0DB, SMW_U, LAYER_1)
LEVEL_L1_0DA:
	%SMW_InsertOriginalLevelData(0DA, SMW_U, LAYER_1)
LEVEL_L1_011:
	%SMW_InsertOriginalLevelData(011, SMW_U, LAYER_1)
LEVEL_L1_0C6:
	%SMW_InsertOriginalLevelData(0C6, SMW_U, LAYER_1)
namespace off
endmacro

macro DATATABLE_RT02_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

LEVEL_L1_00C:
	%SMW_InsertOriginalLevelData(00C, SMW_U, LAYER_1)
LEVEL_L1_0F3:
	%SMW_InsertOriginalLevelData(0F3, SMW_U, LAYER_1)
LEVEL_L1_00D:
	%SMW_InsertOriginalLevelData(00D, SMW_U, LAYER_1)
LEVEL_L1_0DD:
	%SMW_InsertOriginalLevelData(0DD, SMW_U, LAYER_1)
LEVEL_L1_11E:
	%SMW_InsertOriginalLevelData(11E, SMW_U, LAYER_1)
LEVEL_L1_120:
	%SMW_InsertOriginalLevelData(120, SMW_U, LAYER_1)
LEVEL_L1_123:
	%SMW_InsertOriginalLevelData(123, SMW_U, LAYER_1)
LEVEL_L1_1F8:
	%SMW_InsertOriginalLevelData(1F8, SMW_U, LAYER_1)
LEVEL_L1_1BC:
	%SMW_InsertOriginalLevelData(1BC, SMW_U, LAYER_1)
LEVEL_L1_020:
	%SMW_InsertOriginalLevelData(020, SMW_U, LAYER_1)
LEVEL_L1_11D:
	%SMW_InsertOriginalLevelData(11D, SMW_U, LAYER_1)
LEVEL_L2_11D:
	%SMW_InsertOriginalLevelData(11D, SMW_U, LAYER_2)
LEVEL_L1_1FA:
	%SMW_InsertOriginalLevelData(1FA, SMW_U, LAYER_1)
LEVEL_L1_1E6:
	%SMW_InsertOriginalLevelData(1E6, SMW_U, LAYER_1)
LEVEL_L1_11F:
	%SMW_InsertOriginalLevelData(11F, SMW_U, LAYER_1)
LEVEL_L1_1DF:
	%SMW_InsertOriginalLevelData(1DF, SMW_U, LAYER_1)
LEVEL_L1_1C1:
	%SMW_InsertOriginalLevelData(1C1, SMW_U, LAYER_1)
LEVEL_L1_122:
	%SMW_InsertOriginalLevelData(122, SMW_U, LAYER_1)
LEVEL_L1_01F:
	%SMW_InsertOriginalLevelData(01F, SMW_U, LAYER_1)
LEVEL_L1_0D6:
	%SMW_InsertOriginalLevelData(0D6, SMW_U, LAYER_1)
LEVEL_L1_022:
	%SMW_InsertOriginalLevelData(022, SMW_U, LAYER_1)
LEVEL_L1_0F5:
	%SMW_InsertOriginalLevelData(0F5, SMW_U, LAYER_1)
LEVEL_L1_0BE:
	%SMW_InsertOriginalLevelData(0BE, SMW_U, LAYER_1)
LEVEL_L1_021:
	%SMW_InsertOriginalLevelData(021, SMW_U, LAYER_1)
LEVEL_L1_0FC:
	%SMW_InsertOriginalLevelData(0FC, SMW_U, LAYER_1)
LEVEL_L1_024:
	%SMW_InsertOriginalLevelData(024, SMW_U, LAYER_1)
LEVEL_L1_0CF:
	%SMW_InsertOriginalLevelData(0CF, SMW_U, LAYER_1)
LEVEL_L1_024_1:
	%SMW_InsertOriginalLevelData(Level0CF_ChocolateIsland2_Rexes, SMW_U, LAYER_1)
LEVEL_L1_024_2:
	%SMW_InsertOriginalLevelData(Level0CF_ChocolateIsland2_Slopes, SMW_U, LAYER_1)
LEVEL_L1_0CE:
	%SMW_InsertOriginalLevelData(0CE, SMW_U, LAYER_1)
LEVEL_L1_024_3:
	%SMW_InsertOriginalLevelData(Level0CE_ChocolateIsland2_Dinos, SMW_U, LAYER_1)
LEVEL_L1_024_4:
	%SMW_InsertOriginalLevelData(Level0CE_ChocolateIsland2_SecretExit, SMW_U, LAYER_1)
LEVEL_L1_0CD:
	%SMW_InsertOriginalLevelData(0CD, SMW_U, LAYER_1)
LEVEL_L1_024_5:
	%SMW_InsertOriginalLevelData(Level0CD_ChocolateIsland2_NormalExit, SMW_U, LAYER_1)
LEVEL_L1_023:
	%SMW_InsertOriginalLevelData(Level023_ChocolateIsland3_Main, SMW_J, LAYER_1)
LEVEL_L1_0D7:
	%SMW_InsertOriginalLevelData(0D7, SMW_U, LAYER_1)
LEVEL_L1_01B:
	%SMW_InsertOriginalLevelData(01B, SMW_U, LAYER_1)
LEVEL_L1_0EF:
	%SMW_InsertOriginalLevelData(0EF, SMW_U, LAYER_1)
LEVEL_L1_117:
	%SMW_InsertOriginalLevelData(117, SMW_U, LAYER_1)
LEVEL_L1_1ED:
	%SMW_InsertOriginalLevelData(1ED, SMW_U, LAYER_1)
LEVEL_L1_1EC:
	%SMW_InsertOriginalLevelData(1EC, SMW_U, LAYER_1)
LEVEL_L2_1EC:
	%SMW_InsertOriginalLevelData(1EC, SMW_U, LAYER_2)
LEVEL_L1_1EE:
	%SMW_InsertOriginalLevelData(1EE, SMW_U, LAYER_1)
LEVEL_L1_1C0:
	%SMW_InsertOriginalLevelData(1C0, SMW_U, LAYER_1)
namespace off
endmacro

macro DATATABLE_RT03_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

SpriteDataBank:
LEVEL_L1_GhostHouseEntrance:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_GhostHouse, SMW_U, LAYER_1)
LEVEL_L1_BlankEntrance:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_GhostHouse, SMW_U, LAYER_2)
LEVEL_L1_CastleEntrance:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_DayCastle, SMW_U, LAYER_1)
LEVEL_L1_104:
	%SMW_InsertOriginalLevelData(Level104_YoshisHouse, SMW_U, LAYER_1)
LEVEL_L1_NoYoshiEntrance1:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_Mountains, SMW_U, LAYER_1)
UnusedLevelData_GhostHouseExit2L1:
	%SMW_InsertOriginalLevelData(UnusedLevel_GhostHouseExit2, SMW_U, LAYER_1)
UnusedLevelData_BushTestL1:
	%SMW_InsertOriginalLevelData(UnusedLevel_BushTest, SMW_U, LAYER_1)
LEVEL_L1_CastleEntrance2:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_DarkCastle, SMW_U, LAYER_1)
LEVEL_L1_NoYoshiEntrance2:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_StarrySky, SMW_U, LAYER_1)
LEVEL_L1_NoYoshiEntrance3:
	%SMW_InsertOriginalLevelData(NoYoshiCutscene_Craggy, SMW_U, LAYER_1)
LEVEL_L1_108:
	%SMW_InsertOriginalLevelData(Level108_SlopeTest, SMW_U, LAYER_1)
namespace off
endmacro

macro DATATABLE_RT04_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

LEVEL_L1_01D:
	%SMW_InsertOriginalLevelData(01D, SMW_U, LAYER_1)
LEVEL_L1_0EA:
	%SMW_InsertOriginalLevelData(0EA, SMW_U, LAYER_1)
LEVEL_L1_01C:
	%SMW_InsertOriginalLevelData(01C, SMW_U, LAYER_1)
LEVEL_L1_0C0:
	%SMW_InsertOriginalLevelData(0C0, SMW_U, LAYER_1)
LEVEL_L1_0BD:
	%SMW_InsertOriginalLevelData(0BD, SMW_U, LAYER_1)
LEVEL_L1_01A:
	%SMW_InsertOriginalLevelData(01A, SMW_U, LAYER_1)
LEVEL_L2_01A:
	%SMW_InsertOriginalLevelData(01A, SMW_U, LAYER_2)
LEVEL_L1_0D4:
	%SMW_InsertOriginalLevelData(0D4, SMW_U, LAYER_1)
LEVEL_L2_0D4:
	%SMW_InsertOriginalLevelData(0D4, SMW_U, LAYER_2)
LEVEL_L1_0D3:
	%SMW_InsertOriginalLevelData(0D3, SMW_U, LAYER_1)
LEVEL_L1_018:
	%SMW_InsertOriginalLevelData(018, SMW_U, LAYER_1)
LEVEL_L1_0F8:
	%SMW_InsertOriginalLevelData(0F8, SMW_U, LAYER_1)
LEVEL_L1_0F7:
	%SMW_InsertOriginalLevelData(Level0F7_SunkenGhostShip_VerticalShaft, SMW_U, LAYER_1)
LEVEL_L1_116:
	%SMW_InsertOriginalLevelData(116, SMW_U, LAYER_1)
LEVEL_L1_1E5:
	%SMW_InsertOriginalLevelData(1E5, SMW_U, LAYER_1)
LEVEL_L1_1E4:
	%SMW_InsertOriginalLevelData(1E4, SMW_U, LAYER_1)
LEVEL_L1_115:
	%SMW_InsertOriginalLevelData(115, SMW_U, LAYER_1)
LEVEL_L2_115:
	%SMW_InsertOriginalLevelData(115, SMW_U, LAYER_2)
LEVEL_L1_1E3:
	%SMW_InsertOriginalLevelData(1E3, SMW_U, LAYER_1)
LEVEL_L2_1E3:
	%SMW_InsertOriginalLevelData(1E3, SMW_U, LAYER_2)
LEVEL_L1_1E2:
	%SMW_InsertOriginalLevelData(1E2, SMW_U, LAYER_1)
LEVEL_L2_1E2:
	%SMW_InsertOriginalLevelData(1E2, SMW_U, LAYER_2)
LEVEL_L1_0C8:
	%SMW_InsertOriginalLevelData(0C8, SMW_U, LAYER_1)
LEVEL_L1_114:
	%SMW_InsertOriginalLevelData(114, SMW_U, LAYER_1)
LEVEL_L1_1DD:
	%SMW_InsertOriginalLevelData(1DD, SMW_U, LAYER_1)
LEVEL_L1_1DB:
	%SMW_InsertOriginalLevelData(1DB, SMW_U, LAYER_1)
LEVEL_L1_113:
	%SMW_InsertOriginalLevelData(113, SMW_U, LAYER_1)
LEVEL_L1_1BB:
	%SMW_InsertOriginalLevelData(1BB, SMW_U, LAYER_1)
LEVEL_L1_10F:
	%SMW_InsertOriginalLevelData(10F, SMW_U, LAYER_1)
LEVEL_L1_1BF:
	%SMW_InsertOriginalLevelData(1BF, SMW_U, LAYER_1)
LEVEL_L1_110:
	%SMW_InsertOriginalLevelData(110, SMW_U, LAYER_1)
LEVEL_L1_1FE:
	%SMW_InsertOriginalLevelData(1FE, SMW_U, LAYER_1)
LEVEL_L1_111:
	%SMW_InsertOriginalLevelData(111, SMW_U, LAYER_1)
LEVEL_L2_111:
	%SMW_InsertOriginalLevelData(111, SMW_U, LAYER_2)
namespace off
endmacro

macro DATATABLE_RT05_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

LEVEL_L1_10D:
	%SMW_InsertOriginalLevelData(10D, SMW_U, LAYER_1)
LEVEL_L1_1D4:
	%SMW_InsertOriginalLevelData(1D4, SMW_U, LAYER_1)
LEVEL_L1_1D3:
	%SMW_InsertOriginalLevelData(1D3, SMW_U, LAYER_1)
LEVEL_L1_1D2:
	%SMW_InsertOriginalLevelData(1D2, SMW_U, LAYER_1)
LEVEL_L1_1D1:
	%SMW_InsertOriginalLevelData(1D1, SMW_U, LAYER_1)
LEVEL_L1_1D0:
	%SMW_InsertOriginalLevelData(1D0, SMW_U, LAYER_1)
LEVEL_L1_1CF:
	%SMW_InsertOriginalLevelData(1CF, SMW_U, LAYER_1)
LEVEL_L2_1CF:
	%SMW_InsertOriginalLevelData(1CF, SMW_U, LAYER_2)
LEVEL_L1_1CE:
	%SMW_InsertOriginalLevelData(1CE, SMW_U, LAYER_1)
LEVEL_L2_1CE:
	%SMW_InsertOriginalLevelData(1CE, SMW_U, LAYER_2)
LEVEL_L1_1CD:
	%SMW_InsertOriginalLevelData(1CD, SMW_U, LAYER_1)
LEVEL_L1_1CC:
	%SMW_InsertOriginalLevelData(1CC, SMW_U, LAYER_1)
LEVEL_L1_1BD:
	%SMW_InsertOriginalLevelData(1BD, SMW_U, LAYER_1)
LEVEL_L1_10E:
	%SMW_InsertOriginalLevelData(10E, SMW_U, LAYER_1)
LEVEL_L1_1C7:
	%SMW_InsertOriginalLevelData(1C7, SMW_U, LAYER_1)
LEVEL_L1_134:
	%SMW_InsertOriginalLevelData(134, SMW_U, LAYER_1)
LEVEL_L1_1D6:
	%SMW_InsertOriginalLevelData(1D6, SMW_U, LAYER_1)
LEVEL_L1_130:
	%SMW_InsertOriginalLevelData(130, SMW_U, LAYER_1)
LEVEL_L1_1D5:
	%SMW_InsertOriginalLevelData(1D5, SMW_U, LAYER_1)
LEVEL_L1_132:
	%SMW_InsertOriginalLevelData(132, SMW_U, LAYER_1)
LEVEL_L1_135:
	%SMW_InsertOriginalLevelData(135, SMW_U, LAYER_1)
LEVEL_L1_136:
	%SMW_InsertOriginalLevelData(136, SMW_U, LAYER_1)
LEVEL_L1_12A:
	%SMW_InsertOriginalLevelData(12A, SMW_U, LAYER_1)
LEVEL_L1_1C4:
	%SMW_InsertOriginalLevelData(1C4, SMW_U, LAYER_1)
LEVEL_L1_12B:
	%SMW_InsertOriginalLevelData(12B, SMW_U, LAYER_1)
LEVEL_L1_12C:
	%SMW_InsertOriginalLevelData(12C, SMW_U, LAYER_1)
LEVEL_L1_1C9:
	%SMW_InsertOriginalLevelData(1C9, SMW_U, LAYER_1)
LEVEL_L1_1C8:
	%SMW_InsertOriginalLevelData(1C8, SMW_U, LAYER_1)
LEVEL_L1_12D:
	%SMW_InsertOriginalLevelData(12D, SMW_U, LAYER_1)
LEVEL_L1_128:
	%SMW_InsertOriginalLevelData(128, SMW_U, LAYER_1)
LEVEL_L1_127:
	%SMW_InsertOriginalLevelData(127, SMW_U, LAYER_1)
LEVEL_L1_1E1:
	%SMW_InsertOriginalLevelData(1E1, SMW_U, LAYER_1)
LEVEL_L1_1E0:
	%SMW_InsertOriginalLevelData(1E0, SMW_U, LAYER_1)
LEVEL_L1_126:
	%SMW_InsertOriginalLevelData(126, SMW_U, LAYER_1)
LEVEL_L1_125:
	%SMW_InsertOriginalLevelData(Level125_Funky_Main, SMW_J, LAYER_1)
namespace off
endmacro

macro DATATABLE_RT06_SMW_LevelData(Address)
namespace SMW
%InsertMacroAtXPosition(<Address>)

UnusedLevelData_RideAmongTheCloudsSpr:
	%SMW_InsertOriginalLevelData(UnusedLevel_RideAmongTheClouds, SMW_U, SPRITES)
UnusedLevelData_MushroomScalesSpr:
	%SMW_InsertOriginalLevelData(UnusedLevel_MushroomScales, SMW_U, SPRITES)
LEVEL_SP_09B:
	%SMW_InsertOriginalLevelData(Level09B_BowserBattle, SMW_U, SPRITES)
LEVEL_SP_09A:
	%SMW_InsertOriginalLevelData(09A, SMW_U, SPRITES)
LEVEL_SP_099:
	%SMW_InsertOriginalLevelData(099, SMW_U, SPRITES)
LEVEL_SP_098:
	%SMW_InsertOriginalLevelData(098, SMW_U, SPRITES)
LEVEL_SP_097:
	%SMW_InsertOriginalLevelData(097, SMW_U, SPRITES)
LEVEL_SP_096:
	%SMW_InsertOriginalLevelData(Level096_LarryBattle, SMW_U, SPRITES)
LEVEL_SP_095:
	%SMW_InsertOriginalLevelData(Level095_ReznorBattle, SMW_U, SPRITES)
UnusedLevelData_LavaCaveSpr:
	%SMW_InsertOriginalLevelData(UnusedLevel_LavaCave, SMW_U, SPRITES)
UnusedLevelData_FollowTestSpr:
	%SMW_InsertOriginalLevelData(UnusedLevel_FollowTest, SMW_U, SPRITES)
UnusedLevelData_OldWendysCastleSpr:
	%SMW_InsertOriginalLevelData(UnusedLevel_OldWendysCastle, SMW_U, SPRITES)
LEVEL_SP_093:
	%SMW_InsertOriginalLevelData(Level093_LemmyBattle, SMW_U, SPRITES)
LEVEL_SP_094:
	%SMW_InsertOriginalLevelData(Level094_WendyBattle, SMW_U, SPRITES)
LEVEL_SP_0BD:
	%SMW_InsertOriginalLevelData(0BD, SMW_U, SPRITES)
LEVEL_SP_0C6:
	%SMW_InsertOriginalLevelData(0C6, SMW_U, SPRITES)
LEVEL_SP_0C4:
	%SMW_InsertOriginalLevelData(Level0C4_UnusedGhostHouseExit, SMW_U, SPRITES)
UnusedLevelData_GoalTape:
	%SMW_InsertOriginalLevelData(UnusedLevel_GhostHouseExit1, SMW_U, SPRITES)
UnusedLevelData_GoalTape2:
	%SMW_InsertOriginalLevelData(UnusedLevel_GhostHouseExit2, SMW_U, SPRITES)
LEVEL_SP_000:
	%SMW_InsertOriginalLevelData(Level000_BonusGame, SMW_U, SPRITES)
LEVEL_SP_0EB:
	%SMW_InsertOriginalLevelData(Level0EB_DonutGhostHouse_NormalExit, SMW_U, SPRITES)
LEVEL_SP_0D5:
	%SMW_InsertOriginalLevelData(0D5, SMW_U, SPRITES)
LEVEL_SP_10D:
	%SMW_InsertOriginalLevelData(10D, SMW_U, SPRITES)
LEVEL_SP_0C7:
	%SMW_InsertOriginalLevelData(Level0C7_TitleScreen, SMW_U, SPRITES)
LEVEL_SP_0C5:
	%SMW_InsertOriginalLevelData(Level0C5_IntroLevel, SMW_U, SPRITES)
LEVEL_SP_014:
	%SMW_InsertOriginalLevelData(014, SMW_U, SPRITES)
LEVEL_SP_0CA:
	%SMW_InsertOriginalLevelData(0CA, SMW_U, SPRITES)
LEVEL_SP_11B:
	%SMW_InsertOriginalLevelData(11B, SMW_U, SPRITES)
LEVEL_SP_1D8:
	%SMW_InsertOriginalLevelData(1D8, SMW_U, SPRITES)
LEVEL_SP_121:
	%SMW_InsertOriginalLevelData(121, SMW_U, SPRITES)
LEVEL_SP_1D7:
	%SMW_InsertOriginalLevelData(1D7, SMW_U, SPRITES)
LEVEL_SP_008:
	%SMW_InsertOriginalLevelData(008, SMW_U, SPRITES)
LEVEL_SP_0C9:
	%SMW_InsertOriginalLevelData(0C9, SMW_U, SPRITES)
LEVEL_SP_003:
	%SMW_InsertOriginalLevelData(003, SMW_U, SPRITES)
LEVEL_SP_105:
	%SMW_InsertOriginalLevelData(105, SMW_U, SPRITES)
LEVEL_SP_106:
	%SMW_InsertOriginalLevelData(106, SMW_U, SPRITES)
LEVEL_SP_1CA:
	%SMW_InsertOriginalLevelData(1CA, SMW_U, SPRITES)
LEVEL_SP_103:
	%SMW_InsertOriginalLevelData(103, SMW_U, SPRITES)
LEVEL_SP_1FD:
	%SMW_InsertOriginalLevelData(1FD, SMW_U, SPRITES)
LEVEL_SP_102:
	%SMW_InsertOriginalLevelData(102, SMW_U, SPRITES)
LEVEL_SP_1FF:
	%SMW_InsertOriginalLevelData(1FF, SMW_U, SPRITES)
LEVEL_SP_1BE:
	%SMW_InsertOriginalLevelData(Level1BE_YoshisIsland4_SideArea, SMW_ARCADE, SPRITES)
LEVEL_SP_101:
	%SMW_InsertOriginalLevelData(101, SMW_U, SPRITES)
LEVEL_SP_1FC:
	%SMW_InsertOriginalLevelData(1FC, SMW_U, SPRITES)
LEVEL_SP_1F6:
	%SMW_InsertOriginalLevelData(1F6, SMW_U, SPRITES)
LEVEL_SP_015:
	%SMW_InsertOriginalLevelData(015, SMW_U, SPRITES)
LEVEL_SP_0E3:
	%SMW_InsertOriginalLevelData(0E3, SMW_U, SPRITES)
LEVEL_SP_009:
	%SMW_InsertOriginalLevelData(Level009_DonutPlains2_Main, SMW_U, SPRITES)
LEVEL_SP_0E9:
	%SMW_InsertOriginalLevelData(0E9, SMW_U, SPRITES)
LEVEL_SP_004:
	%SMW_InsertOriginalLevelData(004, SMW_U, SPRITES)
LEVEL_SP_0DE:
	%SMW_InsertOriginalLevelData(0DE, SMW_U, SPRITES)
LEVEL_SP_0FE:
	%SMW_InsertOriginalLevelData(0FE, SMW_U, SPRITES)
LEVEL_SP_005:
	%SMW_InsertOriginalLevelData(005, SMW_U, SPRITES)
LEVEL_SP_006:
	%SMW_InsertOriginalLevelData(006, SMW_U, SPRITES)
LEVEL_SP_0D2:
	%SMW_InsertOriginalLevelData(0D2, SMW_U, SPRITES)
LEVEL_SP_0C3:
	%SMW_InsertOriginalLevelData(0C3, SMW_U, SPRITES)
LEVEL_SP_007:
	%SMW_InsertOriginalLevelData(007, SMW_U, SPRITES)
LEVEL_SP_0E8:
	%SMW_InsertOriginalLevelData(0E8, SMW_U, SPRITES)
LEVEL_SP_0E7:
	%SMW_InsertOriginalLevelData(0E7, SMW_U, SPRITES)
LEVEL_SP_0E5:
	%SMW_InsertOriginalLevelData(0E5, SMW_U, SPRITES)
LEVEL_SP_00A:
	%SMW_InsertOriginalLevelData(00A, SMW_U, SPRITES)
LEVEL_SP_0C2:
	%SMW_InsertOriginalLevelData(0C2, SMW_U, SPRITES)
LEVEL_SP_013:
	%SMW_InsertOriginalLevelData(Level013_DonutSecretHouse_Main, SMW_U, SPRITES)
LEVEL_SP_0ED:
	%SMW_InsertOriginalLevelData(Level0ED_DonutSecretHouse_SecondRoom, SMW_U, SPRITES)
LEVEL_SP_0F1:
	%SMW_InsertOriginalLevelData(0F1, SMW_U, SPRITES)
LEVEL_SP_0E4:
	%SMW_InsertOriginalLevelData(0E4, SMW_U, SPRITES)
LEVEL_SP_10B:
	%SMW_InsertOriginalLevelData(10B, SMW_U, SPRITES)
LEVEL_SP_1C6:
	%SMW_InsertOriginalLevelData(1C6, SMW_U, SPRITES)
LEVEL_SP_11A:
	%SMW_InsertOriginalLevelData(Level11A_VanillaDome1_Main, SMW_U, SPRITES)
LEVEL_SP_1EF:
	%SMW_InsertOriginalLevelData(1EF, SMW_U, SPRITES)
LEVEL_SP_118:
	%SMW_InsertOriginalLevelData(118, SMW_U, SPRITES)
LEVEL_SP_1C3:
	%SMW_InsertOriginalLevelData(1C3, SMW_U, SPRITES)
LEVEL_SP_107:
	%SMW_InsertOriginalLevelData(107, SMW_U, SPRITES)
LEVEL_SP_1EA:
	%SMW_InsertOriginalLevelData(1EA, SMW_U, SPRITES)
LEVEL_SP_10A:
	%SMW_InsertOriginalLevelData(10A, SMW_U, SPRITES)
LEVEL_SP_1C2:
	%SMW_InsertOriginalLevelData(1C2, SMW_U, SPRITES)
LEVEL_SP_119:
	%SMW_InsertOriginalLevelData(119, SMW_U, SPRITES)
LEVEL_SP_1F5:
	%SMW_InsertOriginalLevelData(1F5, SMW_U, SPRITES)
LEVEL_SP_11C:
	%SMW_InsertOriginalLevelData(Level11C_LemmysCastle_Main, SMW_U, SPRITES)
LEVEL_SP_1F3:
	%SMW_InsertOriginalLevelData(1F3, SMW_U, SPRITES)
LEVEL_SP_1F2:
	%SMW_InsertOriginalLevelData(1F2, SMW_U, SPRITES)
LEVEL_SP_109:
	%SMW_InsertOriginalLevelData(109, SMW_U, SPRITES)
LEVEL_SP_1F1:
	%SMW_InsertOriginalLevelData(1F1, SMW_U, SPRITES)
LEVEL_SP_1F0:
	%SMW_InsertOriginalLevelData(1F0, SMW_U, SPRITES)
LEVEL_SP_001:
	%SMW_InsertOriginalLevelData(001, SMW_U, SPRITES)
LEVEL_SP_0D8:
	%SMW_InsertOriginalLevelData(0D8, SMW_U, SPRITES)
LEVEL_SP_002:
	%SMW_InsertOriginalLevelData(002, SMW_U, SPRITES)
LEVEL_SP_00B:
	%SMW_InsertOriginalLevelData(00B, SMW_U, SPRITES)
LEVEL_SP_0E0:
	%SMW_InsertOriginalLevelData(0E0, SMW_U, SPRITES)
LEVEL_SP_00F:
	%SMW_InsertOriginalLevelData(00F, SMW_U, SPRITES)
LEVEL_SP_0BF:
	%SMW_InsertOriginalLevelData(0BF, SMW_U, SPRITES)
LEVEL_SP_010:
	%SMW_InsertOriginalLevelData(010, SMW_U, SPRITES)
LEVEL_SP_0C1:
	%SMW_InsertOriginalLevelData(0C1, SMW_U, SPRITES)
LEVEL_SP_00E:
	%SMW_InsertOriginalLevelData(00E, SMW_U, SPRITES)
LEVEL_SP_0DC:
	%SMW_InsertOriginalLevelData(0DC, SMW_U, SPRITES)
LEVEL_SP_0DB:
	%SMW_InsertOriginalLevelData(0DB, SMW_U, SPRITES)
LEVEL_SP_0D9:
	%SMW_InsertOriginalLevelData(0D9, SMW_U, SPRITES)
LEVEL_SP_011:
	%SMW_InsertOriginalLevelData(011, SMW_U, SPRITES)
LEVEL_SP_00C:
	%SMW_InsertOriginalLevelData(00C, SMW_U, SPRITES)
LEVEL_SP_00D:
	%SMW_InsertOriginalLevelData(00D, SMW_U, SPRITES)
LEVEL_SP_0DD:
	%SMW_InsertOriginalLevelData(0DD, SMW_U, SPRITES)
LEVEL_SP_11E:
	%SMW_InsertOriginalLevelData(11E, SMW_U, SPRITES)
LEVEL_SP_120:
	%SMW_InsertOriginalLevelData(120, SMW_U, SPRITES)
LEVEL_SP_123:
	%SMW_InsertOriginalLevelData(123, SMW_U, SPRITES)
LEVEL_SP_1F8:
	%SMW_InsertOriginalLevelData(1F8, SMW_U, SPRITES)
LEVEL_SP_020:
	%SMW_InsertOriginalLevelData(020, SMW_U, SPRITES)
LEVEL_SP_0CC:
	%SMW_InsertOriginalLevelData(Level0CC_RoyBattle, SMW_U, SPRITES)
LEVEL_SP_11D:
	%SMW_InsertOriginalLevelData(11D, SMW_U, SPRITES)
LEVEL_SP_1FA:
	%SMW_InsertOriginalLevelData(1FA, SMW_U, SPRITES)
LEVEL_SP_11F:
	%SMW_InsertOriginalLevelData(11F, SMW_U, SPRITES)
LEVEL_SP_1DF:
	%SMW_InsertOriginalLevelData(1DF, SMW_U, SPRITES)
LEVEL_SP_1C1:
	%SMW_InsertOriginalLevelData(1C1, SMW_U, SPRITES)
LEVEL_SP_122:
	%SMW_InsertOriginalLevelData(122, SMW_U, SPRITES)
LEVEL_SP_01F:
	%SMW_InsertOriginalLevelData(01F, SMW_U, SPRITES)
LEVEL_SP_0D6:
	%SMW_InsertOriginalLevelData(0D6, SMW_U, SPRITES)
LEVEL_SP_022:
	%SMW_InsertOriginalLevelData(022, SMW_U, SPRITES)
LEVEL_SP_0BE:
	%SMW_InsertOriginalLevelData(0BE, SMW_U, SPRITES)
LEVEL_SP_021:
	%SMW_InsertOriginalLevelData(021, SMW_U, SPRITES)
LEVEL_SP_0FC:
	%SMW_InsertOriginalLevelData(0FC, SMW_U, SPRITES)
LEVEL_SP_024:
	%SMW_InsertOriginalLevelData(024, SMW_U, SPRITES)
LEVEL_SP_0CF:
	%SMW_InsertOriginalLevelData(0CF, SMW_U, SPRITES)
LEVEL_SP_024_1:
	%SMW_InsertOriginalLevelData(Level0CF_ChocolateIsland2_Rexes, SMW_U, SPRITES)
LEVEL_SP_024_2:
	%SMW_InsertOriginalLevelData(Level0CF_ChocolateIsland2_Slopes, SMW_U, SPRITES)
LEVEL_SP_0CE:
	%SMW_InsertOriginalLevelData(0CE, SMW_U, SPRITES)
LEVEL_SP_024_3:
	%SMW_InsertOriginalLevelData(Level0CE_ChocolateIsland2_Dinos, SMW_U, SPRITES)
LEVEL_SP_024_4:
	%SMW_InsertOriginalLevelData(Level0CE_ChocolateIsland2_SecretExit, SMW_U, SPRITES)
LEVEL_SP_0CD:
	%SMW_InsertOriginalLevelData(0CD, SMW_U, SPRITES)
LEVEL_SP_024_5:
	%SMW_InsertOriginalLevelData(Level0CD_ChocolateIsland2_NormalExit, SMW_U, SPRITES)
LEVEL_SP_023:
	%SMW_InsertOriginalLevelData(Level023_ChocolateIsland3_Main, SMW_U, SPRITES)
LEVEL_SP_0D7:
	%SMW_InsertOriginalLevelData(0D7, SMW_U, SPRITES)
LEVEL_SP_01B:
	%SMW_InsertOriginalLevelData(01B, SMW_U, SPRITES)
LEVEL_SP_0EF:
	%SMW_InsertOriginalLevelData(0EF, SMW_U, SPRITES)
LEVEL_SP_117:
	%SMW_InsertOriginalLevelData(117, SMW_U, SPRITES)
LEVEL_SP_1ED:
	%SMW_InsertOriginalLevelData(1ED, SMW_U, SPRITES)
LEVEL_SP_1EC:
	%SMW_InsertOriginalLevelData(1EC, SMW_U, SPRITES)
LEVEL_SP_1C0:
	%SMW_InsertOriginalLevelData(1C0, SMW_U, SPRITES)
LEVEL_SP_01D:
	%SMW_InsertOriginalLevelData(01D, SMW_U, SPRITES)
LEVEL_SP_0EA:
	%SMW_InsertOriginalLevelData(0EA, SMW_U, SPRITES)
LEVEL_SP_01C:
	%SMW_InsertOriginalLevelData(01C, SMW_U, SPRITES)
LEVEL_SP_0C0:
	%SMW_InsertOriginalLevelData(0C0, SMW_U, SPRITES)
LEVEL_SP_01A:
	%SMW_InsertOriginalLevelData(01A, SMW_U, SPRITES)
LEVEL_SP_0D4:
	%SMW_InsertOriginalLevelData(0D4, SMW_U, SPRITES)
LEVEL_SP_0D3:
	%SMW_InsertOriginalLevelData(0D3, SMW_U, SPRITES)
LEVEL_SP_018:
	%SMW_InsertOriginalLevelData(018, SMW_U, SPRITES)
LEVEL_SP_0F8:
	%SMW_InsertOriginalLevelData(0F8, SMW_U, SPRITES)
LEVEL_SP_0F7:
	%SMW_InsertOriginalLevelData(Level0F7_SunkenGhostShip_VerticalShaft, SMW_J, SPRITES)
LEVEL_SP_116:
	%SMW_InsertOriginalLevelData(116, SMW_U, SPRITES)
LEVEL_SP_1E5:
	%SMW_InsertOriginalLevelData(1E5, SMW_U, SPRITES)
LEVEL_SP_115:
	%SMW_InsertOriginalLevelData(115, SMW_U, SPRITES)
LEVEL_SP_1E3:
	%SMW_InsertOriginalLevelData(1E3, SMW_U, SPRITES)
LEVEL_SP_1E2:
	%SMW_InsertOriginalLevelData(1E2, SMW_U, SPRITES)
LEVEL_SP_0C8:
	%SMW_InsertOriginalLevelData(0C8, SMW_U, SPRITES)
LEVEL_SP_114:
	%SMW_InsertOriginalLevelData(114, SMW_U, SPRITES)
LEVEL_SP_1DD:
	%SMW_InsertOriginalLevelData(1DD, SMW_U, SPRITES)
LEVEL_SP_1DB:
	%SMW_InsertOriginalLevelData(1DB, SMW_U, SPRITES)
LEVEL_SP_113:
	%SMW_InsertOriginalLevelData(113, SMW_U, SPRITES)
LEVEL_SP_10F:
	%SMW_InsertOriginalLevelData(10F, SMW_U, SPRITES)
LEVEL_SP_1BF:
	%SMW_InsertOriginalLevelData(1BF, SMW_U, SPRITES)
LEVEL_SP_110:
	%SMW_InsertOriginalLevelData(110, SMW_U, SPRITES)
LEVEL_SP_1FE:
	%SMW_InsertOriginalLevelData(1FE, SMW_U, SPRITES)
LEVEL_SP_1EB:
	%SMW_InsertOriginalLevelData(1EB, SMW_U, SPRITES)
LEVEL_SP_111:
	%SMW_InsertOriginalLevelData(111, SMW_U, SPRITES)
LEVEL_SP_1D4:
	%SMW_InsertOriginalLevelData(1D4, SMW_U, SPRITES)
LEVEL_SP_1D3:
	%SMW_InsertOriginalLevelData(1D3, SMW_U, SPRITES)
LEVEL_SP_1D2:
	%SMW_InsertOriginalLevelData(1D2, SMW_U, SPRITES)
LEVEL_SP_1D1:
	%SMW_InsertOriginalLevelData(1D1, SMW_U, SPRITES)
LEVEL_SP_1CF:
	%SMW_InsertOriginalLevelData(1CF, SMW_U, SPRITES)
LEVEL_SP_1CE:
	%SMW_InsertOriginalLevelData(1CE, SMW_U, SPRITES)
LEVEL_SP_1CD:
	%SMW_InsertOriginalLevelData(1CD, SMW_U, SPRITES)
LEVEL_SP_1CC:
	%SMW_InsertOriginalLevelData(1CC, SMW_U, SPRITES)
LEVEL_SP_10E:
	%SMW_InsertOriginalLevelData(10E, SMW_U, SPRITES)
LEVEL_SP_1C7:
	%SMW_InsertOriginalLevelData(1C7, SMW_U, SPRITES)
LEVEL_SP_134:
	%SMW_InsertOriginalLevelData(134, SMW_U, SPRITES)
LEVEL_SP_130:
	%SMW_InsertOriginalLevelData(130, SMW_U, SPRITES)
LEVEL_SP_132:
	%SMW_InsertOriginalLevelData(132, SMW_U, SPRITES)
LEVEL_SP_135:
	%SMW_InsertOriginalLevelData(135, SMW_U, SPRITES)
LEVEL_SP_136:
	%SMW_InsertOriginalLevelData(136, SMW_U, SPRITES)
LEVEL_SP_12A:
	%SMW_InsertOriginalLevelData(12A, SMW_U, SPRITES)
LEVEL_SP_1C4:
	%SMW_InsertOriginalLevelData(1C4, SMW_U, SPRITES)
LEVEL_SP_12B:
	%SMW_InsertOriginalLevelData(12B, SMW_U, SPRITES)
LEVEL_SP_12C:
	%SMW_InsertOriginalLevelData(12C, SMW_U, SPRITES)
LEVEL_SP_1C8:
	%SMW_InsertOriginalLevelData(1C8, SMW_U, SPRITES)
LEVEL_SP_12D:
	%SMW_InsertOriginalLevelData(12D, SMW_U, SPRITES)
LEVEL_SP_128:
	%SMW_InsertOriginalLevelData(128, SMW_U, SPRITES)
LEVEL_SP_127:
	%SMW_InsertOriginalLevelData(127, SMW_U, SPRITES)
LEVEL_SP_126:
	%SMW_InsertOriginalLevelData(126, SMW_U, SPRITES)
LEVEL_SP_125:
	%SMW_InsertOriginalLevelData(Level125_Funky_Main, SMW_U, SPRITES)
LEVEL_SP_104:
	%SMW_InsertOriginalLevelData(Level104_YoshisHouse, SMW_U, SPRITES)
LEVEL_SP_Test:
	%SMW_InsertOriginalLevelData(Level025_TestLevel, SMW_U, SPRITES)
namespace off
endmacro

;#############################################################################################################
;#############################################################################################################

macro INLINEDATATABLE_RT00_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0F : !SMW_JBytes = $11 : !SMW_E1Bytes = $1D : !SMW_E2Bytes = $1B : !SMASW_UBytes = $04 : !SMASW_EBytes = $06 : !SMW_ARCADEBytes = $36
	
	%SMW_InsertOriginalFreespace(!ROMID, 00)
endmacro

macro INLINEDATATABLE_RT01_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $13 : !SMW_JBytes = $12 : !SMW_E1Bytes = $00 : !SMW_E2Bytes = $00 : !SMASW_UBytes = $03 : !SMASW_EBytes = $02 : !SMW_ARCADEBytes = $03

; LM: Lunar Magic inserts some custom code here:
; $00BA4E - JML to the VBlank routine. Used by the FastROM patch
; $00BA52 - JML to handle setting !REGISTER_EnableFastROM. Used by the FastROM patch

	%SMW_InsertOriginalFreespace(!ROMID, 01)
endmacro

macro INLINEDATATABLE_RT02_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0D : !SMW_JBytes = $0D : !SMW_E1Bytes = $0D : !SMW_E2Bytes = $0C : !SMASW_UBytes = $09 : !SMASW_EBytes = $19 : !SMW_ARCADEBytes = $0D
	
	%SMW_InsertOriginalFreespace(!ROMID, 02)
endmacro

macro INLINEDATATABLE_RT03_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $1B : !SMW_JBytes = $1B : !SMW_E1Bytes = $4D : !SMW_E2Bytes = $4D : !SMASW_UBytes = $1B : !SMASW_EBytes = $2E : !SMW_ARCADEBytes = $1B
	
	%SMW_InsertOriginalFreespace(!ROMID, 03)
endmacro

macro INLINEDATATABLE_RT04_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $2D : !SMW_JBytes = $90 : !SMW_E1Bytes = $0B : !SMW_E2Bytes = $0B : !SMASW_UBytes = $6D : !SMASW_EBytes = $1D : !SMW_ARCADEBytes = $2D
	
	%SMW_InsertOriginalFreespace(!ROMID, 04)
endmacro

macro INLINEDATATABLE_RT05_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $05 : !SMW_JBytes = $02 : !SMW_E1Bytes = $05 : !SMW_E2Bytes = $00 : !SMASW_UBytes = $05 : !SMASW_EBytes = $00 : !SMW_ARCADEBytes = $05
	
	%SMW_InsertOriginalFreespace(!ROMID, 05)
endmacro

macro INLINEDATATABLE_RT06_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0C : !SMW_JBytes = $00 : !SMW_E1Bytes = $06 : !SMW_E2Bytes = $06 : !SMASW_UBytes = $0C : !SMASW_EBytes = $06 : !SMW_ARCADEBytes = $0C
	
	%SMW_InsertOriginalFreespace(!ROMID, 06)
endmacro

macro INLINEDATATABLE_RT07_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $18 : !SMW_JBytes = $0D : !SMW_E1Bytes = $11 : !SMW_E2Bytes = $0A : !SMASW_UBytes = $18 : !SMASW_EBytes = $0A : !SMW_ARCADEBytes = $18
	
	%SMW_InsertOriginalFreespace(!ROMID, 07)
endmacro

macro INLINEDATATABLE_RT08_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $41 : !SMW_JBytes = $3E : !SMW_E1Bytes = $41 : !SMW_E2Bytes = $41 : !SMASW_UBytes = $41 : !SMASW_EBytes = $41 : !SMW_ARCADEBytes = $41

	%SMW_InsertOriginalFreespace(!ROMID, 08)
endmacro

macro INLINEDATATABLE_RT09_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $44 : !SMW_JBytes = $26 : !SMW_E1Bytes = $44 : !SMW_E2Bytes = $44 : !SMASW_UBytes = $44 : !SMASW_EBytes = $44 : !SMW_ARCADEBytes = $44
	
	%SMW_InsertOriginalFreespace(!ROMID, 09)
endmacro

macro INLINEDATATABLE_RT10_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $62 : !SMW_JBytes = $46 : !SMW_E1Bytes = $62 : !SMW_E2Bytes = $62 : !SMASW_UBytes = $62 : !SMASW_EBytes = $62 : !SMW_ARCADEBytes = $62
	
	%SMW_InsertOriginalFreespace(!ROMID, 10)
endmacro

macro INLINEDATATABLE_RT11_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $1E : !SMW_JBytes = $05 : !SMW_E1Bytes = $24 : !SMW_E2Bytes = $30 : !SMASW_UBytes = $1E : !SMASW_EBytes = $30 : !SMW_ARCADEBytes = $1E
	
	%SMW_InsertOriginalFreespace(!ROMID, 11)
endmacro

macro INLINEDATATABLE_RT12_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

; LM: Lunar Magic inserts some custom code here:
; $03BA10 - Routine that allows you to make any level bring up the save prompt.
; $03BA50 - Routine that lets you prevent level re-entry if the level is beaten.
; $03BB00 - Routine that sets !RAM_SMW_ExitTBLProp and !RAM_SMW_Use2ndExitFlag to 00 when warping to the bonus game or Yoshi wings rooms.
; $03BB20 - Routine for displaying custom level names.
; $03BB90 - Routine for displaying custom messages
; $03BCA0 - Routine for the Sprite 19 fix
; $03BCC0 - Alt ExGFX pointers, used for ExAnimation
; $03BCDC - JML that points to a routine that calculates which screen you're on in a level with custom dimensions
; $03BCE0 - Routine for handling Secondary Entrance tables $05FE00 and the two new ones added in 3.00. 
; $03BE80 - Pre 2.53+ overworld expansion hijack - 16-bit level message pointer offsets
;           Post 2.53+ overworld expansion hijack - Initial level flags table
!SMW_UBytes = $05FE : !SMW_JBytes = $05FE : !SMW_E1Bytes = $05FE : !SMW_E2Bytes = $05FE : !SMASW_UBytes = $05F0 : !SMASW_EBytes = $05F1 : !SMW_ARCADEBytes = $05FE
	
	%SMW_InsertOriginalFreespace(!ROMID, 12)
endmacro

macro INLINEDATATABLE_RT13_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $54 : !SMW_JBytes = $72 : !SMW_E1Bytes = $54 : !SMW_E2Bytes = $54 : !SMASW_UBytes = $54 : !SMASW_EBytes = $54 : !SMW_ARCADEBytes = $54
	
	%SMW_InsertOriginalFreespace(!ROMID, 13)
endmacro

macro INLINEDATATABLE_RT14_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $03A4 : !SMW_JBytes = $03AB : !SMW_E1Bytes = $03A4 : !SMW_E2Bytes = $03A4 : !SMASW_UBytes = $030F : !SMASW_EBytes = $03A2 : !SMW_ARCADEBytes = $03A4
	
	%SMW_InsertOriginalFreespace(!ROMID, 14)
endmacro

macro INLINEDATATABLE_RT15_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) == $00
;garbage
dw $00E8
fillbyte $00	:	fill 16
endif

; LM: Some stuff Lunar Magic inserts here:
; $03FDFF = If $00, display the effects of these settings in the editor
; $03FE00 = Level Exanimation flags. PTLG----
;	     P = disable original game's palette animations
;	     T = disable original game's tile animations
;	     L = disable LM's level animations
;	     G = disable LM's global animations
;           ---- = Unused
!SMW_UBytes = $0220 : !SMW_JBytes = $0220 : !SMW_E1Bytes = $0220 : !SMW_E2Bytes = $0220 : !SMASW_UBytes = $0232 : !SMASW_EBytes = $0232 : !SMW_ARCADEBytes = $0220
	
	%SMW_InsertOriginalFreespace(!ROMID, 15)
endmacro

macro INLINEDATATABLE_RT16_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $024A : !SMW_JBytes = $0306 : !SMW_E1Bytes = $024A : !SMW_E2Bytes = $024A : !SMASW_UBytes = $023E : !SMASW_EBytes = $023E : !SMW_ARCADEBytes = $026B
	
	%SMW_InsertOriginalFreespace(!ROMID, 16)
endmacro

macro INLINEDATATABLE_RT17_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0342 : !SMW_JBytes = $0340 : !SMW_E1Bytes = $0342 : !SMW_E2Bytes = $0342 : !SMASW_UBytes = $02C2 : !SMASW_EBytes = $02C2 : !SMW_ARCADEBytes = $0342
	
	%SMW_InsertOriginalFreespace(!ROMID, 17)
endmacro

macro INLINEDATATABLE_RT18_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $4F : !SMW_JBytes = $57 : !SMW_E1Bytes = $4F : !SMW_E2Bytes = $4F : !SMASW_UBytes = $5B : !SMASW_EBytes = $5B : !SMW_ARCADEBytes = $4F
	
	%SMW_InsertOriginalFreespace(!ROMID, 18)
endmacro

macro INLINEDATATABLE_RT19_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $01E7 : !SMW_JBytes = $01E7 : !SMW_E1Bytes = $01E7 : !SMW_E2Bytes = $01C2 : !SMASW_UBytes = $01E7 : !SMASW_EBytes = $01C2 : !SMW_ARCADEBytes = $01E7
	
	%SMW_InsertOriginalFreespace(!ROMID, 19)
endmacro

macro INLINEDATATABLE_RT20_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $1E : !SMW_JBytes = $1E : !SMW_E1Bytes = $1E : !SMW_E2Bytes = $1E : !SMASW_UBytes = $1E : !SMASW_EBytes = $1E : !SMW_ARCADEBytes = $1E
	
	%SMW_InsertOriginalFreespace(!ROMID, 20)
endmacro

macro INLINEDATATABLE_RT21_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $5A : !SMW_JBytes = $048A : !SMW_E1Bytes = $5A : !SMW_E2Bytes = $4A : !SMASW_UBytes = $50 : !SMASW_EBytes = $40 : !SMW_ARCADEBytes = $84
	
	%SMW_InsertOriginalFreespace(!ROMID, 21)
endmacro

macro INLINEDATATABLE_RT22_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $16 : !SMW_JBytes = $0114 : !SMW_E1Bytes = $16 : !SMW_E2Bytes = $16 : !SMASW_UBytes = $16 : !SMASW_EBytes = $16 : !SMW_ARCADEBytes = $16
	
	%SMW_InsertOriginalFreespace(!ROMID, 22)
endmacro

macro INLINEDATATABLE_RT23_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $A0 : !SMW_JBytes = $A0 : !SMW_E1Bytes = $A0 : !SMW_E2Bytes = $A0 : !SMASW_UBytes = $A0 : !SMASW_EBytes = $A0 : !SMW_ARCADEBytes = $A0
	
	%SMW_InsertOriginalFreespace(!ROMID, 23)
endmacro

macro INLINEDATATABLE_RT24_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

; LM: Lunar Magic inserts some custom routines here:
; $05DC50 - Routine that checks whether a screen exit is a SMW one or a LM modified one.
; $05DC80 - Routine that reads from DATA_05FE00 or its expanded version
; $05DC85 - Routine that reads from a custom level data table
; $05DC8A - Routine that reads from another custom level data table
; $05DCB0 - Routine that allows a level to trigger secret exit 2 and 3?
; $05DCD0 - Routine that removes the restriction for whether a main map or submap level can access a level from the first/second half of the level table respectively.
; $05DD00 - Routine that sets !RAM_SMW_Flag_UnderwaterLevel and !RAM_SMW_Flag_IceLevel based on !RAM_SMW_Misc_LevelHeaderEntranceSettings
; $05DD30 - Routine that indexes $05DE00, $06FC00, $06FE00, and sets the player position from a main entrance using method 2
; $05DD80 - Routine for initializing the overworld level flags
; $05DDA0 - Pre 2.53+ overworld expansion hijack - Initial level flags table
;           Post 2.53+ overworld expansion hijack - Empty
; $05DE00 - Secondary Entrance table. LWPYX---
;           L = Slippery flag
;           W = Water Flag
;           P = Flag to use X/Y position method 2
;           Y = Bit 5 of the Y position, for method 2
;           X = Bit 4 of the X position, for method 2
;           (X/Y are switched in vertical levels)
!SMW_UBytes = $03BA : !SMW_JBytes = $03BA : !SMW_E1Bytes = $03BA : !SMW_E2Bytes = $03BA : !SMASW_UBytes = $03BA : !SMASW_EBytes = $03BA : !SMW_ARCADEBytes = $03BA
	
	%SMW_InsertOriginalFreespace(!ROMID, 24)
endmacro

macro INLINEDATATABLE_RT25_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $47 : !SMW_JBytes = $4A : !SMW_E1Bytes = $47 : !SMW_E2Bytes = $47 : !SMASW_UBytes = $47 : !SMASW_EBytes = $47 : !SMW_ARCADEBytes = $47
	
	%SMW_InsertOriginalFreespace(!ROMID, 25)
endmacro

macro INLINEDATATABLE_RT26_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $069C : !SMW_JBytes = $069F : !SMW_E1Bytes = $069C : !SMW_E2Bytes = $069C : !SMASW_UBytes = $069C : !SMASW_EBytes = $069C : !SMW_ARCADEBytes = $069C
	
	%SMW_InsertOriginalFreespace(!ROMID, 26)
endmacro

macro INLINEDATATABLE_RT27_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

; LM: Lunar Magic inserts some custom code here:
; $06F540 - Routine that gets the FG map16 page number of a tile
; $06F5D0 - Routine that allows custom map16 to work for tiles modified through "SMW_GenerateTile"
; $06F5E4 - Routine that allows custom map16 to work in submap switching.
; $06F600 - Routine for getting the acts like setting for a map16 tile
; $06F660 - Routine for running custom block code for Mario's offsets
; $06F700 - Routine for running custom block code for sprite offsets
; $06F760 - Routine for running custom block code for the cape offset
; $06F7A0 - Routine for running custom block code for the fireball offset
; $06FC00 - Extra Secondary Level Header data 1
; $06FE00 - Extra Secondary Level Header data 2
!SMW_UBytes = $0AC7 : !SMW_JBytes = $0ACD : !SMW_E1Bytes = $0AC7 : !SMW_E2Bytes = $0AC7 : !SMASW_UBytes = $0AC7 : !SMASW_EBytes = $C7 : !SMW_ARCADEBytes = $0AC7
	
	%SMW_InsertOriginalFreespace(!ROMID, 27)
endmacro

macro INLINEDATATABLE_RT28_SMW_EmptySpace(Address)				; Note: This is a SMAS (PAL) exclusive routine macro
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $00 : !SMW_JBytes = $00 : !SMW_E1Bytes = $00 : !SMW_E2Bytes = $00 : !SMASW_UBytes = $00 : !SMASW_EBytes = $092E : !SMW_ARCADEBytes = $00

	%SMW_InsertOriginalFreespace(!ROMID, 28)
endmacro

macro INLINEDATATABLE_RT29_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $13 : !SMW_JBytes = $13 : !SMW_E1Bytes = $13 : !SMW_E2Bytes = $13 : !SMASW_UBytes = $13 : !SMASW_EBytes = $13 : !SMW_ARCADEBytes = $13
	
	%SMW_InsertOriginalFreespace(!ROMID, 29)
endmacro

macro INLINEDATATABLE_RT30_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0487 : !SMW_JBytes = $0487 : !SMW_E1Bytes = $0487 : !SMW_E2Bytes = $0487 : !SMASW_UBytes = $0487 : !SMASW_EBytes = $0487 : !SMW_ARCADEBytes = $0487
	
	%SMW_InsertOriginalFreespace(!ROMID, 30)
endmacro

macro INLINEDATATABLE_RT31_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $DA : !SMW_JBytes = $E6 : !SMW_E1Bytes = $DA : !SMW_E2Bytes = $DA : !SMASW_UBytes = $DA : !SMASW_EBytes = $DA : !SMW_ARCADEBytes = $DA
	
	%SMW_InsertOriginalFreespace(!ROMID, 31)
endmacro

macro INLINEDATATABLE_RT32_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0891 : !SMW_JBytes = $089A : !SMW_E1Bytes = $0891 : !SMW_E2Bytes = $0891 : !SMASW_UBytes = $0891 : !SMASW_EBytes = $0891 : !SMW_ARCADEBytes = $0894
	
	%SMW_InsertOriginalFreespace(!ROMID, 32)
endmacro

macro INLINEDATATABLE_RT33_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0370 : !SMW_JBytes = $0370 : !SMW_E1Bytes = $0370 : !SMW_E2Bytes = $0370 : !SMASW_UBytes = $0370 : !SMASW_EBytes = $0370 : !SMW_ARCADEBytes = $0370
	
	%SMW_InsertOriginalFreespace(!ROMID, 33)
endmacro

macro INLINEDATATABLE_RT34_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $02F3 : !SMW_JBytes = $017E : !SMW_E1Bytes = $02F3 : !SMW_E2Bytes = $0265 : !SMASW_UBytes = $02F3 : !SMASW_EBytes = $0265 : !SMW_ARCADEBytes = $02F3
	
	%SMW_InsertOriginalFreespace(!ROMID, 34)
endmacro

macro INLINEDATATABLE_RT35_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $16 : !SMW_JBytes = $16 : !SMW_E1Bytes = $16 : !SMW_E2Bytes = $16 : !SMASW_UBytes = $16 : !SMASW_EBytes = $16 : !SMW_ARCADEBytes = $16
	
	%SMW_InsertOriginalFreespace(!ROMID, 35)
endmacro

macro INLINEDATATABLE_RT36_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $0191 : !SMW_JBytes = $0638 : !SMW_E1Bytes = $0191 : !SMW_E2Bytes = $017F : !SMASW_UBytes = $018E : !SMASW_EBytes = $017C : !SMW_ARCADEBytes = $0191
	
	%SMW_InsertOriginalFreespace(!ROMID, 36)
endmacro

macro INLINEDATATABLE_RT37_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $91 : !SMW_JBytes = $13 : !SMW_E1Bytes = $91 : !SMW_E2Bytes = $91 : !SMASW_UBytes = $91 : !SMASW_EBytes = $91 : !SMW_ARCADEBytes = $6A
	
	%SMW_InsertOriginalFreespace(!ROMID, 37)
endmacro

macro INLINEDATATABLE_RT38_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $21 : !SMW_JBytes = $21 : !SMW_E1Bytes = $21 : !SMW_E2Bytes = $21 : !SMASW_UBytes = $21 : !SMASW_EBytes = $21 : !SMW_ARCADEBytes = $21
	
	%SMW_InsertOriginalFreespace(!ROMID, 38)
endmacro

macro INLINEDATATABLE_RT39_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $98 : !SMW_JBytes = $97 : !SMW_E1Bytes = $98 : !SMW_E2Bytes = $98 : !SMASW_UBytes = $98 : !SMASW_EBytes = $98 : !SMW_ARCADEBytes = $98
	
	%SMW_InsertOriginalFreespace(!ROMID, 39)
endmacro

macro INLINEDATATABLE_RT40_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $01E0 : !SMW_JBytes = $01E0 : !SMW_E1Bytes = $01E0 : !SMW_E2Bytes = $01DA : !SMASW_UBytes = $01E0 : !SMASW_EBytes = $01DA : !SMW_ARCADEBytes = $01E0
	
	%SMW_InsertOriginalFreespace(!ROMID, 40)
endmacro

macro INLINEDATATABLE_RT41_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
!SMW_UBytes = $017E : !SMW_JBytes = $017E : !SMW_E1Bytes = $017E : !SMW_E2Bytes = $017E : !SMASW_UBytes = $017E : !SMASW_EBytes = $017E : !SMW_ARCADEBytes = $017E
	
	%SMW_InsertOriginalFreespace(!ROMID, 41)
endmacro

macro INLINEDATATABLE_RT42_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

; LM: Lunar Magic inserts some stuff here:
; $0DE190 - Routine to allow for using long addressing for secondary entrance table DATA_05F800.
; $0DE197 - Routine to allow for using long addressing for secondary entrance table DATA_05FA00.
; $0DE19E - Routine to allow for using long addressing for secondary entrance table DATA_05FC00.
; $0DE1B0 - Extended Object 02 (Custom Screen Exit)
; $0DE1D0 - Extended Object 01 (Modified Screen Jump)
; $0DE1E0 - Extended Object 03 (Horizontal level mode 1C screen jump)
; $0DE1F0 - Routine that initializes $8A and $8B during level load.
!SMW_UBytes = $017A : !SMW_JBytes = $017A : !SMW_E1Bytes = $017A : !SMW_E2Bytes = $017A : !SMASW_UBytes = $017A : !SMASW_EBytes = $017A : !SMW_ARCADEBytes = $017A
	
	%SMW_InsertOriginalFreespace(!ROMID, 42)
endmacro

macro INLINEDATATABLE_RT43_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

; LM: Lunar Magic inserts some routines here:
; $0DF08A - Standard Object 22/23 (Page 00/01 Direct Map16 object)
; $0DF0E0 - Standard Object 24 (Old GFX Bypass, FG/BG/Sprite)
; $0DF0F0 - Standard Object 25 (Old GFX Bypass, AN2)
; $0DF130 - Standard Object 26 (Music Bypass)
; $0DF150 - Standard Object 27 (Page 2-3F Direct Map16 Object)
; $0DF160 - Standard Object 28 (Time Limit Bypass)
; $0DF1C0 - Routine that handles the direct map16 objects
; $0DF290 - Routine that handles conditional map16
!SMW_UBytes = $0276 : !SMW_JBytes = $0277 : !SMW_E1Bytes = $0276 : !SMW_E2Bytes = $0276 : !SMASW_UBytes = $0276 : !SMASW_EBytes = $0276 : !SMW_ARCADEBytes = $0276
	
	%SMW_InsertOriginalFreespace(!ROMID, 43)
endmacro

macro INLINEDATATABLE_RT44_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

; LM: Lunar Magic inserts some routines here:
; $0DFEA0 - Routine that preserves the level data pointer and screen
; $0DFEB2 - Routine that restores the level data pointer and screen
; $0DFED0 - Routine that handles horizontal subscreen crossing in LM objects
; $0DFF10 - Routine that handles vertical subscreen crossing in LM objects
; $0DFF50 - Standard Object 29 (Page 40-7F Direct Map16 Object)
!SMW_UBytes = $0161 : !SMW_JBytes = $0315 : !SMW_E1Bytes = $0161 : !SMW_E2Bytes = $0161 : !SMASW_UBytes = $0161 : !SMASW_EBytes = $0161 : !SMW_ARCADEBytes = $0161
	
	%SMW_InsertOriginalFreespace(!ROMID, 44)
endmacro

macro INLINEDATATABLE_RT45_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)
;garbage
if !Define_Global_ROMToAssemble&(!ROM_SMW_J|!ROM_SMASW_U|!ROM_SMASW_E) != $00
	if !Define_Global_ROMToAssemble&(!ROM_SMW_J) != $00
		dw $0098
	else
		dw $0077
	endif
	db $00,$00,$00
	dw $FF01
	db $00,$00,$00,$00,$00,$00
else
	dw $00E0
	fillbyte $00	:	fill 19
endif

; LM: Lunar Magic inserts a lot of custom routines here.
; $0EF100 - Bank bytes for the sprite list pointers
; $0EF300 - Routine for setting the bank byte of the sprite list pointer.
; $0EF30C - 24-bit pointer to the custom sprite list size table
; $0EF310 - Level Layer 2 flags. bbBB-LD-
;           D = What type of data the layer 2 is: object (0) or tilemap (1)
;           L = Flag to indicate usage of the high nibble
;           BB = When L is set: Map16 bank to use for the BG
;           bbBB = When L is clear, used as the high byte for all BG Map16 tiles (deprecated?)
;           -- = Unused
; $0EF510 - Routine for handling the layer 2 flags
; $0EF550 - Routine that sets !LMRAM_Misc_CurrentLevelMinusOneLo
; $0EF55D - 24-bit pointer to the overworld custom sprite data.
; $0EF560 - Routine that initializes a couple level RAM addresses.
; $0EF570 - Routine that loads custom level palettes.
; $0EF600 - 24-bit custom level palette pointers
; $0EFC00 - Routine that converts 4BPP graphics into 3BPP. Used by the loading letters and the mode 7 tilemaps (aside from the Iggy/Larry platform)
; $0EFC50 - Routine that backs up the contents of $7EB900 to $7E2000 (Called during the enemy rollcall)
; $0EFC80 - Routine that restores the contents of $7EB900 from $7E2000 (Called during the enemy rollcall)
; $0EFD00 - Routine for handling the Background map16 pages.
; $0EFD50 - 24-bit Background map16 pointers
!SMW_UBytes = $0F10 : !SMW_JBytes = $0F00 : !SMW_E1Bytes = $0F10 : !SMW_E2Bytes = $0F10 : !SMASW_UBytes = $0EE0 : !SMASW_EBytes = $0EE0 : !SMW_ARCADEBytes = $0F10
	
	%SMW_InsertOriginalFreespace(!ROMID, 45)
endmacro

macro INLINEDATATABLE_RT46_SMW_EmptySpace(Address)
%InsertMacroAtXPosition(<Address>)

if !Define_Global_ROMToAssemble&(!ROM_SMASW_U|!ROM_SMASW_E) == $00
;garbage
dw $0018
fillbyte $00	:	fill 18
endif

; LM: Lunar Magic inserts a lot of custom routines here.
; $0FEFA0 - Table used to maintain the ROM checksum
; $0FF0A0 - Ascii text stating the latest LM version used on the ROM and a link to FuSoYa's website
; $0FF160 - Routine used to load FG/BG/Sprite graphics with the Old GFX Bypass (if SuperGFXBypass is not enabled).
; $0FF200 - Old GFX Bypass list data
; $0FF600 - 24-bit pointers to ExGFX 080-0FF
; $0FF780 - Routine that loads the AN2 GFX file with the old GFX Bypass (if SuperGFXBypass is not enabled). Also calls the routines for handling loading the layer 3 GFX/Tilemap
; $0FF7D0 - Unknown routine (Perhaps FuSoYa intended layer 2 BGs to be loaded with ExGFX at some point?)
; $0FF7F0 - Routine for loading the level SuperGFXBypass table.
; $0FF840 - Routine that checks if SuperGFXBypass is enabled and if so, load a GFX/ExGFX file
; $0FF8A0 - Routine that reads from the Old GFX Bypass list table
; $0FF8B8 - Routine that sets the GFX decompression location when using Old GFX Bypass
; $0FF8CB - Routine that sets the GFX decompression location when using SuperGFXBypass
; $0FF900 - Routine for specifying what graphics file to decompress
; $0FF9C0 - Routine that loads the layer 3 GFX files in cutscenes
; $0FF9E0 - Routine that loads the layer 3 GFX files
; $0FFAB0 - Routine for loading the overworld SuperGFXBypass table.
; $0FFAF0 - Routine that forces the overworld to reload when both players are on different submaps (2.30+)
; $0FFB20 - Routine that reloads aspects of the overworld when touching a path exit.
; $0FFD80 - Routine that loads a custom layer 3 tilemap and settings
; $0FFFE7 - Saved ROM settings
;	; Byte 1-4 = Unknown
;	; Byte 5 = Compression Setting
;	; Byte 6 = Unknown
;	; Byte 7-8 = Use FastROM addressing?
;	; Byte 9 = FastROM patch setting?
;	; Bytes 10-25 = Unknown
!SMW_UBytes = $1070 : !SMW_JBytes = $1070 : !SMW_E1Bytes = $1070 : !SMW_E2Bytes = $1070 : !SMASW_UBytes = $1084 : !SMASW_EBytes = $1084 : !SMW_ARCADEBytes = $1070
	
	%SMW_InsertOriginalFreespace(!ROMID, 46)
endmacro

;#############################################################################################################
;#############################################################################################################
